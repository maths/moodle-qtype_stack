{"version":3,"file":"input.min.js","sources":["../src/input.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A javascript module to handle the real-time validation of the input the student types\n * into STACK questions.\n *\n * The overall way this works is as follows:\n *\n *  - right at the end of this file are the init methods, which set things up.\n *  - The work common to all input types is done by StackInput.\n *     - Sending the Ajax request.\n *     - Updating the validation display.\n *  - The work specific to different input types (getting the content of the inputs) is done by\n *    the classes like\n *     - StackSimpleInput\n *     - StackTextareaInput\n *     - StackMatrixInput\n *    objects of these types need to implement the two methods addEventHandlers and getValue().\n *\n * @module     qtype_stack/input\n * @copyright  2018 The Open University\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine([\n    'core/ajax',\n    'core_filters/events'\n], function(\n    Ajax,\n    CustomEvents\n) {\n\n    \"use strict\";\n\n    /**\n     * Class constructor representing an input in a Stack question.\n     *\n     * @constructor\n     * @param {HTMLElement} validationDiv The div to display the validation in.\n     * @param {String} prefix prefix added to the input name to get HTML ids.\n     * @param {String} qaid id of the question_attempt.\n     * @param {String} name the name of the input we are validating.\n     * @param {Object} input An object representing the input element for this input.\n     * @param {String} language display language for this attempt.\n     * @param {Set} validationsInProgress names of inputs being validated for this question.\n     */\n    function StackInput(validationDiv, prefix, qaid, name, input, language, validationsInProgress) {\n        /** @type {number} delay between the user stopping typing, and the ajax request being sent. */\n        var TYPING_DELAY = 1000;\n\n        /** @type {?int} if not null, the id of the timer for the typing delay. */\n        var delayTimeoutHandle = null;\n\n        /** @type {Object} cache of validation results we have already received. */\n        var validationResults = {};\n\n        /** @type {String} the last value that we sent to be validated. */\n        var lastValidatedValue = getInputValue();\n        /** @type {HTMLElement} the 'Check' button for this question if it exists. */\n        var checkButton = document.getElementById(prefix + '-submit');\n\n        /**\n         * Cancel any typing pause timer.\n         */\n        function cancelTypingDelay() {\n            if (delayTimeoutHandle) {\n                clearTimeout(delayTimeoutHandle);\n            }\n            delayTimeoutHandle = null;\n        }\n\n        input.addEventHandlers(valueChanging);\n\n        /**\n         * Called when the input contents changes. Will validate after TYPING_DELAY if nothing else happens.\n         */\n        function valueChanging() {\n            cancelTypingDelay();\n            showWaiting();\n            delayTimeoutHandle = setTimeout(valueChanged, TYPING_DELAY);\n            setTimeout(function() {\n                checkNoChange();\n            }, 0);\n        }\n\n        /**\n         * After a small delay, detect the case where the user has got the input back\n         * to where they started, so no validation is necessary.\n         */\n        function checkNoChange() {\n            if (getInputValue() === lastValidatedValue) {\n                cancelTypingDelay();\n                validationDiv.classList.remove('waiting');\n                if (checkButton) {\n                    validationsInProgress.delete(name);\n                    if (validationsInProgress.size === 0) {\n                        checkButton.disabled = false;\n                    }\n                }\n            }\n        }\n\n        /**\n         * Called to actually validate the input now.\n         */\n        function valueChanged() {\n            cancelTypingDelay();\n            if (!showValidationResults()) {\n                validateInput();\n            }\n        }\n\n        /**\n         * Make an ajax call to validate the input.\n         */\n        function validateInput() {\n            Ajax.call([{\n                methodname: 'qtype_stack_validate_input',\n                args: {qaid: qaid, name: name, input: getInputValue(), lang: language},\n                done: function(response) {\n                    validationReceived(response);\n                },\n                fail: function(response) {\n                    showValidationFailure(response);\n                }\n            }]);\n            showLoading();\n        }\n\n        /**\n         * Returns the current value of the input.\n         *\n         * @return {String}.\n         */\n        function getInputValue() {\n            return input.getValue();\n        }\n\n        /**\n         * Update the validation div to show the results of the validation.\n         *\n         * @param {Object} response The data that came back from the ajax validation call.\n         */\n        function validationReceived(response) {\n            if (response.status === 'invalid') {\n                showValidationFailure(response);\n                return;\n            }\n            validationResults[response.input] = response;\n            showValidationResults();\n        }\n\n        /**\n         * Some browsers cannot execute JavaScript just by inserting script tags.\n         * To avoid that problem, remove all script tags from the given content,\n         * and run them later.\n         *\n         * @param {String} html HTML content\n         * @param {Array} scriptCommands An array of script tags for later use.\n         * @return {String} HTML with JS removed\n         */\n        function extractScripts(html, scriptCommands) {\n            var scriptregexp = /<script[^>]*>([\\s\\S]*?)<\\/script>/g;\n            var result;\n            while ((result = scriptregexp.exec(html)) !== null) {\n                scriptCommands.push(result[1]);\n            }\n            return html.replace(scriptregexp, '');\n        }\n\n        /**\n         * Update the validation div to show the results of the validation.\n         *\n         * @return {boolean} true if we could show the validation. false we we are we don't have it.\n         */\n        function showValidationResults() {\n            /* eslint no-eval: \"off\" */\n            var val = getInputValue();\n            if (!validationResults[val]) {\n                showWaiting();\n                return false;\n            }\n            var results = validationResults[val];\n            lastValidatedValue = val;\n            var scriptCommands = [];\n            validationDiv.innerHTML = extractScripts(results.message, scriptCommands);\n            removeAllClasses();\n            if (!results.message) {\n                validationDiv.classList.add('empty');\n            }\n            // This fires the Maths filters for content in the validation div.\n            CustomEvents.notifyFilterContentUpdated(validationDiv);\n            return true;\n        }\n\n        /**\n         * Update the validation div after an ajax validation call failed.\n         *\n         * @param {Object} response The data that came back from the ajax validation call.\n         */\n        function showValidationFailure(response) {\n            lastValidatedValue = '';\n            // Reponse usually contains backtrace, debuginfo, errorcode, link, message and moreinfourl.\n            validationDiv.innerHTML = response.message;\n            removeAllClasses();\n            validationDiv.classList.add('error');\n            // This fires the Maths filters for content in the validation div.\n            CustomEvents.notifyFilterContentUpdated(validationDiv);\n        }\n\n        /**\n         * Display the loader icon.\n         */\n        function showLoading() {\n            removeAllClasses();\n            validationDiv.classList.add('loading');\n        }\n\n        /**\n         * Update the validation div to show that the input contents have changed,\n         * so the validation results are no longer relevant.\n         */\n        function showWaiting() {\n            removeAllClasses();\n            validationDiv.classList.add('waiting');\n            if (checkButton) {\n                validationsInProgress.add(name);\n                checkButton.disabled = true;\n            }\n        }\n\n        /**\n         * Strip all our class names from the validation div.\n         */\n        function removeAllClasses() {\n            validationDiv.classList.remove('empty');\n            validationDiv.classList.remove('error');\n            validationDiv.classList.remove('loading');\n            validationDiv.classList.remove('waiting');\n            if (checkButton) {\n                validationsInProgress.delete(name);\n                if (validationsInProgress.size === 0) {\n                    checkButton.disabled = false;\n                }\n            }\n        }\n    }\n\n    /**\n     * Input type for inputs that are a single input or select.\n     *\n     * @constructor\n     * @param {HTMLElement} input the HTML input that is this STACK input.\n     */\n    function StackSimpleInput(input) {\n        /**\n         * Add the event handler to call when the user input changes.\n         *\n         * @param {Function} valueChanging the callback to call when we detect a value change.\n         */\n        this.addEventHandlers = function(valueChanging) {\n            // The input event fires on any change in value, even if pasted in or added by speech\n            // recognition to dictate text. Change only fires after loosing focus.\n            // Should also work on mobile.\n            input.addEventListener('input', valueChanging);\n        };\n\n        /**\n         * Get the current value of this input.\n         *\n         * @return {String}.\n         */\n        this.getValue = function() {\n            return input.value.replace(/^\\s+|\\s+$/g, '');\n        };\n    }\n\n    /**\n     * Input type for textarea inputs.\n     *\n     * @constructor\n     * @param {Object} textarea The input element wrapped in jquery.\n     */\n    function StackTextareaInput(textarea) {\n        /**\n         * Add the event handler to call when the user input changes.\n         *\n         * @param {Function} valueChanging the callback to call when we detect a value change.\n         */\n        this.addEventHandlers = function(valueChanging) {\n            textarea.addEventListener('input', valueChanging);\n        };\n\n        /**\n         * Get the current value of this input.\n         *\n         * @return {String}.\n         */\n        this.getValue = function() {\n            var raw = textarea.value.replace(/^\\s+|\\s+$/g, '');\n            // Using <br> here is weird, but it gets sorted out at the PHP end.\n            return raw.split(/\\s*[\\r\\n]\\s*/).join('<br>');\n        };\n    }\n\n    /**\n     * Input type for inputs that are a set of radio buttons.\n     *\n     * @constructor\n     * @param {HTMLElement} container container <div> of this input.\n     */\n    function StackRadioInput(container) {\n        /**\n         * Add the event handler to call when the user input changes.\n         *\n         * @param {Function} valueChanging the callback to call when we detect a value change.\n         */\n        this.addEventHandlers = function(valueChanging) {\n            // The input event fires on any change in value, even if pasted in or added by speech\n            // recognition to dictate text. Change only fires after loosing focus.\n            // Should also work on mobile.\n            container.addEventListener('input', valueChanging);\n        };\n\n        /**\n         * Get the current value of this input.\n         *\n         * @return {String}.\n         */\n        this.getValue = function() {\n            var selected = container.querySelector(':checked');\n            if (selected) {\n                return selected.value;\n            } else {\n                return '';\n            }\n        };\n    }\n\n    /**\n     * Input type for inputs that are a set of checkboxes.\n     *\n     * @constructor\n     * @param {HTMLElement} container container <div> of this input.\n     */\n    function StackCheckboxInput(container) {\n        /**\n         * Add the event handler to call when the user input changes.\n         *\n         * @param {Function} valueChanging the callback to call when we detect a value change.\n         */\n        this.addEventHandlers = function(valueChanging) {\n            // The input event fires on any change in value, even if pasted in or added by speech\n            // recognition to dictate text. Change only fires after loosing focus.\n            // Should also work on mobile.\n            container.addEventListener('input', valueChanging);\n        };\n\n        /**\n         * Get the current value of this input.\n         *\n         * @return {String}.\n         */\n        this.getValue = function() {\n            var selected = container.querySelectorAll(':checked');\n            var result = [];\n            for (var i = 0; i < selected.length; i++) {\n                result[i] = selected[i].value;\n            }\n            if (result.length > 0) {\n                return result.join(',');\n            } else {\n                return '';\n            }\n        };\n    }\n\n    /**\n     * Class constructor representing matrix inputs (one input).\n     *\n     * @constructor\n     * @param {String} idPrefix input id, which is the start of the id of all the different text boxes.\n     * @param {HTMLElement} container <div> of this input.\n     */\n    function StackMatrixInput(idPrefix, container) {\n        var numcol = 0;\n        var numrow = 0;\n        container.querySelectorAll('input[type=text]').forEach(function(element) {\n            if (element.name.slice(0, idPrefix.length + 5) !== idPrefix + '_sub_') {\n                return;\n            }\n            var bits = element.name.substring(idPrefix.length + 5).split('_');\n            numrow = Math.max(numrow, parseInt(bits[0], 10) + 1);\n            numcol = Math.max(numcol, parseInt(bits[1], 10) + 1);\n        });\n\n        /**\n         * Add the event handler to call when the user input changes.\n         *\n         * @param {Function} valueChanging the callback to call when we detect a value change.\n         */\n        this.addEventHandlers = function(valueChanging) {\n            container.addEventListener('input', valueChanging);\n        };\n\n        /**\n         * Get the current value of this input.\n         *\n         * @return {String}.\n         */\n        this.getValue = function() {\n            var values = new Array(numrow);\n            for (var i = 0; i < numrow; i++) {\n                values[i] = new Array(numcol);\n            }\n            container.querySelectorAll('input[type=text]').forEach(function(element) {\n                if (element.name.slice(0, idPrefix.length + 5) !== idPrefix + '_sub_') {\n                    return;\n                }\n                var bits = element.name.substring(idPrefix.length + 5).split('_');\n                values[bits[0]][bits[1]] = element.value.replace(/^\\s+|\\s+$/g, '');\n            });\n            return JSON.stringify(values);\n        };\n    }\n\n    /**\n     * Initialise all the inputs in a STACK question.\n     *\n     * @param {String} questionDivId id of the outer div of the question.\n     * @param {String} prefix prefix added to the input names for this question.\n     * @param {String} qaid Moodle question_attempt id.\n     * @param {String[]} inputs names of all the inputs that should have instant validation.\n     */\n    function initInputs(questionDivId, prefix, qaid, inputs) {\n        var questionDiv = document.getElementById(questionDivId);\n        var validationsInProgress = new Set();\n        var language = null;\n        var langInput = document.getElementsByName(prefix + 'step_lang');\n        if (langInput.length > 0 && langInput[0].value) {\n            language = langInput[0].value;\n        }\n\n        // Initialise all inputs.\n        var allok = true;\n        for (var i = 0; i < inputs.length; i++) {\n            allok = initInput(questionDiv, prefix, qaid, inputs[i], language, validationsInProgress) && allok;\n        }\n\n        // With JS With instant validation, we don't need the Check button, so hide it.\n        if (allok && (questionDiv.classList.contains('dfexplicitvaildate') ||\n                questionDiv.classList.contains('dfcbmexplicitvaildate'))) {\n                    const input = questionDiv.querySelector('.im-controls input.submit, .im-controls button.submit');\n                    if (input) {\n                        input.hidden = true;\n                    }\n        }\n    }\n\n    /**\n     * Initialise one input.\n     *\n     * @param {HTMLElement} questionDiv outer <div> of this question.\n     * @param {String} prefix prefix added to the input names for this question.\n     * @param {String} qaid Moodle question_attempt id.\n     * @param {String} name the input to initialise.\n     * @return {boolean} true if this input was successfully initialised, else false.\n     * @param {String} language display language for this attempt.\n     * @param {Set} validationsInProgress names of inputs being validated for this question.\n     */\n    function initInput(questionDiv, prefix, qaid, name, language, validationsInProgress) {\n        var validationDiv = document.getElementById(prefix + name + '_val');\n        if (!validationDiv) {\n            return false;\n        }\n        var inputTypeHandler = getInputTypeHandler(questionDiv, prefix, name);\n        if (inputTypeHandler) {\n            new StackInput(validationDiv, prefix, qaid, name, inputTypeHandler, language, validationsInProgress);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Get the input type handler for a named input.\n     *\n     * @param {HTMLElement} questionDiv outer <div> of this question.\n     * @param {String} prefix prefix added to the input names for this question.\n     * @param {String} name the input to initialise.\n     * @return {?Object} the input hander, if we can handle it, else null.\n     */\n    function getInputTypeHandler(questionDiv, prefix, name) {\n        // See if it is an ordinary input.\n        var input = questionDiv.querySelector('[name=\"' + prefix + name + '\"]');\n        if (input) {\n            if (input.nodeName === 'TEXTAREA') {\n                return new StackTextareaInput(input);\n            } else if (input.type === 'radio') {\n                return new StackRadioInput(input.closest('.answer'));\n            } else {\n                return new StackSimpleInput(input);\n            }\n        }\n\n        // See if it is a checkbox input.\n        input = questionDiv.querySelector('[name=\"' + prefix + name + '_1\"]');\n        if (input && input.type === 'checkbox') {\n            return new StackCheckboxInput(input.closest('.answer'));\n        }\n\n        // See if it is a matrix input.\n        var matrix = document.getElementById(prefix + name + '_container');\n        if (matrix) {\n            return new StackMatrixInput(prefix + name, matrix);\n        }\n\n        return null;\n    }\n\n    /** Export our entry point. */\n    return {\n        /**\n         * Initialise all the inputs in a STACK question.\n         *\n         * @param {String} questionDivId id of the outer dic of the question.\n         * @param {String} prefix prefix added to the input names for this question.\n         * @param {String} qaid Moodle question_attempt id.\n         * @param {String[]} inputs names of all the inputs that should have instant validation.\n         */\n        initInputs: initInputs\n    };\n});\n"],"names":["define","Ajax","CustomEvents","StackInput","validationDiv","prefix","qaid","name","input","language","validationsInProgress","delayTimeoutHandle","validationResults","lastValidatedValue","getInputValue","checkButton","document","getElementById","cancelTypingDelay","clearTimeout","valueChanged","showValidationResults","call","methodname","args","lang","done","response","status","showValidationFailure","validationReceived","fail","removeAllClasses","classList","add","getValue","val","showWaiting","results","innerHTML","html","scriptCommands","result","scriptregexp","exec","push","replace","extractScripts","message","notifyFilterContentUpdated","disabled","remove","delete","size","addEventHandlers","setTimeout","StackSimpleInput","this","valueChanging","addEventListener","value","StackTextareaInput","textarea","split","join","StackRadioInput","container","selected","querySelector","StackCheckboxInput","querySelectorAll","i","length","StackMatrixInput","idPrefix","numcol","numrow","forEach","element","slice","bits","substring","Math","max","parseInt","values","Array","JSON","stringify","initInput","questionDiv","inputTypeHandler","nodeName","type","closest","matrix","getInputTypeHandler","initInputs","questionDivId","inputs","Set","langInput","getElementsByName","allok","contains","hidden"],"mappings":"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"}