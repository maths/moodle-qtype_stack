{"version":3,"file":"input.min.js","sources":["../src/input.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A javascript module to handle the real-time validation of the input the student types\n * into STACK questions.\n *\n * The overall way this works is as follows:\n *\n *  - right at the end of this file are the init methods, which set things up.\n *  - The work common to all input types is done by StackInput.\n *     - Sending the Ajax request.\n *     - Updating the validation display.\n *  - The work specific to different input types (getting the content of the inputs) is done by\n *    the classes like\n *     - StackSimpleInput\n *     - StackTextareaInput\n *     - StackMatrixInput\n *    objects of these types need to implement the two methods addEventHandlers and getValue().\n *\n * @module     qtype_stack/input\n * @copyright  2018 The Open University\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine([\n    'core/ajax',\n    'core_filters/events'\n], function(\n    Ajax,\n    CustomEvents\n) {\n\n    \"use strict\";\n\n    /**\n     * Class constructor representing an input in a Stack question.\n     *\n     * @constructor\n     * @param {HTMLElement} validationDiv The div to display the validation in.\n     * @param {String} prefix prefix added to the input name to get HTML ids.\n     * @param {String} qaid id of the question_attempt.\n     * @param {String} name the name of the input we are validating.\n     * @param {Object} input An object representing the input element for this input.\n     * @param {String} language display language for this attempt.\n     * @param {Set} validationsInProgress names of inputs being validated for this question.\n     */\n    function StackInput(validationDiv, prefix, qaid, name, input, language, validationsInProgress) {\n        /** @type {number} delay between the user stopping typing, and the ajax request being sent. */\n        var TYPING_DELAY = 1000;\n\n        /** @type {?int} if not null, the id of the timer for the typing delay. */\n        var delayTimeoutHandle = null;\n\n        /** @type {Object} cache of validation results we have already received. */\n        var validationResults = {};\n\n        /** @type {String} the last value that we sent to be validated. */\n        var lastValidatedValue = getInputValue();\n        /** @type {HTMLElement} the 'Check' button for this question if it exists. */\n        var checkButton = document.getElementById(prefix + '-submit');\n\n        /**\n         * Cancel any typing pause timer.\n         */\n        function cancelTypingDelay() {\n            if (delayTimeoutHandle) {\n                clearTimeout(delayTimeoutHandle);\n            }\n            delayTimeoutHandle = null;\n        }\n\n        input.addEventHandlers(valueChanging);\n\n        /**\n         * Called when the input contents changes. Will validate after TYPING_DELAY if nothing else happens.\n         */\n        function valueChanging() {\n            input.dispatchEvent(new CustomEvent('stack-validation', {\n                detail: {inputname: name, completed: false, valid: null}}));\n            cancelTypingDelay();\n            showWaiting();\n            delayTimeoutHandle = setTimeout(valueChanged, TYPING_DELAY);\n            setTimeout(function() {\n                checkNoChange();\n            }, 0);\n        }\n\n        /**\n         * After a small delay, detect the case where the user has got the input back\n         * to where they started, so no validation is necessary.\n         */\n        function checkNoChange() {\n            if (getInputValue() === lastValidatedValue) {\n                cancelTypingDelay();\n                validationDiv.classList.remove('waiting');\n                if (checkButton) {\n                    validationsInProgress.delete(name);\n                    if (validationsInProgress.size === 0) {\n                        checkButton.disabled = false;\n                    }\n                }\n            }\n        }\n\n        /**\n         * Called to actually validate the input now.\n         */\n        function valueChanged() {\n            cancelTypingDelay();\n            if (!showValidationResults()) {\n                validateInput();\n            }\n        }\n\n        /**\n         * Make an ajax call to validate the input.\n         */\n        function validateInput() {\n            Ajax.call([{\n                methodname: 'qtype_stack_validate_input',\n                args: {qaid: qaid, name: name, input: getInputValue(), lang: language},\n                done: (response) => {\n                    validationReceived(response);\n                },\n                fail: (response) => {\n                    showValidationFailure(response);\n                    input.dispatchEvent(new CustomEvent('stack-validation', {\n                        detail: {inputname: name, completed: true, valid: false}}));\n                }\n            }]);\n            showLoading();\n        }\n\n        /**\n         * Returns the current value of the input.\n         *\n         * @return {String}.\n         */\n        function getInputValue() {\n            return input.getValue();\n        }\n\n        /**\n         * Update the validation div to show the results of the validation.\n         *\n         * @param {Object} response The data that came back from the ajax validation call.\n         */\n        function validationReceived(response) {\n            if (response.status === 'invalid') {\n                showValidationFailure(response);\n                input.dispatchEvent(new CustomEvent('stack-validation', {\n                    detail: {inputname: name, completed: true, valid: false}}));\n                return;\n            }\n            validationResults[response.input] = response;\n            showValidationResults();\n            input.dispatchEvent(new CustomEvent('stack-validation', {\n                detail: {inputname: name, completed: true, valid: true}}));\n        }\n\n        /**\n         * Some browsers cannot execute JavaScript just by inserting script tags.\n         * To avoid that problem, remove all script tags from the given content,\n         * and run them later.\n         *\n         * @param {String} html HTML content\n         * @param {Array} scriptCommands An array of script tags for later use.\n         * @return {String} HTML with JS removed\n         */\n        function extractScripts(html, scriptCommands) {\n            var scriptregexp = /<script[^>]*>([\\s\\S]*?)<\\/script>/g;\n            var result;\n            while ((result = scriptregexp.exec(html)) !== null) {\n                scriptCommands.push(result[1]);\n            }\n            return html.replace(scriptregexp, '');\n        }\n\n        /**\n         * Update the validation div to show the results of the validation.\n         *\n         * @return {boolean} true if we could show the validation. false we we are we don't have it.\n         */\n        function showValidationResults() {\n            /* eslint no-eval: \"off\" */\n            var val = getInputValue();\n            if (!validationResults[val]) {\n                showWaiting();\n                return false;\n            }\n            var results = validationResults[val];\n            lastValidatedValue = val;\n            var scriptCommands = [];\n            validationDiv.innerHTML = extractScripts(results.message, scriptCommands);\n            removeAllClasses();\n            if (!results.message) {\n                validationDiv.classList.add('empty');\n            }\n            // This fires the Maths filters for content in the validation div.\n            CustomEvents.notifyFilterContentUpdated(validationDiv);\n            return true;\n        }\n\n        /**\n         * Update the validation div after an ajax validation call failed.\n         *\n         * @param {Object} response The data that came back from the ajax validation call.\n         */\n        function showValidationFailure(response) {\n            lastValidatedValue = '';\n            // Reponse usually contains backtrace, debuginfo, errorcode, link, message and moreinfourl.\n            validationDiv.innerHTML = response.message;\n            removeAllClasses();\n            validationDiv.classList.add('error');\n            // This fires the Maths filters for content in the validation div.\n            CustomEvents.notifyFilterContentUpdated(validationDiv);\n        }\n\n        /**\n         * Display the loader icon.\n         */\n        function showLoading() {\n            removeAllClasses();\n            validationDiv.classList.add('loading');\n        }\n\n        /**\n         * Update the validation div to show that the input contents have changed,\n         * so the validation results are no longer relevant.\n         */\n        function showWaiting() {\n            removeAllClasses();\n            validationDiv.classList.add('waiting');\n            if (checkButton) {\n                validationsInProgress.add(name);\n                checkButton.disabled = true;\n            }\n        }\n\n        /**\n         * Strip all our class names from the validation div.\n         */\n        function removeAllClasses() {\n            validationDiv.classList.remove('empty');\n            validationDiv.classList.remove('error');\n            validationDiv.classList.remove('loading');\n            validationDiv.classList.remove('waiting');\n            if (checkButton) {\n                validationsInProgress.delete(name);\n                if (validationsInProgress.size === 0) {\n                    checkButton.disabled = false;\n                }\n            }\n        }\n    }\n\n    /**\n     * Input type for inputs that are a single input or select.\n     *\n     * @constructor\n     * @param {HTMLElement} input the HTML input that is this STACK input.\n     */\n    function StackSimpleInput(input) {\n        /**\n         * Add the event handler to call when the user input changes.\n         *\n         * @param {Function} valueChanging the callback to call when we detect a value change.\n         */\n        this.addEventHandlers = function(valueChanging) {\n            // The input event fires on any change in value, even if pasted in or added by speech\n            // recognition to dictate text. Change only fires after loosing focus.\n            // Should also work on mobile.\n            input.addEventListener('input', valueChanging);\n        };\n\n        /**\n         * Get the current value of this input.\n         *\n         * @return {String}.\n         */\n        this.getValue = function() {\n            return input.value.replace(/^\\s+|\\s+$/g, '');\n        };\n\n        /**\n         * Add event dispatch passthrough.\n         *\n         * @param {Event} event to pass onwards.\n         */\n        this.dispatchEvent = function(event) {\n            input.dispatchEvent(event);\n        };\n    }\n\n    /**\n     * Input type for textarea inputs.\n     *\n     * @constructor\n     * @param {Object} textarea The input element wrapped in jquery.\n     */\n    function StackTextareaInput(textarea) {\n        /**\n         * Add the event handler to call when the user input changes.\n         *\n         * @param {Function} valueChanging the callback to call when we detect a value change.\n         */\n        this.addEventHandlers = function(valueChanging) {\n            textarea.addEventListener('input', valueChanging);\n        };\n\n        /**\n         * Get the current value of this input.\n         *\n         * @return {String}.\n         */\n        this.getValue = function() {\n            var raw = textarea.value.replace(/^\\s+|\\s+$/g, '');\n            // Using <br> here is weird, but it gets sorted out at the PHP end.\n            return raw.split(/\\s*[\\r\\n]\\s*/).join('<br>');\n        };\n\n        /**\n         * Add event dispatch passthrough.\n         *\n         * @param {Event} event to pass onwards.\n         */\n        this.dispatchEvent = function(event) {\n            textarea.dispatchEvent(event);\n        };\n    }\n\n    /**\n     * Input type for inputs that are a set of radio buttons.\n     *\n     * @constructor\n     * @param {HTMLElement} container container <div> of this input.\n     */\n    function StackRadioInput(container) {\n        /**\n         * Add the event handler to call when the user input changes.\n         *\n         * @param {Function} valueChanging the callback to call when we detect a value change.\n         */\n        this.addEventHandlers = function(valueChanging) {\n            // The input event fires on any change in value, even if pasted in or added by speech\n            // recognition to dictate text. Change only fires after loosing focus.\n            // Should also work on mobile.\n            container.addEventListener('input', valueChanging);\n        };\n\n        /**\n         * Get the current value of this input.\n         *\n         * @return {String}.\n         */\n        this.getValue = function() {\n            var selected = container.querySelector(':checked');\n            if (selected) {\n                return selected.value;\n            } else {\n                return '';\n            }\n        };\n\n        /**\n         * Add event dispatch passthrough.\n         *\n         * @param {Event} event to pass onwards.\n         */\n        this.dispatchEvent = function(event) {\n            container.dispatchEvent(event);\n        };\n    }\n\n    /**\n     * Input type for inputs that are a set of checkboxes.\n     *\n     * @constructor\n     * @param {HTMLElement} container container <div> of this input.\n     */\n    function StackCheckboxInput(container) {\n        /**\n         * Add the event handler to call when the user input changes.\n         *\n         * @param {Function} valueChanging the callback to call when we detect a value change.\n         */\n        this.addEventHandlers = function(valueChanging) {\n            // The input event fires on any change in value, even if pasted in or added by speech\n            // recognition to dictate text. Change only fires after loosing focus.\n            // Should also work on mobile.\n            container.addEventListener('input', valueChanging);\n        };\n\n        /**\n         * Get the current value of this input.\n         *\n         * @return {String}.\n         */\n        this.getValue = function() {\n            var selected = container.querySelectorAll(':checked');\n            var result = [];\n            for (var i = 0; i < selected.length; i++) {\n                result[i] = selected[i].value;\n            }\n            if (result.length > 0) {\n                return result.join(',');\n            } else {\n                return '';\n            }\n        };\n\n        /**\n         * Add event dispatch passthrough.\n         *\n         * @param {Event} event to pass onwards.\n         */\n        this.dispatchEvent = function(event) {\n            container.dispatchEvent(event);\n        };\n    }\n\n    /**\n     * Class constructor representing matrix inputs (one input).\n     *\n     * @constructor\n     * @param {String} idPrefix input id, which is the start of the id of all the different text boxes.\n     * @param {HTMLElement} container <div> of this input.\n     */\n    function StackMatrixInput(idPrefix, container) {\n        var numcol = 0;\n        var numrow = 0;\n        container.querySelectorAll('input[type=text]').forEach(function(element) {\n            if (element.name.slice(0, idPrefix.length + 5) !== idPrefix + '_sub_') {\n                return;\n            }\n            var bits = element.name.substring(idPrefix.length + 5).split('_');\n            numrow = Math.max(numrow, parseInt(bits[0], 10) + 1);\n            numcol = Math.max(numcol, parseInt(bits[1], 10) + 1);\n        });\n\n        /**\n         * Add the event handler to call when the user input changes.\n         *\n         * @param {Function} valueChanging the callback to call when we detect a value change.\n         */\n        this.addEventHandlers = function(valueChanging) {\n            container.addEventListener('input', valueChanging);\n        };\n\n        /**\n         * Get the current value of this input.\n         *\n         * @return {String}.\n         */\n        this.getValue = function() {\n            var values = new Array(numrow);\n            for (var i = 0; i < numrow; i++) {\n                values[i] = new Array(numcol);\n            }\n            container.querySelectorAll('input[type=text]').forEach(function(element) {\n                if (element.name.slice(0, idPrefix.length + 5) !== idPrefix + '_sub_') {\n                    return;\n                }\n                var bits = element.name.substring(idPrefix.length + 5).split('_');\n                values[bits[0]][bits[1]] = element.value.replace(/^\\s+|\\s+$/g, '');\n            });\n            return JSON.stringify(values);\n        };\n\n        /**\n         * Add event dispatch passthrough.\n         *\n         * @param {Event} event to pass onwards.\n         */\n        this.dispatchEvent = function(event) {\n            container.dispatchEvent(event);\n        };\n    }\n\n    /**\n     * Initialise all the inputs in a STACK question.\n     *\n     * @param {String} questionDivId id of the outer div of the question.\n     * @param {String} prefix prefix added to the input names for this question.\n     * @param {String} qaid Moodle question_attempt id.\n     * @param {String[]} inputs names of all the inputs that should have instant validation.\n     */\n    function initInputs(questionDivId, prefix, qaid, inputs) {\n        var questionDiv = document.getElementById(questionDivId);\n        var validationsInProgress = new Set();\n        var language = null;\n        var langInput = document.getElementsByName(prefix + 'step_lang');\n        if (langInput.length > 0 && langInput[0].value) {\n            language = langInput[0].value;\n        }\n\n        // Initialise all inputs.\n        var allok = true;\n        for (var i = 0; i < inputs.length; i++) {\n            allok = initInput(questionDiv, prefix, qaid, inputs[i], language, validationsInProgress) && allok;\n        }\n\n        // With JS With instant validation, we don't need the Check button, so hide it.\n        if (allok && (questionDiv.classList.contains('dfexplicitvaildate') ||\n                questionDiv.classList.contains('dfcbmexplicitvaildate'))) {\n                    const input = questionDiv.querySelector('.im-controls input.submit, .im-controls button.submit');\n                    if (input) {\n                        input.hidden = true;\n                    }\n        }\n    }\n\n    /**\n     * Initialise one input.\n     *\n     * @param {HTMLElement} questionDiv outer <div> of this question.\n     * @param {String} prefix prefix added to the input names for this question.\n     * @param {String} qaid Moodle question_attempt id.\n     * @param {String} name the input to initialise.\n     * @return {boolean} true if this input was successfully initialised, else false.\n     * @param {String} language display language for this attempt.\n     * @param {Set} validationsInProgress names of inputs being validated for this question.\n     */\n    function initInput(questionDiv, prefix, qaid, name, language, validationsInProgress) {\n        var validationDiv = document.getElementById(prefix + name + '_val');\n        if (!validationDiv) {\n            return false;\n        }\n        var inputTypeHandler = getInputTypeHandler(questionDiv, prefix, name);\n        if (inputTypeHandler) {\n            new StackInput(validationDiv, prefix, qaid, name, inputTypeHandler, language, validationsInProgress);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Get the input type handler for a named input.\n     *\n     * @param {HTMLElement} questionDiv outer <div> of this question.\n     * @param {String} prefix prefix added to the input names for this question.\n     * @param {String} name the input to initialise.\n     * @return {?Object} the input hander, if we can handle it, else null.\n     */\n    function getInputTypeHandler(questionDiv, prefix, name) {\n        // See if it is an ordinary input.\n        var input = questionDiv.querySelector('[name=\"' + prefix + name + '\"]');\n        if (input) {\n            if (input.nodeName === 'TEXTAREA') {\n                return new StackTextareaInput(input);\n            } else if (input.type === 'radio') {\n                return new StackRadioInput(input.closest('.answer'));\n            } else {\n                return new StackSimpleInput(input);\n            }\n        }\n\n        // See if it is a checkbox input.\n        input = questionDiv.querySelector('[name=\"' + prefix + name + '_1\"]');\n        if (input && input.type === 'checkbox') {\n            return new StackCheckboxInput(input.closest('.answer'));\n        }\n\n        // See if it is a matrix input.\n        var matrix = document.getElementById(prefix + name + '_container');\n        if (matrix) {\n            return new StackMatrixInput(prefix + name, matrix);\n        }\n\n        return null;\n    }\n\n    /** Export our entry point. */\n    return {\n        /**\n         * Initialise all the inputs in a STACK question.\n         *\n         * @param {String} questionDivId id of the outer dic of the question.\n         * @param {String} prefix prefix added to the input names for this question.\n         * @param {String} qaid Moodle question_attempt id.\n         * @param {String[]} inputs names of all the inputs that should have instant validation.\n         */\n        initInputs: initInputs\n    };\n});\n"],"names":["define","Ajax","CustomEvents","StackInput","validationDiv","prefix","qaid","name","input","language","validationsInProgress","delayTimeoutHandle","validationResults","lastValidatedValue","getInputValue","checkButton","document","getElementById","cancelTypingDelay","clearTimeout","valueChanged","showValidationResults","call","methodname","args","lang","done","response","status","showValidationFailure","dispatchEvent","CustomEvent","detail","inputname","completed","valid","validationReceived","fail","removeAllClasses","classList","add","getValue","val","showWaiting","results","innerHTML","html","scriptCommands","result","scriptregexp","exec","push","replace","extractScripts","message","notifyFilterContentUpdated","disabled","remove","delete","size","addEventHandlers","setTimeout","StackSimpleInput","valueChanging","addEventListener","value","event","StackTextareaInput","textarea","split","join","StackRadioInput","container","selected","querySelector","StackCheckboxInput","querySelectorAll","i","length","StackMatrixInput","idPrefix","numcol","numrow","forEach","element","slice","bits","substring","Math","max","parseInt","values","Array","JSON","stringify","initInput","questionDiv","inputTypeHandler","nodeName","type","closest","matrix","getInputTypeHandler","initInputs","questionDivId","inputs","Set","langInput","getElementsByName","allok","contains","hidden"],"mappings":"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"}