{"version":3,"file":"jsxgraph.min.js","sources":["../src/jsxgraph.js"],"sourcesContent":["/// NOTE! This code does eval() a string with no validation.\n// So lets hope this is the correct way to name a Moodle AMD module\ndefine([\"qtype_stack/jsxgraphcore-lazy\"], function(JXG) {\n    return {\n            find_input_id: function(divid, name) {\n                var tmp = document.getElementById(divid);\n                while ((tmp = tmp.parentElement) && !(tmp.classList.contains(\"formulation\") &&\n                        tmp.parentElement.classList.contains(\"content\"))) {}\n                tmp = tmp.querySelector('input[id$=\"_' + name + '\"]');\n                // We use this function to also tie into the change tracking of Moodle.\n                // We do it here so that all possible code written by authors will also be tracked.\n                // The author just needst to generate a change event they do not need to know how the VLE works.\n                tmp.addEventListener('change', function() {\n                    M.core_formchangechecker.set_form_changed();\n                });\n                return tmp.id;\n            },\n\n            bind_point: function(inputRef, point) {\n                // This function takes a JXG point object and binds its coordinates to a given input.\n                var theInput = document.getElementById(inputRef);\n                if (theInput.value && theInput.value != '') {\n                    // if a value exists move the point to it.\n                    // the value is stored as a list of float values e.g. \"[1,0.43]\"\n                    var coords = JSON.parse(theInput.value);\n                    try {\n                        point.setPosition(JXG.COORDS_BY_USER, coords);\n                    } catch (err) {\n                        // We do not care about this.\n                    }\n                    point.board.update();\n                    point.update();\n                }\n\n                var initialX = point.X();\n                var initialY = point.Y();\n\n                // Then the binding from graph to input.\n                point.board.on('update', function() {\n                    // We do not want to set the input before the point actually moves.\n                    if (initialX !== point.X() || initialY !== point.Y()) {\n                        var tmp = JSON.stringify([point.X(), point.Y()]);\n                        initialX = false; // ignore these after initial change.\n                        initialY = false;\n                        if (theInput.value != tmp) {\n                            // Avoid resetting this, as some event models migth trigger\n                            // change events even when no change actually happens.\n                            theInput.value = tmp;\n                            // As we set the inputs value programmatically no events\n                            // will be fired. But for two way binding we want to fire them...\n                            // However we do not need this in the preview where it annoys people.\n                            if (window.location.pathname.indexOf('preview.php') === -1) {\n                                var e = new Event('change');\n                                theInput.dispatchEvent(e);\n                            }\n                        }\n                    }\n                });\n\n                var lastValue = JSON.stringify([point.X(), point.Y()]);\n\n                // Then from input to graph. 'input' for live stuff and 'change' for other.\n                theInput.addEventListener('input', function() {\n                    if (theInput.value != lastValue) {\n                        // Only when something changed.\n                        try {\n                            var tmp = JSON.parse(theInput.value);\n                            if (typeof tmp[0] == 'number' && typeof tmp[1] == 'number') {\n                                point.setPosition(JXG.COORDS_BY_USER, tmp);\n                                point.board.update();\n                                point.update();\n                            }\n                        } catch (err) {\n                            // We do not care about this.\n                        }\n                        lastValue = theInput.value;\n                    }\n                });\n                theInput.addEventListener('change', function() {\n                    if (theInput.value != lastValue) {\n                        // Only when something changed.\n                        try {\n                            var tmp = JSON.parse(theInput.value);\n                            if (typeof tmp[0] == 'number' && typeof tmp[1] == 'number') {\n                                point.setPosition(JXG.COORDS_BY_USER, tmp);\n                                point.board.update();\n                                point.update();\n                            }\n                        } catch (err) {\n                            // We do not care about this.\n                        }\n                        lastValue = theInput.value;\n                    }\n                });\n            },\n\n            bind_point_dual: function(inputRef, point1, point2) {\n                // This function takes two JXG point object and binds their coordinates to a given input.\n                var theInput = document.getElementById(inputRef);\n                if (theInput.value && theInput.value != '') {\n                    // if a value exists move the points there.\n                    // the value is stored as a list of float values e.g. \"[[1,0.43],[2.1,-4]]\"\n                    var coords = JSON.parse(theInput.value);\n                    try {\n                        point1.setPosition(JXG.COORDS_BY_USER, coords[0]);\n                        point2.setPosition(JXG.COORDS_BY_USER, coords[1]);\n                    } catch (err) {\n                        // We do not care about this.\n                    }\n                    point1.board.update();\n                    point1.update();\n                    point2.board.update();\n                    point2.update();\n                }\n\n                var initial1X = point1.X();\n                var initial1Y = point1.Y();\n\n                // Then the binding from graph to input.\n                point1.board.on('update', function() {\n                    // We do not want to set the input before the point actually moves.\n                    if (initial1X !== point1.X() || initial1Y !== point1.Y()) {\n                        var tmp = JSON.stringify([[point1.X(), point1.Y()],[point2.X(), point2.Y()]]);\n                        initial1X = false; // ignore these after initial change.\n                        initial1Y = false;\n                        if (theInput.value != tmp) {\n                            // Avoid resetting this, as some event models migth trigger\n                            // change events even when no change actually happens.\n                            theInput.value = tmp;\n                            // As we set the inputs value programmatically no events\n                            // will be fired. But for two way binding we want to fire them...\n                            // However we do not need this in the preview where it annoys people.\n                            if (window.location.pathname.indexOf('preview.php') === -1) {\n                                var e = new Event('change');\n                                theInput.dispatchEvent(e);\n                            }\n                        }\n                    }\n                });\n\n                var initial2X = point2.X();\n                var initial2Y = point2.Y();\n\n                // Then the binding from graph to input.\n                point2.board.on('update', function() {\n                    // We do not want to set the input before the point actually moves.\n                    if (initial2X !== point2.X() || initial2Y !== point2.Y()) {\n                        var tmp = JSON.stringify([[point1.X(), point1.Y()],[point2.X(), point2.Y()]]);\n                        initial2X = false; // ignore these after initial change.\n                        initial2Y = false;\n                        if (theInput.value != tmp) {\n                            // Avoid resetting this, as some event models migth trigger\n                            // change events even when no change actually happens.\n                            theInput.value = tmp;\n                            // As we set the inputs value programmatically no events\n                            // will be fired. But for two way binding we want to fire them...\n                            // However we do not need this in the preview where it annoys people.\n                            if (window.location.pathname.indexOf('preview.php') === -1) {\n                                var e = new Event('change');\n                                theInput.dispatchEvent(e);\n                            }\n                        }\n                    }\n                });\n\n                var lastValue = JSON.stringify([[point1.X(), point1.Y()],[point2.X(), point2.Y()]]);\n\n                // Then from input to graph. 'input' for live stuff and 'change' for other.\n                theInput.addEventListener('input', function() {\n                    if (theInput.value != lastValue) {\n                        // Only when something changed.\n                        try {\n                            var tmp = JSON.parse(theInput.value);\n                            if (typeof tmp[0][0] == 'number' && typeof tmp[0][1] == 'number') {\n                                point1.setPosition(JXG.COORDS_BY_USER, tmp[0]);\n                            }\n                            if (typeof tmp[1][0] == 'number' && typeof tmp[1][1] == 'number') {\n                                point2.setPosition(JXG.COORDS_BY_USER, tmp[1]);\n                                point1.board.update();\n                                point1.update();\n                                point2.board.update();\n                                point2.update();\n                            }\n                        } catch (err) {\n                            // We do not care about this.\n                        }\n                        lastValue = theInput.value;\n                    }\n                });\n                theInput.addEventListener('change', function() {\n                    if (theInput.value != lastValue) {\n                        // Only when something changed.\n                        try {\n                            var tmp = JSON.parse(theInput.value);\n                            if (typeof tmp[0][0] == 'number' && typeof tmp[0][1] == 'number') {\n                                point1.setPosition(JXG.COORDS_BY_USER, tmp[0]);\n\n                            }\n                            if (typeof tmp[1][0] == 'number' && typeof tmp[1][1] == 'number') {\n                                point2.setPosition(JXG.COORDS_BY_USER, tmp[1]);\n                                point1.board.update();\n                                point1.update();\n                                point2.board.update();\n                                point2.update();\n                            }\n                        } catch (err) {\n                            // We do not care about this.\n                        }\n                        lastValue = theInput.value;\n                    }\n                });\n\n            },\n\n            bind_point_relative: function(inputRef, point1, point2) {\n                // This function takes two JXG point object and binds their coordinates to a given input.\n                var theInput = document.getElementById(inputRef);\n                if (theInput.value && theInput.value != '') {\n                    // if a value exists move the points there.\n                    // the value is stored as a list of float values e.g. \"[[1,0.43],[2.1,-4]]\"\n                    var coords = JSON.parse(theInput.value);\n                    try {\n                        point1.setPosition(JXG.COORDS_BY_USER, coords[0]);\n                        var b = [coords[0][0] + coords[1][0], coords[0][1] + coords[1][1]];\n                        point2.setPosition(JXG.COORDS_BY_USER, b);\n                    } catch (err) {\n                        // We do not care about this.\n                    }\n                    point1.board.update();\n                    point1.update();\n                    point2.board.update();\n                    point2.update();\n                }\n\n                var initial1X = point1.X();\n                var initial1Y = point1.Y();\n\n                // Then the binding from graph to input.\n                point1.board.on('update', function() {\n                    // We do not want to set the input before the point actually moves.\n                    if (initial1X !== point1.X() || initial1Y !== point1.Y()) {\n                        var tmp = JSON.stringify([[point1.X(), point1.Y()],[point2.X() - point1.X(), point2.Y() - point1.Y()]]);\n                        initial1X = false; // ignore these after initial change.\n                        initial1Y = false;\n                        if (theInput.value != tmp) {\n                            // Avoid resetting this, as some event models migth trigger\n                            // change events even when no change actually happens.\n                            theInput.value = tmp;\n                            // As we set the inputs value programmatically no events\n                            // will be fired. But for two way binding we want to fire them...\n                            // However we do not need this in the preview where it annoys people.\n                            if (window.location.pathname.indexOf('preview.php') === -1) {\n                                var e = new Event('change');\n                                theInput.dispatchEvent(e);\n                            }\n                        }\n                    }\n                });\n\n                var initial2X = point2.X();\n                var initial2Y = point2.Y();\n\n                // Then the binding from graph to input.\n                point2.board.on('update', function() {\n                    // We do not want to set the input before the point actually moves.\n                    if (initial2X !== point2.X() || initial2Y !== point2.Y()) {\n                        var tmp = JSON.stringify([[point1.X(), point1.Y()],[point2.X() - point1.X(), point2.Y() - point1.Y()]]);\n                        initial2X = false; // ignore these after initial change.\n                        initial2Y = false;\n                        if (theInput.value != tmp) {\n                            // Avoid resetting this, as some event models migth trigger\n                            // change events even when no change actually happens.\n                            theInput.value = tmp;\n                            // As we set the inputs value programmatically no events\n                            // will be fired. But for two way binding we want to fire them...\n                            // However we do not need this in the preview where it annoys people.\n                            if (window.location.pathname.indexOf('preview.php') === -1) {\n                                var e = new Event('change');\n                                theInput.dispatchEvent(e);\n                            }\n                        }\n                    }\n                });\n\n                var lastValue = JSON.stringify([[point1.X(), point1.Y()],[point2.X() - point1.X(), point2.Y() - point1.Y()]]);\n\n                // Then from input to graph. 'input' for live stuff and 'change' for other.\n                theInput.addEventListener('input', function() {\n                    if (theInput.value != lastValue) {\n                        // Only when something changed.\n                        try {\n                            var tmp = JSON.parse(theInput.value);\n                            if (typeof tmp[0][0] == 'number' && typeof tmp[0][1] == 'number') {\n                                point1.setPosition(JXG.COORDS_BY_USER, tmp[0]);\n                            }\n                            if (typeof tmp[1][0] == 'number' && typeof tmp[1][1] == 'number') {\n                                var b = [tmp[0][0] + tmp[1][0], tmp[0][1] + tmp[1][1]];\n                                point2.setPosition(JXG.COORDS_BY_USER, b);\n                                point1.board.update();\n                                point1.update();\n                                point2.board.update();\n                                point2.update();\n                            }\n                        } catch (err) {\n                            // We do not care about this.\n                        }\n                        lastValue = theInput.value;\n                    }\n                });\n                theInput.addEventListener('change', function() {\n                    if (theInput.value != lastValue) {\n                        // Only when something changed.\n                        try {\n                            var tmp = JSON.parse(theInput.value);\n                            if (typeof tmp[0][0] == 'number' && typeof tmp[0][1] == 'number') {\n                                point1.setPosition(JXG.COORDS_BY_USER, tmp[0]);\n                        }\n                            if (typeof tmp[1][0] == 'number' && typeof tmp[1][1] == 'number') {\n                                var b = [tmp[0][0] + tmp[1][0], tmp[0][1] + tmp[1][1]];\n                                point2.setPosition(JXG.COORDS_BY_USER, b);\n                                point1.board.update();\n                                point1.update();\n                                point2.board.update();\n                                point2.update();\n                            }\n                        } catch (err) {\n                            // We do not care about this.\n                        }\n                        lastValue = theInput.value;\n                    }\n                });\n            },\n\n            bind_point_direction: function(inputRef, point1, point2) {\n                // This function takes two JXG point object and binds their coordinates to a given input.\n                var theInput = document.getElementById(inputRef);\n                if (theInput.value && theInput.value != '') {\n                    // if a value exists move the points there.\n                    // the value is stored as a list of float values e.g. \"[[1,0.43],[2.1,1.1]]\"\n                    // The second pair is now the angle in radians and the length.\n                    var coords = JSON.parse(theInput.value);\n                    try {\n                        point1.setPosition(JXG.COORDS_BY_USER, coords[0]);\n                        var angle = coords[1][0];\n                        var len = coords[1][1];\n                        var b = [coords[0][0], coords[0][1]];\n                        if (len > 0) {\n                            b[0] = b[0] + len*Math.cos(angle);\n                            b[1] = b[1] + len*Math.sin(angle);\n                        }\n                        point2.setPosition(JXG.COORDS_BY_USER, b);\n                    } catch (err) {\n                        // We do not care about this.\n                    }\n                    point1.board.update();\n                    point1.update();\n                    point2.board.update();\n                    point2.update();\n                }\n\n                var initial1X = point1.X();\n                var initial1Y = point1.Y();\n\n                // Then the binding from graph to input.\n                point1.board.on('update', function() {\n                    // We do not want to set the input before the point actually moves.\n                    if (initial1X !== point1.X() || initial1Y !== point1.Y()) {\n                        var tmp = JSON.stringify([[point1.X(), point1.Y()],\n                        [Math.atan2(point2.Y() - point1.Y(), point2.X() - point1.X()),\n                        Math.sqrt((point2.X() - point1.X())*(point2.X() - point1.X()) +\n                                (point2.Y() - point1.Y())*(point2.Y() - point1.Y()))]]);\n                        initial1X = false; // ignore these after initial change.\n                        initial1Y = false;\n                        if (theInput.value != tmp) {\n                            // Avoid resetting this, as some event models migth trigger\n                            // change events even when no change actually happens.\n                            theInput.value = tmp;\n                            // As we set the inputs value programmatically no events\n                            // will be fired. But for two way binding we want to fire them...\n                            // However we do not need this in the preview where it annoys people.\n                            if (window.location.pathname.indexOf('preview.php') === -1) {\n                                var e = new Event('change');\n                                theInput.dispatchEvent(e);\n                            }\n                        }\n                    }\n                });\n\n                var initial2X = point2.X();\n                var initial2Y = point2.Y();\n\n                // Then the binding from graph to input.\n                point2.board.on('update', function() {\n                    // We do not want to set the input before the point actually moves.\n                    if (initial2X !== point2.X() || initial2Y !== point2.Y()) {\n                        var tmp = JSON.stringify([[point1.X(), point1.Y()],\n                        [Math.atan2(point2.Y() - point1.Y(), point2.X() - point1.X()),\n                        Math.sqrt((point2.X() - point1.X())*(point2.X() - point1.X()) +\n                            (point2.Y() - point1.Y())*(point2.Y() - point1.Y()))]]);\n                        initial2X = false; // ignore these after initial change.\n                        initial2Y = false;\n                        if (theInput.value != tmp) {\n                            // Avoid resetting this, as some event models migth trigger\n                            // change events even when no change actually happens.\n                            theInput.value = tmp;\n                            // As we set the inputs value programmatically no events\n                            // will be fired. But for two way binding we want to fire them...\n                            // However we do not need this in the preview where it annoys people.\n                            if (window.location.pathname.indexOf('preview.php') === -1) {\n                                var e = new Event('change');\n                                theInput.dispatchEvent(e);\n                            }\n                        }\n                    }\n                });\n\n\n                var lastValue = JSON.stringify([[point1.X(), point1.Y()],\n                        [Math.atan2(point2.Y() - point1.Y(), point2.X() - point1.X()),\n                        Math.sqrt((point2.X() - point1.X())*(point2.X() - point1.X()) +\n                            (point2.Y() - point1.Y())*(point2.Y() - point1.Y()))]]);\n\n                // Then from input to graph. 'input' for live stuff and 'change' for other.\n                theInput.addEventListener('input', function() {\n                    if (theInput.value != lastValue) {\n                        // Only when something changed.\n                        try {\n                            var tmp = JSON.parse(theInput.value);\n                            if (typeof tmp[0][0] == 'number' && typeof tmp[0][1] == 'number') {\n                                point1.setPosition(JXG.COORDS_BY_USER, tmp[0]);\n                            }\n                            if (typeof tmp[1][0] == 'number' && typeof tmp[1][1] == 'number') {\n                                var angle = tmp[1][0];\n                                var len = tmp[1][1];\n                                var b = [tmp[0][0], tmp[0][1]];\n                                if (len > 0) {\n                                    b[0] = b[0] + len*Math.cos(angle);\n                                    b[1] = b[1] + len*Math.sin(angle);\n                                }\n                                point2.setPosition(JXG.COORDS_BY_USER, b);\n                                point1.board.update();\n                                point1.update();\n                                point2.board.update();\n                                point2.update();\n                            }\n                        } catch (err) {\n                            // We do not care about this.\n                        }\n                        lastValue = theInput.value;\n                    }\n                });\n                theInput.addEventListener('change', function() {\n                    if (theInput.value != lastValue) {\n                        // Only when something changed.\n                        try {\n                            var tmp = JSON.parse(theInput.value);\n                            if (typeof tmp[0][0] == 'number' && typeof tmp[0][1] == 'number') {\n                                point1.setPosition(JXG.COORDS_BY_USER, tmp[0]);\n                            }\n                            if (typeof tmp[1][0] == 'number' && typeof tmp[1][1] == 'number') {\n                                var angle = tmp[1][0];\n                                var len = tmp[1][1];\n                                var b = [tmp[0][0], tmp[0][1]];\n                                if (len > 0) {\n                                    b[0] = b[0] + len*Math.cos(angle);\n                                    b[1] = b[1] + len*Math.sin(angle);\n                                }\n                                point2.setPosition(JXG.COORDS_BY_USER, b);\n                                point1.board.update();\n                                point1.update();\n                                point2.board.update();\n                                point2.update();\n                            }\n                        } catch (err) {\n                            // We do not care about this.\n                        }\n                        lastValue = theInput.value;\n                    }\n                });\n\n            },\n\n            bind_slider: function(inputRef, slider) {\n                // This function takes a JXG slider object and binds its value to a given input.\n                var theInput = document.getElementById(inputRef);\n                if (theInput.value && theInput.value != '') {\n                    // if a value exists move the slider to it.\n                    // the value is stored as a float value \"0.43\"\n                    try {\n                        slider.setValue(JSON.parse(theInput.value));\n                    } catch (err) {\n                        // We do not care about this.\n                    }\n                    slider.board.update();\n                    slider.update();\n                }\n\n                var initialValue = slider.Value();\n\n                // The binding from graph to input.\n                slider.board.on('update', function() {\n                    // We do not want to set the input before the point actually moves.\n                    if (initialValue != slider.Value()) {\n                        var tmp = JSON.stringify(slider.Value());\n                        initialValue = false;\n                        if (theInput.value != tmp) {\n                            // Avoid resetting this, as some event models migth trigger\n                            // change events even when no change actually happens.\n                            theInput.value = tmp;\n                            // As we set the inputs value programmatically no events\n                            // will be fired. But for two way binding we want to fire them...\n                            // However we do not need this in the preview where it annoys people.\n                            if (window.location.pathname.indexOf('preview.php') === -1) {\n                                var e = new Event('change');\n                                theInput.dispatchEvent(e);\n                            }\n                        }\n                    }\n                });\n\n                var lastValue = JSON.stringify(slider.Value());\n\n                // Then from input to graph. 'input' for live stuff and 'change' for other.\n                theInput.addEventListener('input', function() {\n                    if (theInput.value !== lastValue) {\n                        // Only when something changed.\n                        try {\n                            var tmp = JSON.parse(theInput.value);\n                            if (typeof tmp == 'number') {\n                                slider.setValue(tmp);\n                                slider.board.update();\n                                slider.update();\n                            }\n                        } catch (err) {\n                            // We do not care about this.\n                        }\n                        lastValue = theInput.value;\n                    }\n                });\n                theInput.addEventListener('change', function() {\n                    if (theInput.value !== lastValue) {\n                        // Only when something changed.\n                        try {\n                            var tmp = JSON.parse(theInput.value);\n                            if (typeof tmp == 'number') {\n                                slider.setValue(tmp);\n                                slider.board.update();\n                                slider.update();\n                            }\n                        } catch (err) {\n                            // We do not care about this.\n                        }\n                        lastValue = theInput.value;\n                    }\n                });\n            }\n        };\n    });\n"],"names":["define","JXG","find_input_id","divid","name","tmp","document","getElementById","parentElement","classList","contains","querySelector","addEventListener","M","core_formchangechecker","set_form_changed","id","bind_point","inputRef","point","theInput","value","coords","JSON","parse","setPosition","COORDS_BY_USER","err","board","update","initialX","X","initialY","Y","on","stringify","window","location","pathname","indexOf","e","Event","dispatchEvent","lastValue","bind_point_dual","point1","point2","initial1X","initial1Y","initial2X","initial2Y","bind_point_relative","b","bind_point_direction","angle","len","Math","cos","sin","atan2","sqrt","bind_slider","slider","setValue","initialValue","Value"],"mappings":"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"}