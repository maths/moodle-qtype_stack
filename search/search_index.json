{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"en/","title":"STACK","text":"<p>STACK is the world-leading open-source (GPL) automatic assessment system for mathematics, science and related disciplines.</p> <ul> <li>Students type in mathematical expressions, and are not restricted to multiple choice.</li> <li>STACK separates validation and assessment with an emphasis on formative assessment.</li> <li>Random generation of questions is highly structured with computer algebra support.</li> <li>STACK has a wide variety of input types, including line by line working  and interaction with mathematical diagrams.</li> <li>STACK has support for multipart questions.</li> <li>STACK has support for scientific units, significant figures and libraries of chemical data.</li> </ul> <p>This is the official user documentation for STACK.</p> <ul> <li>The main community website for STACK is https://stack-assessment.org/</li> <li>A demonstration server is available in Edinburgh: https://stack-demo.maths.ed.ac.uk/demo/</li> <li>Community discussion takes place on https://stack-assessment.zulipchat.com/</li> </ul>"},{"location":"en/#authoring","title":"Authoring","text":"<p>Documentation for question authors, including:</p> <ul> <li>An authoring quick start guide, which can be used in conjunction with the \"Getting started with STACK\" guide.</li> <li>Reference documentation on question authoring, such as answer tests, inputs, potential response trees and translations.</li> <li>Detailed guides for using specialist tools, such as drag and drop questions.</li> <li>Information on using the CAS Maxima for question authoring, including randomisation.</li> <li>Guides for writing questions in various mathematical topics.</li> </ul>"},{"location":"en/#installation-and-development","title":"Installation and development","text":"<ul> <li>Installation instructions.</li> <li>Topics for developers</li> <li>Development history.</li> </ul>"},{"location":"en/#students","title":"Students","text":"<p>Information for students using STACK, including:</p> <ul> <li>Input instructions.</li> <li>How answers are assessed.</li> <li>Frequently asked questions.</li> </ul>"},{"location":"en/AbInitio/","title":"Authoring quick start","text":"<p>Those new to auhtoring STACK questions will probably prefer to begin with the authoring quick start guide. These guides cover the most important topics of question authoring, and include embedded screencast videos to guide you.</p> <ul> <li>Authoring quick start 1: A basic question.</li> <li>Authoring quick start 2: Question variables.</li> <li>Authoring quick start 3: Improving feedback.</li> <li>Authoring quick start 4: Randomisation.</li> <li>Authoring quick start 5: Question testing.</li> <li>Authoring quick start 6: STACK question library</li> <li>Authoring quick start 7: Multi-part mathematical questions.</li> <li>Authoring quick start 8: Turning simplification off.</li> <li>Authoring quick start 9: Importing and quizzes.</li> </ul> <p>Note that if you don't want to write your own questions then Authoring quick start 6 describes importing question from the STACK question library.</p>"},{"location":"en/AbInitio/#see-also","title":"See also","text":"<ul> <li>Authoring</li> </ul>"},{"location":"en/AbInitio/Authoring_quick_start_1/","title":"Authoring quick start 1: a minimal working question","text":"<p>1 - First question | 2 - Question variables | 3 - Feedback | 4 - Randomisation | 5 - Question tests | 6 - question library | 7 - Multipart questions | 8 - Simplification | 9 - Quizzes</p> <p>The authoring quick start guide shows you how to write STACK questions.  Part 1 gets a minimal question working. The following video explains the process:</p>"},{"location":"en/AbInitio/Authoring_quick_start_1/#before-you-begin","title":"Before you begin","text":"<p>We assume the following:</p> <ol> <li>You have access to a course with STACK installed.</li> <li>You are familiar with simple  formatting for mathematics.  Some basic examples are provided in the CASText documentation.</li> <li>We strongly recommend you do not use an HTML-aware editor when editing STACK questions.  Instead turn off the editor within Moodle and edit the raw HTML.  Individual users can set their editor preferences by following: <code>User Dashboard &gt; Preferences &gt; Editor preferences &gt; Manage editors</code>.</li> </ol>"},{"location":"en/AbInitio/Authoring_quick_start_1/#creating-a-minimal-stack-question","title":"Creating a minimal STACK question","text":"<p>Go to your Course, navigate to the question bank and create a new question with the \"STACK\" question type.</p> <p>There are lots of fields, but only a few are compulsory:</p> <ol> <li>The \"question name\",</li> <li>The \"question text\", which is shown to the student,</li> <li>The teacher's \"model answer\" <code>ta</code> using a variable in the \"question variables\",</li> <li>A test of \"correctness\" (defaults to Algebraic equivalence).</li> </ol> <p>By default a new question automatically has one input, and one algorithm to test correctness of the answer.</p> <p>A new question will have most fields automatically filled for a minimal question. You just need to fill in the question name, question text and the model answer (designated in question variables). The following sections explain how to do this.</p> <p>Let's focus on the problem of differentiating (x-1)^3 with respect to x.</p>"},{"location":"en/AbInitio/Authoring_quick_start_1/#question-name","title":"Question name","text":"<p>You must give the question a name, for example <code>question1</code>.</p>"},{"location":"en/AbInitio/Authoring_quick_start_1/#question-variables","title":"Question Variables","text":"<p>There should be text in question variables by default.</p> <pre><code>ta:?;\n</code></pre> <p>We should replace <code>?</code> with the model answer to the question. In this case, this wil be the derivative of (x-1)^3, which is 3(x-1)^2. So we should replace <code>?</code> with <code>3*(x-1)^2</code>.</p> <pre><code>ta:3*(x-1)^2;\n</code></pre>"},{"location":"en/AbInitio/Authoring_quick_start_1/#question-text","title":"Question text","text":"<p>We also need to write the question text.  This is the text that the student sees. This should be written in HTML as we advise the use of the plaintext editor.</p> <p>By default the question text will read </p> <pre><code>&lt;p&gt;&lt;/p&gt;\n&lt;p&gt;[[input:ans1]] [[validation:ans1]]&lt;/p&gt;\n</code></pre> <p>Update this question text, or delete and copy the following into the Question text box:</p> <pre><code>&lt;p&gt;Differentiate \\((x-1)^3\\) with respect to x.&lt;/p&gt;\n&lt;p&gt;[[input:ans1]] [[validation:ans1]]&lt;/p&gt;\n</code></pre> <p>Notes:</p> <ul> <li>Moodle has a wide choice for text editors, so the screenshots in this quick start guide might look slightly different to your variant of Moodle. </li> <li>The text contains LaTeX mathematics environments.  Do not use mathematics environments <code>$..$</code> and <code>$$..$$</code>.  Instead you must use <code>\\(..\\)</code> and <code>\\[..\\]</code> for inline and displayed mathematics respectively.  (There is an automatic bulk converter if you have a lot of legacy materials, found on the Moodle qtype_stack plugin page.)</li> <li>Internally the student's answer will be assigned to a variable <code>ans1</code>.</li> <li>The tag <code>[[input:ans1]]</code> denotes the position of the box into which the student puts their answer.</li> <li>The tag <code>[[validation:ans1]]</code> will be replaced by any feedback related to the validity of the input <code>ans1</code>, e.g. syntax errors caused by missing brackets.</li> <li>These tags could be positioned anywhere in the question text.</li> </ul> <p>The next sections will automatically filled in for you for a basic question, so you can save and preview at this point. However, it is worth taking a look at these other main options</p>"},{"location":"en/AbInitio/Authoring_quick_start_1/#input-ans1","title":"Input: ans1","text":"<p>Scroll down:  there will be an inputs section of the editing form.  Click on the header <code>Input: ans1</code> to reveal the relevant settings.</p> <p>For a minimal question, we must specify the model answer. This will be <code>ta</code> by default, which we have defined to be the solution to this problem.</p> <p>Notes</p> <ol> <li>The student's response is stored in the answer variable <code>ans1</code>.</li> <li>The model answer must be a syntactically valid expression in CAS (Maxima) syntax, not LaTeX. This means multiplication must be explicitly specified, using <code>*</code>.</li> <li>Inputs can have a variety of types selected by the  Input type drop-down menu.  The Algebraic input is the default, and what we need here.</li> <li>A question can have many inputs for multiple parts.  These are discussed later in a later part.</li> </ol>"},{"location":"en/AbInitio/Authoring_quick_start_1/#assessing-correctness-of-a-response-the-potential-response-tree-prt","title":"Assessing correctness of a response - the Potential Response Tree (PRT)","text":"<p>Next we have to decide if the student's answer is correct.</p> <p>To grade the student's response, we need to determine its mathematical properties using an algorithm known as a potential response tree.</p> <p>By default, a new question contains one potential response tree called <code>prt1</code>.  Feedback generated by the tree replaces the tag <code>[[feedback:prt1]]</code> at the appropriate time.</p>"},{"location":"en/AbInitio/Authoring_quick_start_1/#configuring-a-potential-response-node","title":"Configuring a potential response node","text":"<p>A potential response tree is a non-empty acyclic directed graph of potential response nodes.  By default, we have one potential response node. At each node</p> <ol> <li><code>SAns</code> is compared to <code>TAns</code> with the answer test, possibly with an option,</li> <li>If <code>true</code>, then we execute the <code>true</code> branch,</li> <li>If <code>false</code>, then we execute the <code>false</code> branch.</li> </ol> <p>Each branch can then</p> <ul> <li>Assign/update the score,</li> <li>Assign formative feedback to the student,</li> <li>Leave an answer note for statistical reporting purposes,</li> <li>Continue to the next potential response node, or end the process with <code>[stop]</code>.</li> </ul> <p>We can leave the default settings for a minimal question, which is the following:</p> <ol> <li>Specify the variable <code>ans1</code> in the <code>SAns</code> setting.</li> <li>Specify the correct answer in the <code>TAns</code> setting: <code>ta</code>.</li> <li><code>AlgEquiv</code> in the Answer test drop-down menu.</li> </ol>"},{"location":"en/AbInitio/Authoring_quick_start_1/#saving-the-question","title":"Saving the question","text":"<p>Now scroll to the bottom of the page and press <code>[Save changes and continue editing]</code>.  If the question fails to save, check carefully for any errors, correct them and save again.</p> <p>We now have a minimal question.</p> <p>To recap, we have</p> <ol> <li>The \"question name\",</li> <li>The \"question text\",</li> <li>The teacher's \"model answer\", (<code>ta</code> in the question variables).</li> <li>A test of \"correctness\" (set to Algebraic equivalence).</li> </ol> <p>Next we should try out our question by pressing the <code>Preview</code> link at the bottom of the page.</p> <p></p>"},{"location":"en/AbInitio/Authoring_quick_start_1/#previewing-the-question","title":"Previewing the question","text":"<p>To speed up the testing process, scroll down on the preview window and under either \"Attempt options\" or \"Preview options\" (moodle version dependent) make sure you have \"How questions behave\" set to \"Adaptive Mode\". If necessary, \"Start again with these options\". This will allow you to check your answers without having to Submit and Start again repeatedly.</p> <p>With the preview open, try typing</p> <pre><code>3*(x-1)^2\n</code></pre> <p>in the answer box. The system first establishes the syntactical validity of this answer.</p> <p>Press the <code>[Check]</code> button.</p> <p>The system executes the potential response tree and establishes whether your answer is equivalent to the model answer <code>3*(x-1)^2</code>.</p>"},{"location":"en/AbInitio/Authoring_quick_start_1/#student-validation","title":"Student validation","text":"<p>Notice that there is a two-step process for the student to enter their answer.</p> <p>First is \"validation\", and normally servers have \"instant validation\" enabled.  If the expression is valid, STACK shows the student \"Your last answer was interpreted as follows:\" and displays their expression.  An invalid response creates an error message. </p> <p>The second stage executes when a valid expression is entered, and this evaluates the potential response tree to assess the student's answer.</p> <p>This two-stage process is a unique and essential feature of STACK.  There are lots of options for validation to help the student.  For example, in the above, all example expressions have strict syntax.  Here we used expressions like <code>3*(x-1)^2</code>, with <code>*</code> symbols to denote multiplication.  You could choose to let students type in expressions like <code>3(x-1)^2</code> and accept implied multiplication. Note, however, that teacher input will always have to be strict to avoid ambiguity. Documentation on these options is given in the inputs section.</p>"},{"location":"en/AbInitio/Authoring_quick_start_1/#next-step","title":"Next step","text":"<p>You should now be able to write a simple question in STACK.</p>"},{"location":"en/AbInitio/Authoring_quick_start_1/#the-next-part-of-the-authoring-quick-start-guide-looks-at-using-question-variables","title":"The next part of the authoring quick start guide looks at using question variables.","text":""},{"location":"en/AbInitio/Authoring_quick_start_2/","title":"Authoring quick start 2: question variables","text":"<p>1 - First question | 2 - Question variables | 3 - Feedback | 4 - Randomisation | 5 - Question tests | 6 - question library | 7 - Multipart questions | 8 - Simplification | 9 - Quizzes</p> <p>This part of the authoring quick start guide deals with using question variables. The following video explains the process:</p>"},{"location":"en/AbInitio/Authoring_quick_start_2/#example-question","title":"Example question","text":"<p>For this example, we will be working with a simple integration problem. Below is a typical set of practice exercises.</p> <p></p> <p>(Reproduced with permission from Advanced Mathematics for AS and A level 2 (A-level mathematics), Haese Mathematics (2018) 978-1-925489-32-3)</p> <p>Let us focus on the problem of finding . Create a new STACK question. As before, we will give our question a Question name, say \"Integration Example\".</p>"},{"location":"en/AbInitio/Authoring_quick_start_2/#using-question-variables","title":"Using question variables","text":"<p>We make more use of the question text field. For instance, we can start to use the CAS to determine the model answer, and use a question variable in the question text.</p> <p>Add the following to the question variables</p> <pre><code>exp: 3*(x-1)^(-4);\nta: int(exp,x)+c;\n</code></pre> <p>The coding in question variables is based on Maxima, which has an unusual syntax for assignment.  In particular, the colon <code>:</code> is used to assign a value to a variable.  So to assign the value of <code>5</code> to <code>a1</code>, we use the syntax <code>a1:5</code>. In general, it is good practice to give variables multi-character names, as single-character names are meant for student input. This is because multi-character variables the author defined cannot by default be input by students. Additionally, adding semicolons to the end of each line is optional, but good practice.</p> <p>Notice we are using the CAS to determine the model answer by calling the <code>int()</code> function to find the anti-derivative. When the CAS determines an anti-derivative, it does not include a constant of integration, so we have to add it ourselves.</p> <p>Now it will be a lot faster to fill out the rest of the question. Add the following to the question text:</p> <pre><code>&lt;p&gt;Find \\(\\int{@exp@} \\mathrm{d}x\\)&lt;/p&gt;\n&lt;p&gt;[[input:ans1]] [[validation:ans1]]&lt;/p&gt;\n</code></pre> <p>Notice that we have defined a local variable <code>exp</code>, and used the value of this in the Question text. There is a difference between mathematics enclosed between <code>\\(..\\)</code> symbols and <code>{@..@}</code> symbols. All the text-based fields in the question, including feedback, are CAS text.  This is HTML into which mathematics can be inserted.  LaTeX is placed between <code>\\(..\\)</code>s, and CAS expressions (including your variables) between matching <code>{@..@}</code> symbols.  The CAS expressions are evaluated in the context of the question variables and displayed as LaTeX.</p> <p>Since we have used <code>{@exp@}</code> here, the user will not see a exp on the screen when the question is instantiated, but the displayed value of <code>exp</code>: \\frac{3}{(x-1)^{-4}} </p> <p>In the input <code>ans1</code>, confirm the default <code>model answer</code> is the variable <code>ta</code>.</p> <p>In the potential response tree, confirm the default <code>Answer test</code> is  <code>AlgEquiv</code>, <code>SAns</code> is <code>ans1</code> and <code>TAns</code> is <code>ta</code>.</p> <p>It is good practice to use question variables often, as they save time and let you change properties of the question easily in the future.</p>"},{"location":"en/AbInitio/Authoring_quick_start_2/#next-step","title":"Next step","text":"<p>You should now be able to use question variables in STACK.</p>"},{"location":"en/AbInitio/Authoring_quick_start_2/#the-next-part-of-the-authoring-quick-start-guide-looks-at-improving-feedback","title":"The next part of the authoring quick start guide looks at improving feedback.","text":""},{"location":"en/AbInitio/Authoring_quick_start_3/","title":"Authoring quick start 3: improving feedback","text":"<p>1 - First question | 2 - Question variables | 3 - Feedback | 4 - Randomisation | 5 - Question tests | 6 - question library | 7 - Multipart questions | 8 - Simplification | 9 - Quizzes</p> <p>This part of the Authoring Quick Start Guide deals with improving feedback. The following video explains the process:</p>"},{"location":"en/AbInitio/Authoring_quick_start_3/#introduction","title":"Introduction","text":"<p>In the last part we started working with question variables. Specifically, we defined the variable  <code>exp</code> for the expression to be integrated, and <code>ta</code> for the teacher's answer. Then we asked the student to find .</p> <p>Try previewing this question and typing in  <code>-1*(x-1)^(-3)+c</code>. The system should accept this as correct.  Next type in <code>-1*(x-1)^(-3)+C</code>.  This will be compared to the teacher's answer <code>-1*(x-1)^(-3)+c</code> by algebraic equivalence (recall we specified <code>AlgEquiv</code> in the potential response tree), and will not be accepted as equivalent.  The reason is that <code>c</code> and <code>C</code> are different.  A reasonable teacher will probably not care which letter is used for the constant of integration. Let us fix this problem.</p>"},{"location":"en/AbInitio/Authoring_quick_start_3/#answer-test-int","title":"Answer test: Int","text":"<p>We will need to edit the potential response tree to use a better answer test. Return to the page \"Editing a STACK question\". Find your potential response tree settings, click on the drop-down menu where we selected <code>AlgEquiv</code> and select <code>Int</code> from the list. Type <code>x</code> (the variable) into the Test options setting. Now press the <code>[Save changes and continue editing]</code> button and once more click the preview button.  We have just selected a special answer test for dealing with integration questions.</p> <p>The Int answer test will accept any variable name for the constant of integration. For example, try typing in  <code>-(x-1)^(-3)+k</code>. The system should accept this as correct.  It will also give standard feedback if the student forgets a constant of integration or accidentally differentiates instead.  To try this, type <code>-12*(x-1)^(-5)</code>.  If you don't want students to see the automatic feedback, select the Quiet option in the potential response node.</p> <p>An outcome's  <code>Answer Note</code> is a name given for that specific outcome. STACK will automatically generate these with information on the potential response tree, the node number and the outcome of the node.</p>"},{"location":"en/AbInitio/Authoring_quick_start_3/#considerations","title":"Considerations","text":"<p>When checking a student's answer with STACK, a teacher needs to ask themselves \"What are the mathematical properties that make a student's answer correct/incorrect?\"  In our case, these questions include:</p> <ul> <li>Is the student's answer a symbolic anti-derivative of the integrand?</li> <li>Does the student have a constant of integration in an appropriate form?</li> </ul> <p>The built-in <code>int</code> answer test answers these questions, so a teacher does not have to write code to do so for every integration question.</p> <p>Next, a teacher needs to ask \"What might a student do incorrectly, and what will this give them as an answer?\"  This second question is more difficult. The answer might come through experience or from asking upfront diagnostic questions. It is often sensible to review students' responses to STACK questions after a year and build in better feedback in light of experiences. </p>"},{"location":"en/AbInitio/Authoring_quick_start_3/#enhancing-the-feedback-further","title":"Enhancing the feedback further","text":"<p>For each mistake we think students might make, we can create an answer test. For example, we might expect students to leave their answer in expanded form. This would of course still be a correct answer, but we want to guide students away from unnecessarily expanding their answer. Let us create another node that tests if the student left their final answer in a factored form. We do this by adding another potential response node. </p> <p></p> <p>Go to the potential response tree and click <code>[Add node(s)]</code> . Then under Node 1's  <code>True</code> branch change <code>Next</code> to <code>Node 2</code>. If we enter Node 2, we know the student has the correct answer and just need to establish if it is factored or not. To establish this we need to use the FacForm answer test. This tests both that SAns and TAns are equivalent, and that SAns is factored. In this case we already know that the student's answer is equivalent to the teacher's answer (using Int's better tailored algorithm). Hence we can just test the student's answer against itself.</p> <p>Update the form so that Node 2 has</p> <pre><code>Answer test = FacForm\nSAns = strip_int_const(ans1,x)\nTAns = strip_int_const(ans1,x)\nTest options = x\n</code></pre> <p>STACK provides a function <code>strip_int_const</code> to remove any constant of integration which a student may have used. We again have to specify the variable in <code>Test options</code>. </p> <p>Make sure that the outcomes for both <code>True</code> and <code>False</code> do not change the score. By default they will be set to <code>+0</code> and <code>-0</code>, respectively. By not changing the score, we ensure that students are not penalised for giving their answer in expanded form.</p> <p>FacForm gives automatic feedback, but if you want to write your own you can set <code>Quiet</code> to <code>Yes</code> and type something like the following into <code>Node 2 false feedback</code>:</p> <pre><code>Your answer is not factored. Well done for getting the correct answer, but remember that there is no need to expand out the brackets.\n</code></pre> <p>You can continue to expand your potential response tree, checking for as many common mistakes as you would like to. See the documentation for information on more answer tests.</p>"},{"location":"en/AbInitio/Authoring_quick_start_3/#adding-general-feedback","title":"Adding general feedback","text":"<p><code>General Feedback</code> is shown to every student, regardless of whether they got the question right or wrong. This is a good place to add a full worked solution.</p>"},{"location":"en/AbInitio/Authoring_quick_start_3/#next-step","title":"Next step","text":"<p>You should now be able to create specific feedback in STACK.</p>"},{"location":"en/AbInitio/Authoring_quick_start_3/#the-next-part-of-the-authoring-quick-start-guide-looks-at-randomisation","title":"The next part of the authoring quick start guide looks at randomisation.","text":""},{"location":"en/AbInitio/Authoring_quick_start_4/","title":"Authoring quick start 4: randomisation","text":"<p>1 - First question | 2 - Question variables | 3 - Feedback | 4 - Randomisation | 5 - Question tests | 6 - question library | 7 - Multipart questions | 8 - Simplification | 9 - Quizzes</p> <p>This part of the authoring quick start guide deals with randomisation. The following video explains the process:</p>"},{"location":"en/AbInitio/Authoring_quick_start_4/#introduction","title":"Introduction","text":"<p>In the last part, we worked with a problem about integrating  with respect to x. However, we do not want every student to get the exact same question, as that would allow them to share answers! To solve this problem, we need to randomise the question.</p>"},{"location":"en/AbInitio/Authoring_quick_start_4/#random-questions","title":"Random questions","text":"<p>Let's take a look again at the question variables we declared:</p> <pre><code>exp: 3*(x-1)^(-4);\nta: int(exp,x)+c;\n</code></pre> <p>We defined two local variables <code>exp</code> and <code>ta</code>, and used these values in other places such as the question text, input and potential response tree. </p> <p>We are now in a position to generate a random question. To do this, modify the question variables to be</p> <pre><code>a1 : 1+rand(6);\na2 : 1+rand(6);\nnn : 1+rand(4);\nexp : a1*(x-a2)^(-nn);\nta: int(exp, x)+c;\n</code></pre> <p>In this new question we are asking the student to find the anti-derivative of a question with a definite form  a_1(x-a_2)^{-nn} . <code>a1</code>, <code>a2</code> and <code>nn</code> are all variables which are assigned random positive integers.  These are then used to define the variable <code>exp</code>, used in the question itself. We also have the CAS integrate the expression <code>exp</code> and store the result in the variable <code>ta</code>. It is good practice to use variables names with more than one character as single-character variables, like <code>x</code>, are meant for student input.</p> <p>Remember that when generating random questions in STACK we talk about random numbers when we really mean pseudo-random numbers. To keep track of which random numbers are generated for each user, there is a special <code>rand</code> command in STACK, which you should use instead of Maxima's random command. The <code>rand</code> command is a general \"random thing\" generator, see the page on random generation for full details. <code>rand</code> can be used to generate random numbers and also to make selections from a list. <code>rand(n)</code> will select a random integer from 0 up to, and not including, <code>n</code>. So  <code>rand(3)</code> will select a random number from the list  <code>[0,1,2]</code> .</p>"},{"location":"en/AbInitio/Authoring_quick_start_4/#question-note","title":"Question note","text":"<p>Now that as our question contains random numbers, we need to record the actual question variant seen by a particular student. As soon as we use the <code>rand</code> function, STACK forces us to add a Question note.  Fill the question note in as</p> <pre><code>\\[ \\int {@exp@} \\mathrm{d}x = {@ta@}.\\]\n</code></pre> <p>Two question variants are considered to be the same if and only if the question note is the same. It is the teacher's responsibility to create sensible notes.</p>"},{"location":"en/AbInitio/Authoring_quick_start_4/#deploying-random-variants","title":"Deploying random variants","text":"<p>Before a student sees the questions, it is sensible to deploy random variants.  This controls exactly which variants are shown to a student and lets you check that the randomisation is sensible. Scroll to the top of your question and click on the link <code>No variants of this question have been deployed yet</code>. This link might say <code>Question tests &amp; deployed variants</code> in older versions of STACK, and once you have deployed some variants.</p> <p>To ask STACK to generate a number of question variants, you need <code>Attempt to automatically deploy the following number of variants:</code>. Select, for example, <code>10</code> and press enter.  You should then be able to see 10 random variants of the question. Now students will only be shown one of these.</p> <p>You also have the option to remove any variants that you don't like. For example, you might not like the variants where nn=1, as these have answers involving logarithms. Hence, you could cross out all these variants. Perhaps a better solution is to return to your <code>Question variables</code> and change <code>nn</code> to <code>2+rand(4)</code>. When you save and go back to <code>Question tests &amp; deployed variants</code>, you will see your variants changed. This illustrates a key use of deployed variants: checking for unintentional consequences of the randomisation.</p>"},{"location":"en/AbInitio/Authoring_quick_start_4/#preview-options","title":"Preview options","text":"<p>Try previewing your question. As previously mentioned (in part 1 of the Quick Start tutorial), under <code>Attempt options</code> (or <code>Preview options</code>), you have the option to change the question behaviour. <code>Adaptive mode</code> is the most useful one for question testing, as it allows you to <code>check</code> questions repeatedly. We will discuss question behaviours in more detail later. </p> <p>However, notice also that you can choose which deployed <code>Question variant</code>  you are answering. This is useful if you want to test a specific variant.</p>"},{"location":"en/AbInitio/Authoring_quick_start_4/#next-step","title":"Next step","text":"<p>You should now be able to make and deploy random questions in STACK.</p>"},{"location":"en/AbInitio/Authoring_quick_start_4/#the-next-part-of-the-authoring-quick-start-guide-looks-at-question-tests","title":"The next part of the authoring quick start guide looks at question tests.","text":""},{"location":"en/AbInitio/Authoring_quick_start_5/","title":"Authoring quick start 5: question tests","text":"<p>1 - First question | 2 - Question variables | 3 - Feedback | 4 - Randomisation | 5 - Question tests | 6 - question library | 7 - Multipart questions | 8 - Simplification | 9 - Quizzes</p> <p>This part of the authoring quick start guide deals with using question tests. The following video explains the process:</p>"},{"location":"en/AbInitio/Authoring_quick_start_5/#introduction","title":"Introduction","text":"<p>In the last couple of parts, we have been working with a simple integration question. Before you continue, confirm that your question variables are set up as follows:</p> <pre><code>a1 : 1+rand(6);\na2 : 1+rand(6);\nnn : 2+rand(4);\nexp : a1*(x-a2)^(-nn);\nta: int(exp, x)+c;\n</code></pre> <p>Testing questions is time consuming and tedious, but important to ensure questions work.  To help with this process, STACK enables teachers to define \"question tests\".  The principle is the same as \"unit testing\" in software engineering.</p>"},{"location":"en/AbInitio/Authoring_quick_start_5/#question-testing","title":"Question testing","text":"<p>Scroll to the top of your question in the preview window and click on <code>Question tests &amp; deployed variants</code>. In the last part we used this window to deploy random variants.</p> <p>Click <code>Add a test case</code> to add a test to your question. A test case takes a student input. You then specify what the expected outcome is for that input, namely the score, penalty and answer note you expect to land on. Recall from the last part that the <code>Answer note</code> is the name for a specific outcome on a potential response tree.</p> <p>The penalty is a number deducted from the total mark for each incorrect attempt the student has. By default, it is set to 0.1. You can change the penalty in the <code>General section</code> under <code>Penalty</code>. Note that this feature is only used in the question behaviours <code>Interactive with multiple tries</code> and <code>Adaptive mode</code>, as they are the only ones that allow multiple attempts. We will discuss question behaviours in a later part. </p> <p>Fill in the following information for your first test case:</p> <pre><code>ans1 = ta\nscore = 1\npenalty = 0\nanswernote = prt1-2-T\n</code></pre> <p>I.e., if the student puts in the model answer they should pass the first node (checks if they have integrated correctly) and pass the second node (tests that their answer is factored) and end up with a score of 1 and no penalty. </p> <p>Note that the input is evaluated before the test is conducted. Students are not allowed to enter the variable  <code>ta</code> because it is a teacher-defined variable, however the evaluated form, fx.  <code>-1*(x-1)^(-3)+c</code>, is an allowed input. For each test case, you can see the un-evaluated input under <code>Test input</code>, and the actual input tested under <code>Value entered</code>. </p> <p>You can run the test on all deployed versions by clicking on  <code>Run all tests on all deployed variants</code> .</p> <p>You can add as many tests as you think is needed, and it is usually a sensible idea to add one for each case you anticipate.  Add in another test case for</p> <pre><code>ans1 = int(exp,x)\nscore = 0\npenalty = 0.1\nanswernote = prt1-1-F\n</code></pre> <p>Here we create a test case without a constant of integration. In this case STACK should fail to give students any marks, indicating the test passes!</p> <p>You should also use question tests to check that solving every variant requires the competences that you desire. For example, in this question we want students to know (1) increase the power by 1 and (2) divide by the new power. They should not be able to get away with, for example, increasing the power and multiplying by the new power. Let's add a test case to check this.</p> <pre><code>ans1 = (a1*(-nn+1))*(x-a2)^(-nn+1)+c\nscore = 0\npenalty = 0.1\nanswernote = prt1-F\n</code></pre> <p>We are testing that if we multiply by  instead of dividing, we should be given a score of 0. If students are required this knowledge for all variants, then all variants should pass this test. Click  <code>Run all tests on all deployed variants</code> to check this. </p> <p>You will see that not all deployed versions pass all tests, and if you click on a variant that failed a test, you will see why! Essentially, when nn=2, -nn+1=-1 multiplication and division are equivalent. Essentially, these random variants are \"easier\" than the others. This illustrates another key use of question tests - ensuring that all variants are the same difficulty and test the knowledge they are supposed to. In light of this, you may want to change <code>nn</code> again to <code>3+rand(4)</code> . Now all variants should pass all question tests.</p> <p>Quality control is essential, and more information is given in the page on testing.</p>"},{"location":"en/AbInitio/Authoring_quick_start_5/#aside-forbidden-words","title":"Aside: forbidden words","text":"<p>STACK allows students to use standard mathematical functions, such as <code>sin</code>, <code>cos</code>, etc. Perhaps surprisingly, it also allows students to use <code>int</code>. So in theory, students could input <code>int(...)+c</code>, and the system would mark it correct!</p> <p>To stop this, go to <code>input:ans1</code> and under forbidden words, enter <code>int</code>. Forbidden words will render words that are normally allowed invalid.</p> <p>This example nicely illustrates the way validity can be used to help students.  An answer <code>int(p,x)+c</code> is a correct response to the question, but it is invalid.  In this example we want them to perform integration, not have the CAS do it!</p>"},{"location":"en/AbInitio/Authoring_quick_start_5/#next-step","title":"Next step","text":"<p>You should now be able to use question tests in STACK.</p>"},{"location":"en/AbInitio/Authoring_quick_start_5/#the-next-part-of-the-authoring-quick-start-guide-looks-at-importing-questions-from-the-question-library","title":"The next part of the authoring quick start guide looks at importing questions from the question library.","text":""},{"location":"en/AbInitio/Authoring_quick_start_6/","title":"Authoring quick start 6: STACK question libaray","text":"<p>1 - First question | 2 - Question variables | 3 - Feedback | 4 - Randomisation | 5 - Question tests | 6 - question library | 7 - Multipart questions | 8 - Simplification | 9 - Quizzes</p>"},{"location":"en/AbInitio/Authoring_quick_start_6/#finding-questions","title":"Finding questions","text":"<p>The primary goal of STACK is to allow teachers to write their own materials.  That said, STACK is technical and it is often sensible to start with an existing question as a template and modify it to meet your needs.   STACK materials are available in the following ways.</p> <ol> <li>The STACK question library: available to any teacher to use immediately.</li> <li>Material banks (Moodle .xml) which can be imported.</li> <li>Material banks distributed via the gitsync plugin.</li> </ol> <p>If you have been following the quick start guide so far, you should also know how to write your own question from scratch.</p>"},{"location":"en/AbInitio/Authoring_quick_start_6/#1-the-stack-question-library","title":"1. The STACK question library","text":"<p>The STACK question library is available to any teacher to use immediately.</p> <ol> <li>Create a new STACK question.</li> <li>From the blank STACK question, follow the link to the \"STACK question library\".</li> <li>Choose a question, and check the preview.</li> <li>Import the question direct to your current question bank. (e.g. the category you created the new question in).</li> <li>Go back to the question bank.  Your imported question is now available to review/edit/use.</li> </ol> <p>For example, try importing <code>Doc-Examples\\Reveal_block_example.xml</code>.  This question provides a demonstration of how to use multiple inputs, and the \"reveal\" block.</p>"},{"location":"en/AbInitio/Authoring_quick_start_6/#2-importing-questions-from-an-existing-server","title":"2. Importing questions from an existing server","text":"<p>Let us look at how you import questions from an existing server into your server.</p> <p>First, you must export the existing questions:</p> <ol> <li>log into the module on the Moodle server from which you wish to export questions, and click on <code>Question bank</code> in the Administration block. Then click on <code>Export</code>,  </li> <li>Click on <code>Moodle XML format</code>, then choose the category you want to export.  Moodle only lets you export individual categories. </li> <li>Click on <code>Export questions to file</code>. This will download a file with the all the questions that category.</li> </ol> <p>To import these questions into your course:</p> <ol> <li>Log into your module on the Moodle server and click on <code>Question bank</code> in the Administration block,</li> <li>Click on <code>Import</code>,</li> <li>Click on <code>Moodle XML format</code> then drag and drop the <code>?.xml</code> file from your Downloads folder on your desktop, and click <code>Import</code> and then <code>Continue</code>. A copy of the questions should then appear in the question bank for your module and you can modify them as you want.</li> </ol>"},{"location":"en/AbInitio/Authoring_quick_start_6/#3-the-gitsync-module","title":"3. The gitsync module","text":"<p>The purpose of the gitsync plugin is to synchronise questions from part of a moodle question bank to an external file system.  This is an advanced feature, requiring additional server setup.</p> <p>The motivating use-case is to share questions either (i) between multiple courses on a single moodle site or (ii) between multiple sites. Normally the external file system is part of a version control repository (e.g. git), so that version control tools can be used on the external file system to track differences between versions, merge changes, use branches to maintain different versions, and so on.</p>"},{"location":"en/AbInitio/Authoring_quick_start_6/#the-next-part-of-the-authoring-quick-start-guide-looks-at-multipart-questions","title":"The next part of the authoring quick start guide looks at multipart questions.","text":""},{"location":"en/AbInitio/Authoring_quick_start_7/","title":"Authoring quick start 7: multipart questions","text":"<p>1 - First question | 2 - Question variables | 3 - Feedback | 4 - Randomisation | 5 - Question tests | 6 - question library | 7 - Multipart questions | 8 - Simplification | 9 - Quizzes</p> <p>This part of the authoring quick start guide deals with authoring multipart questions. The following video explains the process:</p> <p>Consider the following examples:</p>"},{"location":"en/AbInitio/Authoring_quick_start_7/#example-1","title":"Example 1","text":"<p>Find the equation of the line tangent to  at the point x=2.</p> <ol> <li>Differentiate x^3-2x^2+x with respect to x.</li> <li>Evaluate your derivative at x=2.</li> <li>Hence, find the equation of the tangent line. y=... </li> </ol> <p>Since all three parts refer to one polynomial, if randomly generated questions are being used, then each of these parts needs to reference a single randomly generated equation. Hence parts 1.-3. really form one item.  Notice here that part 1. is independent of the others. Part 2. requires both the first and second inputs. Part 3. could easily be marked independently, or take into account parts 1 &amp; 2. Notice also that the teacher may choose to award \"follow on\" marking.</p>"},{"location":"en/AbInitio/Authoring_quick_start_7/#example-2","title":"Example 2","text":"<p>Consider the following question, asked to relatively young school students.</p> <p>Expand (x+1)(x+2).</p> <p>In the context it is to be used, it is appropriate to provide students with the opportunity to \"fill in the blanks\" in the following equation:</p> <pre><code>(x+1)(x+2) = [?] x2 + [?] x + [?].\n</code></pre> <p>We argue this is really \"one question\" with \"three inputs\". Furthermore, it is likely that the teacher will want the student to complete all boxes before any feedback is assigned, even if separate feedback is generated for each input (i.e. coefficient). This feedback should all be grouped in one place on the screen. Furthermore, in order to identify the possible causes of algebraic mistakes, an automatic marking procedure will require all coefficients simultaneously. It is not satisfactory to have three totally independent marking procedures.</p> <p>These two examples illustrate two extreme positions.</p> <ol> <li>All inputs within a single multipart item can be assessed independently.</li> <li>All inputs within a single multipart item must be completed before the item can be scored.</li> </ol> <p>Devising multipart questions which satisfy these two extreme positions would be relatively straightforward. However, it is more common to have multipart questions which are between these extremes, as in the case of our first example.</p>"},{"location":"en/AbInitio/Authoring_quick_start_7/#authoring-a-multipart-question","title":"Authoring a multipart question","text":"<p>Start a new STACK question, and give the question a name, e.g. \"Tangent lines\".  This question will have three parts.  Start by copying the question variables and question text as follows.  Notice that we have not included any randomisation, but we have used variable names at the outset to facilitate this at a later stage.</p> <p>Question variables:</p> <pre><code> exp:x^3-2*x^2+x;\n pt:2;\n ta1:diff(exp,x);\n ta2:subst(x=pt,ta1);\n ta3:remainder(exp,(x-pt)^2);\n</code></pre> <p>Question text</p> <p>Copy the following text into the editor.</p> <pre><code>Find the equation of the line tangent to {@exp@} at the point \\(x={@pt@}\\).\n1. Differentiate {@exp@} with respect to \\(x\\). [[input:ans1]] [[validation:ans1]] [[feedback:prt1]]\n2. Evaluate your derivative at \\(x={@pt@}\\). [[input:ans2]] [[validation:ans2]] [[feedback:prt2]]\n3. Hence, find the equation of the tangent line. \\(y=\\)[[input:ans3]] [[validation:ans3]] [[feedback:prt3]]\n</code></pre> <p>Fill in the answer for <code>ans1</code> (which exists by default) and remove the <code>feedback</code> tag from the \"specific feedback\" section.  We choose to embed feedback within parts of this question, so that relevant feedback is shown directly underneath the relevant part. Notice there is one potential response tree for each \"part\".</p> <p>Update the form by saving your changes, and then ensure the Model Answers are filled in as <code>ta1</code>, <code>ta2</code> and <code>ta3</code>.</p> <p>STACK creates three potential response trees by detecting the feedback tags automatically.  Next we need to edit potential response trees.  These will establish the properties of the student's answers.</p>"},{"location":"en/AbInitio/Authoring_quick_start_7/#stage-1-a-working-potential-response-tree","title":"Stage 1: a working potential response tree","text":"<p>The first stage is to include the simplest potential response trees.  These will simply ensure that answers are \"correct\".  In each potential response tree, make sure to test that \\text{ans}_i is algebraically equivalent to \\text{ta}_i, for i=1,2,3.  At this stage we have a working question.  Save it and preview the question.  For reference, the correct answers are</p> <pre><code> ta1 = 3*x^2-4*x+1\n ta2 = 5\n ta3 = 5*x-8\n</code></pre>"},{"location":"en/AbInitio/Authoring_quick_start_7/#stage-2-follow-through-marking","title":"Stage 2: follow-through marking","text":"<p>Next we will implement simple follow-through marking.</p> <p>Look carefully at part 2.  This does not ask for the \"correct answer\", only that the student has evaluated the expression in part 1 correctly at the right point.  So the first task is to establish this property by evaluating the answer given in the first part, and comparing it with the second part.  Update node 1 of <code>prt2</code> to the following:</p> <pre><code>Answer test: AlgEquiv\nSAns: ans2\nTAns: subst(x=pt,ans1)\n</code></pre> <p>Next, add a single node (to <code>prt2</code>) with the following:</p> <pre><code>Answer test: AlgEquiv\nSAns: ans1\nTAns: ta1\n</code></pre> <p>We now link the true branch of node 1 to node 2 (of <code>prt2</code>).  This gives us three outcomes.</p> <p>Node 1: did they evaluate their expression in part 1 correctly? If \"yes\", then go to node 2, else if \"no\", then exit with no marks.</p> <p>Node 2: did they get part 1 correct?  if \"yes\" then this is the ideal situation, full marks.  If \"no\" then choose marks as suit your taste in this situation, and add some feedback, such as the following:</p> <pre><code>You have correctly evaluated your answer to part 1 at the given point, but your answer to part 1 is wrong. Please try both parts again.\n</code></pre>"},{"location":"en/AbInitio/Authoring_quick_start_7/#next-step","title":"Next step","text":"<p>You should now be able to make a multipart question in STACK. If you have been following this quick-start guide, you should already know some steps you can take to improve this question. For example, you could add more specific feedback, randomise your question and add question tests.</p>"},{"location":"en/AbInitio/Authoring_quick_start_7/#the-next-part-of-the-authoring-quick-start-guide-looks-at-turning-simplification-off","title":"The next part of the authoring quick start guide looks at turning simplification off.","text":""},{"location":"en/AbInitio/Authoring_quick_start_8/","title":"Authoring quick start 8: turning simplification off","text":"<p>1 - First question | 2 - Question variables | 3 - Feedback | 4 - Randomisation | 5 - Question tests | 6 - question library | 7 - Multipart questions | 8 - Simplification | 9 - Quizzes</p> <p>This part of the authoring quick start guide deals with turning simplification off. The following video explains the process:</p>"},{"location":"en/AbInitio/Authoring_quick_start_8/#example-question","title":"Example question","text":"<p>Given a complex number , determine z^{n}.</p> <p>Where a, b and n are randomly generated numbers.</p>"},{"location":"en/AbInitio/Authoring_quick_start_8/#simplification-off","title":"Simplification off","text":"<p>It is tempting when writing questions such as this to operate at the level of display.  We could randomly generate a, b and n and insert them into the question text.  For example:</p> <pre><code> \\(({@aa@}e^{{@bb@} i})^{@nn@}\\)\n</code></pre> <p>What we are doing here is treating every variable separately instead of creating a single CAS object for the complex number.  This is ok, but causes problems and is difficult to read because it mixes CAS and LaTeX.</p> <p>Hence, we would much rather have everything in one CAS object that is not simplified. The following is a single Maxima expression:</p> <pre><code> {@(aa*%e^(bb*%i))^nn@}\n</code></pre> <p>(Notice that we are using variables names with more than one character. This is good practice, as single-character variables are meant for student input. Notice also that we precede standard mathematical variables with <code>%</code> when writing in Maxima. This is not mandatory, but is considered good practice.)</p> <p>Of course, we don't want Maxima to actually calculate the power just to represent it! To see the difference, copy the following a STACK question's question variables:</p> <pre><code>simp:true;\na1: (3*%e^(%i*%pi/2))^4;\nsimp:false;\na2: (3*%e^(%i*%pi/2))^4;\n</code></pre> <p>Then type <code>Simplified: {@a1@} Not simplified: {@a2@}</code> somewhere in the question text. Preview to see the difference.</p> <p>Solving problems at the level of the CAS instead at the level of the display is often better. To tell STACK to set <code>simp:false</code> throughout the question, scroll towards the bottom of the form and under <code>Options</code>, set <code>Question-level simplify</code> to <code>No</code>. Now Maxima will not simplify expressions before displaying them, so <code>{@2+5@}</code> will display as <code>2+5</code> instead of <code>7</code>.</p> <p>This does have some drawbacks. Having switched off all simplification, we now need to turn it back on selectively! There are two ways to do this. Firstly, we can use commands of the following type:</p> <pre><code>aa : ev(2+rand(10),simp);\n</code></pre> <p>In particular, we can define the question variables as follows.</p> <pre><code>aa : ev(2+rand(10),simp);\nbb : ev(2+rand(10),simp);\nnn : ev(2+rand(5),simp);\nqq : (aa*%e^(bb*%i))^nn;\n</code></pre> <p>An alternative, when many consecutive expressions need to be simplified, is the following:</p> <pre><code>simp : true;\naa : 2+rand(10);\nbb : 2+rand(10);\nnn : 2+rand(5);\nsimp : false;\nqq : (aa*%e^(bb*%i))^nn;\n</code></pre>"},{"location":"en/AbInitio/Authoring_quick_start_8/#unary-minus","title":"Unary minus","text":"<p>The particular circumstances will dictate if it is better to have lots of variables and use the display, or whether to turn <code>simp:false</code> and work with this.  A common problem arises with the unary minus. Consider a question text such as <code>Find {@aa@}+{@bb@}</code>. If &lt;code&gt;bb&lt;/code&gt;&amp;lt;0, the expression will be displayed as 3+-5, for example.  While simplification is \"off\", the display routines in Maxima will (often) cope with the unary minus in a sensible way.</p>"},{"location":"en/AbInitio/Authoring_quick_start_8/#next-step","title":"Next step","text":"<p>You should now be able to determine when it is sensible to turn off simplification. If you have been following this quick-start guide, you should already know some steps you can take to improve this question. For example, you could add more specific feedback, randomise your question and add question tests.</p>"},{"location":"en/AbInitio/Authoring_quick_start_8/#the-next-part-of-the-authoring-quick-start-guide-looks-at-setting-up-a-quiz","title":"The next part of the authoring quick start guide looks at setting up a quiz.","text":""},{"location":"en/AbInitio/Authoring_quick_start_9/","title":"Authoring quick start 9: setting up a quiz","text":"<p>1 - First question | 2 - Question variables | 3 - Feedback | 4 - Randomisation | 5 - Question tests | 6 - question library | 7 - Multipart questions | 8 - Simplification | 9 - Quizzes</p> <p>This part of the authoring quick start guide deals with setting up a Moodle quiz. The following video explains the process:</p>"},{"location":"en/AbInitio/Authoring_quick_start_9/#introduction","title":"Introduction","text":"<p>The purpose of this document is to provide a basic guide to some of the steps that need to be taken when setting up mathematics questions in a Moodle quiz.  We assume you are using STACK question which you have written or imported. Note, this guide risks duplicating the Moodle quiz documentation, which should also be consulted.</p>"},{"location":"en/AbInitio/Authoring_quick_start_9/#constructing-a-moodle-quiz","title":"Constructing a Moodle quiz","text":"<p>Once you have constructed a question bank (either by importing them or writing them yourselves) you can put them into a Moodle quiz. </p> <p>Included within the STACK sample materials is a \"Syntax quiz\", and it is recommended that you put a copy of this on your own page. This lets students can practice the syntax of how to enter answers into a STACK quiz before they try a specific quiz for your module, and also checks that they can read the mathematics on their machine.</p>"},{"location":"en/AbInitio/Authoring_quick_start_9/#question-behaviours","title":"Question behaviours","text":"<p>Question behaviours dictate how many attempts students are given and how penalties are distributed. There are a number of question behaviours available for a Moodle quiz. The most important are:</p> <p>Immediate feedback, which only lets students have one try at each question, but gives feedback either immediately after answering a question, or only when all questions are answered and submitted. This is useful for standard formative/summative quizzes.</p> <p>Deferred feedback, which only lets students have one try at each question, and does not give feedback until after some given date. This is useful for examinations and coursework quizzes where you don't want students to share worked solutions. </p> <p>Interactive with multiple tries, which lets students have a finite amount of tries to solve the question, with a hint being displayed after each. It deducts a penalty mark for each incorrect attempt. This is useful for formative quizzes where you want to give hints. Note that the amount of attempts is set as one more than the amount of  <code>Hints</code> given in each question. <code>Hints</code> are found under the  <code>Options</code> section when editing a question.  </p> <p>Adaptive, which lets the student have as many tries as they want, but deducts a penalty from the total score of the question for each time the student got the answer wrong. This is useful for testing questions and for informal practice quizzes.</p>"},{"location":"en/AbInitio/Authoring_quick_start_9/#setting-up-the-quiz","title":"Setting up the quiz","text":"<ol> <li>Go to the Moodle page and click <code>Turn editing on</code>.  </li> <li>Go to the block where you want to put the quiz or add an additional block and click <code>Add an activity or resource</code>, click <code>Quiz</code> and then <code>Add</code>.  </li> <li>Give the quiz a name and put any description you want in the Description box.  LaTeX can be used here if you want.  </li> <li>Click on <code>Timing</code> and fix the opening and closing times.  </li> <li>Click on <code>Grade</code> and fix the <code>Attempts allowed</code>.  E.g. you could use <code>Unlimited</code> for a practice quiz and <code>1</code> for a coursework quiz.  </li> <li>Click on  <code>Question behaviour</code> and choose your desired question behaviour, as discussed above.</li> <li>Under <code>Review options</code>, you can choose what students are allowed to see during or after the quiz. This includes options such as whether their answer is correct, their mark and feedback. We recommend turning off <code>Right answer</code> for both practice and coursework quizzes, and allowing <code>General feedback</code> (worked solution) to be on for a practice quiz, but off for coursework quizzes.</li> <li>Finish by clicking <code>Save and return to course</code>.  </li> </ol> <p>You can toggle whether students can see the quiz/topic by clicking <code>Edit</code> and <code>Show</code>.</p> <p>Note, the Moodle question bank will automatically create a category for the quiz.  It is sometimes sensible to put all the questions used in the quiz into this category, but note that you will only see the category if you have previously navigated to the quiz.</p>"},{"location":"en/AbInitio/Authoring_quick_start_9/#adding-questions","title":"Adding questions","text":"<p>Click on the quiz, and then <code>Edit quiz</code>.  </p> <ol> <li>Click <code>Add</code>  then click <code>from question bank</code>, select a category then one or more of the STACK questions you have created.</li> <li>Click <code>Add selected questions to the quiz</code> then click <code>Save</code> and return to the main module page.  </li> </ol> <p>To preview the quiz, click on it, then click <code>Preview quiz now</code>.</p>"},{"location":"en/AbInitio/Authoring_quick_start_9/#extra-time","title":"Extra time","text":"<p>If you have students who need extra time you need to set up <code>Groups</code> with these students in. Here is an example for a group of students who need 25% extra time.  </p> <ol> <li>Under <code>Course Adminstration</code>, click on <code>Users</code>, then <code>Groups</code>, then <code>Create group</code>.  </li> <li>Give the group a name, e.g. \"25% extra time\".  You can put more details of who the group is for in the <code>Group description</code> box.  Click <code>Save changes</code>. </li> <li><code>Add/remove users</code>, then click on the ID for a particular student for this group and click <code>Add</code> to put them in the group.  Repeat for each student who needs to be in this group.  </li> <li>Go back and click on the Moodle quiz. In the <code>Quiz Adminstration</code>, click on <code>Group overrides</code>, then click <code>Add group override</code>, choose the relevant group, set the appropriate <code>Time limit</code> for the quiz for that group and click <code>Save</code>. </li> </ol>"},{"location":"en/AbInitio/Authoring_quick_start_9/#viewing-results","title":"Viewing results","text":"<p>To see the students' results in for a particular quiz, go the the quiz, then under <code>Quiz adminstration</code> click on <code>Results</code>,  then <code>Grades</code>. This will let you see all attempts, with the overall grade and the grade for each question. You can choose to download the results in Excel here as well.</p>"},{"location":"en/AbInitio/Authoring_quick_start_9/#next-steps","title":"Next steps","text":"<p>You should now be able to work with quizzes in Moodle.</p> <p>This concludes the authoring quick start guide. The STACK documentation is comprehensive, and there are many things you might want to look at next. For example, you can</p> <ul> <li>learn about more input types,</li> <li>learn about more answer tests,</li> <li>add plots to your CASText fields,</li> <li>add support for multiple languages,</li> <li>learn about using equivalence reasoning,</li> <li>read about Curve sketching.</li> <li>look at more information on Maxima, particularly the Maxima documentation if you are not very familiar with Maxima's syntax and function names. A graphical Maxima interface like wxMaxima can also be very helpful for finding the appropriate Maxima commands easily.</li> </ul>"},{"location":"en/About/","title":"About the STACK Project","text":"<p>STACK is an assessment system for mathematics, science and related disciplines.  Students answer questions with a mathematical expression, such as a polynomial.  Since STACK uses a Computer Algebra System students are not limited to multiple choice.</p> <p>There is a large, and growing, community of STACK users in many languages.</p> <ul> <li>The main community website for STACK is https://stack-assessment.org/</li> <li>General community discussion takes place on https://stack-assessment.zulipchat.com/</li> <li>For specific platforms</li> <li>ILIAS users see https://docu.ilias.de/goto_docu_cat_4119.html.</li> <li>Moodle users see the Mathematics tools forum.</li> <li>A demonstration server is available in Edinburgh:  https://stack-demo.maths.ed.ac.uk/demo/</li> <li>STACK also has an API to provide STACK questions as a web service.</li> </ul> <p>The source code, and development discussion, is on github, with an additional ILIAS site.</p>"},{"location":"en/About/#main-stack-features","title":"Main STACK Features","text":""},{"location":"en/About/#equivalent-answers-of-the-right-form","title":"Equivalent answers of the right form","text":"<p>STACK can accept equivalent expressions, for example . STACK can also establish the form of an answer, for example if it is factorised.  STACK is designed to let teachers specify independent properties required in an answer.</p>"},{"location":"en/About/#ask-for-examples","title":"Ask for examples","text":"<p>The system can mark questions that ask the student to provide an example.</p> <pre><code>Give an example of a function f(x) with a minimum at x=0 and a maximum at x=2.\n</code></pre> <p>Rather than comparing the student's answer to the teacher's answer, STACK checks that the answer has the required properties.  Giving examples is a higher-order skill that is impossible to assess with conventional Computer Aided Assessment (CAA) systems.</p>"},{"location":"en/About/#intelligent-randomisation","title":"Intelligent randomisation","text":"<p>Randomising questions is invaluable in ensuring students can practice and reducing sharing of answers. The trick is to reverse-engineer the randomised question from a randomised answer. Computer algebra is invaluable to support this process.</p>"},{"location":"en/About/#give-feedback-and-partial-credit","title":"Give feedback and partial credit","text":"<p>Consider a question like: Give an example of a cubic polynomial with the following properties:</p> <ul> <li> p(0)=1,</li> <li> p(x)=0 at x=2 and at x=3.</li> </ul> <p>Here, STACK can check each condition separately on the student's answer and assign partial credit accordingly. If the student gave the answer p(x) = x^2-5x+6 for example, then STACK could reply: Your answer does have zeros at the required points but its value at zero is not equal to 1. You received 2 out of 3 points. Please try again. There are a variety of ways in which feedback can be given, including plotting the students' answer against the teacher's answer.</p>"},{"location":"en/About/#multipart-questions","title":"Multipart questions","text":"<p>STACK supports multipart questions, like the following:</p> <p>(a) differentiate x^2+5x with respect to x.</p> <p>(b) substitute x=5 into your answer.</p> <p>You can have follow-through marking for situations where, for example, the student enters a wrong expression to part (a), but correctly substitutes in values into their expression in part (b). Here, STACK can recognise the work the student put into part (b), even though their answer is different from the \"correct\" answer.</p>"},{"location":"en/About/#support-for-many-types-of-questions","title":"Support for many types of questions","text":"<p>STACK has a large number of inputs and answer tests to support the diverse needs of users across mathematics and science. This includes support for questions about numerical accuracy, significant figures and scientific units. You can also assess students' ability to reason line-by-line with equivalence reasoning. </p>"},{"location":"en/About/#further-information","title":"Further information","text":"<ul> <li>The main community website https://stack-assessment.org/</li> <li>The philosophy of STACK.</li> <li>Associated publications.</li> <li>The mathematics behind the STACK logo.</li> </ul>"},{"location":"en/About/Credits/","title":"Contributors to the STACK Project","text":"<p>More details of our development history are given in the development track.</p> <ul> <li>Chris Sangwin of the University of Edinburgh. STACK is the brainchild of Chris Sangwin.</li> <li>Tim Hunt and Tim Lowe of the Open University.</li> <li>Matti Harjula of Aalto University, Finland.</li> <li>Tim Lutz of the University of Edinburgh and the University of Education Heidelberg.</li> </ul> <p>Previous developers have included</p> <ul> <li>Anupama Sarjoshi</li> <li>Sal Mercuri</li> <li>John Beedell</li> <li>Simon Hammond</li> <li>Jonathan Hart</li> <li>Ben Holmes</li> <li>Maksim Kraev</li> <li>Mikael Kurula</li> <li>Matti Pauna</li> <li>Malthe Sporring</li> <li>Dan Williams</li> </ul> <p>STACK is an open source project and many others have made contributions of various sizes.</p>"},{"location":"en/About/Credits/#translation-of-the-stack-project","title":"Translation of the STACK Project","text":"<p>STACK is released in many languages, using Moodle's ATOS language system.</p> <ul> <li>EN: English (British), by Chris Sangwin (and others)</li> <li>FI: Finnish, by Matti Pauna</li> <li>SV: Swedish, by Mikael Kurula</li> <li>DA: Danish, by Malthe Sporring</li> <li>ES: Spanish, by Victor Hugo Huerta</li> <li>JA: Japanese, by Yasuyuki Nakamura and Takahiro Nakahara  </li> </ul> <p>German documentation was added in Jan 2019 by Eva Mix and Mario Josupeit of University of Cologne, Germany.</p> <p>Details of how to add language packs, translate STACK, and forthcoming translations, are given on the Language packs developers page.</p>"},{"location":"en/About/Credits/#other-implementations-and-projects","title":"Other implementations and projects","text":"<p>STACK has been ported to the plugin assStackQuestion for the Learning Management System ILIAS  by:</p> <ul> <li>Jesus Copado</li> <li>Fred Neumann</li> </ul> <p>This project received a lot of moral support from the ILIAS association and its product manager Matthias Kunkel, as well as funding from various institutions:</p> <ul> <li>Duale Hochschule Baden W\u00fcrttemberg</li> <li>Hochschule Bremen</li> <li>Helmut-Schmidt-Universit\u00e4t Hamburg</li> <li>Fachhochschule Aachen</li> <li>Hochschule Karlsruhe</li> <li>Fachhochschule M\u00fcnster</li> <li>Universit\u00e4t Freiburg</li> <li>Universit\u00e4t Erlangen-N\u00fcrnberg</li> <li>Universit\u00e4t zu K\u00f6ln</li> </ul>"},{"location":"en/About/Credits/#user-list","title":"User list","text":"<p>The following institutions made use of previous versions of STACK.  If you are actively using STACK and would like to be listed below then please contact the developers.</p> School of Mathematics, The University of Edinburgh The home of STACK. Contact Chris Sangwin. School of Mathematics and Statistics, The Open University, Contact Tim Hunt and Tim Lowe School of Science, Aalto University, Helsinki, Finland Contact Matti Harjula and Antti Rasila Department of Mathematics Education, Loughborough University Contact Ian Jones School of Informatics and Sciences, Nagoya University, Japan Contact Yasuyuki Nakamura Ja STACK Community Contact Ja STACK.org Polytechnic Institute of Leiria, Leiria, Portugal Contact Rui Paiva School of Computing, Information and Mathematical Sciences, The University of the South Pacific Contact Dhiraj Bhartu Gymnasium Himmelsth\u00fcr, Hildesheim, Deutschland Contact Frank Sch\u00fctte Universidad Michoacana de San Nicolas de Hidalgo Contact Victor Hugo Huerta e-MAIO project, Coimbra Institute of Engineering, Portugal Contact e_MAIO@isec.pt Maseno University, Kenya Contact Michael Oyengo IDEMS International Contact Santiago Borio ETH Z\u00fcrich, Switzerland Contact Meike Akveld, George Ionita, Andreas Steiger"},{"location":"en/About/License/","title":"STACK licences","text":"<p>The STACK source code is Licensed under the GNU General Public, License Version 3.</p> <p>The STACK documentation, contained in the source code subdirectories of <code>doc/</code>,  is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License, except those files in <code>doc/static</code> which have their own licences explicitly within the files themselves.</p> <p>The STACK sample questions and materials, contained in the subdirectories of samplequestions/, is Licensed under the Creative Commons Attribution-ShareAlike 4.0 International License.</p> <p>STACK imposes no requirements on users to choose a license for learning materials they write from scratch.  We are aware of open (e.g. Creative Commons), closed, and commercial uses of STACK materials.  Users remain responsible for respecting existing licences attached to shared learning materials.</p> <p>It is possible to embed other media inside STACK questions.  Users of STACK remain entirely responsible for complying with licenes for materials and media embedded inside STACK questions.  Please note that the GeoGebra's license does not match the STACK licence.</p>"},{"location":"en/About/License/#autoomath-project-2021-2023","title":"AutoOMath Project, 2021-2023","text":"<p>The creation of these resources has been (partially) funded by the ERASMUS+ grant program of the European Union under grant No. 2021-1-DE01-KA220-HED-000032031. Neither the European Commission nor the project's national funding agency DAAD are responsible for the content or liable for any losses or damage resulting of the use of these resources.</p>"},{"location":"en/About/Logo/","title":"The mathematics of the STACK logo","text":"<p>The STACK logo is based on the following problem.</p> <p>If you stack identical blocks one on top of the other, how far can it lean before it falls over?   You have a potentially unlimited supply of blocks.</p> <p>The answer is that there is no limit to how far it can lean!  A physical model is shown below.</p> <p></p> <p>This model was made by Dr John Bryant.</p>"},{"location":"en/About/Logo/#the-mathematics-of-this-problem","title":"The mathematics of this problem","text":"<p>To see why the STACK of blocks doesn't fall over assume that the width of each domino is  \"units\". Our strategy is this: at each stage we consider an existing balancing stack of n dominoes which has its centre of mass a distance c_n from its left-hand edge.</p> <p>Obviously c_n\\leq 2 for all n as the centre of mass is to be above the bottom domino! We then place this stack on top of a new domino a distance \\delta_n from the left of the domino. There will clearly be no toppling if</p> <p>  \\delta_n+c_n\\leq 2. </p> <p>That is to say we maintain balance if we don't displace the top stack so far that the displacement plus the distance of the centre of mass from the left pushes the centre of mass over the edge of the bottom domino - which has width 2. The new centre of mass of the whole stack of n+1 dominoes will be c_{n+1} from the left of the bottom domino where</p> <p>  c_{n+1} = \\frac{(\\delta_n+c_n)n+1}{n+1} \\text{ with } c_1=1. </p> <p>Using the first inequality the maximum displacement without toppling is \\delta_n=s-c_n. Combining this with the formula for c_{n+1} and solving for \\delta_n gives</p> <p>  \\delta_{n+1} = 2-c_{n+1} = 2-\\frac{(\\delta_n+c_n)n+1}{n+1} = 2-\\frac{(\\delta_n+2-\\delta_n)n+1}{n+1} = \\frac{1}{n+1} \\text{ with } \\delta_1=1.  </p> <p>So that for all n, \\delta_n = \\frac{1}{n}.</p>"},{"location":"en/About/Logo/#how-big-does-the-displacement-become","title":"How big does the displacement become?","text":"<p>The question becomes, what is the value of</p> <p>  1 +\\frac{1}{2} +\\frac{1}{3} +\\frac{1}{4} + \\cdots +\\frac{1}{N}= \\sum_{n=1}^N \\frac{1}{n}  </p> <p>for large N? If N\\rightarrow \\infty, this is a particularly famous infinite series - the harmonic series. Actually, this diverges. That is to say it is possible to make the sum as large as one would wish. To see this, we group the terms as follows,</p> <p>  \\sum_{n=1}^N \\frac{1}{n} = \\left(1+\\cdots+\\frac{1}{9}\\right) + \\left(\\frac{1}{10}+\\cdots+\\frac{1}{99}\\right) + \\left(\\frac{1}{100}+\\cdots+\\frac{1}{999}\\right) + \\cdots  </p> <p>  \\geq 9\\frac{1}{10} + 90\\frac{1}{100} + 900\\frac{1}{1000} + \\cdots  </p> <p>  = \\frac{9}{10}+\\frac{9}{10}+\\frac{9}{10}+\\cdots </p> <p>which shows that the series keeps getting larger as we continue to add terms. That is to say it does not converge.</p> <p>In terms of the domino problem: we can choose displacements \\delta_n so that (i) the stack does not topple over, and (ii) we can produce an arbitrarily large horizontal displacement. Bizarre indeed!</p>"},{"location":"en/About/Publications/","title":"Publications","text":"<p>STACK is a very popular online assessment system, used by many groups in a variety of languages.  STACK has been the subject of research, and has itself enabled research projects to take place. This page contains a selection of publications.  </p>"},{"location":"en/About/Publications/#publicity-materials","title":"Publicity materials.","text":"<p>We have a booklet of case studies, and a PDF flyer about the STACK project.</p> <p>We have a \"Getting started with STACK\" guide (Spanish).</p>"},{"location":"en/About/Publications/#computer-aided-assessment-of-mathematics","title":"Computer aided assessment of mathematics","text":"<p>Computer Aided Assessment of Mathematics, Chris Sangwin, Oxford University Press, 2013.</p> <p>This book provides an Introduction to Computer Aided Assessment using STACK as the main working example.</p>"},{"location":"en/About/Publications/#nakamura-2010","title":"Nakamura (2010)","text":"<p>Y. Nakamura, The STACK e-Learning and Assessment System for mathematics, science and engineering education through Moodle, Tokyo Denki University Press, 2010, (In Japanese) ISBN 978-4-501-54820-9.</p>"},{"location":"en/About/Publications/#papers-about-stack","title":"Papers about STACK","text":"<p>Proceedings of the 1st International STACK Conference can be found can be found on the open access publication server Zenodo here: https://zenodo.org/communities/stack</p> <p>These recent papers about STACK are a good place to start:</p> <ul> <li>C. J. Sangwin, R. Bickerton, R. (2023). Practical Online Assessment of Mathematical Proof, International Journal of Mathematical Education in Science and Technology}, 53(10) doi:10.1080/0020739X.2021.1896813.  </li> <li>C. J. Sangwin and I. Jones (2017). Asymmetry in student achievement on multiple choice and constructed response items in reversible mathematics processes. Educational Studies in Mathematics, 94:205-222.</li> <li>C. J. Sangwin and N. Kocher (2016). Automation of mathematics examinations. Computers and Education, 94:215-227.</li> </ul> <p>A comprehensive bibliography is available here: STACK bibliography, with the entries in BiBTeX format.</p>"},{"location":"en/About/The_philosophy_of_STACK/","title":"Philosophy of STACK","text":"<p>Online assessment can effectively assess and give feedback to a large number of students.  This frees up time that teachers would normally spend, and ensures consistent assessment.</p> <p>Traditional multiple choice questions have a number of limitations, including:</p> <ol> <li>Only finite answers are possible. The teacher can put in \"dummy responses\" for common mistakes and give feedback based on those mistakes, but it is impossible to give feedback on student errors outside the given examples.</li> <li>You can only assess lower-order skills. \"Give an example of...\" type questions are impossible.</li> <li>It encourages strategic learning, i.e. instead of solving the problem, students will think about how to \"trick the system\" and find the right answer.</li> <li>Question distortion is especially problematic in mathematics. You may ask students to integrate a complicated function, and then give a list of potential answers. Differentiating the answers to get the original expression is a much easier process, and sensible students are likely to take the easier route, which is not what we wanted the student to practice.</li> </ol> <p>The alternative is to use student-provided answer questions where the student's answer contains the content such as an algebraic expression. </p> <p>STACK was designed to use computer algebra to assess students' answers which are algebraic expressions.</p>"},{"location":"en/About/The_philosophy_of_STACK/#design-choices","title":"Design choices","text":"<p>Key design choices in STACK make it stand out.</p>"},{"location":"en/About/The_philosophy_of_STACK/#teachers-should-be-able-to-write-their-own-questions-with-minimal-coding-skill","title":"Teachers should be able to write their own questions, with minimal coding skill","text":"<p>Teachers should take responsibility for their assessments. When assessing students' answers, STACK asks teachers to focus on the properties of students' answers, such as \"algebraically equivalent to the teacher's answer\", \"factorised\", etc. </p> <ul> <li>Focusing on mathematical properties, such as equivalence, is a unique design feature of STACK.</li> </ul> <p>Teachers can then pick suitable answer tests in a potential response tree and give marks and feedback accordingly.  STACK does not require teachers to learn a coding language and assess students' answers by writing code such as :</p> <pre><code>If\n simplify(student_answer - teacher_answer) = 0\nthen\n  mark = 1,\nelse\n  mark = 0.\n</code></pre>"},{"location":"en/About/The_philosophy_of_STACK/#students-should-not-be-penalised-for-poor-computer-skills","title":"Students should not be penalised for poor computer skills","text":"<p>Online assessment should assess mathematics skills, not how well students know the specific syntax. For example, penalising a student for answering <code>sinx</code> instead of <code>sin(x)</code> is not fair.</p> <ul> <li>Separating validity from assessment is a key design feature pioneered by STACK.</li> </ul> <p>To ensure that students are marked for mathematical skills instead of computer skills, STACK separates \"validity\" and \"correctness\". When a student types an answer, it is interpreted by the CAS and a \"validation box\" is shown displaying how the student's answer is interpreted. This gives the student a chance to fix any syntax errors before their answer is marked.</p>"},{"location":"en/About/The_philosophy_of_STACK/#multipart-questions-should-be-possible","title":"Multipart questions should be possible","text":"<p>Multipart questions can be very helpful for students, for example to help guide a student through a new topic.</p> <ul> <li>STACK completely separates input and assessment with a unique and flexible design.</li> </ul> <p>A question can have unlimited input boxes, and unlimited potential response trees to handle the assessment. Each tree is not limited to a particular input, but instead has access to all the student's inputs. Hence, a tree assessing the correctness of part (b) of a question can use the student's answer to part (a) in its algorithm. This allows for follow-through marking, where a student be penalised for a wrong expression in part (a) but given credit for correctly substituting in values in part (b).</p>"},{"location":"en/About/The_philosophy_of_STACK/#stack-is-rich-in-features","title":"STACK is rich in features","text":"<p>STACK is designed to cover the needs of a large variety of users across mathematics and science.</p> <ul> <li>Questions can be randomised to ensure different students see different variants of a question.</li> <li>There are many different kinds of inputs. These are, for example, where the student enters a mathematical expression, or makes a true/false selection.</li> <li>Partial credit is possible when an expression only satisfies some of the required properties.</li> <li>Plots can be dynamically generated and included within any part of the question, including feedback in the form of a plot of the student's expression.</li> <li>Students can work line by line reasoning by equivalence until they have a final answer in the correct form. </li> <li>STACK supports working with significant figures and scientific units.</li> </ul>"},{"location":"en/About/The_philosophy_of_STACK/#stack-is-open-source","title":"STACK is open source","text":"<p>The problems faced by teachers, particularly in University, are the same the world over.  We want a system that encourages other developers to collaborate on improving STACK, but remaining free to use it in open or commercial settings.  </p> <ul> <li>STACK is the leading open source online assessment system for mathematics and STEM.</li> </ul> <p>The business model for STACK relies on institutions collaborating on the infrastructure, remaining free to use the resulting system as the please, including in commercially as needed.  </p> <p>The documentation for STACK is available under the  Creative Commons Attribution-ShareAlike 4.0 International License .</p>"},{"location":"en/Authoring/","title":"Authoring individual STACK questions","text":"<p>This section of the documentation provides reference of the authoring features of individual STACK questions.</p>"},{"location":"en/Authoring/#stack-question-structure","title":"STACK question structure","text":"<p>A  \"question\" is the basic object in the system. The following table shows the fields which make up a question, with links to the documentation for each one.</p> Name Details Question name Names a question. Question variables These are potentially random variables which can be used to generate a question. Question text This is the question the student actually sees. General feedback The worked solution is only available after an item is closed. Question note Two randomly generated question variants are different, if and only if the question note is different.  Use this field to store useful information which distinguishes variants. Inputs The inputs are the things, such as form boxes, with which the student actually interacts. Potential response trees These are the algorithms which establish the mathematical properties of the students' answers and generate feedback. Options Many behaviours can be changed with the options. <p>The authoring documentation also covers topics on:</p> <ul> <li>Input types</li> <li>Answer tests.</li> <li>Question blocks,</li> <li>Information on the types of feedback in STACK,</li> </ul>"},{"location":"en/Authoring/#other","title":"Other","text":"<ul> <li>Creating multilingual questions.</li> <li>Frequently asked questions.</li> </ul>"},{"location":"en/Authoring/Accessibility%E2%80%8B/","title":"Accessibility\u200b for Question Authors","text":"<p>It is important that we make course materials and content as accessible as possible. Higher education institutions have a legal responsibility to ensure their content meets accessibility standards. This page gives guidelines and resources on what we can do to improve accessibility. Authoring accessible STACK questions is simpler than writing accessible materials from scratch, particularly in comparison to PDF LaTeX documents.</p> <ul> <li>When authoring STACK questions, we are able to take advantage of the work done by the Moodle community, detailed in their policies page.</li> <li>When displaying mathematics in STACK, we use LaTeX rendered using MathJax. Details of what accessibility features this support are given on the MathJax website.</li> <li>STACK itself uses very simple CSS and HTML form fields, which is considered a gold standard for accessibility, due to user adaptability.</li> </ul> <p>However, this is not the whole picture. Colleagues must still consider accessibility when authoring questions.</p> <p>Please consider/check the following key points: * Images:   * If inserting a screenshot, consider if you could format the information  you wish to communicate using HTML, e.g. code snippets and mathematical equations.   * Add meaningful alternative text to all non-text objects, in particular images. This can be done using <code>&lt;img src=\"/path/to.img.jpg\" alt=\"Alt text\"&gt;</code> in HTML, or <code>![Alt text](/path/to/img.jpg)</code> in markdown.   * It is important that this text conveys the information that the figure would have if viewed. If there is text in the image then this must be given. Do not paraphrase this text. See useful guidance on alternative text. * Links: Please add text to links rather than a full <code>https://</code> link, as it slows down screen reader users and makes navigation using verbal commands very difficult. However, avoid link text such as 'here' or 'read more', make each link disenable from other links on the page, and make it as clear as you can where the link leads just from the text. See useful link text guidance. * Colour:   * do not use colour alone to convey meaning e.g. in a plot.   * Ensure your text has contrast levels of at least 4:5:1, this can be easily checked with the WebAIM contrast checker. * JSXGraphs:   * JSXGraphs are figures so must have alternative text. To add a description to a JSXGraph, use the <code>description</code> attribute in the board setup. For example:   <code>description: 'Graph of the function f(x) = x squared'</code>.   * Pay specific attention to refering exclusively to colour in a graph.   * Consider users may be using keyboard navigation, be careful with interactive assesseed tasks requiring the user to click on the board to add points. Add an <code>add point</code> button.</p> <p>Detailed guidance on digital accessibility is given by the WCAG 2.1 Accessibility Guidelines.</p>"},{"location":"en/Authoring/Author_FAQ/","title":"Author FAQ","text":""},{"location":"en/Authoring/Author_FAQ/#which-version-of-stack-do-i-have","title":"Which version of STACK do I have?","text":"<p>If you navigate to the front page of the STACK documentation on your server then you can find the version number of the STACK plugin at the bottom of the page.  If your site is <code>https://maths.assessment/site</code> then the URL of the STACK documentation is probably <code>https://maths.assessment/site/question/type/stack/doc/doc.php</code>.  We distribute the documentation with the source code so you can check the STACK features you have available on your site by referring to this version of the documentation (rather than the docs on https://docs.stack-assessment.org/ which documents the latest release.).</p> <p>The version number is given in the form used by all Moodle plugins, e.g. <code>2022052300</code> which is basically a release date of the plugin you are using.</p>"},{"location":"en/Authoring/Author_FAQ/#how-can-i-report-a-bug-or-make-a-suggestion","title":"How can I report a bug or make a suggestion?","text":"<p>General community discussion takes place on https://stack-assessment.zulipchat.com/</p> <p>The source code, and development discussion, is on github, with an additional ILIAS site.</p>"},{"location":"en/Authoring/Author_FAQ/#can-i-write-questions-in-multiple-languages","title":"Can I write questions in multiple languages?","text":"<p>Yes, see support for multiple languages.</p>"},{"location":"en/Authoring/Author_FAQ/#what-is-latex-where-can-i-get-help-learning-latex","title":"What is LaTeX? Where can I get help learning LaTeX?","text":"<p>LaTeX is a document preparation system. For STACK questions we only need some simple LaTeX, so please do not be put off. In particular STACK only really makes use of LaTeX for mathematical markup, and does not use the document structure tags.</p> <p>Useful LaTeX resources: * An introduction for those totally new to LaTeX, Andy Roberts' Absolute Beginners. * The mathematics environment guidance. * Details about LaTeX are available from .</p> <p>Note that some of the more complex examples will not work on STACK. Just keep things simple.</p>"},{"location":"en/Authoring/Author_FAQ/#can-i-add-html-to-cas-enabled-text","title":"Can I add HTML to CAS-enabled text?","text":"<p>Yes, you can use HTML tags as usual.  For example, you can use these tags to insert references to images etc.</p> <p>Do not include arbitrary <code>&lt;script&gt;</code> tags with JS code.  Future versions of STACK will not support cross-site scripting.</p>"},{"location":"en/Authoring/Author_FAQ/#how-can-i-test-out-stack-specific-functions-in-a-maxima-session","title":"How can I test out STACK specific functions in a Maxima session?","text":"<p>Details of how to load STACK functions into a command line Maxima session are given in the STACK-Maxima sandbox.</p>"},{"location":"en/Authoring/Author_FAQ/#why-does-a-maxima-function-not-work-in-stack","title":"Why does a Maxima function not work in STACK?","text":"<p>Not all Maxima functions are enabled by STACK, for obvious security reasons. It may be that your function belongs to a library which STACK does not load by default. Do you need to use Maxima's load command to use it? If so, you will need to ask your system administrator or the developers to add a load command so that this library becomes available.</p> <p>Some libraries are optional and may not be included by your local installation.</p> <p>You should also be aware that there are also a number of functions defined by STACK which are not standard Maxima functions. The command you need may well not be enabled since you should use one STACK provides instead.</p>"},{"location":"en/Authoring/Author_FAQ/#how-can-i-change-which-maxima-functions-stack-allows","title":"How can I change which Maxima functions STACK allows?","text":"<p>This is a job for a developer.  Please contact us.</p>"},{"location":"en/Authoring/Author_FAQ/#how-can-i-use-subscripts-in-stack","title":"How can I use subscripts in STACK","text":"<p>More information on subscripts is given in the atoms and subscripts section of the more general Maxima documentation.  Also see the inputs extra option consolidatesubscripts.</p>"},{"location":"en/Authoring/Author_FAQ/#how-can-i-confirm-my-students-answer-is-fully-simplified","title":"How can I confirm my student's answer is fully simplified?","text":"<p>The philosophy of STACK is to establish properties of the student's answer.  \"Simplify\" is an ambiguous notion. For example,  is simpler than 2^0 but 2^{2^{10}} is probably simpler than writing the integer it represents in decimals.  Everyone would agree that x+2 is simpler than \\frac{x^2-4}{x-2}, but we might argue that the first expression below is simpler.</p> <p>  \\frac{x^{12}-1}{x-1} =  x^{11}+x^{10}+x^9+x^8+x^7+x^6+x^5+x^4+x^3+x^2+x+1. </p> <p>Simplify is often taken implicitly to mean \"the shortest equivalent expression\", but this issue is often not discussed.</p> <p>To avoid these problems, STACK expects teachers to specify the properties they want.  For example, if you want the factored form you should test for this, not describe it as \"simplified\".</p> <p>In STACK a very useful test is equivalence up to associativity and commutativity of the basic arithmetic operations of addition and multiplication.  This is often what teachers need in this case.</p>"},{"location":"en/Authoring/Author_FAQ/#why-doesnt-maxima-give-int1xxlogabsx","title":"Why doesn't Maxima give <code>int(1/x,x)=log(abs(x))</code>?","text":"<p>Because  \\int \\frac{1}{x}dx = \\log(|x|)  is OK on either the negative or positive real axis, but it is not OK in the complex plane. There is a switch that controls this, however.</p> <pre><code>(%i199) integrate(1/x,x);\n(%o199) log(x)\n\n(%i200) integrate(1/x,x), logabs : true;\n(%o200) log(abs(x))\n</code></pre> <p>Furthermore, the integration answer test will allow teachers to accept either <code>log(x)</code> or <code>log(abs(x))</code> (or both) from a student.</p>"},{"location":"en/Authoring/Author_FAQ/#why-dont-i-get-anything-back-from-the-cas","title":"Why don't I get anything back from the CAS?","text":"<p>Debugging questions can be difficult.  We have not written a full parser, so we cannot trap all the errors.  If all else fails, you may need to examine exactly the expression which is being sent to Maxima.</p> <p>To do this go to</p> <pre><code>Site administration -&gt; Plugins -&gt; Question types -&gt; STACK\n</code></pre> <p>Ensure that <code>CAS debugging</code> is checked.</p> <p>Then, you should get error reporting.  As an example navigate to</p> <pre><code>Site administration -&gt; Plugins -&gt; Question types -&gt; STACK -&gt; Healthcheck\n</code></pre> <p>There you can see an example of an expression sent to Maxima.  Expressions such as this can be copied into the STACK-Maxima sandbox and evaluated.  The errors returned here might help track down the problem.</p> <p>The issue is normally that you have tried to create a syntactically invalid maxima command.  For example <code>[a,,b]</code> will crash Maxima.  Since we have not created a full parser, all syntax errors like this are not yet trapped.</p>"},{"location":"en/Authoring/CASText/","title":"CASText","text":""},{"location":"en/Authoring/CASText/#introduction","title":"Introduction","text":"<p>CASText is CAS-enabled text.  CASText is simply HTML into which LaTeX mathematics and CAS commands can be embedded. These CAS commands are executed before the question is displayed to the user. Use only simple LaTeX mathematics structures. Only a small part of core LaTeX is supported.</p> <p>Many of the fields in a STACK question, such as the question text, are of this type.</p> <p>Information about Basic HTML is available elsewhere.</p> <p>Currently STACK does not process the LaTeX itself.  It is displayed on the user's browser in a variety of ways, such as using MathJax.   If you do not know how to use LaTeX, some simple examples are given in the author FAQ.</p> <ul> <li>Anything enclosed between <code>\\( .... \\)</code> symbols is treated as an inline equation, as is the case with normal LaTeX.</li> <li>Anything enclosed between matching <code>\\[</code> and <code>\\]</code> is treated as a displayed equation, in the centre of a new line.</li> <li>We do not support the use of dollar symbols such as <code>$...$</code> and <code>$$...$$</code> for denoting LaTeX mathematics environments.  See the notes on currency below and also the page on MathJax for more information.</li> <li>Don't use LaTeX text formatting features such as <code>\\\\</code> outside equations, instead use the HTML versions.</li> <li>Anything enclosed between <code>{@</code> and <code>@}</code> delimiters is evaluated by the CAS and replaced by the LaTeX representing the result.  Some notes.</li> <li>By default this is displayed as an inline equation.  This is analogous to using LaTeX symbols. Note however, that you don't need to use <code>\\({@ stuff @}\\)</code>, and that <code>{@ stuff @}</code> is sufficient.</li> <li>To get a displayed equation centred on a line of its own, you must use <code>\\[{@ stuff @}\\]</code>, as in LaTeX.</li> <li>The outer <code>{}</code> characters of <code>{@ stuff @}</code> will be left in the output to ensure that the output is considered as a single group by LaTeX.</li> <li>Anything enclosed between <code>{#</code> and <code>#}</code> delimiters is evaluated by the CAS and replaced by the Maxima representing the result. Basically, raw values usable in other tools or examples on how to input the value.</li> <li>If the Maxima variable <code>x</code> is a string then <code>{@x@}</code> produces the string contents without quote marks or LaTeX environment, while <code>{#x#}</code> produces the string contents enclosed by quote marks.</li> <li>If you want comma separated values without the list brackets then use <code>{@stack_disp_comma_separate( list )@}</code>.  This function turns a list into a string representation of its arguments, without braces.</li> <li>Multiple CAS expressions may appear in a single LaTeX equation, as needed.  For example <code>\\[  \\frac{@p@}{@q@} \\]</code>.  Note that many problems are best solved at the level of the CAS, e.g. by defining a variable <code>p/q</code> in the CAS, not at the level of display.  This is a design decision which needs experience to resolve efficiently in each case.  For an example of this, see the example showing working.</li> </ul> <p>Here is an example</p> <pre><code>The derivative of {@sin(1/(1+x^2))@} is\n\\[ \\frac{\\mathrm{d}}{\\mathrm{d}x} \\sin \\left( \\frac{1}{x^2+1} \\right) = {@diff(sin(1/(1+x^2)),x)@} \\]\nYou can input this as &lt;code&gt;{#diff(sin(1/(1+x^2)),x)#}&lt;/code&gt;\n</code></pre>"},{"location":"en/Authoring/CASText/#Variables","title":"Variables","text":"<p>CASText may depend on variables previously defined in the question variables field.</p> <p>Where the CASText appears in the fields of a potential response trees, the variables in the feedback variables may also be included.</p> <p>To control whether or not the CAS expressions are simplified, see the details about selective simplification.</p>"},{"location":"en/Authoring/CASText/#question_text","title":"Question text","text":"<p>The question text what the student actually sees.  This was called \"question text\" in previous versions.</p> <p>It is a slightly modified form of CAStext.  To allow a student to answer a question you must include an inputs in the question text. For example, students need a box into which their answer will be put.</p> <p>To place an input into the question enclose the name of the Maxima variable to which the student's answer is assigned between inside the following tag.  If the student's answer is going to be assigned to the variable <code>ans1</code> then use the tag <code>[[input:ans1]]</code>.  You will also be required to place a corresponding tag to indicate the position of any validation feedback (whether or not this is shown to the student): <code>[[validation:ans1]]</code>.  You can use any legitimate variable name.</p> <ul> <li>When the question is created this is replaced with the appropriate input.</li> <li>When the student answers, this variable name is available to each potential response trees.</li> <li>Inputs are created and deleted by adding appropriate tags to the question text.  Therefore, beware if you delete the tags as this will also delete the input from the question.</li> </ul> <p>To place another potential response tree in the question just choose a sensible name and add in a tag <code>[[feedback:prt1]]</code>.</p> <ul> <li>These tags are replaced by appropriate feedback as necessary.  Note, if you add the feedback to the question text this will always be shown by the STACK question, regardless of the quiz settings.  You may prefer to place the tags in the \"specific feedback\" block of the editing form.  Availability of the specific feedback is controlled by the Moodle quiz settings.  There is some compromise here between the ability to position the feedback tags anywhere in the question text (e.g. next to a particular input) and control over when it is shown.  This is most difficult in questions with many parts.  For a single part question we recommend you use the specific feedback block.</li> <li>Tags can be moved anywhere within the question text.</li> <li>Do not place feedback tags within LaTeX equations!</li> <li>PRTs are created and deleted by adding appropriate tags to the question text.  Therefore, beware if you delete the tags as this will also delete the PRT from the question, which may result in lost work.</li> <li>Some sites use a database which is not case sensitive (!), so please ensure tags differ by more than case sensitivity.  E.g. avoid <code>[[input:ans_m]]</code> and <code>[[input:ans_M]]</code> in questions.  Similarly with feedback tags.  Because most databases are case sensitive we do not check for this issue.</li> </ul>"},{"location":"en/Authoring/CASText/#general_feedback","title":"General feedback/Worked solution","text":"<p>General feedback (called \"worked solution\" in previous versions) is shown to the student after they have attempted the question. Unlike feedback, which depends on the response the student gave, the same general feedback text is shown to all students.</p> <p>The general feedback may depend on any question variables, but may not depend on any of the inputs. While this design decision is restrictive, it is a deliberate separation of feedback which should be done via potential response trees, from a model solution to this problem which can be written before a question is deployed.</p>"},{"location":"en/Authoring/CASText/#currency","title":"CASText and currency","text":"<p>It is common to want to use the dollar sign for currency.  However, this conflicts with the use of the dollar sign for delimiters for mathematics.  For this reason we discourage the use of dollars to delimit mathematics in STACK.</p> <p>If you are using dollars for currency then you must protect them with a backslash, i.e. <code>\\$</code>, otherwise the CASText validation will fail.</p>"},{"location":"en/Authoring/CASText/#facts-and-hints","title":"Facts and hints","text":"<p>STACK has an in-built formula sheet which is used for facts and hints\".  Standard text can be added using the fact sheet</p>"},{"location":"en/Authoring/CASText/#reference-materials","title":"Reference materials","text":"<p>HTML and LaTeX are needed for authoring STACK questions, and some basic reference materials is give elsewhere.</p> <ul> <li>Some basic HTML examples.</li> <li>Some basic LaTeX examples.</li> <li>There is a specific page for actuarial notation.</li> </ul>"},{"location":"en/Authoring/CASText/#castext-generating-functions","title":"CASText generating functions","text":"<p>If a CASText area is to include several copies of repetitive content, for instance several versions of some text (or a SVG graphic) containing different parameters, it is possible to define a CASText generating function within the Question variables using the STACK function <code>castext</code>.</p> <p>For example, within the Question variables section, define</p> <pre><code>explanation(x,y):=castext(\"Substituting {@x@} into the expression gives {@y@}.\");\n</code></pre> <p>This can then be used several times within any CASText area:</p> <pre><code>[[ comment ]] Generated text [[/ comment ]]\n{@explanation(a,b)@}\n{@explanation(c,d)@}\n</code></pre>"},{"location":"en/Authoring/CASText/#notes","title":"Notes","text":"<ul> <li>The argument of castext must be a single atomic string, not a reference to one but a static string value.</li> <li>Since Maxima does not require new lines to be escaped, new lines can be started within the <code>castext</code> string argument.</li> <li>Care needs to be taken with any quotation marks within the castext argument. For HTML attributes within such text, use <code>'...'</code> .</li> <li>Two castext objects can be joined with <code>castext_concat()</code></li> </ul>"},{"location":"en/Authoring/CASText/#google-charts","title":"Google Charts","text":"<p>The Google charts API can be used to create a URL based on the random variables.</p> <p></p>"},{"location":"en/Authoring/Error_trapping/","title":"Error trapping","text":"<p>How to I trap errors generated from a student's answer?</p> <p>Errors are generated for a number of reasons.  Mostly, they are important and should not be ignored!  Normally, students should not be penalised if a question \"does not work\" because the PRT generated an error.  Any runtime error during traversing a PRT will cause an error.  This error will stop further execution of the tree, and students will see a runtime error message.  This will be flagged in the response summary as <code>[RUNTIME_ERROR]</code>.</p> <p>A student's answer can generate mathematical errors for a number of reasons, but the most common is evaluating a function outside its mathematical domain.  Common elementary examples are</p> <ol> <li>Division by zero.</li> <li>Evaluating  at points like \\pi/2.  (Try <code>tan(%pi/2)</code> in Maxima).</li> </ol> <p>Sometimes you need to trap and ignore errors like this in the student's answer, or create a \"guard clause\" to decide if part of a PRT should be executed or not.</p> <p>Sometimes these are inevitable and need to be ignored.</p> <p>If one of the feedback variables throws an error then this will not stop the PRT executing.  If there is an error, this will be flagged in the response summary as <code>[RUNTIME_FV_ERROR]</code> (fv here means feedback variables).  You can, and should use the feedback variables to trap any errors you would like to condone.  E.g. you could define the following in the feedback variables.</p> <pre><code>sa1:errcatch(tan(ans1));\n</code></pre> <p>If <code>ans1:%pi/2</code> then <code>sa1</code> will be the empty list <code>[]</code>.  Otherwise, <code>sa1</code> will be the list containing the result, and you can use <code>first(sa1)</code> in a PRT.</p> <p>To trap a runtime error, or create a guard clause, you do need extra node in your tree (e.g. is <code>sa1</code> empty) or an <code>if</code> statement in your feedback variables.  The default is to show errors, so if you choose to test for and condone errors you need extra clauses.</p>"},{"location":"en/Authoring/Errors/","title":"Authoring validation errors","text":"<p>This document aims to explain certain errors that may appear during authoring, specifically during validation/saving of a question.  We are constantly improving the error trapping for question authors and so some of these errors might be new and appear during upgrades, and break, previously functional materials.</p> <p>In some cases we have good reasons for now preventing actions which may have been permitted in the past. For some situations one can do things differently to lift the suspicions of the validation system.</p> <p>Summary of advice.</p> <ol> <li>Do not attempt to redefine function names or constants which are already defined as part of Maxima.</li> <li>Avoid using the same name for functions and variables.</li> <li>Avoid complex substitutions.</li> <li>Do not attempt to redefine the variables which are the names of inputs.</li> <li>Use <code>subst</code> or <code>at</code> to do substitutions instead of <code>ev</code>.</li> </ol>"},{"location":"en/Authoring/Errors/#forbidden-functions-and-variables","title":"Forbidden functions and variables","text":"<p>Some functions affecting the underlying system are forbidden to protect the environment, others are forbidden due to excessive load, and finally some have been disabled due to the way they return their values. Likewise, some variables/constants representing the state of the underlying system have been either marked as forbidden to access or to modify. Use other names if this was just a collision of identifiers, otherwise this is just the way it is.</p>"},{"location":"en/Authoring/Errors/#redefining-internal-functions","title":"Redefining internal-functions","text":"<p>Some functions are part of the core functionality and the system relies on their behaviour. For example redefining what <code>append()</code> does for lists would have significant effects around the system, this is why (re)defining functions with some specific names is forbidden. You are free to use other names for your functions. Note that not all internal functions or functions they use are blocked by this, they might get blocked in the future or some might be left as something that can be redefined to tune the logic.</p> <p>We suggest you do not attempt to redefine function names or constants which are already defined as part of Maxima.</p>"},{"location":"en/Authoring/Errors/#substitutions-unclear-or-otherwise","title":"Substitutions unclear or otherwise","text":"<p>Should you do substitutions of values in your code and the target of the substitution is an identifier that is later used as a function-name, things may become difficult. Avoid using the same name for functions and variables. Also if you use complex means to construct the substitutions themselves the system may need to assume that all possible identifiers in the expression that the substitutions are applied to are being targeted by unknown values, this can be avoided by avoiding complex construction of the substitution itself.</p> <p>Note, these issues are now much rarer after the security system changed in 4.4. Yo should not even see these errors with the new system.</p>"},{"location":"en/Authoring/Errors/#example-1","title":"Example 1","text":"<pre><code>v:1; /* particular case of rand([1,2]) */\ntrig:[sin,cos][v];\nsub:[(sin(x))^2=1-(cos(x))^2,(cos(x))^2=1-(sin(x))^2][v];\nf:(trig(x))^3;\ndf:diff(f,x);\ndf_simp:subst(sub,df);\n</code></pre> <p>This produces the error message</p> <p>The function name \"sin\" is potentially redefined in unclear substitutions. The function name \"diff\" is potentially redefined in unclear substitutions.</p> <p>The issue is that <code>sub</code> is a complicated expression here, so the validation system is not able to check that this code is not doing something suspicious.</p> <p>It may be worth trying to use <code>ev</code> rather than <code>subst</code> - for this example, the question works again if we change the final line to the following:</p> <pre><code>df_simp:ev(df, sub);\n</code></pre>"},{"location":"en/Authoring/Errors/#example-2","title":"Example 2","text":"<pre><code>solution : rhs(ode2(eqn,y,x));\nvars : delete(x,listofvars(solution));\n\nTAns11 : subst([vars[1]=A,vars[2]=B],solution);\nTAns12 : subst([vars[2]=A,vars[1]=B],solution);\n</code></pre> <p>Here the error messsages will claim that pretty much everything that goes into <code>solution</code> is potentially redefined in unclear substitutions. What the code above does is that it solves a differential equation with CAS and then asks the CAS for the names of the constants being used. Depending on the shape of the equation there might be more than one but in this case there are always exactly two of them. <code>%k1</code> and <code>%k2</code>, if there were only one it would probably get called <code>%c</code> so there is a reason for checking what they are.</p> <p>Why the example asks for those constants names is because the author has chosen to force the student to use <code>A</code> and <code>B</code> as the constants and constructs different correct answers for the two ways of selecting the order of the constants. The problem arises from the substitution of the constants which now finds the names of them from a list (<code>vars</code>) that is not directly visible to the validation system. There are two ways forward from this. Firstly, the question could use the SubstEquiv test that allows any names for those constants to be used and then just confirms that the correct ones were used if that matters, however then the teachers answer might look silly with those CAS-style constants so you would still need to replace them. Secondly, one can hard-code the names of the constants, in this case they are always the same so that should not be a problem:</p> <pre><code>solution : rhs(ode2(eqn,y,x));\n\nTAns11 : subst([%k1=A,%k2=B],solution);\nTAns12 : subst([%k2=A,%k1=B],solution);\n</code></pre>"},{"location":"en/Authoring/Errors/#use-of-the-students-answer","title":"Use of the students answer","text":"<p>Since 4.3 you have been forbidden from writing to the variable storing the students answer, feel free to simply store whatever you wanted to store in any other valid variable. You are now also forbidden from using the students input directly as a function-name, if you need to do so rewrite the logic as a \"switch\", unfortunately this also applies to MCQ inputs:</p> <pre><code>/* Not like this. */\nval: ans1(4);\n\n/* Instead write it like this to restrict the set of possible names. */\nif is(ans1=sqrt) then\n val: sqrt(4)\nelse if(ans1=sin) then\n val: sin(4)\n...\n\n</code></pre>"},{"location":"en/Authoring/Errors/#ev-in-44","title":"<code>ev</code> in 4.4","text":"<p>The new security model of STACK 4.4 modifies the order of execution in such a way that <code>ev</code> does not quite match the behaviour of <code>ev</code> in Maxima. For most use cases you will not notice this but there are situations where things won't work as expected. In general, these are the situations currently known:</p> <ol> <li>Placing <code>expand</code> inside of <code>ev</code> and doing a substitution in the same <code>ev</code>:  ```  / This might lead to the expansion happening before the substitution. /  simp:false;  tmp:ev(expand(x^3),x=x+1);</li> </ol> <p>/ Instead do the substitution before the expansion. /  tmp: ev(x^3,x=x+1);  tmp: ev(expand(tmp));  <code>``  2. Substitutions in general may happen too late if the target expression contains calls requiring security validation. The recommended method for dealing with this is to do the substitutions using</code>subst<code>or</code>at<code>and applying any evaluation related modifications with</code>ev<code>separately.  3. Use of the</code>noeval` evaluation flag might not work, in general this flag is unlikely to be useful in the context of STACK and if you believe you need it look into nounification and other means of doing similar things.</p> <p>In some cases, it is possible to simply add <code>eval</code> as an extra flag to the <code>ev</code>-call, however this is only possible if all substitutions in the call are such that the LHS of the substitution is not present in the RHS.</p> <p>Do note that all this also applies to evaluation flags.</p> <pre><code>/* These are equivalent: */\ntmp: a+1,a=2;\ntmp: ev(a+1,a=2);\n</code></pre>"},{"location":"en/Authoring/Errors/#some-recomendations","title":"Some recomendations","text":"<p>The validation of certain things evaluates dependency graphs of identifiers so if you can keep those graphs small things tend to work faster. To do so avoid redefining the same variable if at all possible and just create a new variable when needed, i.e. do not reuse some <code>tmp</code>-var for all the calculations, if you do then the graph of that variable will become quite large and that may slow things down. Many small graphs tend to be faster to deal with than few large ones and a large graph may mean that features of node in the graph may block other nodes from doing certain things, e.g. being used as function identifiers.</p> <p>Likewise, avoid reusing same variable names for multiple different types of things in the question, i.e. if <code>A</code> is a matrix let it stay as such and don't turn it into a list or a function if you wish the validation during saving and first execution after import/upgrade to be fast.</p> <p>If you are using <code>local()</code> to define local-scope variables always call it as the first thing in a <code>block</code> (if you use the list of identifiers logic then you should not use <code>local()</code> in the same block) or in a <code>lambda</code> (after arguments). This allows the graph building to identify the point of disconnection of the graphs and to separate the scopes. Calling <code>local</code> after any variables have been used will confuse the logic and we do not want to invest into dealign with that special case.</p>"},{"location":"en/Authoring/Expression_tree_display/","title":"Trees","text":"<p>It is sometime very useful to display the tree structure of an algebraic expression to a student.</p> <p>For example, the HTML code for the tree of  is given below.</p> <pre><code>&lt;ul class='algebratree'&gt;\n  &lt;li&gt;&lt;code&gt;+&lt;/code&gt;\n  &lt;ul&gt;\n    &lt;li&gt;&lt;span class='atom'&gt;\\(1\\)&lt;/span&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;code&gt;*&lt;/code&gt;\n      &lt;ul&gt;&lt;li&gt;&lt;span class='atom'&gt;\\(2\\)&lt;/span&gt;&lt;/li&gt;\n      &lt;li&gt;&lt;code&gt;^&lt;/code&gt;\n      &lt;ul&gt;\n        &lt;li&gt;&lt;span class='atom'&gt;\\(x\\)&lt;/span&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;span class='atom'&gt;\\(3\\)&lt;/span&gt;&lt;/li&gt;\n      &lt;/ul&gt;\n      &lt;/li&gt;\n    &lt;/ul&gt;\n    &lt;/li&gt;\n  &lt;/ul&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n</code></pre> <p>This is displayed as follows.</p> <p> <ul> <li><code>+</code> <ul> <li>\\(1\\)</li> <li><code>*</code> <ul><li>\\(2\\)</li> <li><code>^</code> <ul> <li>\\(x\\)</li> <li>\\(3\\)</li> </ul> </li> </ul> </li> </ul> </li> </ul> </p> <p>The tree is displayed in pure HTML using unordered lists <code>&lt;ul&gt;</code> and styled with CSS via the <code>&lt;ul class='algebratree'&gt;</code>.  Therefore, such trees could be written in HTML by hand.</p> <p>STACK provides a function <code>disptree</code> to generate the above tree diagram from a Maxima expression.  For example, use <code>{@disptree(1+2+pi*x^3)@}</code> in castext.  This function generates a string representing the tree of that expression, and is not an inert function.</p> <p>STACK provides a function <code>treestop</code> to stop traversing the tree, and use the LaTeX of the subexpression instead.  For example in <code>disptree(1/treestop(1+x^2)=4)</code> STACK produces a tree but one node has 1+x^2, rather than also showing the subtree of this expression as well.  This gives the user some control over the complexity of tree and what to display.</p> <p> <ul> <li><code>=</code> <ul> <li><code>/</code> <ul> <li>\\(1\\)</li> <li>\\(1+x^2\\)</li> </ul> </li> <li>\\(4\\)</li> </ul> </li> </ul> </p> <p>Note, because of the HTML generated, and the LaTeX inside the tree HTML, you cannot embed these trees inside displayed LaTeX using <code>\\[ ... \\]</code>.  The only way to display a tree is using <code>{@disptree(....)@}</code> as an isolated mathematical expression.</p>"},{"location":"en/Authoring/Expression_tree_display/#examples","title":"Examples","text":"<p>To see the tree structure of the binomial theorem (with <code>simp:false</code>)</p> <p><code>{@disptree(apply(\"+\",map(lambda([ex],binomial(n,ex)*x^ex), ev(makelist(k,k,0,5),simp))))@}</code></p>"},{"location":"en/Authoring/Expression_tree_display/#educational-value-of-trees","title":"Educational value of trees","text":"<p>Seeing the explicit tree structure of an expression has significant educational value at certain moments.  E.g. students want to type <code>x=a or b</code> as an answer. The following illustrates why they need to write <code>x=(a or b)</code> or <code>x=a or x=b</code> instead!</p> <pre><code>p1:x=a nounor b;\np2:x=(a nounor b);\n</code></pre> <p>with the following castext: <code>{@p1@}: {@disptree(p1)@}  &lt;br/&gt; {@p2@}: {@disptree(p2)@}</code> (with <code>simp:false</code>).</p>"},{"location":"en/Authoring/Expression_tree_display/#styles","title":"Styles","text":"<p>In order to correctly display list items within the <code>&lt;ul class='algebratree'&gt;</code> list, additional styling is needed.  All list items must be styled with one of the following tags.  The Maxima code ensures that operator nodes are styled slightly differently from atoms/terminal nodes. Some operators, such as integrals and sums, have special style rules applied.</p> <ol> <li><code>&lt;code&gt;</code> is used to display operators as html code.</li> <li><code>&lt;span class='op'&gt;</code> is used to display operators as LaTeX.</li> <li><code>&lt;span class='atom'&gt;</code> is used to display atoms and terminal nodes.</li> <li><code>&lt;span class='cell'&gt;</code> has minimal style, and is not used by the Maxima code.  This is intended for general use.</li> </ol> <p>The code does its best to respest the LaTeX output.  If you create special tex rules using <code>texput</code> you also have to tell the tree generation code to look for this rule.  STACK has a set <code>tree_texlist</code> of operators to which special rules apply.  To add a rule use the following.</p> <pre><code> texput(boo, \"\\\\diamond\");\n tree_texlist:union(tree_texlist,{\"boo\"});\n</code></pre> <p>Then, the operator <code>boo</code> will be typeset as \\diamond in tree output, as well as in tex output.  E.g. try the following castext: <code>{@disptree(boo(a,b))@}</code>.</p>"},{"location":"en/Authoring/Feedback/","title":"Feedback","text":"<p>The purpose of STACK is to assess students' answers to mathematical questions, and on the basis of the properties we establish to assign feedback.</p> <p>This document describes the ways STACK provides feedback to students. It will not go into much depth on creating the feedback, which is documented under potential response trees.</p>"},{"location":"en/Authoring/Feedback/#types-of-assessment","title":"Types of assessment","text":"<ul> <li>Formative assessment is to support and inform students' learning.   Feedback here could be qualitative, e.g. written comments tailored to the student's answer and designed to help them improve their performance on the task.</li> <li>Summative assessment is to establish the achievement of the student.   In mathematics, summative feedback is most often quantitative,  either a mark or a percentage.</li> <li>Evaluative assessment is to measure the effectiveness of the teaching or the   assessment of students.  Such assessments could have quality enhancement or quality audit functions.   See reporting. The ability to automatically generate data about an individual student or   across a cohort is one particular strength of CAA, potentially enabling regular, detailed evaluative assessment.</li> </ul> <p>In STACK multi-part questions there is a complete separation between two important components.</p> <ol> <li>a list of inputs</li> <li>a list of potential response trees</li> </ol> <p>Specific feedback is associated with each input and each potential response tree.  Typically, it is placed in the <code>Specific feedback</code> section, as that gives Moodle more control over when it is shown. However, the feedback tags can be positioned anywhere within the question text.</p>"},{"location":"en/Authoring/Feedback/#validation","title":"Validation","text":"<p>Before an input is available to a potential response trees, it must be validated.  In particular, at each attempt, each input is assigned a status.</p> <ol> <li>NULL, which indicates the field has not been previously given a value by the student,    or the field is now empty since the student has deleted an answer.</li> <li>new, indicates an answer has not been validated or assessed, but has been changed from a previous attempt.</li> <li>invalid, which indicates that the field is not valid.</li> <li>valid, a response which is valid but not scored.</li> <li>score.  In this case, the answer is available to any potential response tree requiring it.</li> </ol> <p>Normally a student will view a displayed form of their expression and submit it again.  This default behaviour is inappropriate for multiple choice/selection interactions, and can be changed for each input using the option \"Student must verify\".  Whether the student's answer is echoed back and shown is controlled by a separate option \"Show the validation\".  Validation errors are always shown.</p> <p>Whether a string entered by the student is valid or invalid does not depend on the question. I.e. there should be a consistent mechanism for what constitutes a syntactically valid expression. However, in practice things are not quite so clean!  Some input options do affect validity, such as forbid floats.   Some symbols, e.g.  and j change meaning in different contexts, e.g. \\sqrt{-1} or vector components.  See details about options.</p>"},{"location":"en/Authoring/Feedback/#potential-response-trees","title":"Potential response trees","text":"<p>Each potential response tree returns three outcomes:</p> <ol> <li>a numerical score,</li> <li>text for the students,</li> <li>an answer note for use by the teacher during reporting.</li> </ol> <p>These correspond approximately to summative, formative and evaluative functions of assessment respectively. The general feedback (known as worked solution in previous versions) is fixed and may not depend on the student's answers. Hence it is not considered to be feedback to the student's work in the strict sense.  However, it remains a very useful outcome for students.</p> <p>The amount of feedback available in each question is governed by the question behaviours.</p>"},{"location":"en/Authoring/Feedback/#numerical-score","title":"Numerical score","text":"<p>Each potential response tree calculates a numerical score between 0 and 1.  This is then multiplied by the question value for each potential response tree.  The final score for the question is the sum over all potential response trees.</p> <p>The numerical scores are assembled by traversing each potential response tree.</p> <ul> <li>Each branch of each node can add, subtract or set an absolute, score.</li> <li>The outcome at the end should be between 0 and 1.  If the score, s, lies outside this range it is taken to be  \\min(\\max(s,0),1)  to bring it within range, then it is scaled by multiplying by the question value for that potential response tree.</li> <li>A \"penalty\" may also set in the potential response tree for this attempt. Normally the penalty field in each branch of the potential response tree is empty, in which case the question level penalty value is used.  However, these fields are useful to remove any penalty for this outcome, by setting it to zero explicitly.</li> <li>After the whole tree has been traversed, if the score is 1 then the penalty is always assigned to 0.</li> </ul> <p>STACK adjusts the score for each potential response tree, based on the number of valid, different attempts.  The penalty scheme deducts from the score a small amount (default is 0.1=10\\%) for each different and valid attempt which is not completely correct.   It is designed to reward persistence and diligence when students initially get a question wrong, but they try again.</p> <p>It works in the following way. For each attempt k, we let</p> <ul> <li> s_k be the score from the potential response tree.</li> <li> p_k be the \"penalty\" as follows:</li> <li>If s_k=1 then p_k=0, else</li> <li>If the penalty p set in the last branch traversed before exiting the potential response tree is not <code>NULL</code> then p_k=p, else</li> <li> p_k is the penalty set in the question options, (default 0.1=10\\% ).</li> </ul> <p>The default penalty scheme takes the maximum score for each attempt, so that by accruing further penalties a student may never be worse off.</p> <p>To be specific</p> <ol> <li>Let  (s_i,p_i)  for i=1,\\cdots n be the list of scores and penalties for a particular potential response tree, for each different valid attempt.</li> <li>The score for attempt k is defined to be</li> </ol> <p>  \\text{Question value} \\times \\max\\left\\{ s_i-\\sum_{j=1}^i p_j,\\ i=1,\\cdots k \\right\\}. </p> <p>Notice that this is purely a function of a list of (score, penalty) pairs.</p> <p>The score for that attempt is the sum of the marks for each potential response tree once penalties have been deducted from each tree.</p>"},{"location":"en/Authoring/Feedback/#text-for-the-student","title":"Text for the student","text":"<p>The text-based feedback for students is a concatenation of the following elements.</p> <ul> <li>Answer test feedback. Many of the answer tests generate feedback of their own. This can be suppressed using the quiet option. While this feedback is often not needed, it would be very difficult for the teacher to re-create this.</li> <li>Bespoke feedback. Each branch of the potential response trees generates some feedback.</li> <li>Generic feedback. Once the potential response trees has been traversed and all feedback assigned, the score is used to generate some generic feedback. If the raw score equals 0 then the default feedback is Incorrect answer.   If the raw score equals 1 then the default feedback is Correct answer, well done. Otherwise the generic feedback is Your answer is partially correct.  These strings can be modified in the options.</li> </ul>"},{"location":"en/Authoring/Inclusions/","title":"Inclusions","text":"<p>STACK provides a mechanism for sharing code between questions.  For example, you can include small libraries of Maxima functions, dedicated to specific topics, in the question variables.</p> <p>There is a tension between (i) reusing libraries of functions between questions and (ii) the self-contained material principle present in the future proof guidelines.  This is an advanced topic. </p> <p>Technical note: Currently, inclusions within inclusions are not supported, due to loop detection and security validation reasons.</p>"},{"location":"en/Authoring/Inclusions/#inclusions-life-cycle","title":"Inclusions life-cycle","text":"<p>For all current types of inclusions the inclusion happens at the time of question compilation, which means that the source will be fetched when the question gets compiled and will stay in the cached compilation product.  Compilation happens during the first use of the question after it has been saved or the cache has been purged.</p> <p>The inclusion logic will not track changes to the external source material.  If one wants to fetch it again one must re-compile the question, either by purging the caches or by editing the question.</p> <p>During export we export only the source address.  The exported material will only work if the address is accessible at the end that imports it.</p>"},{"location":"en/Authoring/Inclusions/#inclusions-within-text","title":"Inclusions within text","text":"<p>The simpler inclusion type is the CASText2 include-block, which will simply place CASText2-code from a given address at the blocks location. Note that one may need to be careful with the format of the context and included code, the include logic assumes that the code is of the same format as the context, so if your included content is in Markdown-format including it directly to HTML-context may cause trouble.</p> <p>Typical use case would be to have a JSXGraph or GeoGebra plotting logic that expect that certain variables contain parameters for plotting and one would then simply make sure that one would populate those parameters before inclusion of the plotting logic for example like this:</p> <pre><code>First plot the first plot with the values defined earlier.\n[[include src=\"http://example.com/fragments/myplot.txt\"/]]\n\nThen include the same plotting logic but change the parameters to plot something else.\n[[define plot_fun=\"theotherfun\" plot_param1=\"something\"/]]\n[[include src=\"http://example.com/fragments/myplot.txt\"/]]\n\n</code></pre> <p>As the included content can be of a different format (Markdown etc.) than the context into which it gets included it is recommended that the included content defines its own format. For example, wrapping itself in one of the new format controlling blocks <code>[[moodleformat]]</code>, <code>[[htmlformat]]</code> or <code>[[markdownformat]]</code>, thus allowing whatever format content to be included within another formats content. Note, that at this time identification of math-mode is not quite ready to understand all of these context switches.</p>"},{"location":"en/Authoring/Inclusions/#inclusions-within-cas-logic","title":"Inclusions within CAS-logic","text":"<p>You can also include code into keyvals, i.e. question-variables or into feedback-variables. This type of an inclusion will act just as if written directly by the question author at that place in the code. If one writes this type of an inclusion within an if-statement it will simply get written open within an if-statement, the <code>if</code> will only decide if it executes, but it will still take that space and bandwidth.</p> <p>The included material must follow all the rules of normal STACK keyvals.</p> <ol> <li>Large amounts of code will affect performance.  The internal Maxima code is pre-compiled but question variables are interpreted at runtime.</li> <li>All the identifiers bound in included code will subject to checks just as if you typed them in.</li> <li>Identifiers in your code will be marked as forbidden-words for the students. So particular care should be taken when choosing identifiers in such shared logic between questions.  Do not use names a student might need to type in another, un-related, question!</li> <li>Code is loaded when you save the question, not when a student uses the question.  Hence code is cached in the question.  Updates to an external library will therefore not affect existing questions.  That cache will not invalidate unless you (a) update the STACK plugin (which clears all cached/compiled questions), (b) save the question (which again downloads the code).</li> </ol> <p>Note that we do not do \"tree-shaking\" at this point to remove unnecessary code.  If you include a massive library of functions that you do not use the question will still have to load those functions into the CAS and that may take some time.  If you have libraries, used in many questions, please consider contributing these to the core of STACK.</p> <p>To include external CAS code call the <code>stack_include()</code> - function with a string argument.  The argument must be a raw string, containing the URL of the code.  You cannot reference a variable containing such a string. For example,</p> <pre><code>a: rand(3)+2;\n/* Load logic to tune the presentation. */\nstack_include(\"http://example.com/fragments/mytexputrules.txt\");\n/* Load some special randomisation functions. */\nstack_include(\"http://example.com/fragments/mymatrixrand.txt\");\nm: mymatrix_rand_integer_invertible(a);\n</code></pre> <p>You may not use evaluation flags with <code>stack_include()</code> while the code included may have them the inclusion call cannot be used to apply flags to all the included content.</p> <p>The function <code>stack_include_contrib()</code> will load the files contained in the STACK maxima contrib folder in the master branch in github. In particular the argument of <code>stack_include_contrib()</code> has this URL prepended: <code>https://raw.githubusercontent.com/maths/moodle-qtype_stack/master/stack/maxima/contrib/</code></p> <p>Hence, the following are completely equivalent</p> <pre><code>stack_include(\"https://raw.githubusercontent.com/maths/moodle-qtype_stack/master/stack/maxima/contrib/validators.mac\");\nstack_include_contrib(\"validators.mac\");\n</code></pre> <p>Notes.</p> <ol> <li>We will try to keep files in the contrib folder small, and stable.</li> <li>We intend to move commonly used contributed code into the core in due course.  At that point we will localise language strings for automatic translation.</li> <li>Please contact the developers about naming conventions.  For example, external validators should start the function name with <code>validator_</code>.</li> <li>If you wish to use the libraries locally, on your server, prepend the file name with <code>contribl://</code>, e.g. <code>stack_include(\"contribl://matchlib.mac\");</code> will load the local file, not the file on github.  This is mostly for local development, before code is pushed to the master branch.  We advise against this for live questions.</li> </ol>"},{"location":"en/Authoring/Inclusions/#sandbox-testing","title":"Sandbox testing","text":"<p>Note, that <code>stack_include()</code> and has no Maxima-side equivalent so you cannot simply copy-paste your question-variables into Maxima to debug things. You will need to manually do that inclusion.</p> <p><code>stack_include_contrib()</code> will load the packages from the local STACK files, when you set up the sandbox. Make sure you have the latest code in your sandbox as you may have stale versions of contributed (and other core) files on your local machine.</p>"},{"location":"en/Authoring/Languages/","title":"Producing multilingual content","text":"<p>Multilingual content can be developed using two systems.</p> <ol> <li>The multilang-filter that comes with Moodle.</li> <li>STACK's own language blocks (recommended).</li> </ol> <p>Please note that the TinyMCE editor considers paragraph tags (<code>&lt;p&gt;..&lt;/p&gt;</code>) inside any span tags (e.g. <code>&lt;span lang=\"en\" class=\"multilang\"&gt;...&lt;/span&gt;</code>) to be invalud. The TinyMCE editor will potentially \"clean up\" (i.e. ruin) your multilingual content if using both the Moodle multilang filter and TinyMCE(as of June 2024).  This is a known issue, and one reason we recommend against using TinyMCE for editing STACK content. (It does nasty things to Javascript content as well).</p>"},{"location":"en/Authoring/Languages/#using-the-built-in-castext-block-in-stack","title":"Using the built-in castext block in STACK","text":"<p>In STACK 4.4 we made it simpler to mix languages in the CAS logic, for example MCQ-labels.</p> <p>The logic includes a special language-code <code>other</code> which will be used if no matching language can be found. We also support defining multiple language codes as comma separated lists. The order of languages is defined by the order they appear in the question-text. </p> <p>The block is used like this:</p> <pre><code>[[lang code='fi']]...Teksti suomeksi...[[/lang]]\n[[lang code=\"en,other\"]]...Text in English...[[/lang]]\n</code></pre> <p>It is also usable in inline CASText2:</p> <pre><code>lbls: [castext(\"[[lang code='en']]Like this {@...@}[[/lang]]...\"),...];\n</code></pre> <p>Nested language blocks will not get displayed unless they have matching codes, so you may not use <code>en</code> wrapper and <code>en_gb</code>, <code>en_us</code> within it to fine tune things. Only one code will match in the whole question so if the VLE uses <code>en_us</code> and it is found in the question at any place then that is the only code that matches.</p> <p>If you are dealing with localisation in JSXGraph or MCQ-label style situations you might want to use the new <code>lang</code>-blocks, but do note that while they do not require any additional filters to be installed they still require that the system has language-packs and the users have the ability to select the language.</p>"},{"location":"en/Authoring/Languages/#translating-text-in-pictures","title":"Translating text in pictures","text":"<p>The STACK built-in castext block will translate tags embedded into inline SVG images in documents.  Here is a very basic SVG example with language blocks embedded.</p> <pre><code>&lt;svg height=\"210\" width=\"500\"&gt;\n  &lt;title&gt;[[lang code='en,other']]Circles and triangles[[/lang]][[lang code='no']]Sirkler og trekanter[[/lang]]&lt;/title&gt;\n  &lt;polygon points=\"200,10 350,90 160,210\" style=\"fill:white;stroke:black;stroke-width:2\" /&gt;\n  &lt;circle cx=\"239\" cy=\"94\" r=\"55\" stroke=\"red\" stroke-width=\"1\" fill=\"white\" /&gt;\n  &lt;text x=\"200\" y=\"80\" fill=\"red\"&gt;[[lang code='en,other']]Circumference[[/lang]][[lang code='no']]Omkrets[[/lang]]&lt;/text&gt;\n&lt;/svg&gt;\n</code></pre> <p>Remember to add alternative text as the title or description for the inline SVG using the <code>&lt;title&gt;</code> and <code>&lt;desc&gt;</code> tags.  The title or description can also be translated.</p>"},{"location":"en/Authoring/Languages/#using-the-moodle-filter-multilang","title":"Using the Moodle filter multilang","text":"<p>STACK questions can be easily localized for different languages using the multi-language content filter. http://docs.moodle.org/en/Multi-language_content_filter.  That is to say, a single question can exist in multiple languages and the user can choose the language they use.</p> <p>This page deals with translating text within individual questions. It does not deal with translating the Moodle and STACK interface. See the page on Language packs and translating STACK.</p>"},{"location":"en/Authoring/Languages/#installation-of-the-moodle-multilang-filter","title":"Installation of the Moodle multilang filter","text":"<ol> <li>Your site administrator must enable the Moodle multi-language content filter.</li> <li>The multi-language content filter must be applied before the MathJax filter, otherwise strange results will occur.</li> </ol>"},{"location":"en/Authoring/Languages/#authoring-questions","title":"Authoring questions","text":"<p>The filter works by searching the document for all multilang blocks and displaying the block that matches the selected language.</p> <pre><code>&lt;span lang=\"en\" class=\"multilang\"&gt;...Text in English...&lt;/span&gt;\n&lt;span lang=\"fi\" class=\"multilang\"&gt;...Text in Finnish...&lt;/span&gt;\n</code></pre> <p>If no block matching the user's language can be found, the block encountered first is displayed. In the above example the English block would be displayed if the user's language was not either English or Finnish. The English block should be the first block in the documents in order for it to be the default language in case no matching language can be found.</p> <p>When translating STACK assignments into different languages, it should be noted that the question text field may not contain multiple instances of input or validation fields of the same name. This means that the input and validations fields must be placed outside multilang blocks in order for them to be visible in all the available languages. The following example will illustrate this.</p> <p>STACK would not accept the following question text:</p> <pre><code>&lt;span lang=\"en\" class=\"multilang\"&gt;\n   &lt;p&gt;\n      Let \\( {\\bf a} = ({@a@}, {@b@}) \\). Find a vector \\({\\bf b}\\neq {\\bf 0}\\) such that it is perpendicular to \\(\\mathbf{a}\\)\n   &lt;/p&gt;\n   &lt;p&gt;\n      \\({\\bf b} = \\Big(\\)[[input:ans1]]\\(,\\) [[input:ans2]]\\(\\Big)\\)\n   &lt;/p&gt;\n   &lt;div&gt;\n      [[validation:ans1]]\n   &lt;/div&gt;\n   &lt;div&gt;\n      [[validation:ans2]]\n   &lt;/div&gt;\n&lt;/span&gt;\n\n&lt;span lang=\"fi\" class=\"multilang\"&gt;\n   &lt;p&gt;\n      Olkoon vektori \\( {\\bf a} = ({@a@}, {@b@}) \\). Anna vektori \\({\\bf b}\\neq {\\bf 0}\\) siten, ett\u00e4 vektorit ovat kohtisuorassa toisiaan vastaan.\n   &lt;/p&gt;\n   &lt;p&gt;\n      \\({\\bf b} = \\Big(\\)[[input:ans1]]\\(,\\) [[input:ans2]]\\(\\Big)\\)\n   &lt;/p&gt;\n   &lt;div&gt;\n      [[validation:ans1]]\n   &lt;/div&gt;\n   &lt;div&gt;\n      [[validation:ans2]]\n   &lt;/div&gt;\n&lt;/span&gt;\n</code></pre> <p>But this question text causes no issues:</p> <pre><code>&lt;span lang=\"en\" class=\"multilang\"&gt;\n   &lt;p&gt;\n      Let \\( {\\bf a} = ({@a@}, {@b@}) \\). Find a vector \\({\\bf b}\\neq {\\bf 0}\\) such that it is perpendicular to \\(\\mathbf{a}\\)\n   &lt;/p&gt;\n&lt;/span&gt;\n&lt;span lang=\"fi\" class=\"multilang\"&gt;\n   &lt;p&gt;\n      Olkoon vektori \\( {\\bf a} = ({@a@}, {@b@}) \\). Anna vektori \\({\\bf b}\\neq {\\bf 0}\\) siten, ett\u00e4 vektorit ovat kohtisuorassa toisiaan vastaan.\n   &lt;/p&gt;\n&lt;/span&gt;\n\n&lt;p&gt;\n   \\({\\bf b} = \\Big(\\)[[input:ans1]]\\(,\\) [[input:ans2]]\\(\\Big)\\)\n&lt;/p&gt;\n&lt;div&gt;[[validation:ans1]]&lt;/div&gt;\n&lt;div&gt;[[validation:ans2]]&lt;/div&gt;\n</code></pre>"},{"location":"en/Authoring/Languages/#multilang-in-prts-with-several-nodes","title":"multilang in PRTs with several nodes","text":"<p>The multilang filter also works for the feedback texts in PRT nodes. However, as reported in Issue #940, STACK simply concatenates these texts, such that multiple multilang instructions from different PRT nodes can end up right next to each other. In such a situation, the multilang filter cannot determine that the author meant all of them to be printed. For the Moodle multilang filter, what STACK returns will look like this:</p> <pre><code>&lt;span lang=\"en\" class=\"multilang\"&gt;English feedback from PRT node 1&lt;/span&gt;\n&lt;span lang=\"de\" class=\"multilang\"&gt;German feedback from PRT node 1&lt;/span&gt;\n&lt;span lang=\"en\" class=\"multilang\"&gt;English feedback from PRT node 2&lt;/span&gt;\n&lt;span lang=\"de\" class=\"multilang\"&gt;German feedback from PRT node 2&lt;/span&gt;\n</code></pre> <p>The multilang filter will assume all of these belong together and will only display the feedback from PRT node 2. To fix this, you can use anything which tells the multilang filter to start a new block, like enclosing the <code>&lt;span&gt;</code> tag in a paragraph (<code>&lt;p&gt;</code>), using a line break (<code>&lt;br&gt;</code>), a non-breaking space (<code>&amp;nbsp;</code>), or a zero-width space (<code>&amp;#x200b0;</code>).</p>"},{"location":"en/Authoring/Languages/#changing-stacks-language","title":"Changing STACK's language","text":"<p>If you have written a multilingual question, and a student wants to see it in a certain language, they have to change their preferred language. In Moodle, this is done by clicking on their profile, and then going to <code>Preferences</code>, <code>Preferred language</code> and selecting the language. This will not only change the language of all question text (where multilingual blocks have been used), but also the language of the default Moodle and STACK interface (if this translation is available). The specific language pack has to be installed on your server by the server administrator to allow this. More information is available in the developer docs under Translating STACK.</p>"},{"location":"en/Authoring/Languages/#language-within-the-cas","title":"Language within the CAS.","text":"<p>STACK defines a variable <code>%_STACK_LANG</code>, which should be a string reflecting the language preference of the user of the question.  The default is <code>\"en\"</code>.  We also have a predicate function <code>is_lang(code)</code> which returns <code>true</code> if the current language set is <code>code</code>.</p> <p>A related issue is decimal separators.  An internal variable <code>stackfltsep</code> holds either <code>\".\"</code> or <code>\",\"</code> to reflect the current option for the decimal separator option.</p>"},{"location":"en/Authoring/Languages/#further-reading","title":"Further reading","text":"<p>The STACK project has been translated to many languages. Information on specific languages, installing language packs and how to contribute to translations can be found on the language packs page.</p>"},{"location":"en/Authoring/Potential_response_trees/","title":"Potential response trees","text":"<p>The potential response tree is the algorithm which establishes the mathematical properties of the student's answer and assigns outcomes. For examples of how to use this, see the entry on improving feedback in the quick start guide.</p>"},{"location":"en/Authoring/Potential_response_trees/#when-is-the-tree-used","title":"When is the tree used?","text":"<p>Each potential response tree relies on one or more of the inputs. STACK automatically detects which elements are needed in the answer tests or feedback variables. The first time a student submits an input it is validated. The second time it is submitted it is available for assessment by a potential response tree. Only when all inputs upon which a tree relies are valid and submitted will the tree be traversed.</p>"},{"location":"en/Authoring/Potential_response_trees/#before-the-tree-is-traversed","title":"Before the tree is traversed","text":"<p>Each potential response tree can set Maxima's level of simplification. Before the tree is traversed the feedback variables are evaluated. The feedback variables may depend on the values of the question variables and the inputs. The values of these variables are available to the answer tests and all castext fields within the tree, for example the feedback could be built using these variables.</p> <p>Notes:</p> <ol> <li> <p>You cannot define a feedback variable with the same name as an input.  For example, if your input is <code>ans1</code> then it is tempting to define a feedback variable <code>ans1:exdowncase(ans1)</code> to ensure it is in lower case.  Do not do this!  Please use a different variable name.  This is because in some situations the answer test will choose to take the raw value of <code>ans1</code> exactly as the student typed it.  Any redefinition will interfere with this process.</p> </li> <li> <p>If one of the feedback variables throws an error then this will not stop the PRT executing.  If there is an error, this will be flagged in the response summary as <code>[RUNTIME_FV_ERROR]</code> (fv here means feedback variables).  See notes on error trapping for advice on how to use this.</p> </li> <li> <p>It is possible for the feedback variables to halt the execution of the potential response tree (just as if one of the inputs were blank/invalid).  However, this is an advanced use-case.  See below for details.</p> </li> </ol>"},{"location":"en/Authoring/Potential_response_trees/#traversing-the-tree","title":"Traversing the tree","text":"<p>A potential response tree (technically an acyclic directed graph) consists of an arbitrary number of linked nodes we call potential responses.</p> <p>In each node two expressions are compared using a specified answer tests, and the result is either <code>true</code> or <code>false</code>. A corresponding branch of the tree has the opportunity to each of the following.</p> <ol> <li>Adjust the score, (e.g. assign a value, add or subtract a value).  Scores can be floating point numbers or variables defined elsewhere (e.g. question variables/feedback variables).</li> <li>Add written feedback specifically for the student</li> <li>Generate an \"answer note\", used by the teacher for evaluative assessment</li> <li>Nominate the next node, or end the process.</li> <li>Any runtime error during traversing the tree will cause an error.  This error will stop further execution of the tree, and students will see a runtime error message.  This will be flagged in the response summary as <code>[RUNTIME_ERROR]</code>.  If you have statements likely to throw an error you should evaluate them in the feedback variables first. See notes on error trapping for advice on how to use this.</li> </ol>"},{"location":"en/Authoring/Potential_response_trees/#outcomes","title":"Outcomes","text":"<p>The outcomes are</p> <ol> <li>The raw score</li> <li>The penalty for this attempt</li> <li>Feedback to the student (see below for full details)</li> <li>An answer note</li> </ol>"},{"location":"en/Authoring/Potential_response_trees/#Question_value","title":"Question Value","text":"<p>The potential response tree itself is expected to return a numerical raw score between  and 1. This number is multiplied by the question value before being returned to the student as feedback or recorded in the database.</p>"},{"location":"en/Authoring/Potential_response_trees/#Answer_note","title":"Answer note","text":"<p>The answer note is a tag which is key for reporting purposes. It is designed to record the outcome of each answer test and the unique path through the tree. This is automatically generated, but can be changed to something meaningful. When looking for identical paths through the tree we have to do so, regardless of which random numbers were selected in this variant of the question given to a particular student.  Hence, this string may not depend on any of the variables.</p> <p>The answer note is the concatenation of each answer note from the answer tests and then the corresponding true/false branch.  This note provides a record of the result of applying each test and the route taken through the tree.</p> <p>This field is given a default value automatically and is used for reporting students' work.</p> <p>This field may not be empty and for each node in a tree the string must be unique.</p> <p>Do not use <code>;</code>, <code>|</code> characters in your answer note.  These characters are used to split the response summary in the reporting scripts.</p>"},{"location":"en/Authoring/Potential_response_trees/#scores-and-penalties","title":"Scores and penalties","text":"<p>A score is generated by each potential response tree.  Because the tree is only traversed when all inputs are valid, the score is only generated for a valid attempt.</p> <p>If a score is generated it is based only on the current values of the inputs.  This means that it is not based on either (1) previous values of the inputs, or (2) the number of previous attempts.  (Requests have been made to enable attempt number to be available, but this has not been implemented yet.)</p> <p>If a score is generated then a penalty is also generated. The penalty system is designed to encourage students to make repeated attempts in a formative setting.  For example, a student is asked to find   \\int x^2, \\mathrm{d}x.</p> <p>Attempt 1:   x^3/3.  Score =0, Penalty =0.1, Feedback: \"You have missed a constant of integration.\"</p> <p>Attempt 2:   x^3/3+c.  Score =1, Penalty =0, Feedback: \"Well done.\"</p> <p>Overall, the potential response tree returns the current score minus total penalties so far, in this example 0.9.  This is multiplied by the \"Question value\" set in the potential response tree.  These are summed across all potential response trees.</p> <p>In this example, some colleagues would prefer to give partial credit for missing a constant of integration rather than zero marks and a penalty.  In a formative setting, where students have an opportunity to have another attempt, the penalty system has been found to be an effective way to encourage students to have another attempt and to read the feedback.  In an examination, where no feedback is available and so further attempts are not made, different choices need to be made and partial credit would be more appropriate than a zero mark.</p> <ul> <li>The penalty is given a default value in the question.  This is a mandatory field; the default for STACK is 0.1.</li> <li>Penalties are cumulative, but the student will be given the maximum possible mark.  I.e. while they accumulate penalties they are never worse off by repeatedly attempting the question.  In particular, if the student in the above example makes another attempt and scores 0 they will retain their mark of 0.9.  This is to encourage students to have another go in a formative setting.  STACK generates a list of penalty adjusted scores for each attempt, and takes the maximum.</li> <li>The penalty can be assigned a different value in the nodes of the potential response tree. This means, e.g., the teacher can assign a cumulative penalty for a particular answer.</li> <li>The penalties are also controlled at a quiz level by the \"question behaviours\" mechanism for the quiz.  Hence, if you set the behaviour as \"Adaptive mode (no penalties)\" the penalty assigned will be ignored when the question is used by students in the quiz.</li> </ul>"},{"location":"en/Authoring/Potential_response_trees/#formative-potential-response-trees","title":"Formative potential response trees","text":"<p>The outcomes of score, penalty, feedback and note are always produced.  Normally, whether this information should be shown to a student is a function of the quiz, and in Moodle the question behaviour.  It should not be set at the level of an individual question.</p> <p>There are rare, but important, situations where we need a purely formative PRT.</p> <p>E.g. Imagine a question with inputs A and B.</p> <ol> <li>Input A has a dedicated PRT to establish if it is correct.</li> <li>Input B has a dedicated PRT to establish if it is correct.</li> <li>There is an additional PRT which depends on both A &amp; B.  This gives formative feedback to the student, e.g. \"try a more interesting combination of answers next time!\" but is of no consequence to the correctness of A &amp; B.</li> </ol> <p>With a formative potential response tree, there is no general feedback such as \"Correct answer well done\".  There is never a mark (and marks for this PRT do not contribute to the question, or completeness of an answer).</p>"},{"location":"en/Authoring/Potential_response_trees/#response-tree-feedback-feedbackstyle","title":"Response tree feedback: feedbackstyle","text":"<p>The feedback created by PRTs has the following parts concatenated together.</p> <pre><code>[Generic feedback] [Runtime errors] [PRT generated feedback] [Score ?]\n</code></pre> <p>The <code>[Generic feedback]</code> is a question level option, e.g. \"Standard feedback for correct\", to provide consistency across a question. By default the <code>[Generic feedback]</code> contains both an initial symbol, and a language sentence.  The current \"correct\" default is</p> <p> Correct answer, well done.</p> <p>How PRT feedback is displayed is controlled by the PRT option <code>feedbackstyle</code> as follows.  Note the Generic feedback might include the symbol, if you retain the default.</p> Value Options Symbol Generic feedback Errors PRT feedback Score 0 Formative No No Yes Yes PRT does not contribute to score 1 Standard No Yes Yes Yes Respects quiz setting 2 Compact Yes No Yes Yes Not shown 3 Symbol only Yes No Yes No Not shown <p>Note that the \"Compact\" PRT feedback uses <code>&lt;span&gt;</code> tags and not <code>&lt;div&gt;</code>.  This allows inclusion inline, without new paragraphs settings.  However, <code>&lt;span&gt;</code> tags cannot contain a block level element, such as a <code>&lt;div&gt;</code> or <code>&lt;p&gt;</code>. So, if you include a block level element in your PRT feedback then the browser may \"spit this out\" and misplace the feedback. Also, MathJax may not display mathematics correctly on the page when there is an HTML error such as this.  If you use the \"Compact\" feedback, please author only minimal PRT feedback with no block level HTML elements.</p>"},{"location":"en/Authoring/Potential_response_trees/#halting-the-response-tree-within-the-feedback-variables","title":"Halting the response tree within the feedback variables","text":"<p>STACK implements a \"model\" of how assessment works.  Students interact with \"inputs\" and the system establishes properties of these inputs with response trees. The response trees automatically execute when each non-empty input is \"valid\".  The introduction of (i) formative potential response trees, and particularly (ii) the <code>allowempty</code> option for inputs has expanded this model.</p> <p>For example, the <code>allowempty</code> option is a property of an input and not a response tree.  It is not possible to specify in the input settings that one response tree will allow an input to be empty, but another one will not.  There are some advanced use-cases with multiple response trees (perhaps some formative) which need more control over when the PRT is executed.</p> <p>For this reason it is sometimes helpful to allow pre-processing in the feedback variables to halt the execution of a particular potential response tree.  Halting and \"bailing out\" is similar to deciding an input is blank/invalid.  Scores are not updated, feedback is not generated, etc.  This \"attempt\" does not attract a penalty within the penalty system.</p> <p>STACK provides a special constant <code>%stack_prt_stop_p</code>.  By default this is set to <code>false</code> at the start of the feedback variables for each PRT.  If this evaluates to the boolean <code>true</code> at the end of the feedback variables then the response tree will not execute and the process will \"bail out\".</p> <p>For example, you could add the following to the feedback variables check if <code>ans1</code> is empty.</p> <pre><code>%stack_prt_stop_p:if is(ans1=EMPTYANSWER) then true else false;\n</code></pre> <p>(Note, different inputs indicate empty answers in different ways.  Some use <code>[EMPTYANSWER]</code> and matrices reflect the size of the matrix.  This is to make sure the type of an empty answer matches the type of the answer in a regular input.)</p> <p>Once the PRT has started there is no way to \"bail out\", or disregard the results of the tree. The decision must be made within the feedback variables.  (If you have a compelling use-case to add this option please contact the developers.)</p> <p>The PRT will return a note <code>prt1-bail</code> to indicate the tree attempted to execute but then stopped and \"bailed out\".  This is in contrast to the note <code>!</code> used to indicate the PRT did not execute at all.</p> <p>This feature can be useful with multiple inputs and formative PRTs.  Consider the following question asking a student to give up to three example expressions (E.g. \"Give me an example of....\").</p> <ol> <li>We have three inputs <code>ans1</code>, <code>ans2</code> and <code>ans3</code>.  There is one PRT for each to establish the relevant properties.</li> <li>We have another PRT, checking they are all different.</li> <li>We have a formative PRT e.g. saying something like \"All your examples are polynomials, please try something else\".</li> </ol> <p>A student just types in two examples, leaving <code>ans3</code> empty.</p> <p>Set up all options with the <code>allowempty</code> option, and filter out <code>EMPTYANSWER</code> in the last two PRTs.  The last two PRTs can now work if a student only has two examples.  In the first three PRTs we can bail when they are empty.</p>"},{"location":"en/Authoring/Question_note/","title":"Question note","text":"<p>The question note is CASText.  The question note is used to decide if randomly generated variants are the same or different.</p> <p>Two question variants are equal if and only if the question notes are equal.</p> <p>In particular, when we generate statistics about students' attempts we group attempts according to the equality of their question notes. Two variants are not necessarily different if their question variables are different, and hence a note is useful.  The teacher needs to choose what identifies each unique variant - this cannot be automated.</p> <p>The teacher can also leave useful information about the answer in the question note. For example they might use a note such as</p> <pre><code>\\[ \\frac{d}{d{@v@}}{@p@} = {@diff(p,v)@} \\]\n</code></pre> <p>This is very helpful, particularly when students ask about the variant they were given.  The teacher only need look at the question note to get both the question, and answer.</p> <p>The question note is used when deploying question variants.</p>"},{"location":"en/Authoring/Question_options/","title":"Options","text":"<p>Options affect the behaviour of each question.</p>"},{"location":"en/Authoring/Question_options/#question-level-simplify","title":"Question Level Simplify","text":"<p>See the entry on simplification.  Default is <code>true</code>.</p>"},{"location":"en/Authoring/Question_options/#Assume_Positive","title":"Assume Positive","text":"<p>This option sets the value of Maxima's</p> <pre><code>assume_pos\n</code></pre> <p>variable.</p> <p>If <code>true</code> and the sign of a parameter  cannot be determined from the current context or other considerations, <code>sign</code> and <code>asksign(x)</code> return <code>true</code>. This may forestall some automatically-generated asksign queries, such as may arise from integrate or other computations</p> <p>Default is False</p>"},{"location":"en/Authoring/Question_options/#Question_penalty","title":"Question Penalty","text":"<p>This is the percentage of the marks deducted from each different and valid attempt which is not completely correct, when the penalty mark modification scheme is in use. The default is 10\\% of the marks available for this question, entered at 0.1.</p> <p>Note that Moodle stores scores to 7 decimal places, so, 1/3 should be entered as 0.3333333, and 2/3 as 0.6666667. If you input any number close to 1/3, but with less precision, then the extra digits will automatically be added. The exact range affected is that any penalty \\ge 0.33 and \\le 0.34 is changed to 0.3333333, and any penalty \\ge 0.66 and \\le 0.67 is changed to 0.6666667.</p>"},{"location":"en/Authoring/Question_options/#output","title":"Output","text":"<p>The following options affect how mathematics is displayed.</p>"},{"location":"en/Authoring/Question_options/#decimals","title":"Decimal separator","text":"<p>Choose the symbol for the decimal separator used by student input.  There are currently two choices.</p> <ul> <li><code>.</code>, the British decimal point.</li> <li><code>,</code>, the comma, as used in much of Europe.</li> </ul> <p>The design of this option is discussed further in the developer docs.</p> <p>Teachers must always use strict Maxima syntax, which requires <code>.</code>, including in test case construction.</p>"},{"location":"en/Authoring/Question_options/#scientificnotation","title":"Scientific notation formal","text":"<p>Choose the format for display of scientific notation.</p> <ul> <li>'*10', numbers will be displayed as 3.14 \\times 10^{3}.</li> <li>'E', numbers will be displayed as 3.14 E^{3}.</li> </ul>"},{"location":"en/Authoring/Question_options/#multiplication","title":"Multiplication Sign","text":"<ul> <li>(none), e.g. x\\,(x+1) (this uses the LaTeX space <code>\\,</code> within an expression)</li> <li>Dot, e.g. x\\cdot(x+1) </li> <li>Cross, e.g. x\\times (x+1) </li> <li>Numbers only, e.g. 3\\times 5\\, x.</li> <li>Space, e.g. x (x+1) (this uses single whitespace <code></code>)</li> </ul> <p>In practice it is very helpful to have some kind of multiplication sign displayed to the student.  The difference between  xe^x \\text{ and } x\\,e^x is very subtle.  Notice the spacing?  The first means <code>xe^x=(xe)^x</code> the second is <code>x*e^x</code>.  Could be quite confusing to students if there is no multiplication sign.  Using x\\cdot e^x neatly solves this problem.</p> <p>Internally the display of multiplication signs is controlled by the STACK function <code>make_multsgn(ex)</code>, where the argument can be one of the strings <code>\"cross\"</code>, <code>\"dot\"</code>, <code>\"onum\"</code>, <code>\"space\"</code> or <code>\"none\"</code>.  This can be switched part-way through a session. E.g. consider the following castext.</p> <pre><code>Default: {@a*b@}.\nSwitch to cross: {@(make_multsgn(\"cross\"), a*b)@}.\nCross remains: {@a*b@}.\n</code></pre> <p>The expression <code>(make_multsgn(\"cross\"), a*b)</code> uses parentheses as an abbreviation for Maxima's <code>block</code> command.  So, the first expression <code>make_multsgn(\"cross\")</code> is evaluated which changes the display option to a cross.  Then the second expression is evaluated and displayed as a\\times b.  The new option persists in the next expression.</p> <p>The value of this option <code>onum</code> will only put a multiplication sign between numbers.  This means you will see 3\\times 5\\, x and not 3\\, 5\\, x as you would if you have \"none\".</p> <p>There is a special atom which controls the multiplication symbol used with option <code>onum</code>.  If you would like a dot then define</p> <pre><code>texput(multsgnonlyfornumberssym, \"\\\\cdot\");\n</code></pre> <p>in the question variables.</p>"},{"location":"en/Authoring/Question_options/#logicsymbol","title":"Logic symbols","text":"<p>How logical symbols should be displayed. The values are language, e.g. A \\text{ and } B or symbol, e.g. A\\land B.</p>"},{"location":"en/Authoring/Question_options/#surd","title":"Surd for Square Root","text":"<p>This option sets the value of Maxima's</p> <pre><code>sqrtdispflag\n</code></pre> <p>When false the prefix function <code>sqrt(x)</code> will be displayed as x^{1/2}.  This setting is global to the question, and having both notations co-exist in one question is very tricky.  You need to have <code>simp:false</code> throughout the question.</p> <p>By default Maxima does not like to use the \\sqrt{} symbol. The internal representation favours fractional powers, for very good reasons. In  Maxima we get:</p> <pre><code>(%i1) 4*sqrt(2);\n(%o1) 2^(5/2)\n(%i2) 6*sqrt(2);\n(%o2) 3*2^(3/2)\n</code></pre> <p>Furthermore, if you execute this in a Maxima session</p> <pre><code>simp:true;\np:1+sqrt(x);\n?print(p);\n</code></pre> <p>Then the displayed value of <code>p</code> is \\sqrt{x}+1 whereas the internal representation of <code>p</code> is</p> <pre><code>((MPLUS SIMP) 1 ((MEXPT SIMP) $X ((RAT SIMP) 1 2)))\n</code></pre> <p>This means that internally Maxima has converted <code>sqrt(x)</code> to <code>x^(1/2)</code>, even though it is by default displayed as <code>sqrt</code>.  This is an example where the displayed form (text and LaTeX) does not match Maxima's internal representation.</p> <p>Do you really want to continue using \\sqrt{} in your teaching?  In his Elements of Algebra, L. Euler wrote the following.</p> <p> \\S 200 We may therefore entirely reject the radical signs at present made use of, and employ in their stead the fractional exponents which we have just explained: but as we have been long accustomed to those signs, and meet with them in most books of Algebra, it might be wrong to banish them entirely from  calculations; there is, however, sufficient reason also to employ, as is now frequently done, the other method of  notation, because it manifestly corresponds with the nature of the thing. In fact we see immediately that a^\\frac12 is the square root of a, because we know that the square of a^\\frac12, that is to say  a^\\frac12 multiplied by a^\\frac12 is equal to a^1, or a.</p> <p>A lot of elementary mathematics involves converting from one form to another and back again.  Sometimes these forms have important differences of use, e.g. factored form or completed square form for a quadratic.  However, sometimes these equivalent forms are more customary than because it \"manifestly corresponds with the nature of the thing\" in question.  I digress...</p> <p>STACK defines an nth root function <code>root(x,n)</code> which is a noun form for \\sqrt[n]{x}.  This can be used by students, but if teachers wish to use this in question variables etc. then they must prefix this with the apostophie to create the nounform <code>'root(x,n)</code> to prevent immediate evaluation to <code>x^(1/n)</code>.</p>"},{"location":"en/Authoring/Question_options/#sqrt_minus_one","title":"sqrt(-1)","text":"<p>In Maxima <code>%i</code> is the complex unit satisfying <code>%i^2=-1</code>.  However, students would like to type <code>i</code> and physicists and engineers <code>j</code>. We also sometimes need to use symbols <code>i</code> and <code>j</code> for vectors. To accommodate these needs we have an option <code>ComplexNo</code> which provides a context for these symbols and affects the way they are displayed.</p> Option Interpretation Display ~ ~ ~ ~ %i^2 i^2 j^2 %i i j -------- ---------------- --------- ----- ---- ----- ----- i -1 -1 j^2 i i j j -1 i^2 -1 j i j symi -1 i^2 j^2 i i j symj -1 i^2 j^2 j i j <p>Note the use of both Roman and italic symbols in this table.</p> <p>If you are using i,j,k as basis vectors then consider the following in your question variables </p> <pre><code>/* Below means set the ComplexNo option in the question to \"symi\". */\nmake_complexJ(\"symi\");\nordergreat(i,j,k);\ntexput(i,\"\\\\vec{i}\");\ntexput(j,\"\\\\vec{j}\");\ntexput(k,\"\\\\vec{k}\");\n%_stack_preamble_end;\n/* These are examples. */\np:3*i+4*j+5*k;\nq:a*i+b*j+c*k;\n</code></pre> <p>Then, your expressions <code>p</code> and <code>q</code> will be displayed repectively as {3\\cdot \\vec{i}+4\\cdot \\vec{j}+5\\cdot \\vec{k}} and {a\\cdot \\vec{i}+b\\cdot \\vec{j}+c\\cdot \\vec{k}}. Further examples are given in the vectors.documentation.</p>"},{"location":"en/Authoring/Question_options/#matrix-parentheses","title":"Matrix parentheses","text":"<p>See the entry on matrices.</p>"},{"location":"en/Authoring/Question_options/#inline-and-displayed-fractions","title":"Inline and displayed fractions.","text":"<p>There are three ways to display fractions.</p> <ol> <li>displayed  \\frac{1}{x} ;</li> <li>inline  1/x ;</li> <li>negative powers  x^{-1} .</li> </ol> <p>The default behaviour is displayed, i.e. using LaTeX <code>\\frac{}{}</code>.</p> <p>The function <code>stack_disp_fractions(ex)</code> can be used to control the display globally within a question.</p> <ul> <li><code>stack_disp_fractions(\"i\")</code> switches display to inline.</li> <li><code>stack_disp_fractions(\"d\")</code> switches display to display.</li> </ul> <p>Note, for CASText the display is controlled by the prevailing setting at the moment the text is displayed, not when a variable is defined in the question variables. Hence, if you would like a single inline fraction within a CASText you will need to use</p> <pre><code>Normally fractions are displayed {@1/x@}. This switches to inline {@(stack_disp_fractions(\"i\"), 1/x)@}, which persists {@1/a@}.  Switch explicitly back to displayed {@(stack_disp_fractions(\"d\"),1/x)@}.\n</code></pre> <p>For scientific units we also have an input \"extra option\" <code>negpow</code> for student's input to be displayed as negative powers, e.g. m\\,s^{-1}.</p> <p>We do not, currently, have support for global display of fractions using negative powers (Dec 2024).  This is because the difference between displayed and inline fractions is purely notational, involving the TeX output from the division operator.  Converting division to negative powers is a mathematical re-write rule and is therefore significantly more complicated.  E.g. we would have to decide how to display  \\frac{1}{x^{-2}} .</p>"},{"location":"en/Authoring/Serving_out_data/","title":"Serving out data","text":"<p>In some contexts one wants to generate random data for the students to act on, depending on the amount of data and whether one expects the students to transfer it to other tools for processing the methods used for serving that data data out vary. Here are some examples.</p>"},{"location":"en/Authoring/Serving_out_data/#html-tables","title":"HTML-tables","text":"<p>If you only have a small amount of data you may simply print out a table of it and let the students copy-paste it from there. When doing this one will want to avoid LaTeX representations as those may case trouble for students try to copy-paste things. Here is an example of using CASText <code>foreach</code>-blocks to iterate and output an array of data:</p> <pre><code>[[comment]]This just defines the data for this sample, you may use one coming from your question-vars.[[/comment]]\n[[define data=\"(rand(zeromatrix(4,3)+100)-50)/10.0\"/]]\n\n&lt;table&gt;\n[[foreach row=\"args(data)\"]]\n    &lt;tr&gt;[[foreach cell=\"row\"]]&lt;td&gt;{#cell#}&lt;/td&gt;[[/foreach]]&lt;/tr&gt;\n[[/foreach]]\n&lt;/table&gt;\n\n&lt;p&gt;More control is available. You could tune the style of the values without affecting copy paste too much.&lt;/p&gt;\n&lt;table&gt;\n[[foreach row=\"args(data)\"]]\n    &lt;tr&gt;[[foreach cell=\"row\"]]\n        &lt;td&gt;\n        [[if test=\"cell &lt; 0\"]]&lt;span style=\"color:red;\"&gt;[[/if]]\n        {#cell#}\n        [[if test=\"cell &lt; 0\"]]&lt;/span&gt;[[/if]]\n        &lt;/td&gt;\n        [[/foreach]]&lt;/tr&gt;\n[[/foreach]]\n&lt;/table&gt;\n</code></pre>"},{"location":"en/Authoring/Serving_out_data/#raw-maxima-code","title":"Raw Maxima code","text":"<p>Should you want to just give out Maxima code for use in Maxima or similar enough syntax you may simply use the <code>{#...#}</code> injection instead of <code>{@...@}</code> and it will output the raw form which can be used for copy-paste. However, this does not work well with large amounts of data as the line may become quite long and even selecting it may prove problematic.</p>"},{"location":"en/Authoring/Serving_out_data/#file-transfer","title":"File transfer","text":"<p>Since 4.4 STACK has allowed the author to construct text-files that can be downloaded and that contain freeform CASText constructed in the questions session with the questions seed, thus allowing unique random output for the students. This functionality will server everything out as plain text unless the defined name of the file ends with <code>.csv</code>. The primary limitation, for this feature is that it only works in the question-text, it may not be used anywhere else and it will never support adaptation to current student inputs.</p> <p>How it works is that you wrap whatever you want the file to contain in a <code>[[textdownload]]</code> block, for that block a single parameter <code>name</code> must be defined and that will define the name suggested when saving this file. Whatever is inside that block will be rendered as normal CASText, however nothing defined in the CASText outside that block can affect it, which may cause some confusion, just repeat those defines inside the block if you use such things. The block will then get replaced with an URL from which the file can be downloaded, you will probably want to place that URL into a link or some such construct.</p> <p>As an example, using the new function that generates CSV-strings from data we can write as follows:</p> <pre><code>/* Define these in question variables: */\nlab: [\"A\",\"B\",\"C\"];\ndata: makelist([rand(322)/100.0,rand(600)/100.0,rand(300)/100.0], i, 50);\n</code></pre> <pre><code>[[comment]]Use them like this in the question-text.[[/comment]]\nLoad the data from\n&lt;a href=\"[[textdownload name=\"data.csv\"]]{@stack_csv_formatter(data,lab)@}[[/textdownload]]\"&gt;this file&lt;/a&gt; and ...\n</code></pre> <p>That function returns a string and it takes in the data as a matrix or a list of lists and labels as a list. If no labels are necessary use <code>false</code>. Also you can use <code>stackfltfmt</code> to control the representation of pure floats in the data. Just in case you meet trouble <code>labels</code> is a keyword that cannot be used which is a shame when defining labels.</p>"},{"location":"en/Authoring/Tables/","title":"Tables","text":"<p>STACK provides an inert function <code>table</code> for typesetting mathematical tables, provided originally to typeset truth tables in Propositional Logic.</p> <p>You can create a table directly.  Notice the first row is a heading row.</p> <pre><code>T0:table([x,x^3],[-1,-1],[0,0],[1,1],[2,8],[3,27]);\n</code></pre> <p>The table <code>T0</code> is displayed as  .</p> <p>Really, the <code>table</code> operator does nothing (very much like a matrix).  Like a matrix, the arguments must be identical length lists.  However, there are some special rules for the tex display.</p> <ol> <li>The first row is considered to be a heading, and a horizontal line is printed after the first row.</li> <li>There are vertical bars between internal columns of the table (see below how to change this).</li> <li>There are currently no options for customising printing of borders, etc. (see below how to change this).</li> <li>You can highlight entries in the table using the command <code>texcolor(\"col\", ex)</code>.  Note however, this will also underline any entries (as colour alone is poor accessibility practice.).</li> </ol> <p><code>table_zip_with(fn, T1, T2)</code> combines two tables, using the binary function <code>fn</code> (much as <code>zip_with</code> combines two lists).</p> <p>It is instructive to look at the code for <code>table_difference</code> which colours entries which differ in red.</p> <pre><code>table_difference(T1, T2) := table_zip_with(lambda([ex1,ex2], if ex1=ex2 then ex1 else texcolor(\"red\", ex1)), T1, T2)$\n</code></pre> <p>This shows which elements of <code>T1</code> differ from the corresponding elements of <code>T2</code> by returning elements of <code>T1</code> coloured in red.</p> <p>If you want to identify which entries really are different then you could do something like the following.</p> <pre><code>table_zip_with(lambda([ex1,ex2], is(ex1=ex2)), T1, T2)\n</code></pre> <p>If you find yourself manipulating tables, the above function provides a starting point.  Please ask the developers to add anything you use regularly.</p>"},{"location":"en/Authoring/Tables/#changing-the-tex-output-of-tables","title":"Changing the TeX output of tables.","text":"<p>The TeX output of a table is controlled by the <code>table_tex</code> command.  You can re-write this in an individual question.  For example, if you only want a vertical bar after the first row use this version.</p> <pre><code>table_tex(ex):= block([ret, astart],\n    astart: ev(makelist(\"c\", k, length(first(ex))-1), simp),\n    astart: sconcat(\"\\\\begin{array}{c|\", simplode(astart), \"} \"),\n    ret: maplist(lambda([ex2], simplode(map(lambda([ex3],stack_disp(ex3, \"\")), ex2), \" &amp; \")), args(ex)),\n    rest:sconcat(astart, first(ret), \"\\\\\\\\ \\\\hline \", simplode(rest(ret), \" \\\\\\\\ \"), \"\\\\end{array} \")\n);\n</code></pre> <p>The above code does not include the <code>table_bool_abbreviate:true</code> option.  See the source code of <code>table_tex</code>.</p> <p>If you want to combine different formatting of tables, then you will need to define a new function such as <code>table2</code> and then have parallel <code>table</code> and <code>table2</code> commands.  Don't forget to have <code>texput(table2, table2_tex);</code> etc.</p>"},{"location":"en/Authoring/Tables/#example-evaluate-a-function-at-a-number-of-values","title":"Example: evaluate a function at a number of values","text":"<p>You can create a table directly via code such as the following.  Notice the use of the list constructor function <code>\"[\"</code> within the <code>zip_with</code> command.</p> <pre><code>vals:[-1,0,1,2,3];\nfn(ex):=ex^3;\nT0:apply(table, append([[x,fn(x)]], zip_with(\"[\", vals, maplist(fn, vals))));\n</code></pre>"},{"location":"en/Authoring/Tables/#example-truth-tables","title":"Example: truth tables","text":"<p><code>table_bool_abbreviate:true</code> is a boolean variable.  If set to <code>true</code> (the default) boolean entries <code>true/false</code> will be abbreviated to <code>T/F</code> respectively when creating the LaTeX for display, to keep the table small and tidy looking.  All other entries in the table are typeset normally.  This only affects the LaTeX display, and table entries remain boolean.</p> <p>STACK has <code>truth_table</code> commands for Boolean logic.  This can be used within the question variables, or directly within CAStext.</p> <pre><code>T1:truth_table(a implies b);\nT2:table_difference(truth_table(a xor b), truth_table(a implies b));\n</code></pre> <p>Here we have two tables <code>T1</code> is displayed as</p> <p>  {\\begin{array}{c|c|c} a &amp; b &amp; a\\rightarrow b\\\\ \\hline \\mathbf{F} &amp; \\mathbf{F} &amp; \\mathbf{T} \\\\ \\mathbf{F} &amp; \\mathbf{T} &amp; \\mathbf{T} \\\\ \\mathbf{T} &amp; \\mathbf{F} &amp; \\mathbf{F} \\\\ \\mathbf{T} &amp; \\mathbf{T} &amp; \\mathbf{T} \\end{array}}  and <code>T2</code> gives  {\\begin{array}{c|c|c} a &amp; b &amp; \\color{red}{\\underline{a\\oplus b}}\\\\ \\hline \\mathbf{F} &amp; \\mathbf{F} &amp; \\color{red}{\\underline{\\mathbf{F} }} \\\\ \\mathbf{F} &amp; \\mathbf{T} &amp; \\mathbf{T} \\\\ \\mathbf{T} &amp; \\mathbf{F} &amp; \\color{red}{\\underline{\\mathbf{T} }} \\\\ \\mathbf{T} &amp; \\mathbf{T} &amp; \\color{red}{\\underline{\\mathbf{F} }}\\end{array}}  </p> <p>Notice in both the effect of <code>table_bool_abbreviate:true</code>. </p>"},{"location":"en/Authoring/Tables/#example-group-table-of-modulo-arithmetic","title":"Example: group table of modulo arithmetic","text":"<p>This example redefines the TeX output of the table and creates the group table of modulo arithmetic for n=5.  You can adapt this for other group sizes, and for multiplication or other groups.</p> <pre><code>/* Change the display of tables.                          */\ntable_tex(ex):= block([ret, astart],\n    astart: ev(makelist(\"c\", k, length(first(ex))-1), simp),\n    astart: sconcat(\"\\\\begin{array}{c|\", simplode(astart), \"} \"),\n    ret: maplist(lambda([ex2], simplode(map(lambda([ex3],stack_disp(ex3, \"\")), ex2), \" &amp; \")), args(ex)),\n    rest:sconcat(astart, first(ret), \"\\\\\\\\ \\\\hline \", simplode(rest(ret), \" \\\\\\\\ \"), \"\\\\end{array} \")\n);\n\n/* Create a matrix of the entries.                        */\ntexput(Bplus, \"\\\\bigoplus\");\nn:5;\nf[i,j]:=mod((i-1)+(j-1),n);\nM:genmatrix(f, n, n);\n\n/* Add an index element to the start of each table row.   */\nA:zip_with(append, makelist([k],k,0,n-1), args(M));\n/* Create a header row with first element Bplus.          */\nhr:append([Bplus], makelist(k,k,0,n-1));\n/* Add the header row and create a table.                 */\nT:apply(table, append([hr], A)); \n</code></pre> <p>Then add <code>{@T@}</code> in the castext.</p> <p>This produces the following TeX output  {\\begin{array}{c|ccccc} \\bigoplus &amp; 0 &amp; 1 &amp; 2 &amp; 3 &amp; 4\\\\ \\hline 0 &amp; 0 &amp; 1 &amp; 2 &amp; 3 &amp; 4 \\\\ 1 &amp; 1 &amp; 2 &amp; 3 &amp; 4 &amp; 0 \\\\ 2 &amp; 2 &amp; 3 &amp; 4 &amp; 0 &amp; 1 \\\\ 3 &amp; 3 &amp; 4 &amp; 0 &amp; 1 &amp; 2 \\\\ 4 &amp; 4 &amp; 0 &amp; 1 &amp; 2 &amp; 3\\end{array}}  </p>"},{"location":"en/Authoring/Variables/","title":"Defining variables","text":"<p>Only two fields allow you to define and manipulate computer algebra system (Maxima) variables the Question Variables and Feedback variables.</p> <p>Individual assignments take the form</p> <pre><code>key : value;\n</code></pre> <p>for example</p> <pre><code>p : (x-1)^3;\n</code></pre> <p>Each <code>key</code> is the name of a variable local to the question, or a function name.  The <code>value</code> is an expression in Maxima's language.  This list is passed to the CAS, and evaluated in order. The value obtained for each key will be stored and used later, for example in the question marking routines. The keys need not be unique, although only the last value will be available for use later.</p> <p>These fields are known as KeyVal fields.</p>"},{"location":"en/Authoring/Variables/#maximas-assignments-a3","title":"Maxima's assignments <code>a:3</code>","text":"<p>Maxima, and hence STACK, uses the form <code>key:value</code>, to assign a value to a variable, which unusual and not intuitive.  Maxima reserves <code>:=</code> to denote function definition, e.g. <code>f(x):=x^2</code>.</p>"},{"location":"en/Authoring/Variables/#notes","title":"Notes","text":"<ul> <li>Items are separated by either a newline or <code>;</code>.</li> <li>Adding <code>;</code> at the end of each statement is optional, but makes it easier to cut and paste into a Maxima session.  Please add these.</li> <li>If you type a string not in the form <code>key : value</code>, a variable name such as <code>dumvar3</code> will be assigned automatically to keep track of the command in the list of question variables.</li> <li>The <code>key</code> must be a simple variable name.  It must start with letters, and can contain numbers and underscore characters.</li> <li>If a student uses a variable which has been assigned a value in the question variables then the attempt will be rejected as invalid.  You can use the \"allowed words\" to enable students' expressions with question variables to be considered valid.     Hence, it is a sensible idea to use variable names which are not used as parameters in the question, or likely to occur in the student's answer. For example if you set an integration question then you should avoid using the variable <code>c</code>, otherwise students won't be able to write <code>+c</code> in the normal way to indicate a constant of integration.</li> <li>You can include C-style block comments for increased clarity, and these may appear on separate lines     e.g. <code>dice : rand(6) + 1; /* roll it! */</code></li> <li>Do not define a feedback variable with the same name as an input.  For example, if your input is <code>ans1</code> then you cannot define a feedback variable <code>ans1:exdowncase(ans1)</code>.  Choose something different, e.g. <code>ansmod1:exdowncase(ans1)</code></li> </ul>"},{"location":"en/Authoring/Variables/#Question_variables","title":"Question variables","text":"<p>The question variables are evaluated when a variant of a question is created.   The displayed forms are available to all other CASText fields and the values to other parts of the question, e.g.</p> <ul> <li>Teacher's answers in inputs are defined in terms of question variables.</li> <li>Question note.</li> <li>General feedback (also known as the worked solution).</li> <li>All fields in each of the potential response tree.</li> <li>Each input when testing the item.</li> <li>Question variables are not available to inputs when a student is validating their answer, unless special ''context variables'' are defined in a preamble.</li> </ul>"},{"location":"en/Authoring/Variables/#question-variables-preamble-and-context-variables","title":"Question variables preamble and context variables","text":"<p>If the following commands appear within the question variables they will be available in every part of the question, in particular these commands will affect how students' input is validated.  This enables teachers to affect the display of the student's answer validation, and add assumptions to PRTs.</p> <ul> <li><code>orderless</code> and <code>ordergreat</code>.  These commands may only appear once each in any question.</li> <li><code>assume</code> and <code>declare</code>.</li> <li><code>texput</code>, see notes directly below.</li> </ul> <p>This collection of special variables are called \"context variables\".</p> <p>STACK has a special constant <code>%_stack_preamble_end</code>.  Any variables before this constant will be included within the context variables.  This enables you to define functions, e.g. to use with <code>texput</code>.  </p> <p>Note, that students are not permitted to use any variable name defined by the teacher in the question variables.  This includes both the context variables, and the regular remaining question variables.  It is not possible to define variables which a student can then use.  Students can use function names defined in the preamble. e.g. you can put <code>vec(ex):=stackvector(ex);</code> into the preamble.</p> <p>For example, <code>assume(a&gt;0)</code> will enable you to accept  using the <code>AlgEquiv</code> answer test.  Normally \\sqrt{a^2}=|a|\\neq a.</p> <p>For example, <code>texput(blob, \"\\\\diamond\")</code> is simple.  You can also define a function and use this function in texput.</p> <pre><code>tuptex(z):= block([a,b], [a,b]:args(z), sconcat(\"\\\\left[\",tex1(a),\",\",tex1(b),\"\\\\right)\"));\ntexput(tup, tuptex); \n%_stack_preamble_end;\n</code></pre> <p>It is also possible to use an unnamed <code>lambda</code> function.  E.g. if you have a function <code>tup</code> then</p> <pre><code>texput(tup,  lambda([z], block([a,b], [a,b]:args(z), sconcat(\"\\\\left[\",tex1(a),\",\",tex1(b),\"\\\\right)\"))));\n</code></pre> <p>will display <code>tup(a,b)</code> as  \\left[a,b\\right) .</p> <p>To create a function <code>hat</code> so that input <code>hat(x)</code> is displayed as \\hat{x} you can use:</p> <pre><code>/* In question variables. */\ntexput(hat, lambda([ex], sconcat(\"\\\\hat{\", tex1(first(ex)), \"}\")));\n</code></pre> <p>As a more complicated example, to typeset <code>u(A_k,k,1,inf)</code> as {\\bigcup_{k = 1}^{\\infty } {A}_{k}} you can use the following:</p> <pre><code>texput(u,lambda([ex],if length(ex)&lt;4 then return(\"\\\\bigcup_{?=?}^{?} ? \") else\n    sconcat(\"\\\\bigcup_{\" ,tex1(second(ex)), \" = \", tex1(third(ex)), \"}^{\", tex1(fourth(ex)), \"} \", tex1(first(ex)))));\n</code></pre> <p>Notice in this example how we check the length of the arguments supplied to the (inert) function <code>u</code>.  If there are fewer than the required number of arguments then this texput function returns something sensible.  Without this clause you get errors, which would be unhelpful to a student trying to type this in.</p> <p>Another example is to have the function <code>foo</code> displayed as traditional fractions.</p> <pre><code>texput(foo,lambda([e],[a,b]:args(e), sconcat(\"\\\\frac{\", tex1(a), \"}{\", tex1(b), \"}\")));\n</code></pre> <p>Note the way the lambda expression for the tex function has one argument which is split later within the function.</p>"},{"location":"en/Authoring/Variables/#Feedback_variables","title":"Feedback variables","text":"<p>The feedback variables form one field in the potential response tree.</p> <p>When using the potential response tree it is often very useful to manipulate the student's answer before applying any of the Answer tests. This gives the opportunity to perform sophisticated mathematical operations.</p> <p>Before each answer test is applied the following list of variables is assembled and evaluated</p> <ol> <li>The values of the question variables.</li> <li>The values of each inputs.</li> <li>The feedback variables.</li> </ol> <p>The values of the evaluated feedback variables can be used as expressions in the answer tests and in the feedback.</p> <p>Note, you cannot redefine the value of an input as a key in the feedback variables.  e.g. you cannot have something like <code>ans1:ans1+1</code>. You must use a new variable name.  When an answer test is evaluated, if the SA or TA field is exactly the name of an input then the raw student's value is used, and not the value from the feedback variables. This is because some of the answer tests require exactly what is typed (e.g. trailing zeros) and not the value through the CAS.  To avoid this problem authors must use new variable names to distinguish between the actual input typed by the student and any calculated value.</p>"},{"location":"en/Authoring/Variables/#creating-variable-names","title":"Creating variable names","text":"<p>Teachers may not use the Maxima 'concat' command, so you cannot create variable names of your own using code of the following form.</p> <pre><code>vars:makelist(concat(x,k),k,1,5);\n</code></pre> <p>Instead use</p> <pre><code>vars0:stack_var_makelist(k, 5);\n</code></pre> <p>If you want to start numbering at 1 instead of 0, use</p> <pre><code>vars1:rest(stack_var_makelist(k, 6));\n</code></pre>"},{"location":"en/Authoring/Answer_Tests/","title":"Answer tests","text":"<p>An answer test is used to compare two expressions to establish whether they satisfy some mathematical criteria. The prototype test is to establish if they are algebraically equivalent.  Informally, the answer tests have the following syntax</p> <pre><code>[Errors, Result, FeedBack, Note] = AnswerTest(StudentAnswer, TeacherAnswer, [Opt], [Raw])\n</code></pre> <p>Where,</p> Variable Description <code>StudentAnswer</code> A CAS expression, assumed to be the student's answer. <code>TeacherAnswer</code> A CAS expression, assumed to be the model answer. <code>Opt</code> If needed, any options which the specific answer test provides. For example, a variable, the accuracy of the numerical comparison, number of significant figures. <code>Raw</code> If needed, the raw string of the student's input to ensure, e.g. Maxima does not remove trailing zeros when establishing the number of significant figures. <p>Since the tests can provide feedback, tests which appear to be symmetrical, e.g. Algebraic Equivalence, really need to assume which expression belongs to the student and which to the teacher.</p> Variable Description Errors Hopefully this will be empty! Result is either <code>true</code>, <code>false</code>, or <code>fail</code> (which indicates a failure of the test).  This determines which branch of the tree is traversed. FeedBack This is a text string which is displayed to the student. It is CASText which may depend on properties of the student's answer. Note This is a text string which is used for Reporting. Each answer note is concatenated with the previous notes and any contributions from the branch. <p>The feedback is only shown to a student if the quiet option is set to 'no'.  We provide a static page giving the outcome of all answer test results.  These pages are automatically generated by the STACK unit tests and help illustrate, by examples, the exact behaviour of the tests.  These pages provide examples of feedback provided by each test.</p>"},{"location":"en/Authoring/Answer_Tests/#the-tests","title":"The tests","text":"<p>Documentation is grouped as follows.</p> <ol> <li>Equivalence, e.g. algebraic equivalence (many variations).</li> <li>AlgEquiv</li> <li>AlgEquivNouns</li> <li>SubstEquiv</li> <li>CasEqual</li> <li>SameType</li> <li>SysEquiv</li> <li>Syntactic form, e.g. checking the student's expression is in factored form.</li> <li>FacForm</li> <li>PartFrac</li> <li>SingleFrac</li> <li>CompSquare</li> <li>Expanded</li> <li>LowestTerms</li> <li>Rules-based tests, e.g. equivalence up to associativity and commutativity and advanced bespoke tests.</li> <li>EqualComAss</li> <li>EqualComAssRules</li> <li>Numerical tests including accuracy, e.g. is written to 3 decimal places.</li> <li>NumRelative</li> <li>NumAbsolute</li> <li>NumSigFigs</li> <li>NumDecPlaces</li> <li>NumDecPlacesWrong</li> <li>SigFigsStrict</li> <li>GT</li> <li>GTE</li> <li>Scientific, e.g. for dealing with dimensional numerical quantities.</li> <li>Units</li> <li>UnitsStrict</li> <li>UnitsRelative</li> <li>UnitsStrictRelative</li> <li>UnitsAbsolute</li> <li>UnitsStrictAbsolute</li> <li>Calculus, e.g. for symbolic integration questions.</li> <li>Diff</li> <li>Int</li> <li>Antidiff</li> <li>AddConst</li> <li>String match tests and regular expressions.</li> <li>String</li> <li>StringSloppy</li> <li>Levenshtein</li> <li>SRegExp</li> <li>Other specific subject tests, e.g. sets, logical expressions.</li> <li>Sets</li> <li>Equiv</li> <li>EquivFirst</li> <li>PropLogic</li> </ol>"},{"location":"en/Authoring/Answer_Tests/#pre-processing-students-answers","title":"Pre-processing students' answers","text":"<p>You can apply functions before applying the tests using the feedback variables.  For example, to ignore case sensitivity you can apply the Maxima commands defined by STACK <code>exdowncase(ex)</code> to the arguments, before you apply one of the other answer tests. However, some tests really require the raw student's input.  E.g. the numerical decimal place test really requires the name of an input as the <code>SAns</code> field.  If you manipulate an input, you may end up dropping trailing zeros and ruining the number of decimal places in the expression.  STACK will warn you if you need to use the name of an input.</p>"},{"location":"en/Authoring/Answer_Tests/#offline-testing","title":"Offline testing","text":"<p>Sometimes it is very useful to work offline using the desktop version of Maxima.  How to do this is explained in the STACK-maxima-sandbox.</p> <p>The Maxima code for each answer test is the name of the test with <code>AT</code> in front.  E.g. the algebraic equivalence <code>AlgEquiv</code> test is called in the sandbox as <code>ATAlgEquiv</code>.  E.g. to test two expressions in the sandbox type</p> <pre><code>ATAlgEquiv((x-1)*(x+1), x^2-1);\n</code></pre> <p>In the STACK question dashboard, and some of the reporting features, you may see expressions such as the above.  These can be copied into Maxima to help test individual questions.</p>"},{"location":"en/Authoring/Answer_Tests/Calculus/","title":"Calculus answer tests","text":"<p>There are four answer tests for dealing with calculus problems. The first is used with differentiation, the other three handle integration questions.</p>"},{"location":"en/Authoring/Answer_Tests/Calculus/#differentiation","title":"Differentiation","text":""},{"location":"en/Authoring/Answer_Tests/Calculus/#diff","title":"Diff","text":"<p>This test is a general differentiation test: it is passed if the arguments are algebraically equivalent, but gives feedback if it looks like the student has integrated instead of differentiated. The first argument is the student's answer. The second argument is the model answer. The answer test option must be the variable with respect to which differentiation is assumed to take place.</p> <p>There are edge cases, particularly with  where differentiation is indistinguishable from integration.  You may need to use the \"quiet\" option in these cases.</p>"},{"location":"en/Authoring/Answer_Tests/Calculus/#integration-tests","title":"Integration tests","text":"<p>For integration, there are three answer tests. Int has been part of STACK for a long time and tries to deal with various edge cases all in one answer test, but this complexity can sometimes lead to unexpected or unwanted behaviour. With the aim to reduce these disadvantages at the cost of using several PRT nodes, STACK 4.9.0 introduced the Antidiff and AddConst answer tests.</p>"},{"location":"en/Authoring/Answer_Tests/Calculus/#int","title":"Int","text":"<p>This test is designed for a general indefinite integration question: it is passed if both the arguments are indefinite integrals of the same expression. The first argument is the student's answer. The second argument is the model answer. The answer test option needs to be the variable with respect to which integration is assumed to take place, or a list (see below).</p> <p>Getting this test to work in a general setting is a very difficult challenge. In particular, the test assumes that the constant of integration is expressed in a form similar to +c, although which variable used is not important.</p> <p>The Int test has various additional options.</p> <p>The question author must supply these options in the form of a list <code>[var, opt1, ...]</code>.  The first argument of this list must be the variable with respect to which integration is taking place.</p> <p>If one of the <code>opt?</code> is exactly the token <code>NOCONST</code> then the test will condone a lack of constant of integration.  That is, if a student has missed off a constant of integration, or the answers differ by a numerical constant, then full marks will be awarded.  Weird constants (e.g. +c^2) will still be flagged up.</p> <p>If one of the <code>opt?</code> is exactly the token <code>FORMAL</code> then the test will condone the formal derivative of the student's answer matching that of the teacher.  This is useful in examples such as \\log(|x+3|)/2 vs \\log(|2x+6|)/2 where effectively the constant of integration differs by a numerical constant.  Note, if you use the <code>FORMAL</code> option then by definition you will accept a missing constant of integration!</p> <p>The answer test architecture only passes in the answer to the test.  The question is not available at that point; however, the answer test has to infer exactly which expression, including the algebraic form, the teacher has set in the question. This includes stripping off constants of integration and constants of integration may occur in a number of ways, e.g. in logarithms. In many cases simply differentiating the teacher's answer is fine, in which case the question author need not worry.  Where this does not work, the question author will need to supply the expression from the question in the right form as an option to the answer test.  This is done simply by adding it to the list of options.</p> <pre><code>[x, x*exp(5*x+7)]\n</code></pre> <p>The test cannot cope with some situations.  Please contact the developers when you find some of these.  This test is already rather overloaded, so please don't expect every request to be accommodated! If this test does not behave the way you want, consider using Antidiff and/or AddConst, described further below.</p> <p>This test, in particular, has a lot of test cases which really document what the test does in detail.</p> <p>The issue of  \\int \\frac{1}{x} dx = \\log(x)+c vs   \\int \\frac{1}{x} dx = \\log(|x|)+c is a particular challenge. What mark would you give a student who integrated  \\int \\frac{1}{x} dx = \\log(k\\times abs(x))? If the teacher uses |..| in their answer then the student is also expected to use the absolute value.  The test is currently defined in such a way that if the teacher uses  \\log(|x|)+c  in their answer, then they would expect the student to do so.  If they don't use the absolute value function, then they don't expect students to but will accept this in an  answer.</p> <p>For example, if the teacher's answer is  \\log(x)+c  (i.e. no absolute value) then all the following are considered to be correct.  \\log(x)+c,\\ \\log(|x|)+c,\\ \\log(k\\,x),\\ \\log(k|x|),\\ \\log(|k, x|)  </p> <p>If the teacher's answer is  \\log(|x|)+c  (i.e. with absolute value) then all the following are considered to be correct.  \\log(|x|)+c,\\ \\log(k|x|),\\ \\log(|k, x|)\\  Now, the following are rejected as incorrect, as the studnet should have used |..| \\log(x)+c,\\ \\log(k\\,x) </p> <p>Note that STACK sets the value of Maxima's <code>logabs:true</code>, which is not the default in Maxima.  This has the effect of adding the absolute value funtion when <code>integrate</code> is used.</p> <p>In the case of partial  fractions where there are more than one term of the form \\log(x-a) then we insist the student is at least consistent.  If the teacher has any \\log(|x-a|) then the student must use |...| in all of them.  If the teacher has no \\log(|x-a|) (i.e. just things like \\log(x-a)) then the student must have all or none. </p> <p>The phrase \"Please ask your teacher about this.\" occurs in some of the automatically generated feedback.  For example, when formal derivative of the student's answer does equal the expression they were asked to integrate but the answer differs from the correct answer in a significant way, not just, e.g., a constant of integration.  See examples with the note <code>ATInt_EqFormalDiff</code>.  If you don't want to use this phrase, alter the string tagged <code>seekhelp</code> in the language pack using, e.g., the moodle language customisation</p>"},{"location":"en/Authoring/Answer_Tests/Calculus/#antidiff","title":"Antidiff","text":"<p>This test works similarly to Int, but it only checks if the student answer and the model answer have algebraically equivalent derivative in respect to the (mandatory) variable given in the options. This test does not check for absolute values in logarithms or for the algebraic form of the student answer, but really only for algebraic equivalence of derivatives. If you want to also check the algebraic form, consider using Int or other answer tests. Like Int, this tests also checks if the student answer was derived using differentiation instead of integration and provides feedback.</p>"},{"location":"en/Authoring/Answer_Tests/Calculus/#addconst","title":"AddConst","text":"<p>This test can be used to detect if the student answer contains an additive constant, which is often used in calculus questions about antiderivatives and indefinite integrals. The intended usage is to first check the student answer for being an antiderivative using Antidiff, followed by this answer test to check for an additive constant. In combination you can then establish that the student gave a one parameter family of antiderivatives. In calculus literature, this family is often defined as the indefinite integral.</p> <p>This answer test requires the author to fill the options field with a list of variables which are to be ignored, i.e. the integration variable and any further variables. You can thus check for the additive constant for the indefinite integral of x^n by passing the options <code>[x, n]</code>. The answer test will complain if the student answer does not contain exactly one additional variable besides the given list in the options.</p> <p>In its default mode, this test will only accept additive constants of the form <code>+c</code>, even though constant multiples of the constant (<code>+c/3</code>) and any surjective function on the reals (<code>+c^3</code>, <code>+ln(c)</code>) result in a mathematically correct parametrization of the family of antiderivatives. The constant does not have to be added explicitely: Testing <code>ln(x*exp(c))+k</code> with the given variables <code>[x,k]</code> will identify <code>c</code> as an additive constant, passing the answer test since <code>+c</code> can be extracted from the answer.</p> <p>If the word <code>NONSTRICT</code> is a list element of the options field, then the answer test will accept any additive term in the different variable. For example, the student answers <code>log(k*x)</code> or <code>x + C^3</code> with the options <code>[x, NONSTRICT]</code> (or <code>[NONSTRICT, x]</code>; the order does not matter) pass this answer test, whereas they will fail with the options <code>[x]</code>. The test will still not accept added expressions in mixed variables, however.</p>"},{"location":"en/Authoring/Answer_Tests/Equivalence/","title":"Equivalence","text":""},{"location":"en/Authoring/Answer_Tests/Equivalence/#equivalence-answer-tests","title":"Equivalence answer tests","text":"<p>The prototype test is to establish if two expressions are algebraically equivalent.  This page documents this, and similar, equivalence tests.</p> <p>The ability to decide if two expressions are equivalent is crucial.  There are many useful senses when trying to assess students' answers.</p> <p>Assume a teacher has asked a student to expand out  and the response they have from one student is x^2+x+x+1. This is \"correct\" in the sense that it is algebraically equivalent to (x+1)^2 and is in expanded form (actually two separate mathematical properties) but \"incorrect\" in the sense that the student has not gathered like terms by performing an addition x+x. What about a response 2x+x^2+1?  This is, arguably, better in the sense that the terms are gathered, but the student here did not order the terms to write their expression in canonical form. Hence, we need quite a number of different answer tests to establish equality in various senses of the word.</p> <p>This list is in approximate order of the size of the equivalence classes from most to least restrictive.</p> Test Description (see below for more details) CasEqual Are the parse trees of the two expressions equal? EqualComAss Are they equal up to commutativity and associativity of addition and multiplication, together with their inverses minus and division? EqualComAssRules Are they equal up to commutativity, associativity and with optional rules such as 0\\times x \\rightarrow 0? AlgEquivNouns Are they algebraically equivalent, preserving noun forms of operators, e.g. <code>diff</code>? AlgEquiv Are they algebraically equivalent? SubstEquiv Can we find a substitution of the variables of ex_2 into ex_1 which renders ex_1 algebraically equivalent to ex_2? SameType Are the two expressions of the same types of object?  Note that this test works recursively over the entire expression."},{"location":"en/Authoring/Answer_Tests/Equivalence/#AlgEquiv","title":"AlgEquiv","text":"<p>This is the most commonly used test.  The pseudo code</p> <pre><code>If\n  simplify(ex1-ex2) = 0\nthen\n  true\nelse\n  false.\n</code></pre> <p>This test will work with a variety of types of object of mathematical objects, including lists, sets, equations, inequalities and matrices.</p> <ul> <li>This test disregards whether simplification is switched on, it always fully simplifies all its arguments.</li> <li>Use <code>AlgEquiv(predicate(ex),true)</code> with predicate functions, to test the result is true.  But note that many predicate functions only work without simplification!  In particular, testing for \"form\" such as scientific notation need <code>simp:false</code>, in which case use <code>EqualComAss(predicate(ex),true)</code> rather than algebraic equivalence.</li> </ul> <p>Note: exactly what this answer test does depends on what objects are given to it.  In particular the pseudo code above only applies to expressions.  We cannot subtract one list or set from another, so we have to use other tests.</p> <p>For sets, the CAS tries to write the expression in a canonical form.  It then compares the string representations these forms to remove duplicate elements and compare sets.  This is subtly different from trying to simplify the difference of two expressions to zero.  For example, imagine we have \\{(x-a)^{6000}\\} and \\{(a-x)^{6000}\\}.  One canonical form is to expand out both sides.  While this work in principal, in practice this is much too slow for assessment.</p> <p>Currently we do check multiplicity of roots, so that  (x-2)^2=0 and  x=2 are not considered to be equivalent.  Similarly a^3b^3=0 is not a=0 \\text{ or } b=0.  This is a long-standing issue and we would need a separate test to ignore multiplicity of roots.</p> <p>Inequalities are turned into sets of real numbers they represent.  When this is done it is indicated by the answer note <code>ATInequality_solver.</code>  If you want <code>a&gt;1</code> to be not the same as <code>x&gt;1</code> then you need to test in a more syntactic way, not using algebraic equivalence.</p> <p>Currently, \\{-\\frac{\\sqrt{2}}{\\sqrt{3}}\\} and \\{-\\frac{2}{\\sqrt{6}}\\} are considered to be different.  If you want these to be considered the same, you need to write them in a canonical form.   Instead of passing in just the sets, use the answer test to compare the following.</p> <pre><code>ev(radcan({-sqrt(2)/sqrt(3)}),simp);\nev(radcan({-2/sqrt(6)}),simp);\n</code></pre> <p>Why doesn't the test automatically apply <code>radcan</code>?  If we always did this, then \\{(x-a)^{6000}\\} and \\{(a-x)^{6000}\\} would be expanded out, which would break the system.  Since, in a given situation, we know a lot about what a student is likely to answer we can apply an appropriate form.   There isn't one rule which will work here, unfortunately.</p> <p>There are also some cases which Maxima can't establish as being equivalent.  For example  \\sqrt[3]{\\sqrt{108}+10}-\\sqrt[3]{\\sqrt{108}-10} = 2.  As Maxima code</p> <pre><code>(sqrt(108)+10)^(1/3)-(sqrt(108)-10)^(1/3)\n</code></pre> <p>This is Cardano's example from Ars Magna, but currently the AlgEquiv test cannot establish these are equivalent.  There are some other examples in the test suite which fail for mathematical reasons.  In cases like this, where you know you have a number, you may need to supplement the AlgEquiv test with another numerical test.</p> <p>We recommend you do not use algebraic equivalence testing for floating point numbers.  Instead use one of the numerical tests.  Examples of why algebraic equivalence fails when you might expect it to pass, e.g. <code>ATAlgEquiv(452,4.52*10^2)</code> (Maxima 5.44.0, November 2022), are given in the documentation on numerical rounding.</p> <p>In establishing equivalence with zero, this test tries to factor the expression and then check whether any of the factors are zero.  This works very well most of the time.  Expanding out expressions is not used, indeed we avoid operations that leads to expression growth.</p> <ul> <li>Expanding out expressions is a problem, e.g. try <code>expand((x-a)^100-(x-b^100));</code> </li> <li>Factoring expressions can also be a problem, e.g. try <code>factor(%e^(10*k)-%e^(10*x));</code>, or <code>factor(x^105-1)</code> in maxima.</li> <li>Use of <code>trigexpand</code> can also lead to computational explosion, e.g. try <code>trigexpand:true; trigsimp(sin(100*k));</code></li> </ul> <p>If you have an expression with large exponents, then this can cause a problem when algebraic equivalence testing uses factoring leading to a timeout.  You can avoid factoring using this variable in the feedback variable section of the PRT.</p> <pre><code>algebraic_equivalence_factorp:false;\n</code></pre> <p>You can avoid using trigexpand using this global variable.</p> <pre><code>algebraic_equivalence_trigexpandp:false;\n</code></pre> <p>These settings will reduce the \"strength\" of the test, but will avoid timeouts caused by expression explosion caused by the use of <code>factor</code>.</p>"},{"location":"en/Authoring/Answer_Tests/Equivalence/#equalcomass","title":"EqualComAss","text":"<p>A particularly useful test is to establish that two expressions are equal up to commutativity and associativity of addition and multiplication, together with their inverses minus and division.  For example, under this test  x+y = y+x \\text{ but } x+x \\neq 2x. Please see the separate documentation.</p>"},{"location":"en/Authoring/Answer_Tests/Equivalence/#algequivnouns","title":"AlgEquivNouns","text":"<p>Algebraic equivalence evaluates as much as possible, to try to establish equivalence.  This means, e.g. that <code>diff(y,x)</code> is always evaluated to 0.  If you use AlgEquivNouns then noun forms of operators are not evaluated, so <code>diff(y,x)</code> will be evaluated but <code>'diff(y,x)</code> and <code>noundiff(y,x)</code> will not.</p> <p>Even with this answer test <code>noundiff(y,x)</code> and <code>noundiff(y(x),x)</code> are different!</p> <p>Note, that logic nouns such as <code>nounand</code> are still evaluated by this test!  Sorry, but logical noun functions are dealt with internally in a very different way than Maxima noun functions such as <code>'diff(y,x)</code> and the parallel <code>noundiff</code>.  Use a different test, such as <code>EqualComAss</code>.</p> <p>It was the need to selectively evaluate some nouns but not others that led to the development of the rule-based answer tests to deal with the need for these options in a coherent way.</p>"},{"location":"en/Authoring/Answer_Tests/Equivalence/#casequal","title":"CasEqual","text":"<p>The CAS returns the result of the simple Maxima command</p> <pre><code>if StudentAnswer=TeacherAnswer then true else false.\n</code></pre> <p>There is no explicit simplification here (unlike AlgEquiv). This test always assumes simplification is off, i.e. <code>simp:false</code>, regardless of any question settings.  If this is too strict, use <code>ev(ex,simp)</code> in the arguments to simplify them explicitly first. When simplification is off this test effectively tests whether the parse trees are identical.</p> <p>Please note, the behaviour of this test relies on the internal representation of expressions by Maxima, rather than an explicit mathematical property such as \"equivalence\".  Explicit properties should be tested in preference to using this test!</p>"},{"location":"en/Authoring/Answer_Tests/Equivalence/#substequiv","title":"SubstEquiv","text":"<p>Can we find a substitution of the variables of ex_2 into ex_1 which renders ex_1 algebraically equivalent to ex_2?</p> <ul> <li>Because we have to test every possibility, the algorithm is factorial in the number of variables.  For this reason, the test only works for 4 or fewer variables.</li> <li>This test makes a substitution then uses AlgEquiv.</li> <li>If you add an answer test option (not required) in the form of a list of variables, these variables will be \"fixed\" during the comparison.  The list of variable is removed from both lists of the teacher's and student's variable lists before any comparison.</li> <li><code>ATSubstEquiv(x=A+B, x=a+b)</code> will match with <code>[A = a,B = b,x = x]</code>.</li> <li><code>ATSubstEquiv(x=A+B, x=a+b, [x])</code> will match with <code>[A = a,B = b]</code>.</li> <li><code>ATSubstEquiv(y=A+B, x=a+b, [x])</code> will not match since <code>x</code> in the teacher's answer is fixed here, but does not occur in the student's answer.</li> </ul> <p>The optional argument, which must be a list of variables, is useful if you want to establish that a student has used arbitrary constants in A\\sin(x)+B\\cos(x) but make sure x really stays as x.</p>"},{"location":"en/Authoring/Answer_Tests/Equivalence/#sysequiv","title":"SysEquiv","text":"<p>The SysEquiv (system equivalence) test takes in two lists of polynomial equations in any number of variables and determines whether the two systems have the same set of solutions. This is done using the theory of Grobner bases to determine whether the ideals generated by the two systems are equal. As the test allows for polynomials in several variables, it can cope with the intersections of the conic sections, as well as a large number of geometrically interesting curves.</p> <ul> <li>This test does not check if the student actually \"fully solved\" the equations!  E.g.  [x^2=1] \\equiv [(x-1)\\cdot (x+1)=0]  under this test.</li> <li>This test disregards whether simplification is switched on, it only simplifies its arguments where required. This allows the test to list equations in feedback that the student has erroneously included in their system.</li> <li>You can allow the student to include \"redundant assignments\".  For example, if you have <code>[90=v*t,90=(v+5)*(t-1/4)]</code> but the student has <code>[d=90,d=v*t,d=(v+5)*(t-1/4)])</code> then the systems are not equivalent, because the student has an extra variable.  Use <code>stack_eval_assignments</code> to eliminate explicit assignments of the form <code>var=num</code> and evaluate the other expression in this context.</li> </ul>"},{"location":"en/Authoring/Answer_Tests/Form/","title":"Algebraic Form","text":"<p>Often, we wish to establish if the student's expression has the correct form. For example, consider the following written forms of .</p> <p> (x-2)(x-2),\\quad (x-2)^2,\\quad  (2-x)^2,\\quad  4\\left(1-\\frac{x}{2}\\right)^2. </p> <p>Each of these might be considered to be factored.  Establishing <code>ex</code> is factored is not the same as comparing it with <code>factor(ex)</code>.</p>"},{"location":"en/Authoring/Answer_Tests/Form/#facform-factorisation-of-polynomials","title":"FacForm: factorisation of polynomials","text":"<p>This test checks (i) that SAns is algebraically equivalent to TAns , and (ii) that SAns is \"factored\" over the rational numbers. The answer test expects the option to be the variable, which is needed to generate feedback. If the answer is incorrect, quite detailed feedback is provided.</p> <p>An expression is said to be factored if it is written as a product of powers of distinct irreducible factors. Strictly speaking, in establishing that an expression is in factored form, we might not even care whether the terms in the product are fully simplified, as long as they are irreducible. Irreducibility on the other hand means we can't find further factors, but here we need some care. Consider x^8+16x^4+48.</p> <ol> <li>Any non-trivial factorization, e.g. (x^4+4)(x^4+12).</li> <li>A factorization into irreducible factors over the integers/rational numbers, i.e. (x^2+2x+x)(x^2-2x+2)(x^4+12).</li> <li>A factorization into terms irreducible over the reals, i.e. (x^2+2x+x)(x^2-2x+2)(x^2+2\\sqrt[4]{3}x+2\\sqrt[4]{3})(x^2-2\\sqrt[4]{3}x+2\\sqrt[4]{3}).</li> <li>A factorization into irreducible polynomials over the Gaussian integers, with i allowed, i.e. (x+1+i)(x+1-i)(x-1+i)(x-1-i)(x^4+12).</li> <li>A factorization over the complex numbers, where the factor (x^4+12) would also be split into the four terms x\\pm\\sqrt[4]{3}(1\\pm i).</li> </ol> <p>In elementary teaching, meaning 4. is unlikely to occur. Indeed, we might take this example to represent factoring over any extension field of the rational numbers.  We normally seek to establish that the factors are irreducible over the integers (which is equivalent to irreducibility over the rational numbers) or the reals.  But, unlike a canonical form, we are not particularly interested in the order of the terms in this product, or the order of summands inside these terms.</p> <p>The FacForm test establishes that the expression is factored over the rational numbers.  If the coefficients of the polynomial are all real, at worst you will have quadratic irreducible terms.  There are some delicate cases such as: (2-x)(3-x) vs  (x-2)(x-3)  and (1-x)^2 vs (x-1)^2, which this test will cope with.</p> <p>It is also possible a student will do something which is just plain odd, e.g. x^2-4x+4 can be rewritten as x(x-4+4/x) which is a \"product of powers of distinct irreducible factors\" but not acceptable to most teachers.  The student's answer must also be a polynomial in the variable (using <code>polynomialp</code> as the test predicate).</p>"},{"location":"en/Authoring/Answer_Tests/Form/#factorisation-of-integers","title":"Factorisation of integers","text":"<p>If you would like to ask a student to factor a polynomial, then do not use the <code>FacForm</code> answer test.  The <code>FacForm</code> answer test is designed to use with polynomials.</p> <p>Instead, switch off simplification and define</p> <pre><code>ta:factor(12);\n</code></pre> <p>and use <code>EqualComAss</code> as the answer test.</p> <p>Note however that EqualComAss does not think that <code>2^2*3</code> and <code>2*2*3</code> are the same!</p>"},{"location":"en/Authoring/Answer_Tests/Form/#partfrac-partial-fractions","title":"PartFrac: partial fractions","text":"<p>This test checks (i) that <code>SAns</code> is algebraically equivalent to <code>TAns</code> , and (ii) that <code>SAns</code> is in \"partial fraction form\". The option must be the variable.</p> <p>To help provide feedback to students on how to calculate the partial fraction form we have special function <code>poly_about_a(ex, v, a)</code> which writes the polynomial <code>ex</code> in variable <code>v</code> about the point <code>v=a</code>.  E.g. x^2=1-2(x-1)+(x-1)^2 when written about x=1. This is basically the complete finite Taylor series for the polynomial about x=1.  The form \"about x=a\" can readily be calculated by \"shift-expand-shift\" and without derivatives.  It is, in my view, somewhat neglected. See doi:10.1017/S0025557200003569 for applications to a limit-free derivative for polynomials.</p> <p>Here, e.g. if we have the question variables</p> <pre><code>n1:4;\np1:(9*y-8)/(y-n1)^2\np2:poly_about_a(num(p1), y, n1);\np3:map(lambda([ex], ex/denom(p1)), p2);\n</code></pre> <p>then feedback of the following form</p> <pre><code>You need to do more work on the term {@p1@}.\nIn particular, write the numerator {@num(p1)@} about the point {@y=n1@}.\nThis gives {@num(p1)=p2@}, which allows us to complete the partial fraction form as follows:\n\\[ {@p1@} = \\frac{ {@p2@} }{ {@denom(p1)@} } = {@p3@} = {@ev(p3,simp)@}. \\]\n</code></pre> <p>is rendered as:</p> <p>You need to do more work on the term {\\frac{9 y-8}{{\\left(y-4\\right)}^2}}. In particular, write the numerator {9 y-8} about the point {y=4}. This gives {9 y-8=28+9 \\left(y-4\\right)}, which allows us to complete the partial fraction form as follows:  {\\frac{9 y-8}{{\\left(y-4\\right)}^2}} = \\frac{ {28+9 \\left(y-4\\right)} }{ {{\\left(y-4\\right)}^2} } = {\\frac{28}{{\\left(y-4\\right)}^2}+\\frac{9 \\left(y-4\\right)}{{\\left(y-4\\right)}^2}} = {\\frac{9}{y-4}+\\frac{28}{{\\left(y-4\\right)}^2}}.  </p>"},{"location":"en/Authoring/Answer_Tests/Form/#singlefrac-single-fractions","title":"SingleFrac: Single fractions","text":"<p>This test checks (i) that SAns is algebraically equivalent to TAns , and (ii) that SAns is written as a single fraction. Notes</p> <ul> <li>This test works at the top level, making sure the expression as a whole is a single fraction.</li> <li>if you also want this expression written in lowest terms, then this is quite a separate test.  You need to first confirm you have a single fraction then add a new potential response. One way is to use the ../CAS/Predicate functions <code>lowesttermsp(ex)</code> and compare the result with <code>true</code> with the AlgEquiv test.</li> <li>The algebraic equivalence check is for convenience.  If you only want to check an expression is a single fraction make SAns=TAns, i.e. ATSingleFrac(ex,ex) will do.</li> </ul>"},{"location":"en/Authoring/Answer_Tests/Form/#lowestterms","title":"LowestTerms","text":"<p>This test checks that all numbers written in the first expression are in lowest terms and that the denominator is clear of surds and complex numbers.</p> <ul> <li>if you want to check whether a rational polynomial is written in lowest terms, this is not the test to use.  Instead, apply the predicate functions <code>lowesttermsp</code> to the expression.</li> <li>the second argument to this function is ignored, i.e. this test does not confirm algebraic equivalence.  You might as well use 0 here.</li> </ul>"},{"location":"en/Authoring/Answer_Tests/Form/#expanded","title":"Expanded ###","text":"<p>Confirms SAns is equal to <code>expand(SAns)</code>.  Note, the second argument to this answer test is not used (but must be non-empty).  Note with this test that an expression such as x^2-(a+b)x+ab is not considered to be expanded, and this test will return false.</p>"},{"location":"en/Authoring/Answer_Tests/Form/#completedsquare","title":"CompletedSquare","text":"<p>This test checks (i) that SAns is algebraically equivalent to TAns , and (ii) that SAns is in \"completed square form\". The option must be the variable.</p>"},{"location":"en/Authoring/Answer_Tests/Numerical/","title":"Numerical answer tests","text":"<p>This page is dedicated to answer tests which establish numerical precision.</p> <p>With these tests it is essential that the SAns field is exactly the name of the input.  For example, if your input is <code>ans1</code> then the SAns field of the answer test must only be <code>ans1</code>. The reason for this is that Maxima changes the display of floating-point numbers to remove or add trailing zeros.  These answer tests must take the value typed at the input, not the value passed through the CAS, otherwise digits will be changed.  This problem does not apply to the teacher's answer because we do not test whether the teacher has supplied the correct number of trailing zeros.  Care will be needed to display the correct number of significant figures with trailing zeros elsewhere in the question though.</p> <p>Further information and examples are given in the page on numbers and scientific units. </p> <p>All software have limitations on the extent to which they can robustly deal with numerical quantities.  Maxima, PHP (and hence STACK) are no exceptions.  Integers are essentially unproblematic, and CAS will support (almost) arbitrary precision integers.  Floating-point representations of real numbers are more difficult, and a classic discussion of how to represent continuous quantities in finite state machine is given by D. Goldberg. What every computer scientist should know about floating-point arithmetic. Computing Surveys, 23(1):5-48, March 1991. </p>"},{"location":"en/Authoring/Answer_Tests/Numerical/#numrelative-numabsolute","title":"NumRelative &amp; NumAbsolute","text":"<p>The option to these tests is a tolerance.  The default tolerance is 0.05.</p> <ul> <li>Relative: Tests whether <code>abs(sa-ta) &lt;= opt * abs(ta)</code> </li> <li>Absolute: Tests whether <code>abs(sa-ta) &lt; opt</code> </li> </ul> <p>NumRelative  and NumAbsolute can also accept lists and sets.  Elements are automatically converted to floats and simplified (i.e. <code>ev(float(ex),simp)</code>) and are compared to the teacher's answer using the appropriate numerical test and accuracy.  A uniform accuracy must be used.  With lists the order is important, but with sets it is not.  Checking whether two sets are approximately equal is an interesting mathematical problem....</p>"},{"location":"en/Authoring/Answer_Tests/Numerical/#gt-gte","title":"GT &amp; GTE","text":"<p>\"Greater than\" or \"Greater than or equal to\".  Both arguments are assumed to be numbers. The Answer test fully simplifies the SAns and converts this to a float if possible. This is needed to cope with expressions involving sums of surds,  etc.  Therefore, do expect some numerical rounding which may cause the test to fail in very sharp comparisons.</p>"},{"location":"en/Authoring/Answer_Tests/Numerical/#significant-figure-testing","title":"Significant figure testing","text":"<p>The significant figures of a number are digits that carry meaning. This includes all digits except</p> <ul> <li>leading zeros;</li> <li>trailing zeros when they are only placeholders to indicate the scale of the number.</li> </ul> <p>To establish the number of significant figures which arise from a calculation it is necessary to know the number of significant figures involved in the floating-point numbers used in the calculation.  This causes a problem in assessment when we have a numerical expression, such as 100, and seek to infer the number of significant figures.  Does this have one significant figure or three?</p> <p>The following cases illustrate the difficulties in inferring the number of significant digits from only the written form of a number.</p> <ul> <li> 0.0010 has exactly 2 significant digits.</li> <li> 100 has at least 1 and maybe even 3 significant digits.</li> <li> 1.00e3 has exactly 3 significant digits.</li> <li> 10.0 has exactly 3 significant digits.</li> <li> 0 has 1 significant digit.</li> <li> 0.00 has at least 1 and maybe even 3 significant digits.</li> <li> 0.01 has exactly 1 significant digit.</li> </ul> <p>Therefore, with trailing zeros there are a number of cases in which it is not possible to tell from the written form of an expression precisely how many significant digits are present in a student's answer.  This creates a problem for automatic assessment.</p> <p>To avoid this ambiguity some scientists adopt a convention where 100 has exactly one significant digit.  To express one hundred to three significant digits it is necessary to use 1.00e2.  This conforms to the specifications in international standards and it certainly avoids ambiguity but in many assessment situations teachers do not want to enforce such strict rules.  STACK seeks to provide tools for both situations:  very strict enforcement of the significant figures rules (needed when teaching significant figures of course!) and a more liberal situation in which STACK will accept an input of 100 when the teacher wanted 1, 2 or 3 significant figures.</p> <p>In addition to the number of significant figures used to express the number, a teacher will also want to establish that the student actually has the right number!  In more liberal situations a teacher will condone an error in the last place.  E.g. they will accept an answer written to four significant figures, but where only three are actually correct.</p>"},{"location":"en/Authoring/Answer_Tests/Numerical/#strictsigfigs","title":"StrictSigFigs","text":"<p>This test enforces the strict rules of significant figures.  It does not check for numerical precision and looks only at surface features of the number representation.</p> <p>The option is the required number of significant figures.  This must be an integer only.</p>"},{"location":"en/Authoring/Answer_Tests/Numerical/#numsigfigs","title":"NumSigFigs","text":"<p>This is a more liberal test.  Primarily it checks numerical accuracy, but it also checks the number of significant figures in a liberal way.  That is to say, it makes sure that the number of significant figures specified by the teacher lies within the range inferred from the student's answer.  For example, this test will accept 100 as being correctly written to 1, 2 or 3 significant figures.  If you want to enforce the precise rules use the <code>StrictSigFigs</code> test.</p> <p>Tests </p> <ol> <li>whether the student's answer contains <code>opt</code> significant figures, and</li> <li>whether the answer is accurate to <code>opt</code> significant figures.</li> </ol> <p>Numerical accuracy here ensures the student's answer is within \\pm .5 of the last significant place.  So, for example, by design this test will consider 9.8 to be equivalent to 10 to 2 significant figures.  The student's answer has been written to 2sf, and the answer is within \\pm 0.5 of 10.  Indeed, by this test <code>9.6</code>, <code>9.7</code>, <code>9.8</code>, <code>9.9</code> and <code>10</code> will all pass this test.  But <code>10.1</code> etc will fail (3 significant figures), rather than accuracy.  (This may make this test, with default options, less useful but changing the behaviour now would be problematic as well!)</p> <p>If the option is a list <code>[n,m]</code> then we check the answer has been written to <code>n</code> significant figures, with an accuracy of up to <code>m</code> places.  If the answer is too far out then rounding feedback will not be given.   A common test would be to ask for [n,n-1] to permit the student to enter the last digit incorrectly.</p> <p>If the options are of the form <code>[n,0]</code> then only the number of significant figures in <code>sa</code> will be checked.  This ignores any numerical accuracy and completely ignores the second argument to the function.  Note, that this test is liberal in establishing the number of significant figures.  For strict enforcement of the rules, use <code>StrictSigFigs</code> instead.</p> <p>If the options are of the form <code>[n,-1]</code> then the test checks the student has at least <code>n</code> significant figures in the answer, and that numerical accuracy is correct.</p> <p>This test only supports numbers where |sa|&lt;10^{22}.  Please see the notes about numerical rounding for the differences between rounding. In <code>NumSigFigs</code> the teacher's answer will be rounded to the specified number of significant figures before a comparison is made.</p>"},{"location":"en/Authoring/Answer_Tests/Numerical/#numdecplaces","title":"NumDecPlaces","text":"<p>Tests (i) whether the student's answer is equivalent to the teacher's and (ii) is written to <code>opt</code> decimal places.  The option, which must be a positive integer, dictates the number of digits following the decimal separator <code>.</code>.  Note that trailing zeros are ''required'', i.e. to two decimal places you must write <code>12.30</code> not just <code>12.3</code>.  The test rounds the numbers to the specified number of decimal places before trying to establish equivalence.</p>"},{"location":"en/Authoring/Answer_Tests/Numerical/#numdecplaceswrong","title":"NumDecPlacesWrong","text":"<p>Tests if the student appears to have the decimal point in the wrong place.  For example, <code>3.141</code> and <code>31.41</code> will be considered the same under this test.  <code>opt</code> is the number of places to consider, from the most significant.</p> <p>This test condones any lack of trailing zeros.  Use other tests to establish if a student has sufficient places.</p>"},{"location":"en/Authoring/Answer_Tests/Numerical/#other-issues","title":"Other issues","text":"<p>A teacher may wish to see if a student's answer is incorrect only by orders of magnitude.  E.g. a student answers 110 instead of 1100.  To do this, a teacher can check whether \\log_{10} of the ratio of two expressions is an integer, e.g.</p> <pre><code> integerp(rat(float(log(sa/ta)/log(10))))\n</code></pre> <p>There is currently no functionality within the numerical answer tests to automatically check this, and there is no dedicated answer test to establish this property.  A separate PRT node is needed.</p>"},{"location":"en/Authoring/Answer_Tests/Numerical/#see-also","title":"See also","text":"<ul> <li>Answer tests</li> <li>CAS and numbers</li> <li>Scientific units</li> <li>Maxima</li> </ul>"},{"location":"en/Authoring/Answer_Tests/Other/","title":"Other answer tests","text":"<p>There are a small number of answer tests for specific situations.</p>"},{"location":"en/Authoring/Answer_Tests/Other/#sets","title":"Sets","text":"<p>This test deals with equality of sets.  The algebraic equivalence functions give very minimal feedback.  This test is designed to give much more detailed feedback on what is and is not included in the student's answer.  Hence, this essentially tells the student what is missing.  This is kind of feedback is tedious to generate without this test.</p> <p>The test simplifies both sets, and does a comparison based on the simplified versions.  The comparison relies on <code>ev(..., simp, nouns)</code> to undertake the simplification.  If you need stronger simplification (e.g. trig) then you will need to add this to the arguments of the function first.</p>"},{"location":"en/Authoring/Answer_Tests/Other/#equiv-and-equivfirstlast","title":"Equiv and EquivFirstLast","text":"<p>These answer tests are used with equivalence reasoning.  See the separate documentation.</p>"},{"location":"en/Authoring/Answer_Tests/Other/#proplogic","title":"PropLogic","text":"<p>An answer test designed to deal with propositional logic.  See the separate documentation.</p>"},{"location":"en/Authoring/Answer_Tests/Other/#validator","title":"Validator","text":"<p>STACK allows question authors to create bespoke validator functions to validate students' input.  These functions must take a single argument (the student's answer) and return a string.  The empty string <code>\"\"</code> indicates the string is \"valid\", and a non-empty string indicates the string is invalid.  The non-empty string is then an error message.</p> <p>Validator functions can be re-used in the validator answer test.</p> <ol> <li>The <code>SAns</code> field is passed as an argument to the answer test named in the test options.</li> <li>The <code>TAns</code> field must be non-empty, but is ignored by the test.</li> <li>The Test options must be the name of a validator function.  Do not apply the function.</li> <li>If the result is the empty string, the test returns <code>true</code>, and you proceed down the true PRT branch.</li> <li>If the result is a non-empty string, the test returns <code>false</code>, and you proceed down the false PRT branch.  The non-quiet version of the answer test appends the validator output to the feedback message.</li> </ol> <p>For example, if you want to test if a student has used a general, undefined, function (such as ) rather than a known mathematical function (such as \\sin(x)) then you can use the supported validator <code>validate_nofunctions</code>.</p>"},{"location":"en/Authoring/Answer_Tests/Rule_based/","title":"Rule-based answer tests","text":"<p>Rule-based answer tests are a special kind of mathematical answer test.</p>"},{"location":"en/Authoring/Answer_Tests/Rule_based/#EqualComAss","title":"Equality up to associativity and commutativity","text":"<p>The <code>EqualComAss</code> test establishes that two expressions are equal up to commutativity and associativity of addition and multiplication, together with their inverses minus and division.</p> <p>For example  but x+x\\neq 2x\\text{.} This is very useful in elementary algebra, where we want the form of the answer exactly. This test seeks to establish whether two expressions are the same when the basic operations of arithmetic addition/multiplication and Boolean and/or are assumed to be nouns but are commutative and associative.  Hence, 2x+y=y+2x but x+x+y\\neq 2x+y.  The unary minus commutes with multiplication in a way natural to establishing the required form of equivalence.</p> <p>This is a particularly useful test for checking that an answer is written in a particular form, e.g. \"simplified\".</p> <p>Notes</p> <ol> <li>Simplification is automatically switched off when this test is applied, otherwise it makes no sense.</li> <li>This test does not include laws of indices, so x\\times x \\neq x^2. Since we are dealing only with nouns -\\times - does not simplify to 1. E.g. -x\\times -x \\neq x\\times x \\neq x^2.  This also means that \\sqrt{x} is not considered to be equivalent to x^{\\frac{1}{2}} under this test.  In many situations this notation is taken to mean the same thing, but internally in Maxima they are represented by different functions and are not converted to a canonical form by the test.</li> <li>By design, addition commutes with subtraction, so  -1+2\\equiv 2-1 and multiplication commutes with division, so  (ab)/c\\equiv a(b/c) .</li> <li>By design -1/4x \\neq -x/4 since we do not have the rule  1\\times x \\rightarrow x.  To establish this equivalence we would need a different answer test.</li> <li>By design 0.75 \\neq 1/4.  If you would like to rationalise numbers within an expression <code>ex</code> you can pre-process it with <code>num_ensure_rational(ex)</code>.  This traverses the expression tree and makes sure all floating point numbers are converted.  This is different from applying Maxima's <code>rat</code> function at the top level which changes the structure of the expression.  Beware of converting binary floats into rational expressions though!</li> <li>This test can also be used to establish \\{4,4\\} \\neq \\{4\\}, but \\{1,2\\} = \\{2,1\\} since the arguments of the set constructor function are commutative.  Sets are not associative, so \\{1,2\\} \\neq \\{\\{1\\},2\\}.  (See Maxima's <code>flatten</code> command.)</li> </ol>"},{"location":"en/Authoring/Answer_Tests/Rule_based/#unary-minus-and-division","title":"Unary minus and division","text":"<p>In order to understand how the tests work it is essential to understand how we represent unary minus and division internally.</p> <p>Without simplification, Maxima has a unary minus function:  literally <code>minus(x)</code>.  This is transformed into <code>UNARY_MINUS nounmul ex</code>  The use of multiplication here allows <code>-</code> to commute with other multiplication, so we can spot things like -x \\times -y = --xy using associativity and commutativity.</p> <p>Similarly, we replace division a/b with <code>a nounmul UNARY_RECIP(b)</code>.  This means that <code>UNARY_RECIP(b)</code> is not automatically the same as <code>1 nounmul UNARY_RECIP(b)</code>, without an additional rule.</p>"},{"location":"en/Authoring/Answer_Tests/Rule_based/#equalcomassrules","title":"EqualComAssRules","text":"<p>This is an advanced test.</p> <p>This test allows question authors to create equivalence classes based on equality up to associativity and commutativity with the addition of optional rules. For example, the teacher can include the identity operations of addition and multiplication: 0+ x\\rightarrow x and 1\\times x\\rightarrow x.  This makes it much easier to establish things like 0-1\\times i is equivalent to -i.  However, more general integer arithmetic is still not automatically included so 2\\times 3 \\neq 6.</p> <p>This test always assumes associativity of addition and multiplication.   By default the test assumes commutativity of addition and multiplication, but this can be dropped.  Essentially this test extends the <code>EqualComAss</code> test by adding in additional rules. Without assumptions of commutativity and associativity we would need all sorts of additional rules, such as x+0 \\rightarrow x, since without commutativity this would not be captured by the rule <code>zeroAdd</code>, i.e. 0+x \\rightarrow x.  Furthermore, the way <code>EqualComAss</code> deals with unary minus and division make associativity and commutativity difficult to add in their pure form.</p> <p>Each rule is a named function in Maxima, and each rule has an associated predicate function to decide if the rule is applicable at the top level of an expression.   E.g. <code>zeroAddp(0+x)</code> would return <code>true</code> and <code>zeroAdd(0+x)</code> would return <code>x</code>.</p> <p>The teacher must supply an option consisting of a list of the following rule names.</p> Name Rule (<code>ALG_TRANS</code>) Included by default <code>assAdd</code> Associativity of addition <code>assMul</code> Associativity of multiplication <code>comAdd</code> Commutativity of addition <code>comMul</code> Commutativity of multiplication - Options to switch off the defaults <code>noncomAdd</code> Indicate addition is non-commutative <code>noncomMul</code> Indicate multiplication is non-commutative <code>comMulNum</code> Commutativity of numbers (inc unary minus) only within multiplication <code>comNeg</code> Commutativity of only unary minus within multiplication (<code>ID_TRANS</code>) <code>zeroAdd</code> 0+x \\rightarrow x <code>zeroMul</code> 0\\times x \\rightarrow 0 <code>oneMul</code> 1\\times x \\rightarrow x <code>oneDiv</code> \\frac{x}{1} \\rightarrow x <code>onePow</code> 1^x \\rightarrow 1 <code>idPow</code> x^1 \\rightarrow x <code>zeroPow</code> 0^x \\rightarrow 0 if x \\neq 0 <code>zPow</code> x^0 \\rightarrow 1  if x \\neq 0 (<code>NEG_TRANS</code>) <code>negNeg</code> -(-x) \\rightarrow x <code>negDiv</code>  y/(-x) \\rightarrow -y/x   (Note, this assumes <code>UNARY_RECIP</code> and <code>UNARY_MINUS</code>) <code>negOrd</code> Order summands so that the leading coefficient is not negative (see notes below). (<code>DIV_TRANS</code>) <code>recipMul</code>  x/a\\times y/b \\rightarrow (x\\,y)/(a\\,b)  <code>divDiv</code>  a/(b/c) \\rightarrow a\\,c/b  Note  a/b/c  is interpreted as   (a/b)/c=a/(b\\,c)  in Maxima. <code>divCancel</code> Cancel common factors in numerator and denominator. (<code>INT_ARITH</code>) <code>intAdd</code> Perform addition on integers <code>intMul</code> Perform multiplication on integers <code>intPow</code> Perform exponentiation when both arguments are integers <code>ratAdd</code> Add any integer fractions in a sum <code>ratLow</code> Write a fraction a/b in lowest terms. a and b must be integers Other <code>intFac</code> Factor integers (incompatible with <code>intMul</code>) <code>negDist</code> Distribute only <code>UNARY_MINUS</code> over a sum (incompatible with <code>negOrd</code>) <code>sqrtRem</code> Remove the <code>sqrt</code> function and replace with <code>^(1/2)</code> <p>Notes: </p> <ul> <li>We do not guarantee the simplification is mathematically correct!  E.g. if you are unlucky enough to try the rule <code>zeroPow</code> on the expression <code>0^(1-1)</code> then since <code>1-1</code> is not equal to zero (taken literally) then the rule applies and you have failed to spot a potential <code>0^0</code> error.</li> <li>The rule <code>negOrd</code> deserves comment.  Ultimately we only compare parse trees exactly, and so we need to order terms in sums and products (commutativity). However y-x is never ordered as -x+y.  Furthermore, -(x-y) \\neq -x+y.  We need to factor out the unary minus and ensure that the coefficient of the leading term is not negative. Factoring out is better than distributing here, since in a produce such as -(x-y)(x-z) it is not clear which term in the product the initial minus sign will end up in. Since <code>negOrd</code> is a factor command, it is incompatible with <code>negDist</code>.</li> <li>Note that <code>oneDiv</code> only operates on the very special case of a single 1 in the denominator of a fraction.  E.g. in \\frac{x}{1\\times a} we have a product 1\\times a in the denominator.  To further simplify this you need <code>oneMul</code> rather than <code>oneDiv</code>.</li> </ul> <p>By default the test assumes commutativity of addition and multiplication.  If you choose the <code>nonmulCom</code> rule then you can switch off commutativity of multiplication.  However, rules such as <code>zeroMul</code> include both 0\\times x \\rightarrow 0 and x\\times 0 \\rightarrow 0.  The rules <code>intMul</code> (etc) would appear to be non-compatible with <code>nonmulCom</code>, however they are very useful in that by performing integer arithmetic we bring integers to the front of the expression.</p> <p>For convenience sets of rules can be specified.  E.g. you can use the name <code>ID_TRANS</code> in place of the list <code>[zeroAdd,zeroMul,oneMul,oneDiv,onePow,idPow,zeroPow,zPow]</code> to include all of the basic identity operators.</p> <p>If you want to remove tests from a list you can use code such as <code>delete(zeroAdd, ID_TRANS)</code>.</p> <p>The test takes the student's answer and teacher's answer and repeatedly applies the rules in turn until the expressions remain the same.  The rules are designed to always shorten the expression, so the process is guaranteed to terminate.  Once the expression is written in final form, the test compares the two expression trees.</p> <p>If you add the rule <code>testdebug</code> then you will see both expressions in the answer note.  This is useful for debugging, but would clutter up things in a production setting.</p>"},{"location":"en/Authoring/Answer_Tests/Rule_based/#examples-of-use","title":"Examples of use","text":""},{"location":"en/Authoring/Answer_Tests/Rule_based/#unique-prime-factorisation","title":"Unique prime factorisation","text":"<p>Imagine we have asked students to find the prime decomposition of 1617 = 3^1\\cdot 7^2\\cdot 11^1.  This is the answer we are aiming at, but we also want to condone the answer 3\\cdot 7^2\\cdot 11.   We can do this with the rule <code>[idPow]</code>.  We might also (being generous perhaps) want to also accept  2^0\\cdot 3^1\\cdot 5^0\\cdot 7^2\\cdot 11^1 .  We can do this with the three rules <code>[oneMul,idPow,zPow]</code>.  You can try this code in the sandbox.</p> <pre><code>ATEqualComAssRules(2^0*3^1*5^0*7^2*11^1, 3^1*7^2*11^1, [oneMul,idPow,zPow]);\n</code></pre> <p>Note, this test always assumes commutativity so you can't (currently) enforce the order of writing the prime factors.</p>"},{"location":"en/Authoring/Answer_Tests/Rule_based/#fractions-with-one-in-the-numerator","title":"Fractions with one in the numerator","text":"<p>Imagine the teacher's answer is \\frac{\\sin(3x)}{2} but a student types in \\frac{1}{2}\\sin(3x).  In this case <code>ATEqualComAss</code> won't establish equivalence because the rule 1\\times\\sin(3x)\\rightarrow \\sin(3x) is needed.  This can be done with the following.</p> <pre><code>ATEqualComAssRules(1/2*sin(3*x), sin(3*x)/2, [oneMul]);\n</code></pre>"},{"location":"en/Authoring/Answer_Tests/Rule_based/#developer-notes","title":"Developer notes","text":"<p>This functionality was introduced in April 2021.  It is essential that the rules, and any combination of the rules, can only proceed in a single direction and that no infinite loops are created.  So, <code>intAdd</code> is fine because adding together two integers will make an expression simpler which in this case is shorter.  For this reason we do not have expanding out (i.e. distribution) rules in the above set, and no rules of indices (which readily lead to mathematical errors).  Use Maxima's simplifier if you want to include such rules.</p> <p>STACK creates parallel operators for <code>*</code>, <code>+</code> etc. so that we have full control over the simplifier and the rules in play.  E.g. <code>nounadd</code> instead of <code>+</code>.</p> <p>You can use <code>equals_commute_prepare(ex)</code> to change an expression into this noun form.  An optional second argument <code>equals_commute_prepare(ex, sc)</code> is the set of operators considered commutative, e.g. typically a subset of <code>{\"nouneq\", \"nounand\", \"nounor\", \"nounset\", \"nounadd\", \"nounmul\"}</code>.</p> <p>The simplifier rules assume <code>simp:false</code> and that the expression has noun forms. The simplifier rule names are Maxima functions with exactly the names shown above. Each rule has a predicate function, which decides if the rule can be applied at the top level of the expression.  E.g. <code>oneMulp(1*x)</code> is true, but <code>oneMulp(2+(1*x))</code> is false because the <code>1*x</code> is not at the top level of the expression <code>2+(1*x)</code>, it's deeper within the expression.</p> <p>To deal with unary minus we transform it into multiplication with a special tag <code>UNARY_MINUS</code>. For example <code>-x</code> becomes <code>UNARY_MINUS * x</code>.  This approach looks odd at first, but does not confuse <code>UNARY_MINUS</code> with the integer -1 or the unary function \"minus\".  In this way multiple unary minus operations commute to the front of an expression.  E.g. <code>(-x)*(-y) = UNARY_MINUS * UNARY_MINUS * x * y</code> (when <code>*</code> is assumed to be commutative and associative, of course!)</p> <p>Similarly, division is also conveted to <code>UNARY_RECIP</code>.  E.g. <code>(-x)/(-y) = UNARY_MINUS nounmul UNARY_RECIP(UNARY_MINUS nounmul y) nounmul x</code>.</p> <p>We the use the rule <code>negDiv</code> to pull out the unary minus outside the devision (pulls <code>UNARY_MINUS</code> outside <code>UNARY_RECIP</code>), but we also need the rules <code>assMul</code> (associativity) and <code>comMul</code> (commutativity).  E.g. try the following in the STACK-maxima sandbox.</p> <pre><code>ex:(-x)/(-y);\nex:equals_commute_prepare(ex);\ntransl(ex,[assMul, comMul, negDiv]);\n</code></pre> <p>This results in <code>UNARY_MINUS nounmul UNARY_MINUS nounmul x nounmul UNARY_RECIP(y)</code>, literally <code>- * - * x * 1/y</code>.   We could also include the rule <code>negNeg</code> to remove the double minus.</p> <pre><code>transl(ex,[assMul, comMul, negDiv, negNeg]);\n</code></pre> <p>gives <code>x nounmul UNARY_RECIP(y)</code>.</p> <p>The goal of this code is to create reliable equivalence classes of expressions.  We are gradually expanding the use to allow full control over elementary expressions. Note in particular the use of <code>UNARY_MINUS</code> and <code>UNARY_RECIP</code> are likely to cause confusion to students if an expression is manipulated using these rules and then shown to a student.  The function <code>verb_arith</code> removes all the noun forms used by this simplifier, translating the expression back to core Maxima functions. Note however that <code>UNARY_MINUS</code> and <code>UNARY_RECIP(ex)</code> are normally replaced by <code>(-1)*</code> and <code>ex^(-1)</code> respectively.</p> <p>The simplifier is designed to go in one direction only to establish membership of an equivalence class. We do not (as of Dec 2024) support displaying the resulting manipulated expressions in traditional form.</p> <p>The code is all in <code>stack/maxima/noun_simp.mac</code>.</p> <p>We do not currently support user-defined rules (sorry!).</p>"},{"location":"en/Authoring/Answer_Tests/Rule_based/#see-also","title":"See also","text":"<ul> <li>Answer tests</li> </ul>"},{"location":"en/Authoring/Answer_Tests/String/","title":"String matching","text":"<p>On rare occasions string matching is useful.</p> <p>Note that rather than using a string match a useful feature is the Damerau-Levenshtein distance.</p> <p>If the argument to these tests is not a Maxima string then (1) whitespace is stripped off and (2) the expression is turned into a string.  The conversion to a Maxima string happens inside PHP: if you use <code>ATString</code> in the sandbox without a string argument, the Maxima function will throw an error.</p>"},{"location":"en/Authoring/Answer_Tests/String/#atstring","title":"ATString","text":"<p>This test performs a string match.  Whitespace anywhere within a string is unchanged.</p> <p>If you use a string input, and want to trim whitespace from each end before using this answer test, you can process the string in Maxima, e.g. using <code>strim(\" \", ans1)</code>.  This can be used as an argument to <code>ATString</code> in the PRT.</p>"},{"location":"en/Authoring/Answer_Tests/String/#atstringsloppy","title":"ATStringSloppy","text":"<p>This test removes all spaces, new lines and tabs within the string and then performs a string match.</p>"},{"location":"en/Authoring/Answer_Tests/String/#atsregexp","title":"ATSRegExp","text":"<p>This test uses Maxima's <code>regex_match</code> function.</p> <ul> <li>Both arguments to the test must be Maxima strings.  If you have a general expression, turn it into a string in the feedback variables with Maxima's <code>string</code> function.</li> <li>The first argument should be the string, and the second argument should be the pattern to match.</li> <li>It yields true if the pattern is matched anywhere within the student answer and false otherwise. Testing for full equality of the answer string can be achieved via regex anchoring by use of <code>^</code> or <code>$</code>.</li> <li>Don't forget to escape within the pattern strings as needed. Note that there is a function <code>string_to_regex()</code> that will handle escaping of characters that would otherwise have meaning in the pattern. Also remember that you need to escape the backslashes like normal in Maxima-strings.  That is to say, if you want to use <code>\\s</code> in a pattern you need to double up the backslashes. For example <code>\"(Alice|Bob)\\\\s+went\\\\s+to\\\\s+the\\\\s+(bank|market)\"</code>.</li> <li>One can read more about the patterns possible. Case-insensitivity may be something worth noting there.</li> </ul> <p>For example, write a STACK question with the following question variables.</p> <pre><code>s1:\"(Alice|Bob)\\\\s+went\\\\s+to\\\\s+the\\\\s+(bank|market)\";\ns2:\"Alice went to the market\";\ns3:\"Bob       went to the    bank\";\n</code></pre> <p>Then</p> <ol> <li>Use the string input (<code>ans1</code>) with teacher's answer <code>s2</code>.</li> <li>In the PRT use the node <code>ATSRegExp(ans1, s1)</code>.  This will use the pattern in the string <code>s1</code> against the student's answer.</li> </ol> <p>This will match both strings <code>s2</code> and <code>s3</code>, and many others.</p>"},{"location":"en/Authoring/Answer_Tests/String/#regex_match_exactp","title":"<code>regex_match_exactp</code>","text":"<p>STACK also provides a helper function <code>regex_match_exactp(regex, str)</code> to check if the string equals the pattern matched by the regular expression.</p> <pre><code>Regex           String      Result\n(aaa)*(b|d)c    aaaaaabc    true\n(aaa)*(b|d)c    dc          true\n(aaa)*(b|d)c    aaaaaaabc   false\n(aaa)*(b|d)c    cca         false\n</code></pre> <p>Currently this is not provided as a separate answer test so you will need to use this predicate in the question variables and check the result against the expected value, or supply the predicate as an argument to an answer test.</p> <p>For example, using the question variables above you can define the following in the feedback variables.</p> <pre><code>sa:regex_match_exactp(s1, ans1);\n</code></pre> <p>Then you can use the <code>AlgEquiv</code> answer test to check the result is true/false, e.g. <code>ATAlgEquiv(sa, true)</code>.</p> <p><code>(RegExp)</code> NOTE: this test was removed in STACK version 4.3.</p>"},{"location":"en/Authoring/Answer_Tests/Results/","title":"Answer test results","text":"<p>These pages expose the results of running answer tests on STACK test cases, including the automatically generated feedback. These page are automatically generated from the STACK unit tests and are designed to show question authors what answer tests actually do. This includes cases where answer tests currently fail, which gives a negative expected mark.</p> <ul> <li>AlgEquiv</li> <li>AlgEquivNouns</li> <li>SubstEquiv</li> <li>EqualComAss</li> <li>EqualComAssRules</li> <li>CasEqual</li> <li>SameType</li> <li>SysEquiv</li> <li>Sets</li> <li>Expanded</li> <li>FacForm</li> <li>CompSquare</li> <li>PropLogic</li> <li>Equiv</li> <li>EquivFirst</li> <li>SingleFrac</li> <li>PartFrac</li> <li>Diff</li> <li>Int</li> <li>GT</li> <li>GTE</li> <li>NumRelative</li> <li>NumAbsolute</li> <li>NumSigFigs</li> <li>NumDecPlaces</li> <li>NumDecPlacesWrong</li> <li>SigFigsStrict</li> <li>Units</li> <li>UnitsStrict</li> <li>UnitsRelative</li> <li>UnitsStrictRelative</li> <li>UnitsAbsolute</li> <li>UnitsStrictAbsolute</li> <li>String</li> <li>StringSloppy</li> <li>Levenshtein</li> <li>SRegExp</li> <li>LowestTerms</li> </ul> <p>Comments and further test cases are very welcome.</p>"},{"location":"en/Authoring/Answer_Tests/Results/#see-also","title":"See also","text":"<ul> <li>Answer tests</li> </ul>"},{"location":"en/Authoring/Answer_Tests/Results/AddConst/","title":"AddConst: Answer test results","text":"<p>This page exposes the results of running answer tests on STACK test cases.  This page is automatically generated from the STACK unit tests and is designed to show question authors what answer tests actually do.  This includes cases where answer tests currentl fail, which gives a negative expected mark.  Comments and further test cases are very welcome.</p> AddConst Test?Student responseTeacher answerOptMarkAnswer note AddConst <pre>1/0</pre> <pre>1</pre> -1 STACKERROR_OPTION. TEST_FAILED The answer test failed to execute correctly: please alert your teacher. Missing option when executing the test.  AddConst <pre>x^3/3</pre> <pre>x^3/3</pre> -1 STACKERROR_OPTION. TEST_FAILED The answer test failed to execute correctly: please alert your teacher. Missing option when executing the test.  AddConst <pre>x^3/3</pre> <pre>x^3/3</pre> <pre>[[x]]</pre> -1 ATAddConst_Opt. The answer test failed to execute correctly: please alert your teacher. There is something wrong with the options given to the AddConst answer test. AddConst <pre>x^3/3</pre> <pre>x^3/3</pre> <pre>x^2</pre> -1 ATAddConst_Opt. The answer test failed to execute correctly: please alert your teacher. There is something wrong with the options given to the AddConst answer test. AddConst <pre>x^3/3</pre> <pre>x^3/3</pre> <pre>x^3/3</pre> -1 ATAddConst_Opt. The answer test failed to execute correctly: please alert your teacher. There is something wrong with the options given to the AddConst answer test. AddConst <pre>x^3/3</pre> <pre>x^3/3</pre> <pre>0</pre> -1 ATAddConst_Opt. The answer test failed to execute correctly: please alert your teacher. There is something wrong with the options given to the AddConst answer test. AddConst <pre>1/0</pre> <pre>1</pre> <pre>x</pre> -1 ATAddConst_STACKERROR_SAns. AddConst <pre>0</pre> <pre>0</pre> <pre>1/0</pre> -1 ATAddConst_STACKERROR_Opt. AddConst <pre>0</pre> <pre>0</pre> <pre>[x,1/0]</pre> -1 ATAddConst_STACKERROR_Opt. AddConst <pre>0</pre> <pre>0</pre> <pre>[x,NOCONST,1/0]</pre> -1 ATAddConst_STACKERROR_Opt. Basic tests AddConst <pre>x^3/3</pre> <pre>x^3/3</pre> <pre>x</pre> 0 ATAddConst_noconst. You need to add a constant. This should be an arbitrary constant, not a number. AddConst <pre>x^3/3</pre> <pre>x^3/3</pre> <pre>[x]</pre> 0 ATAddConst_noconst. You need to add a constant. This should be an arbitrary constant, not a number. AddConst <pre>x^3/3</pre> <pre>x^3/3</pre> <pre>aaa</pre> 0 ATAddConst_generic. You included an additional constant, but you didn't simply add it! AddConst <pre>x^3/3+1</pre> <pre>x^3/3</pre> <pre>x</pre> 0 ATAddConst_noconst. You need to add a constant. This should be an arbitrary constant, not a number. AddConst <pre>x^3/3+c</pre> <pre>x^3/3</pre> <pre>x</pre> 1 ATAddConst_true. AddConst <pre>x^3/3-c</pre> <pre>x^3/3</pre> <pre>x</pre> 0 ATAddConst_generic. You included an additional constant, but you didn't simply add it! AddConst <pre>x^3/3+c</pre> <pre>x^3/3</pre> <pre>c</pre> 0 ATAddConst_generic. You included an additional constant, but you didn't simply add it! AddConst <pre>x^3/3+c+1</pre> <pre>x^3/3</pre> <pre>x</pre> 1 ATAddConst_true. AddConst <pre>x^3/3+3*c</pre> <pre>x^3/3</pre> <pre>x</pre> 0 ATAddConst_generic. You included an additional constant, but you didn't simply add it! AddConst <pre>(x^3+c)/3</pre> <pre>x^3/3</pre> <pre>x</pre> 0 ATAddConst_generic. You included an additional constant, but you didn't simply add it! AddConst <pre>exp(x)+c</pre> <pre>exp(x)</pre> <pre>x</pre> 1 ATAddConst_true. AddConst <pre>exp(x)</pre> <pre>exp(x)</pre> <pre>x</pre> 0 ATAddConst_noconst. You need to add a constant. This should be an arbitrary constant, not a number. Several variables AddConst <pre>x^(k+1)/(k+1)</pre> <pre>x^(k+1)/(k+1)</pre> <pre>x</pre> 0 ATAddConst_generic. You included an additional constant, but you didn't simply add it! AddConst <pre>x^(k+1)/(k+1)</pre> <pre>x^(k+1)/(k+1)</pre> <pre>[x,k]</pre> 0 ATAddConst_noconst. You need to add a constant. This should be an arbitrary constant, not a number. AddConst <pre>x^(k+1)/(k+1)+c</pre> <pre>x^(k+1)/(k+1)</pre> <pre>x</pre> 0 ATAddConst_severalconst. Several additional constants have been found instead of just one constant of integration! AddConst <pre>x^(k+1)/(k+1)+c</pre> <pre>x^(k+1)/(k+1)</pre> <pre>[x,k]</pre> 1 ATAddConst_true. AddConst <pre>x^(k+1)/(k+1)+c</pre> <pre>x^(k+1)/(k+1)</pre> <pre>[x,c]</pre> 0 ATAddConst_generic. You included an additional constant, but you didn't simply add it! AddConst <pre>x^3/3+c+k</pre> <pre>x^3/3</pre> <pre>x</pre> 0 ATAddConst_severalconst. Several additional constants have been found instead of just one constant of integration! AddConst <pre>n*x^n</pre> <pre>n*x^(n-1)</pre> <pre>x</pre> 0 ATAddConst_generic. You included an additional constant, but you didn't simply add it! AddConst <pre>n*x^n</pre> <pre>n*x^(n-1)</pre> <pre>n</pre> 0 ATAddConst_generic. You included an additional constant, but you didn't simply add it! AddConst <pre>n*x^n</pre> <pre>(assume(n&gt;0), n*x^(n-1))</pre> <pre>[x,n]</pre> 0 ATAddConst_noconst. You need to add a constant. This should be an arbitrary constant, not a number. Strange constants AddConst <pre>x^3/3+c^2</pre> <pre>x^3/3</pre> <pre>x</pre> 0 ATAddConst_generic. You included an additional constant, but you didn't simply add it! AddConst <pre>x^3/3+c^2</pre> <pre>x^3/3</pre> <pre>[x,c]</pre> 0 ATAddConst_noconst. You need to add a constant. This should be an arbitrary constant, not a number. AddConst <pre>x^3/3+c^3</pre> <pre>x^3/3</pre> <pre>x</pre> 0 ATAddConst_generic. You included an additional constant, but you didn't simply add it! AddConst <pre>x^3/3*c</pre> <pre>x^3/3</pre> <pre>x</pre> 0 ATAddConst_generic. You included an additional constant, but you didn't simply add it! AddConst <pre>X^3/3+c</pre> <pre>x^3/3</pre> <pre>x</pre> 0 ATAddConst_severalconst. Several additional constants have been found instead of just one constant of integration! AddConst <pre>sin(2*x)</pre> <pre>x^3/3</pre> <pre>x</pre> 0 ATAddConst_noconst. You need to add a constant. This should be an arbitrary constant, not a number. AddConst <pre>x^2/2-2*x+2+c</pre> <pre>(x-2)^2/2</pre> <pre>x</pre> 1 ATAddConst_true.  Different variable names AddConst <pre>(t-1)^5/5+c</pre> <pre>(t-1)^5/5</pre> <pre>t</pre> 1 ATAddConst_true. AddConst <pre>(t-1)^5/5+c</pre> <pre>(t-1)^5/5</pre> <pre>x</pre> 0 ATAddConst_severalconst. Several additional constants have been found instead of just one constant of integration! AddConst <pre>(v-1)^5/5+c</pre> <pre>(v-1)^5/5</pre> <pre>v</pre> 1 ATAddConst_true. AddConst <pre>cos(2*x)/2+1+c</pre> <pre>cos(2*x)/2</pre> <pre>x</pre> 1 ATAddConst_true. AddConst <pre>(x-a)^6001/6001+c</pre> <pre>(x-a)^6001/6001</pre> <pre>x</pre> 0 ATAddConst_severalconst. Several additional constants have been found instead of just one constant of integration! AddConst <pre>(x-a)^6001/6001+c</pre> <pre>(x-a)^6001/6001</pre> <pre>[x,a]</pre> 1 ATAddConst_true. AddConst <pre>(x-a)^6001/6001</pre> <pre>(x-a)^6001/6001</pre> <pre>x</pre> 0 ATAddConst_generic. You included an additional constant, but you didn't simply add it! AddConst <pre>(x-a)^6001/6001</pre> <pre>(x-a)^6001/6001</pre> <pre>[x,a]</pre> 0 ATAddConst_noconst. You need to add a constant. This should be an arbitrary constant, not a number. AddConst <pre>4*%e^(4*x)/(%e^(4*x)+1)</pre> <pre>log(%e^(4*x)+1)+c</pre> <pre>x</pre> 0 ATAddConst_noconst. You need to add a constant. This should be an arbitrary constant, not a number. AddConst <pre>x^2/2-2*x+2+c</pre> <pre>(x-2)^2/2+k</pre> <pre>x</pre> 1 ATAddConst_true. Logarithms AddConst <pre>ln(x)</pre> <pre>ln(x)</pre> <pre>x</pre> 0 ATAddConst_noconst. You need to add a constant. This should be an arbitrary constant, not a number. AddConst <pre>ln(x)+c</pre> <pre>ln(x)+c</pre> <pre>x</pre> 1 ATAddConst_true. AddConst <pre>ln(k*x)</pre> <pre>ln(x)+c</pre> <pre>x</pre> 0 ATAddConst_generic. You included an additional constant, but you didn't simply add it! AddConst <pre>ln(abs(x))</pre> <pre>ln(abs(x))+c</pre> <pre>x</pre> 0 ATAddConst_noconst. You need to add a constant. This should be an arbitrary constant, not a number. AddConst <pre>ln(abs(x))+c</pre> <pre>ln(abs(x))+c</pre> <pre>x</pre> 1 ATAddConst_true. AddConst <pre>ln(k*abs(x))</pre> <pre>ln(abs(x))+c</pre> <pre>x</pre> 0 ATAddConst_generic. You included an additional constant, but you didn't simply add it! AddConst <pre>ln(abs(k*x))</pre> <pre>ln(abs(x))+c</pre> <pre>x</pre> 0 ATAddConst_generic. You included an additional constant, but you didn't simply add it! AddConst <pre>ln(x)+ln(a)</pre> <pre>ln(k*abs(x+a))</pre> <pre>x</pre> 0 ATAddConst_generic. You included an additional constant, but you didn't simply add it! AddConst <pre>log(x)^2-2*log(c)*log(x)+k</pre> <pre>ln(c/x)^2</pre> <pre>x</pre> 0 ATAddConst_severalconst. Several additional constants have been found instead of just one constant of integration! AddConst <pre>log(x)^2-2*log(c)*log(x)+k</pre> <pre>ln(c/x)^2</pre> <pre>[x,c]</pre> 1 ATAddConst_true. AddConst <pre>c-(log(2)-log(x))^2/2</pre> <pre>-1/2*log(2/x)^2</pre> <pre>x</pre> 1 ATAddConst_true. AddConst <pre>ln(abs(x+3))/2+c</pre> <pre>ln(abs(2*x+6))/2+c</pre> <pre>x</pre> 1 ATAddConst_true. AddConst <pre>ln(x*exp(c))</pre> <pre>ln(x)</pre> <pre>x</pre> 1 ATAddConst_true. AddConst <pre>ln(x^2*exp(c))</pre> <pre>ln(x)</pre> <pre>x</pre> 1 ATAddConst_true. AddConst <pre>ln(2*x*exp(c))</pre> <pre>ln(x)</pre> <pre>x</pre> 1 ATAddConst_true. AddConst <pre>ln(x*exp(c))+k</pre> <pre>ln(x)</pre> <pre>x</pre> 0 ATAddConst_severalconst. Several additional constants have been found instead of just one constant of integration! AddConst <pre>ln(x*exp(c))+k</pre> <pre>ln(x)</pre> <pre>[x,c]</pre> 1 ATAddConst_true. AddConst <pre>ln(x*exp(c))+k</pre> <pre>ln(x)</pre> <pre>[x,k]</pre> 1 ATAddConst_true. AddConst <pre>ln(x*exp(c))+k</pre> <pre>ln(x)</pre> <pre>[x,c,k]</pre> 0 ATAddConst_noconst. You need to add a constant. This should be an arbitrary constant, not a number. Testing the NONSTRICT option. All \"true\" examples return ATAddConst_generic instead. AddConst <pre>exp(x)+c</pre> <pre>exp(x)</pre> <pre>[x, NONSTRICT]</pre> 1 ATAddConst_true. AddConst <pre>exp(x)+c</pre> <pre>exp(x)</pre> <pre>[NONSTRICT,x]</pre> 1 ATAddConst_true. AddConst <pre>x^3/3+3*c</pre> <pre>x^3/3</pre> <pre>[x, NONSTRICT]</pre> 1 ATAddConst_true. AddConst <pre>x^3/3+3*c</pre> <pre>x^3/3</pre> <pre>[NONSTRICT, x]</pre> 1 ATAddConst_true. AddConst <pre>(x^3+c)/3</pre> <pre>x^3/3</pre> <pre>[x, NONSTRICT]</pre> 1 ATAddConst_true. AddConst <pre>(x^3+c)/3</pre> <pre>x^3/3</pre> <pre>[NONSTRICT, x]</pre> 1 ATAddConst_true. AddConst <pre>x^3/3+c^3</pre> <pre>x^3/3</pre> <pre>[x, NONSTRICT]</pre> 1 ATAddConst_true. AddConst <pre>x^3/3+c^3</pre> <pre>x^3/3</pre> <pre>[NONSTRICT, x]</pre> 1 ATAddConst_true. AddConst <pre>x^3/3*c</pre> <pre>x^3/3</pre> <pre>[x, NONSTRICT]</pre> 0 ATAddConst_generic. You included an additional constant, but you didn't simply add it! AddConst <pre>x^3/3*c</pre> <pre>x^3/3</pre> <pre>[NONSTRICT, x]</pre> 0 ATAddConst_generic. You included an additional constant, but you didn't simply add it! AddConst <pre>x^(k+1)/(k+1)+c</pre> <pre>x^(k+1)/(k+1)</pre> <pre>[x,c,NONSTRICT]</pre> 0 ATAddConst_generic. You included an additional constant, but you didn't simply add it! AddConst <pre>x^(k+1)/(k+1)+c</pre> <pre>x^(k+1)/(k+1)</pre> <pre>[x,NONSTRICT,c]</pre> 0 ATAddConst_generic. You included an additional constant, but you didn't simply add it! AddConst <pre>x^(k+1)/(k+1)+c</pre> <pre>x^(k+1)/(k+1)</pre> <pre>[NONSTRICT,x,c]</pre> 0 ATAddConst_generic. You included an additional constant, but you didn't simply add it! AddConst <pre>ln(k*abs(x))</pre> <pre>ln(abs(x))+c</pre> <pre>[x, NONSTRICT]</pre> 1 ATAddConst_true. AddConst <pre>ln(abs(k*x))</pre> <pre>ln(abs(x))+c</pre> <pre>[x, NONSTRICT]</pre> 1 ATAddConst_true. AddConst <pre>ln(x)+ln(a)</pre> <pre>ln(k*abs(x+a))</pre> <pre>[x, NONSTRICT]</pre> 1 ATAddConst_true. AddConst <pre>ln(k*abs(x))</pre> <pre>ln(abs(x))+c</pre> <pre>[NONSTRICT, x]</pre> 1 ATAddConst_true. AddConst <pre>ln(abs(k*x))</pre> <pre>ln(abs(x))+c</pre> <pre>[NONSTRICT, x]</pre> 1 ATAddConst_true. AddConst <pre>ln(x)+ln(a)</pre> <pre>ln(k*abs(x+a))</pre> <pre>[NONSTRICT, x]</pre> 1 ATAddConst_true. Some more complicated expressions AddConst <pre>ln(x^2+7*x+7)</pre> <pre>ln(x^2+7*x+7)</pre> <pre>x</pre> 0 ATAddConst_noconst. You need to add a constant. This should be an arbitrary constant, not a number. AddConst <pre>-2*log(x)-(10*x^6)/3+x^3/3+5*l\nog(x^4)+c</pre> <pre>-2*log(abs(x))+(10*x^6)/3-x^3/\n3-5/x^3+c</pre> <pre>x</pre> 1 ATAddConst_true. AddConst <pre>ln(abs(x^2+7*x+7))+c</pre> <pre>ln(abs(x^2+7*x+7))+c</pre> <pre>x</pre> 1 ATAddConst_true. AddConst <pre>ln(k*abs(x^2+7*x+7))</pre> <pre>ln(abs(x^2+7*x+7))+c</pre> <pre>x</pre> 0 ATAddConst_generic. You included an additional constant, but you didn't simply add it! AddConst <pre>log(abs(x-3))+log(abs(x+3))</pre> <pre>log(abs(x-3))+log(abs(x+3))</pre> <pre>x</pre> 0 ATAddConst_noconst. You need to add a constant. This should be an arbitrary constant, not a number. AddConst <pre>log(abs(x-3))+log(abs(x+3))+c</pre> <pre>log(abs(x-3))+log(abs(x+3))</pre> <pre>x</pre> 1 ATAddConst_true. AddConst <pre>2*log(abs(x-2))-log(abs(x+2))+\n(x^2+4*x)/2</pre> <pre>-log(abs(x+2))+2*log(abs(x-2))\n+(x^2+4*x)/2+c</pre> <pre>x</pre> 0 ATAddConst_noconst. You need to add a constant. This should be an arbitrary constant, not a number. AddConst <pre>-log(abs(x+2))+2*log(abs(x-2))\n+(x^2+4*x)/2+c</pre> <pre>-log(abs(x+2))+2*log(abs(x-2))\n+(x^2+4*x)/2+c</pre> <pre>x</pre> 1 ATAddConst_true. AddConst <pre>4*x*cos(x^12/%pi)+c</pre> <pre>x*cos(x^12/%pi)+c</pre> <pre>x</pre> 1 ATAddConst_true. AddConst <pre>4*x*cos(x^50/%pi)+c</pre> <pre>x*cos(x^12/%pi)+c</pre> <pre>x</pre> 1 ATAddConst_true. AddConst <pre>log(x-3)/6-log(x+3)/6+c</pre> <pre>log(x-3)/6-log(x+3)/6</pre> <pre>x</pre> 1 ATAddConst_true. AddConst <pre>asinh(x)</pre> <pre>ln(x+sqrt(x^2+1))</pre> <pre>x</pre> 0 ATAddConst_noconst. You need to add a constant. This should be an arbitrary constant, not a number. AddConst <pre>asinh(x)+c</pre> <pre>ln(x+sqrt(x^2+1))</pre> <pre>x</pre> 1 ATAddConst_true. AddConst <pre>-acoth(x/3)/3</pre> <pre>log(x-3)/6-log(x+3)/6</pre> <pre>x</pre> 0 ATAddConst_noconst. You need to add a constant. This should be an arbitrary constant, not a number. AddConst <pre>-acoth(x/3)/3+c</pre> <pre>log(x-3)/6-log(x+3)/6</pre> <pre>x</pre> 1 ATAddConst_true. AddConst <pre>log(x-a)/(2*a)-log(x+a)/(2*a)+\nc</pre> <pre>log(x-a)/(2*a)-log(x+a)/(2*a)</pre> <pre>x</pre> 0 ATAddConst_severalconst. Several additional constants have been found instead of just one constant of integration! AddConst <pre>log(x-a)/(2*a)-log(x+a)/(2*a)+\nc</pre> <pre>log(x-a)/(2*a)-log(x+a)/(2*a)</pre> <pre>[x,a]</pre> 1 ATAddConst_true. AddConst <pre>-acoth(x/a)/a+c</pre> <pre>log(x-a)/(2*a)-log(x+a)/(2*a)</pre> <pre>[x,a]</pre> 1 ATAddConst_true."},{"location":"en/Authoring/Answer_Tests/Results/AlgEquiv/","title":"AlgEquiv: Answer test results","text":"<p>This page exposes the results of running answer tests on STACK test cases.  This page is automatically generated from the STACK unit tests and is designed to show question authors what answer tests actually do.  This includes cases where answer tests currentl fail, which gives a negative expected mark.  Comments and further test cases are very welcome.</p> AlgEquiv Test?Student responseTeacher answerOptMarkAnswer note AlgEquiv <pre>1/0</pre> <pre>1</pre> -1 ATAlgEquiv_STACKERROR_SAns. TEST_FAILED The answer test failed to execute correctly: please alert your teacher. Division by zero. AlgEquiv <pre>1</pre> <pre>1/0</pre> -1 ATAlgEquiv_STACKERROR_TAns. TEST_FAILED The answer test failed to execute correctly: please alert your teacher. Division by zero. AlgEquiv <pre></pre> <pre>(x-1)^2</pre> -1 ATAlgEquivTEST_FAILED-Empty SA. The answer test failed to execute correctly: please alert your teacher. Attempted to execute an answer test with an empty student answer, probably a CAS validation problem when authoring the question. AlgEquiv <pre>x^2</pre> <pre></pre> -1 ATAlgEquivTEST_FAILED-Empty TA. The answer test failed to execute correctly: please alert your teacher. Attempted to execute an answer test with an empty teacher answer, probably a CAS validation problem when authoring the question. AlgEquiv <pre>x-1)^2</pre> <pre>(x-1)^2</pre> -1 ATAlgEquivTEST_FAILED-Empty SA. The answer test failed to execute correctly: please alert your teacher. Attempted to execute an answer test with an empty student answer, probably a CAS validation problem when authoring the question. See docs on subscripts and different atoms. AlgEquiv <pre>x1</pre> <pre>x_1</pre> 0 AlgEquiv <pre>x_1</pre> <pre>x[1]</pre> 0 AlgEquiv <pre>x[1]</pre> <pre>x1</pre> 0 Logic AlgEquiv <pre>true</pre> <pre>true</pre> 1 ATLogic_True. AlgEquiv <pre>false</pre> <pre>false</pre> 1 ATLogic_True. AlgEquiv <pre>true</pre> <pre>false</pre> 0 AlgEquiv <pre>false</pre> <pre>true</pre> 0 Predicates AlgEquiv <pre>integerp(3)</pre> <pre>true</pre> 1 ATLogic_True. AlgEquiv <pre>integerp(3.1)</pre> <pre>true</pre> 0 AlgEquiv <pre>integerp(3)</pre> <pre>false</pre> 0 AlgEquiv <pre>integerp(3)</pre> <pre>true</pre> 1 ATLogic_True. AlgEquiv <pre>lowesttermsp(x^2/x)</pre> <pre>true</pre> 1 ATLogic_True. AlgEquiv <pre>lowesttermsp(-y/-x)</pre> <pre>true</pre> 1 ATLogic_True. AlgEquiv <pre>lowesttermsp((x^2-1)/(x-1))</pre> <pre>true</pre> 0 AlgEquiv <pre>lowesttermsp((x^2-1)/(x+2))</pre> <pre>true</pre> 1 ATLogic_True. AlgEquiv <pre>scientific_notationp(4.1561*10\n^16)</pre> <pre>true</pre> 0 Case sensitivity AlgEquiv <pre>X</pre> <pre>x</pre> 0 ATAlgEquiv_WrongCase. AlgEquiv <pre>1/(R-r)</pre> <pre>1</pre> 0 AlgEquiv <pre>exdowncase(X)</pre> <pre>x</pre> 1 AlgEquiv <pre>exdowncase((X-1)^2)</pre> <pre>x^2-2*x+1</pre> 1 Permutations of variables (To do: a dedicated answer test with feedback) AlgEquiv <pre>Y=1+X</pre> <pre>y=1+x</pre> 0 ATEquation_default AlgEquiv <pre>v+w+x+y+z</pre> <pre>a+b+c+A+B</pre> 0 Numbers AlgEquiv <pre>4^(-1/2)</pre> <pre>1/2</pre> 1 AlgEquiv <pre>4^(1/2)</pre> <pre>sqrt(4)</pre> 1 Mix of floats and rational numbers AlgEquiv <pre>0.5</pre> <pre>1/2</pre> 1 AlgEquiv <pre>0.33</pre> <pre>1/3</pre> 0 AlgEquiv <pre>452</pre> <pre>4.52*10^2</pre> 0 AlgEquiv <pre>5.1e-2</pre> <pre>51/1000</pre> 1 AlgEquiv <pre>0.333333333333333</pre> <pre>1/3</pre> 0 AlgEquiv <pre>0.99999999</pre> <pre>1</pre> 0 AlgEquiv <pre>0.99999999</pre> <pre>99999999/10^8</pre> 1 AlgEquiv <pre>0.99999999</pre> <pre>99999998/99999999</pre> 1 AlgEquiv <pre>99999999/10^8</pre> <pre>99999998/99999999</pre> 0 AlgEquiv <pre>(0.5+x)*2</pre> <pre>2*x+1</pre> 1 AlgEquiv <pre>0.333333333333333*x^2</pre> <pre>x^2/3</pre> 0 AlgEquiv <pre>0.1*(2.0*s^2+6.0*s-25.0)/s</pre> <pre>(2*s^2+6*s-25)/(10*s)</pre> 1 AlgEquiv <pre>0.1*(2.0*s^2+6.0*s-25.00001)/s</pre> <pre>(2*s^2+6*s-25)/(10*s)</pre> 0 AlgEquiv <pre>100.4-80.0</pre> <pre>20.4</pre> 0 Complex numbers AlgEquiv <pre>sqrt(-1)</pre> <pre>%i</pre> 1 AlgEquiv <pre>%i</pre> <pre>e^(i*pi/2)</pre> 1 AlgEquiv <pre>(4*sqrt(3)*%i+4)^(1/5)</pre> <pre>8^(1/5)*(cos(%pi/15)+%i*sin(%p\ni/15))</pre> 1 AlgEquiv <pre>(4*sqrt(3)*%i+4)^(1/5)</pre> <pre>rectform((4*sqrt(3)*%i+4)^(1/5\n))</pre> 1 AlgEquiv <pre>(4*sqrt(3)*%i+4)^(1/5)</pre> <pre>polarform((4*sqrt(3)*%i+4)^(1/\n5))</pre> 1 AlgEquiv <pre>5/4*%e^(%i*%pi/6)</pre> <pre>5*sqrt(3)/8+5/8*%i</pre> 1 AlgEquiv <pre>%i/sqrt(x)</pre> <pre>sqrt(-1/x)</pre> 1 AlgEquiv <pre>%e^(%i*t)</pre> <pre>cos(t)+%i*sin(t)</pre> 1 AlgEquiv <pre>%e^(%i*t)</pre> <pre>%i*sin(t)</pre> 0 AlgEquiv <pre>%e^(%i*200*t)</pre> <pre>%e^(%i*199*t)</pre> 0 AlgEquiv <pre>%i*sin(3*k)+cos(3*k)</pre> <pre>%e^(3*%i*k)</pre> 1 AlgEquiv <pre>%i*(3*cos(k)^2*sin(k)-sin(k)^3\n)-3*cos(k)*sin(k)^2+cos(k)^3</pre> <pre>%e^(3*%i*k)</pre> 1 AlgEquiv <pre>%i*(3*cos(k)^2*sin(k)-sin(k)^3\n)-3*cos(k)*sin(k)^2+cos(k)^3</pre> <pre>%e^(7*%i*k)</pre> 0 AlgEquiv <pre>F(k-3)*%e^(31*%i*k)</pre> <pre>F(k-3)*%e^(30*%i*k)+F(k+3)*%e^\n(30*%i*k)</pre> 0 AlgEquiv <pre>F(k-3)*%e^(31*%i*k)</pre> <pre>(algebraic_equivalence_trigexp\nandp:false,F(k-3)*%e^(300*%i*k\n)+F(k+3)*%e^(300*%i*k))</pre> 0 AlgEquiv <pre>F(k)*sin(1000*k)</pre> <pre>(algebraic_equivalence_trigexp\nandp:false,F(k)*cos(1000*x))</pre> 0 AlgEquiv <pre>(-%i*k^3*%e^(800*%i*k)*F(k+3)-\n%i*F(k-3)*k^3*%e^(800*%i*k))/2</pre> <pre>(algebraic_equivalence_trigexp\nandp:false,-(%i*F(k-3)*k^3*%e^\n(800*%i*k))/2)</pre> 0 AlgEquiv <pre>F(k)*%e^(1000*k)</pre> <pre>(algebraic_equivalence_factorp\n:false,F(k)*%e^(1000*x))</pre> 0 AlgEquiv <pre>F(k)*%e^(1000*k)</pre> <pre>F(k)*%e^(1000*k)</pre> 1 AlgEquiv <pre>sum(sin(n*x/6)*exp(-7*n^2*t/36\n),n,1,inf)</pre> <pre>%e^-(112*t)*sin(4*x)</pre> 0 AlgEquiv <pre>F(xi)</pre> <pre>int(f(x)*%e^(-i*x*xi), x, -inf\n, inf)</pre> 0 Infinity AlgEquiv <pre>inf</pre> <pre>inf</pre> 1 AlgEquiv <pre>inf</pre> <pre>-inf</pre> 0 AlgEquiv <pre>2*inf</pre> <pre>inf</pre> 0 AlgEquiv <pre>0*inf</pre> <pre>0</pre> 1 AlgEquiv <pre>exp(-%i)</pre> <pre>inf</pre> 0 Powers and roots AlgEquiv <pre>x^(1/2)</pre> <pre>sqrt(x)</pre> 1 AlgEquiv <pre>x</pre> <pre>sqrt(x^2)</pre> 0 AlgEquiv <pre>'root(x)</pre> <pre>x^(1/2)</pre> 1 AlgEquiv <pre>'root(x)</pre> <pre>sqrt(x)</pre> 1 AlgEquiv <pre>'root(x,m)</pre> <pre>x^(1/m)</pre> 1 AlgEquiv <pre>x</pre> <pre>'root(x^2)</pre> 0 AlgEquiv <pre>abs(x)</pre> <pre>sqrt(x^2)</pre> 1 AlgEquiv <pre>(assume(a&gt;0),a*sqrt(5))</pre> <pre>sqrt(5*a^2)</pre> 1 AlgEquiv <pre>1/abs(x)^(1/3)</pre> <pre>(abs(x)^(1/3)/abs(x))^(1/2)</pre> 1 AlgEquiv <pre>sqrt((x-3)*(x-5))</pre> <pre>sqrt(x-3)*sqrt(x-5)</pre> 0 AlgEquiv <pre>1/sqrt(x)</pre> <pre>sqrt(1/x)</pre> 1 AlgEquiv <pre>x-1</pre> <pre>(x^2-1)/(x+1)</pre> 1 AlgEquiv <pre>2^((1/5.1)*t)</pre> <pre>2^((1/5.1)*t)</pre> 1 AlgEquiv <pre>2^((1/5.1)*t)</pre> <pre>2^(0.196078431373*t)</pre> 0 AlgEquiv <pre>1-root(2)</pre> <pre>1-2^(1/2)</pre> 1 AlgEquiv <pre>1-root(2)</pre> <pre>1-sqrt(2)</pre> 1 AlgEquiv <pre>root(2,2)+1</pre> <pre>1+sqrt(2)</pre> 1 AlgEquiv <pre>a^b*a^c</pre> <pre>a^(b+c)</pre> 1 AlgEquiv <pre>(a^b)^c</pre> <pre>a^(b*c)</pre> 0 AlgEquiv <pre>(assume(a&gt;0),(a^b)^c)</pre> <pre>a^(b*c)</pre> 1 AlgEquiv <pre>(assume(x&gt;2),6*((x-2)^2)^k)</pre> <pre>6*(x-2)^(2*k)</pre> 1 AlgEquiv <pre>signum(-3)</pre> <pre>-1</pre> 1 AlgEquiv <pre>6*((x-2)^3)^k</pre> <pre>6*(x-2)^(3*k)</pre> 1 AlgEquiv <pre>(4*sqrt(3)*%i+4)^(1/5)</pre> <pre>6^(1/5)*cos(%pi/15)-6^(1/5)*%i\n*sin(%pi/15)</pre> 0 AlgEquiv <pre>2+2*sqrt(3+x)</pre> <pre>2+sqrt(12+4*x)</pre> 1 AlgEquiv <pre>6*e^(6*(y^2+x^2))+72*x^2*e^(6*\n(y^2+x^2))</pre> <pre>(72*x^2+6)*e^(6*(y^2+x^2))</pre> 1 Expressions with subscripts AlgEquiv <pre>a1</pre> <pre>a_1</pre> 0 AlgEquiv <pre>rho*z*V/(4*pi*epsilon[0]*(R^2+\nz^2)^(3/2))</pre> <pre>rho*z*V/(4*pi*epsilon[0]*(R^2+\nz^2)^(3/2))</pre> 1 AlgEquiv <pre>rho*z*V/(4*pi*epsilon[1]*(R^2+\nz^2)^(3/2))</pre> <pre>rho*z*V/(4*pi*epsilon[0]*(R^2+\nz^2)^(3/2))</pre> 0 AlgEquiv <pre>sqrt(k/m)*sqrt(m/k)</pre> <pre>1</pre> 1 AlgEquiv <pre>(2*pi)/(k/m)^(1/2)</pre> <pre>(2*pi)/(k/m)^(1/2)</pre> 1 AlgEquiv <pre>(2*pi)*(m/k)^(1/2)</pre> <pre>(2*pi)/(k/m)^(1/2)</pre> 1 AlgEquiv <pre>sqrt(2*x/10+1)</pre> <pre>sqrt((2*x+10)/10)</pre> 1 AlgEquiv <pre>'root(2*x/10+1)</pre> <pre>sqrt((2*x+10)/10)</pre> 1 AlgEquiv <pre>((x+3)^2*(x+3))^(1/3)</pre> <pre>((x+3)*(x^2+6*x+9))^(1/3)</pre> 1 Need to factor internally. AlgEquiv <pre>((x+3)^2*(x+3))^(1/3)</pre> <pre>((x+3)*(x^2+6*x+9))^(1/3)</pre> 1 Polynomials and rational function AlgEquiv <pre>(x-1)^2</pre> <pre>x^2-2*x+1</pre> 1 AlgEquiv <pre>(x-1)*(x^2+x+1)</pre> <pre>x^3-1</pre> 1 AlgEquiv <pre>(x-1)^(-2)</pre> <pre>1/(x^2-2*x+1)</pre> 1 AlgEquiv <pre>1/(4*x-(%pi+sqrt(2)))</pre> <pre>1/(x+1)</pre> 0 AlgEquiv <pre>(x-a)^6000</pre> <pre>(x-a)^6000</pre> 1 AlgEquiv <pre>(a-x)^6000</pre> <pre>(x-a)^6000</pre> 1 AlgEquiv <pre>(4*a-x)^6000</pre> <pre>(x-4*a)^6000</pre> 1 AlgEquiv <pre>(x-a)^6000</pre> <pre>(x-a)^5999</pre> 0 AlgEquiv <pre>(k+8)/(k^2+4*k-12)</pre> <pre>(k+8)/(k^2+4*k-12)</pre> 1 AlgEquiv <pre>(k+7)/(k^2+4*k-12)</pre> <pre>(k+8)/(k^2+4*k-12)</pre> 0 AlgEquiv <pre>-(2*k+6)/(k^2+4*k-12)</pre> <pre>-(2*k+6)/(k^2+4*k-12)</pre> 1 AlgEquiv <pre>1/n-1/(n+1)</pre> <pre>1/(n*(n+1))</pre> 1 AlgEquiv <pre>1/(a-b)-1/(b-a)</pre> <pre>1/(a-b)+1/(b-a)</pre> 0 AlgEquiv <pre>0.5*x^2+3*x-1</pre> <pre>x^2/2+3*x-1</pre> 1 AlgEquiv <pre>14336000000*x^13+250265600000*\nx^12+1862860800000*x^11+762392\n5760000*x^10+18290677760000*x^\n9+24744757985280*x^8+145672123\n51488*x^7-3267871272960*x^6-64\n08053107200*x^5+670406720000*x\n^4+1179708800000*x^3-429244800\n000*x^2+56696000000*x-26800000\n00</pre> <pre>512*(2*x+5)^7*(5*x-1)^5*(70*x+\n67)</pre> 1 AlgEquiv <pre>14336000000*x^13+250265600000*\nx^12+1862860800000*x^11+762392\n5760000*x^10+18290677760000*x^\n9+24744757985280*x^8+145672123\n51488*x^7-3267871272960*x^6-64\n08053107200*x^5+670406720000*x\n^4+1179708800000*x^3-429244800\n000*x^2+56696000000*x-26800000\n01</pre> <pre>512*(2*x+5)^7*(5*x-1)^5*(70*x+\n67)</pre> 0 AlgEquiv <pre>14336000000*x^13</pre> <pre>512*(2*x+5)^7*(5*x-1)^5*(70*x+\n67)</pre> 0 Trig functions AlgEquiv <pre>cos(x)</pre> <pre>cos(-x)</pre> 1 AlgEquiv <pre>cos(x)^2+sin(x)^2</pre> <pre>1</pre> 1 AlgEquiv <pre>cos(x+y)</pre> <pre>cos(x)*cos(y)-sin(x)*sin(y)</pre> 1 AlgEquiv <pre>cos(x+y)</pre> <pre>cos(x)*cos(y)+sin(x)*sin(y)</pre> 0 AlgEquiv <pre>(-1)^n*cos(x)^n</pre> <pre>(-cos(x))^n</pre> 1 AlgEquiv <pre>cos(x#pm#y)</pre> <pre>cos(x)*cos(y)-(#pm#sin(x)*sin(\ny))</pre> 1 ATLogic_True. AlgEquiv <pre>sin(x#pm#y)</pre> <pre>sin(x)*cos(y)#pm#cos(x)*sin(y)</pre> 1 ATLogic_True. AlgEquiv <pre>sin(x#pm#y)</pre> <pre>cos(x)*sin(y)#pm#sin(x)*cos(y)</pre> 0 AlgEquiv <pre>2*cos(x)^2-1</pre> <pre>cos(2*x)</pre> 1 AlgEquiv <pre>1.0*cos(1200*%pi*x)</pre> <pre>cos(1200*%pi*x)</pre> 1 AlgEquiv <pre>diff(tan(10*x)^2,x)</pre> <pre>cos(6*x)</pre> 0 AlgEquiv <pre>exp(%i*%pi)</pre> <pre>-1</pre> 1 AlgEquiv <pre>2*cos(2*x)+x+1</pre> <pre>-sin(x)^2+3*cos(x)^2+x</pre> 1 AlgEquiv <pre>4*x*cos(x^12/%pi)</pre> <pre>x*cos(x^12/%pi)</pre> 0 AlgEquiv <pre>(2*sec(2*t)^2-2)/2</pre> <pre>-(sin(4*t)^2-2*sin(4*t)+cos(4*\nt)^2-1)*(sin(4*t)^2+2*sin(4*t)\n+cos(4*t)^2-1)/(sin(4*t)^2+cos\n(4*t)^2+2*cos(4*t)+1)^2</pre> 1 AlgEquiv <pre>1+cosec(3*x)</pre> <pre>1+csc(3*x)</pre> 1 AlgEquiv <pre>1/(1+exp(-2*x))</pre> <pre>tanh(x)/2+1/2</pre> 1 AlgEquiv <pre>1+cosech(3*x)</pre> <pre>1+csch(3*x)</pre> 1 AlgEquiv <pre>-4*sec(4*z)^2*sin(6*z)-6*tan(4\n*z)*cos(6*z)</pre> <pre>-4*sec(4*z)^2*sin(6*z)-6*tan(4\n*z)*cos(6*z)</pre> 1 AlgEquiv <pre>-4*sec(4*z)^2*sin(6*z)-6*tan(4\n*z)*cos(6*z)</pre> <pre>4*sec(4*z)^2*sin(6*z)+6*tan(4*\nz)*cos(6*z)</pre> 0 AlgEquiv <pre>csc(6*x)^2*(7*sin(6*x)*cos(7*x\n)-6*cos(6*x)*sin(7*x))</pre> <pre>-(6*cos(6*x)*sin(7*x)-7*sin(6*\nx)*cos(7*x))/sin(6*x)^2</pre> 1 AlgEquiv <pre>csc(6*x)^2*(7*sin(6*x)*cos(7*x\n)-6*cos(6*x)*sin(7*x))</pre> <pre>(6*cos(6*x)*sin(7*x)-7*sin(6*x\n)*cos(7*x))/sin(6*x)^2</pre> 0 AlgEquiv <pre>-(7*x^6+4*x^3)/sin(7*y+x^7+x^4\n+1)^2</pre> <pre>-(7*x^6+4*x^3)*csc(7*y+x^7+x^4\n+1)^2</pre> 1 AlgEquiv <pre>sin((2*%pi*n-%pi)/2)</pre> <pre>-cos(n*%pi)</pre> 1 AlgEquiv <pre>sin(x/2)/(1+tan(x)*tan(x/2))</pre> <pre>sin(x/2)*cos(x)</pre> 1 AlgEquiv <pre>(declare(n,integer),trigrat(si\nn((2*%pi*n-%pi)/2)))</pre> <pre>-(-1)^n</pre> 1 AlgEquiv ! <pre>cot(%pi/20)+cot(%pi/24)-cot(%p\ni/10)</pre> <pre>sqrt(1)+sqrt(2)+sqrt(3)+sqrt(4\n)+sqrt(5)+sqrt(6)</pre> -3 AlgEquiv <pre>trigeval(cot(%pi/20)+cot(%pi/2\n4)-cot(%pi/10))</pre> <pre>sqrt(1)+sqrt(2)+sqrt(3)+sqrt(4\n)+sqrt(5)+sqrt(6)</pre> 1 AlgEquiv ! <pre>sin([1/8,1/6, 1/4, 1/3, 1/2, 1\n]*%pi)</pre> <pre>[sqrt(2-sqrt(2))/2,1/2,1/sqrt(\n2),sqrt(3)/2,1,0]</pre> -3 (ATList_wrongentries 1). The entries underlined in red below are those that are incorrect. \\[\\left[ {\\color{red}{\\underline{\\sin \\left( \\frac{\\pi}{8} \\right)}}} , \\frac{1}{2} , \\frac{1}{\\sqrt{2}} , \\frac{\\sqrt{3}}{2} , 1 , 0 \\right] \\] AlgEquiv <pre>trigeval(sin([1/8,1/6, 1/4, 1/\n3, 1/2, 1]*%pi))</pre> <pre>[sqrt(2-sqrt(2))/2,1/2,1/sqrt(\n2),sqrt(3)/2,1,0]</pre> 1 AlgEquiv <pre>1+x</pre> <pre>taylor(1/(1-x),x,0,1)</pre> 1 AlgEquiv <pre>1</pre> <pre>taylor(1/(1-x),x,0,1)</pre> 0 Logarithms AlgEquiv <pre>log(a^2*b)</pre> <pre>2*log(a)+log(b)</pre> 1 AlgEquiv <pre>(2*log(2*x)+x)/(2*x)</pre> <pre>(log(2*x)+2)/(2*sqrt(x))</pre> 0 AlgEquiv <pre>log(abs((x^2-9)))</pre> <pre>log(abs(x-3))+log(abs(x+3))</pre> 0 AlgEquiv <pre>lg(10^x)</pre> <pre>x</pre> 1 AlgEquiv <pre>lg(3^x,3)</pre> <pre>x</pre> 1 AlgEquiv <pre>lg(a^x,a)</pre> <pre>x</pre> 1 AlgEquiv <pre>1+lg(27,3)</pre> <pre>4</pre> 1 AlgEquiv <pre>1+lg(27,3)</pre> <pre>3</pre> 0 AlgEquiv <pre>lg(1/8,2)</pre> <pre>-3</pre> 1 AlgEquiv <pre>lg(root(x,n))</pre> <pre>lg(x,10)/n</pre> 1 AlgEquiv <pre>log(root(x,n))</pre> <pre>lg(x,10)/n</pre> 0 AlgEquiv <pre>x^log(y)</pre> <pre>y^log(x)</pre> 1 AlgEquiv <pre>log((x+1)/(1-x))</pre> <pre>-log((1-x)/(x+1))</pre> 1 AlgEquiv <pre>ratsimp(logcontract(log((x+1)/\n(1-x))))</pre> <pre>ratsimp(logcontract(-log((1-x)\n/(x+1))))</pre> 1 AlgEquiv <pre>log((x+1)/(1-x))</pre> <pre>-log((1-x)/(x+2))</pre> 0 Hyperbolic trig AlgEquiv <pre>e^1-e^(-1)</pre> <pre>2*sinh(1)</pre> 1 Lists AlgEquiv <pre>x</pre> <pre>[1,2,3]</pre> 0 ATAlgEquiv_SA_not_list. Your answer should be a list, but is not. Note that the syntax to enter a list is to enclose the comma separated values with square brackets. AlgEquiv <pre>[1,2]</pre> <pre>[1,2,3]</pre> 0 ATList_wronglen. Your list should have \\(3\\) elements, but it actually has \\(2\\). AlgEquiv <pre>[1,2,4]</pre> <pre>[1,2,3]</pre> 0 (ATList_wrongentries 3). The entries underlined in red below are those that are incorrect. \\[\\left[ 1 , 2 , {\\color{red}{\\underline{4}}} \\right] \\] AlgEquiv <pre>[1,x&gt;2]</pre> <pre>[1,2&lt;x]</pre> 1 AlgEquiv <pre>[1,2,[2-x&lt;0,{1,2,2,2, 1,3}]\n]</pre> <pre>[1,2,[2-x&lt;0,{1,2}]]</pre> 0 (ATList_wrongentries 3: (ATList_wrongentries 2: ATSet_wrongsz)). The entries underlined in red below are those that are incorrect. \\[\\left[ 1 , 2 , \\left[ 2-x &lt; 0 , \\left \\{1 , 2 , 3 \\right \\} \\right] \\right] \\] AlgEquiv <pre>[(k+8)/(k^2+4*k-12),-(2*k+6)/(\nk^2+4*k-12)]</pre> <pre>[(k+8)/(k^2+4*k-12),-(2*k+6)/(\nk^2+4*k-12)]</pre> 1 AlgEquiv <pre>[1,2]</pre> <pre>ntuple(1,2)</pre> 0 ATAlgEquiv_SA_not_expression. Your answer should be an expression, not an equation, inequality, list, set or matrix. Rounding of floats AlgEquiv <pre>round(0.5)</pre> <pre>0.0</pre> 1 AlgEquiv <pre>round(1.5)</pre> <pre>2.0</pre> 1 AlgEquiv <pre>round(2.5)</pre> <pre>2.0</pre> 1 AlgEquiv <pre>round(12.5)</pre> <pre>12.0</pre> 1 AlgEquiv <pre>significantfigures(0.5,1)</pre> <pre>0.5</pre> 1 AlgEquiv <pre>significantfigures(1.5,1)</pre> <pre>2.0</pre> 1 AlgEquiv <pre>significantfigures(2.5,1)</pre> <pre>3.0</pre> 1 AlgEquiv <pre>significantfigures(3.5,1)</pre> <pre>4.0</pre> 1 AlgEquiv <pre>significantfigures(11.5,2)</pre> <pre>12.0</pre> 1 AlgEquiv <pre>1500</pre> <pre>scientific_notation(1500,3)</pre> 1 AlgEquiv <pre>1500</pre> <pre>displaysci(1.5,2,3)</pre> 1 AlgEquiv <pre>[3,3.1,3.14,3.142,3.1416,3.141\n59,3.141593,3.1415927]</pre> <pre>makelist(significantfigures(%p\ni,i),i,8)</pre> 1 Sets AlgEquiv <pre>x</pre> <pre>{1,2,3}</pre> 0 ATAlgEquiv_SA_not_set. Your answer should be a set, but is not. Note that the syntax to enter a set is to enclose the comma separated values with curly brackets. AlgEquiv <pre>co(1,2)</pre> <pre>{1,2,3}</pre> 0 ATAlgEquiv_SA_not_set. Your answer should be a set, but is not. Note that the syntax to enter a set is to enclose the comma separated values with curly brackets. AlgEquiv <pre>{1,2}</pre> <pre>{1,2,3}</pre> 0 ATSet_wrongsz. Your set should have \\(3\\) different elements, but it actually has \\(2\\). AlgEquiv <pre>{2/4, 1/3}</pre> <pre>{1/2, 1/3}</pre> 1 AlgEquiv <pre>{A[1],A[2],A[4]}</pre> <pre>{A[1],A[2],A[3]}</pre> 0 ATSet_wrongentries. The following entries are incorrect, although they may appear in a simplified form from that which you actually entered. \\[\\left \\{A_{4} \\right \\}\\] AlgEquiv <pre>{A[1],A[2],A[3]}</pre> <pre>{A[1],A[2],A[3]}</pre> 1 AlgEquiv <pre>{1,2,4}</pre> <pre>{1,2,3}</pre> 0 ATSet_wrongentries. The following entries are incorrect, although they may appear in a simplified form from that which you actually entered. \\[\\left \\{4 \\right \\}\\] AlgEquiv <pre>{1,x&gt;4}</pre> <pre>{4&lt;x, 1}</pre> 1 AlgEquiv <pre>{x-1=0,x&gt;1 and 5&gt;x}</pre> <pre>{x&gt;1 and x&lt;5,x=1}</pre> 1 AlgEquiv <pre>{x-1=0,x&gt;1 and 5&gt;x}</pre> <pre>{x&gt;1 and x&lt;5,x=2}</pre> 0 ATSet_wrongentries. The following entries are incorrect, although they may appear in a simplified form from that which you actually entered. \\[\\left \\{x-1=0 \\right \\}\\] AlgEquiv <pre>{x-1=0,x&gt;1 and 5&gt;x}</pre> <pre>{x&gt;1 and x&lt;3,x=1}</pre> 0 ATSet_wrongentries. The following entries are incorrect, although they may appear in a simplified form from that which you actually entered. \\[\\left \\{5-x &gt; 0\\,{\\text{ and }}\\, x-1 &gt; 0 \\right \\}\\] Equivalence for elements of sets is different from expressions: see docs. AlgEquiv ! <pre>{-sqrt(2)/sqrt(3)}</pre> <pre>{-2/sqrt(6)}</pre> -3 ATSet_wrongentries. The following entries are incorrect, although they may appear in a simplified form from that which you actually entered. \\[\\left \\{-\\frac{\\sqrt{2}}{\\sqrt{3}} \\right \\}\\] AlgEquiv ! <pre>{[-sqrt(2)/sqrt(3),0],[2/sqrt(\n6),0]}</pre> <pre>{[2/sqrt(6),0],[-2/sqrt(6),0]}</pre> -3 ATSet_wrongentries. The following entries are incorrect, although they may appear in a simplified form from that which you actually entered. \\[\\left \\{\\left[ -\\frac{\\sqrt{2}}{\\sqrt{3}} , 0 \\right] \\right \\}\\] AlgEquiv ! <pre>{5/4*%e^(%i*%pi/6)}</pre> <pre>{5*sqrt(3)/8+5/8*%i}</pre> -3 ATSet_wrongentries. The following entries are incorrect, although they may appear in a simplified form from that which you actually entered. \\[\\left \\{\\frac{5\\cdot \\mathrm{i}+5\\cdot \\sqrt{3}}{8} \\right \\}\\] AlgEquiv <pre>map(expand,{5/4*%e^(%i*%pi/6)}\n)</pre> <pre>{5*sqrt(3)/8+5/8*%i}</pre> 1 AlgEquiv <pre>ratsimp({5/4*%e^(%i*%pi/6)})</pre> <pre>ratsimp({5*sqrt(3)/8+5/8*%i})</pre> 1 AlgEquiv <pre>ev(radcan({-sqrt(2)/sqrt(3)}),\nsimp)</pre> <pre>ev(radcan({-2/sqrt(6)}),simp)</pre> 1 AlgEquiv <pre>ev(radcan(ratsimp({(-sqrt(10)/\n2)-2,sqrt(10)/2-2},algebraic:t\nrue)),simp)</pre> <pre>ev(radcan(ratsimp({(-sqrt(5)/s\nqrt(2))-2,sqrt(5)/sqrt(2)-2},a\nlgebraic:true)),simp)</pre> 1 AlgEquiv <pre>(a^b)^c</pre> <pre>a^(b*c)</pre> 0 AlgEquiv <pre>ev(radcan((a^b)^c),radexpand:a\nll,simp)</pre> <pre>a^(b*c)</pre> 1 AlgEquiv <pre>(n+1)^((n+2)/(n+1))/(n+2)</pre> <pre>1/(n+2)*((n+1)^(1/(n+1)))^(n+2\n)</pre> 0 AlgEquiv <pre>ev(radcan((n+1)^((n+2)/(n+1))/\n(n+2)),radexpand:all,simp)</pre> <pre>ev(radcan(1/(n+2)*((n+1)^(1/(n\n+1)))^(n+2)),radexpand:all,sim\np)</pre> 1 AlgEquiv <pre>{(2-2^(5/2))/2,(2^(5/2)+2)/2}</pre> <pre>{1-2^(3/2),2^(3/2)+1}</pre> 0 ATSet_wrongentries. The following entries are incorrect, although they may appear in a simplified form from that which you actually entered. \\[\\left \\{\\frac{2-2^{\\frac{5}{2}}}{2} , \\frac{2^{\\frac{5}{2}}+2}{2} \\right \\}\\] AlgEquiv <pre>ev(radcan({(2-2^(5/2))/2,(2^(5\n/2)+2)/2}),simp)</pre> <pre>{1-2^(3/2),2^(3/2)+1}</pre> 1 AlgEquiv <pre>{(x-a)^6000}</pre> <pre>{(a-x)^6000}</pre> 0 ATSet_wrongentries. The following entries are incorrect, although they may appear in a simplified form from that which you actually entered. \\[\\left \\{{\\left(x-a\\right)}^{6000} \\right \\}\\] AlgEquiv <pre>{(k+8)/(k^2+4*k-12),-(2*k+6)/(\nk^2+4*k-12)}</pre> <pre>{(k+8)/(k^2+4*k-12),-(2*k+6)/(\nk^2+4*k-12)}</pre> 1 Matrices AlgEquiv <pre>matrix([1,2],[2,3])</pre> <pre>matrix([1,2],[2,3])</pre> 1 AlgEquiv <pre>matrix([1,2],[2,3])</pre> <pre>matrix([1,2,3],[2,3,3])</pre> 0 ATMatrix_wrongsz_columns. Your matrix should be \\(2\\) by \\(3\\), but it is actually \\(2\\) by \\(2\\). AlgEquiv <pre>matrix([1,2],[2,3])</pre> <pre>matrix([1,2],[2,5])</pre> 0 ATMatrix_wrongentries. The entries underlined in red below are those that are incorrect. \\[ \\left[\\begin{array}{cc} 1 &amp; 2 \\\\ 2 &amp; {\\color{red}{\\underline{3}}} \\end{array}\\right]\\] AlgEquiv <pre>matrix([0.33,1],[1,1])</pre> <pre>matrix([0.333,1],[1,1])</pre> 0 ATMatrix_wrongentries. The entries underlined in red below are those that are incorrect. \\[ \\left[\\begin{array}{cc} {\\color{red}{\\underline{0.33}}} &amp; 1 \\\\ 1 &amp; 1 \\end{array}\\right]\\] AlgEquiv <pre>matrix([x+x,2],[2,x*x])</pre> <pre>matrix([2*x,2],[2,x^2])</pre> 1 AlgEquiv <pre>matrix([epsilon[0],2],[2,x^2])</pre> <pre>matrix([epsilon[0],2],[2,x^2])</pre> 1 AlgEquiv <pre>matrix([epsilon[2],2],[2,x^2])</pre> <pre>matrix([epsilon[0],2],[2,x^3])</pre> 0 ATMatrix_wrongentries. The entries underlined in red below are those that are incorrect. \\[ \\left[\\begin{array}{cc} {\\color{red}{\\underline{\\varepsilon_{2}}}} &amp; 2 \\\\ 2 &amp; {\\color{red}{\\underline{x^2}}} \\end{array}\\right]\\] AlgEquiv <pre>matrix([x&gt;4,{1,x^2}],[[1,2]\n,[1,3]])</pre> <pre>matrix([4-x&lt;0,{x^2, 1}],[[1\n,2],[1,3]])</pre> 1 AlgEquiv <pre>matrix([x&gt;4,{1,x^2}],[[1,2]\n,[1,3]])</pre> <pre>matrix([4-x&lt;0,{x^2, 1}],[[1\n,2],[1,4]])</pre> 0 ATMatrix_wrongentries. The entries underlined in red below are those that are incorrect. \\[ \\left[\\begin{array}{cc} x &gt; 4 &amp; \\left \\{1 , x^2 \\right \\} \\\\ \\left[ 1 , 2 \\right] &amp; \\left[ 1 , {\\color{red}{\\underline{3}}} \\right] \\end{array}\\right]\\] Vectors AlgEquiv <pre>a</pre> <pre>stackvector(a)</pre> 0 Equations AlgEquiv <pre>1</pre> <pre>x=1</pre> 0 ATAlgEquiv_SA_not_equation. Your answer should be an equation, but is not. AlgEquiv <pre>x=1</pre> <pre>x=1</pre> 1 ATEquation_sides AlgEquiv <pre>1=x</pre> <pre>1=x</pre> 1 ATEquation_sides AlgEquiv <pre>1=x</pre> <pre>x=1</pre> 1 ATEquation_sides_op AlgEquiv <pre>1=1</pre> <pre>1=x</pre> 0 ATEquation_default AlgEquiv <pre>1=1</pre> <pre>x=1</pre> 0 ATEquation_default AlgEquiv <pre>x=2</pre> <pre>x=1</pre> 0 ATEquation_lhs_notrhs AlgEquiv <pre>2=x</pre> <pre>x=1</pre> 0 ATEquation_default AlgEquiv <pre>x=x</pre> <pre>y=y</pre> 1 ATEquation_zero AlgEquiv <pre>x+y=1</pre> <pre>y=1-x</pre> 1 AlgEquiv <pre>2*x+2*y=1</pre> <pre>y=0.5-x</pre> 1 ATEquation_ratio AlgEquiv <pre>1/x+1/y=2</pre> <pre>y = x/(2*x-1)</pre> 1 ATEquation_ratio AlgEquiv <pre>y=sin(2*x)</pre> <pre>y/2=cos(x)*sin(x)</pre> 1 ATEquation_ratio AlgEquiv <pre>y=(x-a)^6000</pre> <pre>y=(x-a)^6000</pre> 1 ATEquation_sides AlgEquiv <pre>y=(x-a)^5999</pre> <pre>y=(x-a)^6000</pre> 0 ATEquation_lhs_notrhs AlgEquiv <pre>y=(a-x)^6000</pre> <pre>y=(x-a)^6000</pre> 1 ATEquation_sides AlgEquiv <pre>y=(a-x)^5999</pre> <pre>y=(x-a)^5999</pre> 0 ATEquation_lhs_notrhs AlgEquiv <pre>y=(a-x)^59999</pre> <pre>y=(x-a)^5999</pre> 0 ATEquation_lhs_notrhs AlgEquiv <pre>x+y=i</pre> <pre>y=i-x</pre> 1 AlgEquiv <pre>(1+%i)*(x+y)=0</pre> <pre>y=-x</pre> 1 AlgEquiv <pre>s^2*%e^(s*t)=0</pre> <pre>s^2=0</pre> 0 ATEquation_default AlgEquiv <pre>0=-x+y/A+(y-z)/B</pre> <pre>0=x-y/A-(y-z)/B</pre> 1 AlgEquiv <pre>x^6000-x^6001=x^5999</pre> <pre>x^5999*(1-x+x^2)=0</pre> 1 ATEquation_ratio AlgEquiv <pre>x^6000-x^6001=x^5999</pre> <pre>x^5999*(1-x+x^3)=0</pre> 0 ATEquation_default AlgEquiv <pre>258552*x^7*(81*x^8+1)^398</pre> <pre>x^3*(x^4+1)^399</pre> 0 AlgEquiv <pre>Ia*(R1+R2+R3)-Ib*R3=0</pre> <pre>-Ia*(R1+R2+R3)+Ib*R3=0</pre> 1 AlgEquiv <pre>a=0 or b=0</pre> <pre>a*b=0</pre> 1 ATEquation_sides AlgEquiv <pre>a*b=0</pre> <pre>a=0 or b=0</pre> 1 ATEquation_sides AlgEquiv <pre>a*x=a*y</pre> <pre>x=y</pre> 0 ATEquation_default AlgEquiv <pre>a*x=a*y</pre> <pre>a=0 or x=y</pre> 1 ATEquation_ratio Unary Equations AlgEquiv <pre>1</pre> <pre>stackeq(1)</pre> 1 AlgEquiv <pre>stackeq(1)</pre> <pre>1</pre> 1 AlgEquiv <pre>stackeq(1)</pre> <pre>0</pre> 0 Equations: Loose/gain roots with nth powers of each side. AlgEquiv <pre>x=y</pre> <pre>x^2=y^2</pre> 0 ATEquation_default AlgEquiv <pre>(x-2)^2=0</pre> <pre>x=2</pre> 0 ATEquation_default AlgEquiv <pre>4*x^2-71*x+220 = 0 or 14*x^2-9\n1*x+140 = 0</pre> <pre>x = 5/2 or x = 4 or x = 55/4</pre> 0 ATEquation_default AlgEquiv <pre>4*x^2-71*x+220 = 0 or 14*x^2-9\n1*x+140 = 0</pre> <pre>x = 5/2 or x = 4 or x=4 or x =\n 55/4</pre> 1 ATEquation_sides AlgEquiv <pre>x^2=4</pre> <pre>x=2 or x=-2</pre> 1 ATEquation_ratio AlgEquiv <pre>x^2=4</pre> <pre>x=2 nounor x=-2</pre> 1 ATEquation_ratio AlgEquiv <pre>x^2-5*x+6=0</pre> <pre>x=2 nounor x=3</pre> 1 ATEquation_sides AlgEquiv <pre>x^2-5*x+6=0</pre> <pre>x=(5 #pm# sqrt(25-24))/2</pre> 1 ATEquation_sides AlgEquiv <pre>x^2-5*x+6=0</pre> <pre>x=(5 #pm# sqrt(25-23))/2</pre> 0 ATEquation_default AlgEquiv <pre>a^3*b^3=0</pre> <pre>a=0 or b=0</pre> 0 ATEquation_default AlgEquiv <pre>a^3*b^3=0</pre> <pre>a*b=0</pre> 0 ATEquation_default AlgEquiv <pre>(x-y)*(x+y)=0</pre> <pre>x^2=y^2</pre> 1 ATEquation_ratio AlgEquiv <pre>x=1</pre> <pre>(x-1)^3=0</pre> 0 ATEquation_default AlgEquiv <pre>sqrt(x)=sqrt(y)</pre> <pre>x=y</pre> 0 ATEquation_default AlgEquiv <pre>x=sqrt(a)</pre> <pre>x^2=a</pre> 0 ATEquation_default AlgEquiv <pre>(x-sqrt(a))*(x+sqrt(a))=0</pre> <pre>x^2=a</pre> 1 ATEquation_ratio AlgEquiv <pre>(x-%i*sqrt(a))*(x+%i*sqrt(a))=\n0</pre> <pre>x^2=-a</pre> 1 ATEquation_ratio AlgEquiv <pre>(x-%i*sqrt(abs(a)))*(x+%i*sqrt\n(abs(a)))=0</pre> <pre>x^2=-abs(a)</pre> 1 ATEquation_ratio AlgEquiv <pre>y=sqrt(1-x^2)</pre> <pre>x^2+y^2=1</pre> 0 ATEquation_default AlgEquiv <pre>(y-sqrt(1-x^2))*(y+sqrt(1-x^2)\n)=0</pre> <pre>x^2+y^2=1</pre> 1 ATEquation_ratio AlgEquiv <pre>(y-sqrt((1-x)*(1+x)))*(y+sqrt(\n(1-x)*(1+x)))=0</pre> <pre>x^2+y^2=1</pre> 1 ATEquation_ratio AlgEquiv <pre>(x-1)*(x+1)*(y-1)*(y+1)=0</pre> <pre>y^2+x^2=1+x^2*y^2</pre> 1 ATEquation_ratio Equations: edge cases. Teacher must enter an equation, all or none here. AlgEquiv <pre>all</pre> <pre>x=x</pre> 1 ATEquation_zero AlgEquiv <pre>true</pre> <pre>x=x</pre> 1 ATEquation_zero AlgEquiv <pre>x=x</pre> <pre>all</pre> 1 ATEquation_zero AlgEquiv <pre>all</pre> <pre>all</pre> 1 ATEquation_zero AlgEquiv <pre>true</pre> <pre>all</pre> 1 ATEquation_zero AlgEquiv <pre>a=a</pre> <pre>x=x</pre> 1 ATEquation_zero AlgEquiv <pre>false</pre> <pre>x=x</pre> 0 ATEquation_zero_fail AlgEquiv <pre>false</pre> <pre>all</pre> 0 ATEquation_zero_fail AlgEquiv <pre>none</pre> <pre>all</pre> 0 ATEquation_zero_fail AlgEquiv <pre>all</pre> <pre>none</pre> 0 ATEquation_empty_fail AlgEquiv <pre>2=3</pre> <pre>1=4</pre> 1 ATEquation_empty AlgEquiv <pre>2=3</pre> <pre>2=4</pre> 1 ATEquation_empty AlgEquiv <pre>none</pre> <pre>1=2</pre> 1 ATEquation_empty AlgEquiv <pre>false</pre> <pre>1=2</pre> 1 ATEquation_empty AlgEquiv <pre>none</pre> <pre>none</pre> 1 ATEquation_empty AlgEquiv <pre>false</pre> <pre>none</pre> 1 ATEquation_empty AlgEquiv <pre>3=0</pre> <pre>none</pre> 1 ATEquation_empty AlgEquiv <pre>0=3</pre> <pre>none</pre> 1 ATEquation_empty AlgEquiv <pre>all</pre> <pre>1=2</pre> 0 ATEquation_empty_fail AlgEquiv <pre>true</pre> <pre>1=2</pre> 0 ATEquation_empty_fail AlgEquiv <pre>{}</pre> <pre>1=2</pre> 0 ATAlgEquiv_SA_not_equation. Your answer should be an equation, but is not. AlgEquiv <pre>[]</pre> <pre>1=2</pre> 0 ATAlgEquiv_SA_not_equation. Your answer should be an equation, but is not. AlgEquiv <pre>{}</pre> <pre>none</pre> 0 ATAlgEquiv_SA_not_logic. Your answer should be an equation, inequality or a logical combination of many of these, but is not. Sets of real numbers AlgEquiv <pre>x^2</pre> <pre>cc(1,3)</pre> 0 ATAlgEquiv_SA_not_realset. Your answer should be a subset of the real numbers. This could be a set of numbers, or a collection of intervals. AlgEquiv <pre>%union(oo(1,2),oo(3,4))</pre> <pre>%union(oo(1,2),oo(3,4))</pre> 1 ATRealSet_true. AlgEquiv <pre>%union(oc(1,2),co(2,3))</pre> <pre>oo(1,3)</pre> 1 ATRealSet_true. AlgEquiv <pre>%union(oc(1,2),co(2,3))</pre> <pre>cc(1,3)</pre> 0 ATRealSet_false. AlgEquiv <pre>{-1,1}</pre> <pre>%union({-1,1})</pre> 1 ATRealSet_true. AlgEquiv <pre>{1,3}</pre> <pre>cc(1,3)</pre> 0 ATRealSet_false. AlgEquiv <pre>%intersection(oc(-1,1),co(1,2)\n)</pre> <pre>%union({1})</pre> 1 ATRealSet_true. AlgEquiv <pre>oo(-inf,1)</pre> <pre>oo(-inf,1)</pre> 1 ATRealSet_true. AlgEquiv <pre>oo(-1,inf)</pre> <pre>oo(0,inf)</pre> 0 ATRealSet_false. AlgEquiv <pre>%union(oc(-inf,0),oo(-1,4))</pre> <pre>oo(-inf,4)</pre> 1 ATRealSet_true. AlgEquiv <pre>%union(oo(-inf,1),oo(-1,inf))</pre> <pre>oo(-inf,inf)</pre> 1 ATRealSet_true. AlgEquiv <pre>all</pre> <pre>oo(-inf,inf)</pre> 1 ATRealSet_true. AlgEquiv <pre>co(1,2)</pre> <pre>1 &lt;= x nounand x&lt;2</pre> 0 ATAlgEquiv_SA_not_logic. Your answer should be an equation, inequality or a logical combination of many of these, but is not. AlgEquiv <pre>1 &lt;= x nounand x&lt;2</pre> <pre>co(1,2)</pre> 0 ATAlgEquiv_SA_not_realset. Your answer should be a subset of the real numbers. This could be a set of numbers, or a collection of intervals. AlgEquiv <pre>minf &lt;= x</pre> <pre>co(minf,inf)</pre> 0 ATAlgEquiv_SA_not_realset. Your answer should be a subset of the real numbers. This could be a set of numbers, or a collection of intervals. AlgEquiv <pre>-inf &lt;= x</pre> <pre>co(minf,inf)</pre> 0 ATAlgEquiv_SA_not_realset. Your answer should be a subset of the real numbers. This could be a set of numbers, or a collection of intervals. AlgEquiv <pre>x &lt;= inf</pre> <pre>oc(minf,inf)</pre> 0 ATAlgEquiv_SA_not_realset. Your answer should be a subset of the real numbers. This could be a set of numbers, or a collection of intervals. AlgEquiv <pre>minf &lt;= x</pre> <pre>oo(minf,inf)</pre> 0 ATAlgEquiv_SA_not_realset. Your answer should be a subset of the real numbers. This could be a set of numbers, or a collection of intervals. AlgEquiv <pre>stack_single_variable_solver(m\ninf &lt;= x)</pre> <pre>co(minf,inf)</pre> 1 ATRealSet_true. AlgEquiv <pre>stack_single_variable_solver(-\ninf &lt;= x)</pre> <pre>co(minf,inf)</pre> 1 ATRealSet_true. AlgEquiv <pre>stack_single_variable_solver(x\n &lt;= inf)</pre> <pre>oc(minf,inf)</pre> 1 ATRealSet_true. AlgEquiv <pre>stack_single_variable_solver(m\ninf &lt;= x)</pre> <pre>oo(minf,inf)</pre> 0 ATRealSet_false. Complex numbers AlgEquiv <pre>a=b/%i</pre> <pre>%i*a=b</pre> 1 ATEquation_num_i AlgEquiv <pre>b/%i=a</pre> <pre>%i*a=b</pre> 1 ATEquation_num_i AlgEquiv <pre>b=a/%i</pre> <pre>%i*a=b</pre> 0 ATEquation_lhs_notrhs_op AlgEquiv <pre>a*(2+%i)=b</pre> <pre>a=b/(2+%i)</pre> 1 ATEquation_ratio AlgEquiv <pre>a*(2+%i)=b</pre> <pre>a=b*(2-%i)/5</pre> 1 ATEquation_num_i AlgEquiv <pre>a*(2+%i)=b</pre> <pre>a=b*(2-%i)/4</pre> 0 ATEquation_default AlgEquiv <pre>i</pre> <pre>disp_complex(0,1)</pre> 0 Absolute value in equations AlgEquiv <pre>abs(x)=abs(y)</pre> <pre>x=y</pre> 0 ATEquation_default AlgEquiv <pre>abs(x)=abs(y)</pre> <pre>x=y or x=-y</pre> 1 AlgEquiv <pre>abs(x)=abs(y)</pre> <pre>(x-y)*(x+y)=0</pre> 1 Functions AlgEquiv <pre>f(x):=1/0</pre> <pre>f(x):=x^2</pre> -1 TEST_FAILED TEST_FAILED The answer test failed to execute correctly: please alert your teacher. Division by zero. AlgEquiv <pre>1</pre> <pre>f(x):=x^2</pre> 0 ATAlgEquiv_SA_not_function. Your answer should be a function, defined using the operator :=, but is not. AlgEquiv <pre>f(x)=x^2</pre> <pre>f(x):=x^2</pre> 0 ATAlgEquiv_SA_not_function. Your answer should be a function, defined using the operator :=, but is not. AlgEquiv <pre>f(x):=x^2</pre> <pre>f(x,y):=x^2+y^2</pre> 0 ATFunction_length_args. ATFunction_false. AlgEquiv <pre>f(x):=x^2</pre> <pre>f(x)=x^2</pre> 0 ATAlgEquiv_SA_not_equation. Your answer should be an equation, but is not. AlgEquiv <pre>f(x):=x^2</pre> <pre>f(x):=x^2</pre> 1 ATFunction_true. AlgEquiv <pre>f(x):=x^2</pre> <pre>f(x):=sin(x)</pre> 0 ATFunction_false. AlgEquiv <pre>g(x):=x^2</pre> <pre>f(x):=x^2</pre> 0 ATFunction_wrongname. ATFunction_true. AlgEquiv <pre>f(y):=y^2</pre> <pre>f(x):=x^2</pre> 1 ATFunction_arguments_different. ATFunction_true. AlgEquiv <pre>f(a,b):=a^2+b^2</pre> <pre>f(x,y):=x^2+y^2</pre> 1 ATFunction_arguments_different. ATFunction_true. AlgEquiv <pre>-30*F</pre> <pre>6*F(l-5*x)</pre> 0 Inequalities AlgEquiv <pre>1</pre> <pre>x&gt;1</pre> 0 ATAlgEquiv_SA_not_inequality. Your answer should be an inequality, but is not. AlgEquiv <pre>x=1</pre> <pre>x&gt;1 and x&lt;5</pre> 0 ATAlgEquiv_TA_not_equation. You have entered an equation, but an equation is not expected here. You may have typed something like \"y=2*x+1\" when you only needed to type \"2*x+1\". AlgEquiv <pre>x&lt;1</pre> <pre>x&gt;1</pre> 0 ATInequality_backwards. Your inequality appears to be backwards. AlgEquiv <pre>1&lt;x</pre> <pre>x&gt;1</pre> 1 AlgEquiv <pre>a&lt;b</pre> <pre>b&gt;a</pre> 1 AlgEquiv <pre>2&lt;2*x</pre> <pre>x&gt;1</pre> 1 AlgEquiv <pre>-2&gt;-2*x</pre> <pre>x&gt;1</pre> 1 AlgEquiv <pre>x&gt;1</pre> <pre>x&lt;=1</pre> 0 ATInequality_strict. ATInequality_backwards. Your inequality should not be strict! Your inequality appears to be backwards. AlgEquiv <pre>x&gt;=2</pre> <pre>x&lt;2</pre> 0 ATInequality_nonstrict. ATInequality_backwards. Your inequality should be strict, but is not! Your inequality appears to be backwards. AlgEquiv <pre>x&gt;=1</pre> <pre>x&gt;2</pre> 0 ATInequality_nonstrict. Your inequality should be strict, but is not! AlgEquiv <pre>x&gt;1</pre> <pre>x&gt;1</pre> 1 AlgEquiv <pre>x&gt;=1</pre> <pre>x&gt;=1</pre> 1 AlgEquiv <pre>x&gt;2</pre> <pre>x&gt;1</pre> 0 AlgEquiv <pre>1&lt;x</pre> <pre>x&gt;1</pre> 1 AlgEquiv <pre>2*x&gt;=x^2</pre> <pre>x^2&lt;=2*x</pre> 1 AlgEquiv <pre>2*x&gt;=x^2</pre> <pre>x^2&lt;=2*x</pre> 1 AlgEquiv <pre>3*x^2&lt;9*a</pre> <pre>x^2-3*a&lt;0</pre> 1 AlgEquiv <pre>x^2&gt;4</pre> <pre>x&gt;2 or x&lt;-2</pre> 1 ATLogic_True. AlgEquiv <pre>1&lt;x or x&lt;-3</pre> <pre>x&lt;-3 or 1&lt;x</pre> 1 ATLogic_True. AlgEquiv <pre>1&lt;x or x&lt;-3</pre> <pre>x&lt;-1 or 3&lt;x</pre> 0 AlgEquiv <pre>x&gt;1 and x&lt;5</pre> <pre>x&gt;1 and x&lt;5</pre> 1 ATLogic_True. AlgEquiv <pre>x&gt;1 and x&lt;5</pre> <pre>5&gt;x and 1&lt;x</pre> 1 ATLogic_True. AlgEquiv <pre>not (x&lt;=2 and -2&lt;=x)</pre> <pre>x&gt;2 or -2&gt;x</pre> 1 ATLogic_True. AlgEquiv <pre>sigma&gt;1</pre> <pre>x&gt;1</pre> 1 ATInequality_solver. AlgEquiv <pre>a&gt;1</pre> <pre>x&gt;1</pre> 1 ATInequality_solver. AlgEquiv <pre>sigma&gt;1</pre> <pre>x&gt;2</pre> 0 AlgEquiv <pre>x&gt;2 or -2&gt;x</pre> <pre>not (x&lt;=2 and -2&lt;=x)</pre> 1 ATLogic_True. AlgEquiv <pre>x&gt;=1 or 1&lt;=x</pre> <pre>x&gt;=1</pre> 1 AlgEquiv <pre>x&gt;=1 and x&lt;=1</pre> <pre>x=1</pre> 1 ATInequality_solver. AlgEquiv <pre>(x&gt;4 and x&lt;5) or (x&lt;-\n4 and x&gt;-5) or (x+5&gt;0 an\nd x&lt;-4)</pre> <pre>(x&gt;-5 and x&lt;-4) or (x&gt;\n;4 and x&lt;5)</pre> 1 ATLogic_True. AlgEquiv <pre>(x&gt;4 and x&lt;5) or (x&lt;-\n4 and x&gt;-5) or (x+5&gt;0 an\nd x&lt;-4)</pre> <pre>(x&gt;-5 and x&lt;-4) or (x&gt;\n;8 and x&lt;5)</pre> 0 AlgEquiv <pre>(x &lt; 0 nounor x &gt;= 1) no\nunand x &lt;= 3</pre> <pre>x &lt; 0 or (x &gt;= 1 and x &amp;\nlt;= 3)</pre> 1 ATLogic_True. AlgEquiv <pre>(x &lt; 0 nounor x &gt;= 1) no\nunand x &lt;= 3</pre> <pre>x &lt; 0 or x &gt;= 1 and x &amp;l\nt;= 3</pre> 1 ATLogic_True. AlgEquiv <pre>(x &lt; 0 nounor x &gt;= 1) no\nunand x &lt;= 3</pre> <pre>x &lt; 0 or (x &gt;= 1 and x &amp;\nlt;= 3)</pre> 1 ATLogic_True. AlgEquiv <pre>(x &lt; 0 nounor x &gt;= 1) no\nunand x &lt;= 3</pre> <pre>(x &lt; 0 or x &gt;= 1) and x \n&lt;= 3</pre> 1 ATLogic_True. AlgEquiv <pre>(x &lt; 0 nounor x &gt;= 1) no\nunand x &lt;= 3</pre> <pre>x &lt; 0 or (x &gt;= 1 and x &amp;\nlt;= 3)</pre> 1 ATLogic_True. AlgEquiv <pre>natural_domain(1/x^2)</pre> <pre>natural_domain(1/x)</pre> 1 ATRealSet_true. AlgEquiv <pre>x^4&gt;=0</pre> <pre>x^2&gt;=0</pre> 1 AlgEquiv <pre>x^4&gt;=16</pre> <pre>x^2&gt;=4</pre> 1 AlgEquiv <pre>x^4&gt;=16</pre> <pre>x^2&gt;=4</pre> 1 AlgEquiv <pre>-3&lt;=x</pre> <pre>-3&lt;=x nounand x&lt;=3</pre> 0 AlgEquiv <pre>{2,-2}</pre> <pre>x&gt;2 nounor -2&gt;x</pre> 0 ATAlgEquiv_SA_not_logic. Your answer should be an equation, inequality or a logical combination of many of these, but is not. AlgEquiv <pre>x^2&lt;4</pre> <pre>x&lt;2 nounand x&gt;-2</pre> 1 ATLogic_Solver_True. AlgEquiv <pre>x^2&lt;6</pre> <pre>x&lt;2 nounand x&gt;-2</pre> 0 AlgEquiv <pre>x&gt;1 nounand x&lt;-1</pre> <pre>false</pre> 1 ATLogic_Solver_True. AlgEquiv <pre>x&gt;1 nounand x&lt;3</pre> <pre>true</pre> 0 AlgEquiv <pre>x&gt;1 nounor x&lt;3</pre> <pre>true</pre> 1 ATLogic_Solver_True. AlgEquiv <pre>x&gt;1 nounor x&lt;3</pre> <pre>all</pre> 1 ATLogic_Solver_True. AlgEquiv <pre>abs(x)&lt;1</pre> <pre>abs(x)&lt;1</pre> 1 AlgEquiv <pre>abs(x)&lt;1</pre> <pre>abs(x)&lt;2</pre> 0 AlgEquiv <pre>abs(x)&lt;1</pre> <pre>abs(x)&gt;1</pre> 0 ATInequality_backwards. Your inequality appears to be backwards. AlgEquiv ! <pre>abs(x)&lt;2</pre> <pre>-2&lt;x and x&lt;2</pre> -3 AlgEquiv ! <pre>-2&lt;x and x&lt;2</pre> <pre>abs(x)&lt;2</pre> -3 AlgEquiv <pre>abs(x)&lt;2</pre> <pre>-1&lt;x and x&lt;1</pre> 0 AlgEquiv <pre>x^2&lt;=9</pre> <pre>abs(x)&lt;3</pre> 0 AlgEquiv ! <pre>x^2&lt;=9</pre> <pre>abs(x)&lt;=3</pre> -3 AlgEquiv ! <pre>x^6&lt;1</pre> <pre>abs(x)&lt;1</pre> -3 AlgEquiv ! <pre>abs(x)&gt;1</pre> <pre>x&lt;-1 or x&gt;1</pre> -3 AlgEquiv <pre>minf &lt; x</pre> <pre>minf &lt;= x</pre> 0 ATInequality_strict. Your inequality should not be strict! AlgEquiv <pre>x&gt;minf</pre> <pre>minf &lt; x</pre> 1 AlgEquiv <pre>x&gt;-inf</pre> <pre>minf &lt; x</pre> 1 AlgEquiv <pre>x&lt;2*inf</pre> <pre>x&lt;inf</pre> 0 AlgEquiv <pre>minf &lt; x nounand x &lt;1</pre> <pre>x&lt;1</pre> 1 AlgEquiv <pre>minf &lt; x nounand x &lt;1</pre> <pre>x&lt;2</pre> 0 Maxima and infinity AlgEquiv <pre>2*inf</pre> <pre>inf</pre> 0 AlgEquiv <pre>-inf</pre> <pre>minf</pre> 0 Not equal to AlgEquiv <pre>x#1</pre> <pre>x#1</pre> 1 ATLogic_True. AlgEquiv <pre>x#(1+1)</pre> <pre>x#2</pre> 1 ATLogic_True. AlgEquiv <pre>1#x</pre> <pre>x#1</pre> 1 ATLogic_True. AlgEquiv <pre>a#b</pre> <pre>b#a</pre> 1 AlgEquiv <pre>x#2</pre> <pre>x-2#0</pre> 1 ATLogic_True. AlgEquiv <pre>[x#2]</pre> <pre>[x-2#0]</pre> 1 AlgEquiv <pre>x-3#0</pre> <pre>x#2</pre> 0 AlgEquiv <pre>x#2</pre> <pre>x&lt;2 nounor x&gt;2</pre> 1 ATLogic_Solver_True. AlgEquiv <pre>x^2-3#1</pre> <pre>x&lt;-2 nounor (x&lt;-2 and x&amp;\nlt;2) nounor 2&lt;x</pre> 0 AlgEquiv <pre>x^2-3#1</pre> <pre>x&lt;-2 nounor (-2&lt;x and x&amp;\nlt;2) nounor 2&lt;x</pre> 1 ATLogic_Solver_True. AlgEquiv <pre>x#1</pre> <pre>x#0</pre> 0 Surds AlgEquiv <pre>sqrt(12)</pre> <pre>2*sqrt(3)</pre> 1 AlgEquiv <pre>sqrt(11+6*sqrt(2))</pre> <pre>3+sqrt(2)</pre> 1 AlgEquiv <pre>(19601-13860*sqrt(2))^(7/4)</pre> <pre>(5*sqrt(2)-7)^7</pre> 1 AlgEquiv <pre>(19601-13861*sqrt(2))^(7/4)</pre> <pre>(5*sqrt(2)-7)^7</pre> 0 AlgEquiv <pre>(19601-13861*sqrt(2))^(7/4)</pre> <pre>(5*sqrt(2)-7)^7</pre> 0 AlgEquiv <pre>sqrt(2*log(26)+4-2*log(2))</pre> <pre>sqrt(2*log(13)+4)</pre> 1 AlgEquiv <pre>sqrt(2)*sqrt(3)+2*(sqrt(2/3))*\nx-(2/3)*(sqrt(2/3))*x^2+(4/9)*\n(sqrt(2/3))*x^3</pre> <pre>4*sqrt(6)*x^3/27-(2*sqrt(6)*x^\n2)/9+(2*sqrt(6)*x)/3+sqrt(6)</pre> 1 AlgEquiv <pre>x = -1/2 + sqrt(1/4 + 4/3)</pre> <pre>x = (-3 + sqrt(9 + 48))/6</pre> 1 ATEquation_sides AlgEquiv <pre>{x = -1/2 + sqrt(1/4 + 4/3), x\n = (-1/2 - sqrt(1/4 + 4/3))}</pre> <pre>{x = (-3 + sqrt(9 + 48))/6, x \n= (-3 - sqrt(9 + 48))/6}</pre> 0 ATSet_wrongentries. The following entries are incorrect, although they may appear in a simplified form from that which you actually entered. \\[\\left \\{x-\\frac{\\sqrt{19}-\\sqrt{3}}{2\\cdot \\sqrt{3}}=0 , x+\\frac{ \\sqrt{19}+\\sqrt{3}}{2\\cdot \\sqrt{3}}=0 \\right \\}\\] AlgEquiv <pre>radcan(trigrat({x = -1/2 + sqr\nt(1/4 + 4/3), x = (-1/2 - sqrt\n(1/4 + 4/3))}))</pre> <pre>radcan(trigrat({x = (-3 + sqrt\n(9 + 48))/6, x = (-3 - sqrt(9 \n+ 48))/6}))</pre> 1 Factorials and binomials AlgEquiv <pre>(n+1)*n!</pre> <pre>(n+1)!</pre> 1 AlgEquiv <pre>n/n!</pre> <pre>1/(n-1)!</pre> 1 AlgEquiv <pre>n/n!</pre> <pre>1/(n+1)!</pre> 0 AlgEquiv <pre>n!/((k-1)!*(n-k+1)!)</pre> <pre>n!*k/(k!*(n-k+1)!)</pre> 1 AlgEquiv <pre>n!/(k!*(n-k)!)</pre> <pre>n!*(n-k+1)/(k!*(n-k+1)!)</pre> 1 AlgEquiv <pre>n!/(k!*(n-k)!)</pre> <pre>binomial(n,k)</pre> 1 AlgEquiv <pre>binomial(n,k)+binomial(n,k+1)</pre> <pre>binomial(n+1,k+1)</pre> 1 AlgEquiv <pre>n!/((k-1)!*(n-k+1)!)+n!/(k!*(n\n-k)!)</pre> <pre>n!*k/(k!*(n-k+1)!)+n!*(n-k+1)/\n(k!*(n-k+1)!)</pre> 1 AlgEquiv <pre>binomial(n,k)+binomial(n,k+1)</pre> <pre>binomial(n+1,k)</pre> 0 AlgEquiv <pre>binomial(n,k)</pre> <pre>binomial(n,n-k)</pre> 1 AlgEquiv <pre>175!*56!/(55!*176!)</pre> <pre>17556/55176</pre> 1 AlgEquiv <pre>binomial(58,[9,15,20,14])</pre> <pre>binomial(58,[15,9,20,14])</pre> 1 AlgEquiv <pre>binomial(x,[a,b,c])</pre> <pre>binomial(x,[b,c,a])</pre> 1 Unevaluated derviatives AlgEquiv <pre>3*s*diff(q(s),s)</pre> <pre>3*s*diff(q(s),s)</pre> 1 AlgEquiv <pre>3*t*diff(q(s),s)</pre> <pre>3*diff(t*q(s),s)</pre> 1 AlgEquiv <pre>diff(diff(q(s),s),s)</pre> <pre>diff(q(s),s,2)</pre> 1 Sums and products AlgEquiv <pre>sum(k^n,n,0,3)</pre> <pre>sum(k^n,n,0,3)</pre> 1 AlgEquiv <pre>1+k+k^2+k^3</pre> <pre>sum(k^n,n,0,3)</pre> 1 AlgEquiv <pre>1+k+k^2</pre> <pre>sum(k^n,n,0,3)</pre> 0 AlgEquiv <pre>n*(n+1)*(2*n+1)/6</pre> <pre>sum(k^2,k,1,n)</pre> 1 AlgEquiv <pre>sum((k+1)^2,k,0,n-1)</pre> <pre>sum(k^2,k,1,n)</pre> 1 AlgEquiv <pre>product(cos(k*x),k,1,3)</pre> <pre>product(cos(k*x),k,1,3)</pre> 1 AlgEquiv <pre>cos(x)*cos(2*x)*cos(3*x)</pre> <pre>product(cos(k*x),k,1,3)</pre> 1 AlgEquiv <pre>cos(x)*cos(2*x)</pre> <pre>product(cos(k*x),k,1,3)</pre> 0 Scientific units are ignored AlgEquiv <pre>9.81*m/s^2</pre> <pre>stackunits(9.81,m/s^2)</pre> 1 AlgEquiv <pre>6*stackunits(1,m)</pre> <pre>stackunits(6,m)</pre> 1 AlgEquiv <pre>stackunits(2,m)^2</pre> <pre>stackunits(4,m^2)</pre> 1 AlgEquiv <pre>stackunits(2,s)^2</pre> <pre>stackunits(4,m^2)</pre> 0 AlgEquiv <pre>stack_units_nums(stackunits_ma\nke(m/s))</pre> <pre>1</pre> 0 AlgEquiv <pre>stack_units_nums(stackunits_ma\nke(m/s))</pre> <pre>NULLNUM</pre> 1 AlgEquiv <pre>ev(stack_units_nums(stackunits\n_make(m/s)),NULLNUM=1)</pre> <pre>1</pre> 1 Maxima does not simplify -inf (I agree!) AlgEquiv <pre>-inf</pre> <pre>minf</pre> 0 These currently fail AlgEquiv ! <pre>2/%i*ln(sqrt((1+z)/2)+%i*sqrt(\n(1-z)/2))</pre> <pre>-%i*ln(z+%i*sqrt(1-z^2))</pre> -3 AlgEquiv ! <pre>abs(x^2-4)/(abs(x-2)*abs(x+2))</pre> <pre>1</pre> -3 AlgEquiv ! <pre>abs(x^2-4)</pre> <pre>abs(x-2)*abs(x+2)</pre> -3 AlgEquiv ! <pre>(sqrt(108)+10)^(1/3)-(sqrt(108\n)-10)^(1/3)</pre> <pre>2</pre> -3 AlgEquiv ! <pre>(sqrt(2+sqrt(2))+sqrt(2-sqrt(2\n)))/(2*sqrt(2))</pre> <pre>sqrt(sqrt(2)+2)/2</pre> -3 AlgEquiv ! <pre>sqrt(2*x*sqrt(x^2+1)+2*x^2+1)-\nsqrt(x^2+1)-x</pre> <pre>0</pre> -3 AlgEquiv ! <pre>(77+20*sqrt(13))^(1/6)-(77-20*\nsqrt(13))^(1/6)</pre> <pre>1</pre> -3 AlgEquiv ! <pre>(930249+416020*sqrt(5))^(1/30)\n-(930249-416020*sqrt(5))^(1/30\n)</pre> <pre>1</pre> -3 AlgEquiv ! <pre>cos(2*%pi/17)</pre> <pre>(-1+sqrt(17)+sqrt(34-2*sqrt(17\n)))/16+(2*sqrt(17+3*sqrt(17)-s\nqrt(34-2*sqrt(17))-2*sqrt(34+2\n*sqrt(17))))/16</pre> -3 AlgEquiv ! <pre>(41-sqrt(511))/2</pre> <pre>(sqrt((4*(cos((1/2*(acos((61/1\n040*sqrt(130)))-atan(11/3)))))\n^(2))+21)-(2*cos((1/2*(acos((6\n1/1040*sqrt(130)))-atan(11 / 3\n))))))^(2)</pre> -3 AlgEquiv ! <pre>a*(1+sqrt(2))=b</pre> <pre>a=b*(sqrt(2)-1)/3</pre> -3 ATEquation_default This is only equivalent for x&gt;=0... AlgEquiv ! <pre>atan(1/2)</pre> <pre>%pi/2-atan(2)</pre> -3 This is true for all x... AlgEquiv ! <pre>asinh(x)</pre> <pre>ln(x+sqrt(x^2+1))</pre> -3 Logical expressions AlgEquiv <pre>true and false</pre> <pre>false</pre> 1 ATLogic_True. AlgEquiv <pre>true or false</pre> <pre>false</pre> 0 AlgEquiv <pre>A and B</pre> <pre>B and A</pre> 1 ATLogic_True. AlgEquiv <pre>A and B</pre> <pre>C and A</pre> 0 AlgEquiv <pre>A and B=C</pre> <pre>C=B and A</pre> 1 ATLogic_True. AlgEquiv <pre>A and (B and C)</pre> <pre>A and B and C</pre> 1 ATLogic_True. AlgEquiv <pre>A and (B or C)</pre> <pre>A and (B or C)</pre> 1 ATLogic_True. AlgEquiv <pre>(A and B) or (A and C)</pre> <pre>A and (B or C)</pre> 1 ATLogic_True. AlgEquiv <pre>-(b#pm#sqrt(b^2-4*a*c))</pre> <pre>-b#pm#sqrt(b^2-4*a*c)</pre> 1 ATLogic_True. AlgEquiv <pre>x=-b#pm#c^2</pre> <pre>x=c^2-b or x=-c^2-b</pre> 1 ATEquation_sides AlgEquiv <pre>x=b#pm#c^2</pre> <pre>x=c^2-b or x=-c^2-b</pre> 0 ATEquation_default AlgEquiv <pre>x#pm#a = y#pm#b</pre> <pre>x#pm#a = y#pm#b</pre> 1 ATEquation_sides AlgEquiv <pre>x#pm#a = y#pm#b</pre> <pre>x#pm#a = y#pm#c</pre> 0 ATEquation_lhs_notrhs AlgEquiv <pre>not(A) and not(B)</pre> <pre>not(A or B)</pre> 1 ATLogic_True. AlgEquiv <pre>not(A) and not(B)</pre> <pre>not(A and B)</pre> 0 AlgEquiv <pre>not(A) or B</pre> <pre>boolean_form(A implies B)</pre> 1 AlgEquiv <pre>not(A) or B</pre> <pre>A implies B</pre> 1 ATLogic_True. AlgEquiv <pre>not(A) and B</pre> <pre>A implies B</pre> 0 AlgEquiv <pre>(not A and B) or (not B and A)</pre> <pre>A xor B</pre> 1 ATLogic_True. AlgEquiv <pre>(A and B) or (not A and not B)</pre> <pre>A xnor B</pre> 1 ATLogic_True. AlgEquiv <pre>((not A) and (not B)) or ((not\n A) and B)</pre> <pre>not A</pre> 1 ATLogic_True. AlgEquiv <pre>(A xor B) nounand (A xnor B)</pre> <pre>false</pre> 1 ATLogic_True. AlgEquiv <pre>{not(A) or B,A and B}</pre> <pre>{A implies B,A and B}</pre> 0 ATSet_wrongentries. The following entries are incorrect, although they may appear in a simplified form from that which you actually entered. \\[\\left \\{{\\rm not}\\left( A \\right)\\,{\\text{ or }}\\, B \\right \\}\\] AlgEquiv <pre>{A implies B,A and B}</pre> <pre>{not(A) and B,A and B}</pre> 0 ATSet_wrongentries. The following entries are incorrect, although they may appear in a simplified form from that which you actually entered. \\[\\left \\{A\\,{\\text{ implies }}\\, B \\right \\}\\] Differential equations AlgEquiv <pre>diff(x^2,x)</pre> <pre>2*x</pre> 1 AlgEquiv <pre>diff(x^2,x)</pre> <pre>'diff(x^2,x)</pre> 1 AlgEquiv <pre>noundiff(x^2,x)</pre> <pre>2*x</pre> 1 AlgEquiv <pre>diff(y,x)</pre> <pre>0</pre> 1 AlgEquiv <pre>noundiff(y,x)</pre> <pre>0</pre> 1 AlgEquiv <pre>diff(y(x),x)</pre> <pre>0</pre> 0 AlgEquiv <pre>diff(y(x),x)</pre> <pre>diff(y,x)</pre> 0 AlgEquiv <pre>diff(y,x)</pre> <pre>diff(y,x,2)</pre> 1 AlgEquiv <pre>int(f(x)*%e^(-i*x*xi), x, -inf\n, inf)</pre> <pre>int(f(x)*%e^(-i*x*xi), x, -inf\n, inf)</pre> 1 AlgEquiv ! <pre>int(f(t)*%e^(-i*t*xi), t, -inf\n, inf)</pre> <pre>int(f(x)*%e^(-i*x*xi), x, -inf\n, inf)</pre> -3 AlgEquiv <pre>F(xi)</pre> <pre>int(f(x)*%e^(-i*x*xi), x, -inf\n, inf)</pre> 0 AlgEquiv <pre>F(xi)^(-25*xi^2*t)</pre> <pre>t</pre> 0 Basic support for strings AlgEquiv <pre>\"Hello\"</pre> <pre>\"Hello\"</pre> 1 ATAlgEquiv_String AlgEquiv <pre>\"hello\"</pre> <pre>\"Hello\"</pre> 0 ATAlgEquiv_String AlgEquiv <pre>W</pre> <pre>\"Hello\"</pre> 0 ATAlgEquiv_SA_not_string. Your answer should be a string, but is not. AlgEquiv <pre>\"Hello\"</pre> <pre>x^2</pre> 0 ATAlgEquiv_SA_not_expression. Your answer should be an expression, not an equation, inequality, list, set or matrix."},{"location":"en/Authoring/Answer_Tests/Results/AlgEquivNouns/","title":"AlgEquivNouns: Answer test results","text":"<p>This page exposes the results of running answer tests on STACK test cases.  This page is automatically generated from the STACK unit tests and is designed to show question authors what answer tests actually do.  This includes cases where answer tests currentl fail, which gives a negative expected mark.  Comments and further test cases are very welcome.</p> AlgEquivNouns Test?Student responseTeacher answerOptMarkAnswer note AlgEquivNouns <pre>1/0</pre> <pre>1</pre> -1 ATAlgEquivNouns_STACKERROR_SAns. TEST_FAILED The answer test failed to execute correctly: please alert your teacher. Division by zero. AlgEquivNouns <pre>1</pre> <pre>1/0</pre> -1 ATAlgEquivNouns_STACKERROR_TAns. TEST_FAILED The answer test failed to execute correctly: please alert your teacher. Division by zero. AlgEquivNouns <pre></pre> <pre>(x-1)^2</pre> -1 ATAlgEquivNounsTEST_FAILED-Empty SA. The answer test failed to execute correctly: please alert your teacher. Attempted to execute an answer test with an empty student answer, probably a CAS validation problem when authoring the question. AlgEquivNouns <pre>x^2</pre> <pre></pre> -1 ATAlgEquivNounsTEST_FAILED-Empty TA. The answer test failed to execute correctly: please alert your teacher. Attempted to execute an answer test with an empty teacher answer, probably a CAS validation problem when authoring the question. AlgEquivNouns <pre>x-1)^2</pre> <pre>(x-1)^2</pre> -1 ATAlgEquivNounsTEST_FAILED-Empty SA. The answer test failed to execute correctly: please alert your teacher. Attempted to execute an answer test with an empty student answer, probably a CAS validation problem when authoring the question. AlgEquivNouns <pre>diff(x^2,x)</pre> <pre>2*x</pre> 1 AlgEquivNouns <pre>diff(x^2,x)</pre> <pre>'diff(x^2,x)</pre> 0 AlgEquivNouns <pre>diff(x^2,x)</pre> <pre>'diff(x^2,x)</pre> 0 AlgEquivNouns <pre>'diff(y,x)</pre> <pre>noundiff(y,x)</pre> 1 AlgEquivNouns <pre>diff(y,x)</pre> <pre>0</pre> 1 AlgEquivNouns <pre>'diff(y,x)</pre> <pre>0</pre> 0 AlgEquivNouns <pre>noundiff(y,x)</pre> <pre>0</pre> 0 AlgEquivNouns <pre>diff(y(x),x)</pre> <pre>0</pre> 0 AlgEquivNouns <pre>'diff(y,x,1)</pre> <pre>'diff(y,x,2)</pre> 0 AlgEquivNouns <pre>'diff(y(x),x)</pre> <pre>'diff(y,x)</pre> 0 AlgEquivNouns <pre>subst(y,y(x),'diff(y,x)+y\n=1)</pre> <pre>'diff(y,x)+y=1</pre> 1 ATEquation_sides AlgEquivNouns <pre>subst(y,y(x),'diff(y(x),x\n)+y(x)=1)</pre> <pre>'diff(y,x)+y=1</pre> 1 ATEquation_sides AlgEquivNouns <pre>subst(y(x),y,'diff(y,x)+y\n=1)</pre> <pre>'diff(y(x),x)+y(x)=1</pre> 1 ATEquation_sides AlgEquivNouns <pre>subst(y(x),y,'diff(y,x)+y\n=1)</pre> <pre>'diff(y,x)+y=1</pre> 0 ATEquation_default AlgEquivNouns <pre>subst(y(x),y,'diff(y(x),x\n)+y(x)=1)</pre> <pre>'diff(y,x)+y=1</pre> -1 ATAlgEquivNouns_STACKERROR_SAns. TEST_FAILED The answer test failed to execute correctly: please alert your teacher. subst: cannot substitute y(x) for operator y in expression y(x)  AlgEquivNouns <pre>y_x</pre> <pre>'diff(y,x)</pre> 0 Partials AlgEquivNouns <pre>noundiff(f,x,1,y,1)</pre> <pre>noundiff(noundiff(f,x),y)</pre> 1 AlgEquivNouns <pre>noundiff(noundiff(f,y),x)</pre> <pre>noundiff(noundiff(f,x),y)</pre> 1 AlgEquivNouns <pre>noundiff(noundiff(f,x),x)</pre> <pre>noundiff(f,x,2)</pre> 1 Differential equations AlgEquivNouns <pre>noundiff(H,x,2) = -R/T</pre> <pre>noundiff(H,x,2) + R/T = 0</pre> 1 ATEquation_ratio AlgEquivNouns <pre>'diff(H,x,2) = -R/T</pre> <pre>noundiff(H,x,2) + R/T = 0</pre> 1 ATEquation_ratio AlgEquivNouns <pre>y(t)=int(s^2,s,0,t)</pre> <pre>y(t)=t^3/3</pre> 1 ATEquation_sides AlgEquivNouns <pre>y(t)='int(s^2,s,0,t)</pre> <pre>y(t)=t^3/3</pre> 0 ATEquation_lhs_notrhs AlgEquivNouns <pre>y(t)='int(s^2,s,0,t)</pre> <pre>y(t)=nounint(s^2,s,0,t)</pre> 1 ATEquation_sides Logic nouns are still evaluated AlgEquivNouns <pre>true nounand false</pre> <pre>false</pre> 1 ATLogic_True."},{"location":"en/Authoring/Answer_Tests/Results/Antidiff/","title":"Antidiff: Answer test results","text":"<p>This page exposes the results of running answer tests on STACK test cases.  This page is automatically generated from the STACK unit tests and is designed to show question authors what answer tests actually do.  This includes cases where answer tests currentl fail, which gives a negative expected mark.  Comments and further test cases are very welcome.</p> Antidiff Test?Student responseTeacher answerOptMarkAnswer note Antidiff <pre>1/0</pre> <pre>1</pre> -1 STACKERROR_OPTION. TEST_FAILED The answer test failed to execute correctly: please alert your teacher. Missing option when executing the test.  Antidiff <pre>1/0</pre> <pre>1</pre> <pre>x</pre> -1 ATAntidiff_STACKERROR_SAns. Antidiff <pre>1</pre> <pre>1/0</pre> <pre>x</pre> -1 ATAntidiff_STACKERROR_TAns. Antidiff <pre>0</pre> <pre>0</pre> <pre>1/0</pre> -1 ATAntidiff_STACKERROR_Opt. Antidiff <pre>0</pre> <pre>0</pre> <pre>[x,1/0]</pre> -1 ATAntidiff_STACKERROR_Opt. Antidiff <pre>0</pre> <pre>0</pre> <pre>[x,NOCONST,1/0]</pre> -1 ATAntidiff_STACKERROR_Opt. Basic tests Antidiff <pre>x^3/3</pre> <pre>x^3/3</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>x^3/3+1</pre> <pre>x^3/3</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>x^3/3+c</pre> <pre>x^3/3</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>x^3/3-c</pre> <pre>x^3/3</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>x^3/3+c+1</pre> <pre>x^3/3</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>x^3/3+3*c</pre> <pre>x^3/3</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>(x^3+c)/3</pre> <pre>x^3/3</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>x^(k+1)/(k+1)</pre> <pre>x^(k+1)/(k+1)</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>x^(k+1)/(k+1)+c</pre> <pre>x^(k+1)/(k+1)</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>(x^(k+1)-1)/(k+1)</pre> <pre>x^(k+1)/(k+1)</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>(x^(k+1)-1)/(k+1)+c</pre> <pre>x^(k+1)/(k+1)+c</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>x^3/3+c+k</pre> <pre>x^3/3</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>x^3/3+c^2</pre> <pre>x^3/3</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>x^3/3+c^3</pre> <pre>x^3/3</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>x^3/3*c</pre> <pre>x^3/3</pre> <pre>x</pre> 0 ATAntidiff_generic. The derivative of your answer should be equal to the expression that you were asked to integrate, that was: \\[x^2\\] In fact, the derivative of your answer, with respect to \\(x\\) is: \\[c\\cdot x^2\\] so you must have done something wrong! Antidiff <pre>X^3/3+c</pre> <pre>x^3/3</pre> <pre>x</pre> 0 ATAntidiff_generic. The derivative of your answer should be equal to the expression that you were asked to integrate, that was: \\[x^2\\] In fact, the derivative of your answer, with respect to \\(x\\) is: \\[0\\] so you must have done something wrong! Antidiff <pre>sin(2*x)</pre> <pre>x^3/3</pre> <pre>x</pre> 0 ATAntidiff_generic. The derivative of your answer should be equal to the expression that you were asked to integrate, that was: \\[x^2\\] In fact, the derivative of your answer, with respect to \\(x\\) is: \\[2\\cdot \\cos \\left( 2\\cdot x \\right)\\] so you must have done something wrong! Antidiff <pre>x^2/2-2*x+2+c</pre> <pre>(x-2)^2/2</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>(t-1)^5/5+c</pre> <pre>(t-1)^5/5</pre> <pre>t</pre> 1 ATAntidiff_true. Antidiff <pre>(v-1)^5/5+c</pre> <pre>(v-1)^5/5</pre> <pre>v</pre> 1 ATAntidiff_true. Antidiff <pre>cos(2*x)/2+1+c</pre> <pre>cos(2*x)/2</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>(x-a)^6001/6001+c</pre> <pre>(x-a)^6001/6001</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>(x-a)^6001/6001</pre> <pre>(x-a)^6001/6001</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>6000*(x-a)^5999</pre> <pre>(x-a)^6001/6001</pre> <pre>x</pre> 0 ATAntidiff_diff. It looks like you have differentiated instead! Antidiff <pre>4*%e^(4*x)/(%e^(4*x)+1)</pre> <pre>log(%e^(4*x)+1)+c</pre> <pre>x</pre> 0 ATAntidiff_generic. The derivative of your answer should be equal to the expression that you were asked to integrate, that was: \\[\\frac{4\\cdot e^{4\\cdot x}}{e^{4\\cdot x}+1}\\] In fact, the derivative of your answer, with respect to \\(x\\) is: \\[\\frac{16\\cdot e^{4\\cdot x}}{e^{4\\cdot x}+1}-\\frac{16\\cdot e^{8 \\cdot x}}{{\\left(e^{4\\cdot x}+1\\right)}^2}\\] so you must have done something wrong! The teacher adds a constant Antidiff <pre>x^3/3+c</pre> <pre>x^3/3+c</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>x^2/2-2*x+2+c</pre> <pre>(x-2)^2/2+k</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>x^3/3</pre> <pre>x^3/3</pre> <pre>[x,NOCONST]</pre> -1 ATAntidiff_STACKERROR_Opt. The answer test failed to execute correctly: please alert your teacher. There is something wrong with the options given to the ATAntidiff answer test. Antidiff <pre>x^3/3+c</pre> <pre>x^3/3</pre> <pre>[x,NOCONST]</pre> -1 ATAntidiff_STACKERROR_Opt. The answer test failed to execute correctly: please alert your teacher. There is something wrong with the options given to the ATAntidiff answer test. Antidiff <pre>x^2/2-2*x+2</pre> <pre>(x-2)^2/2+k</pre> <pre>[x,NOCONST]</pre> -1 ATAntidiff_STACKERROR_Opt. The answer test failed to execute correctly: please alert your teacher. There is something wrong with the options given to the ATAntidiff answer test. Antidiff <pre>x^3/3+1</pre> <pre>x^3/3</pre> <pre>[x,NOCONST]</pre> -1 ATAntidiff_STACKERROR_Opt. The answer test failed to execute correctly: please alert your teacher. There is something wrong with the options given to the ATAntidiff answer test. Antidiff <pre>x^3/3+c^2</pre> <pre>x^3/3</pre> <pre>[x,NOCONST]</pre> -1 ATAntidiff_STACKERROR_Opt. The answer test failed to execute correctly: please alert your teacher. There is something wrong with the options given to the ATAntidiff answer test. Antidiff <pre>n*x^n</pre> <pre>n*x^(n-1)</pre> <pre>x</pre> 0 ATAntidiff_generic. The derivative of your answer should be equal to the expression that you were asked to integrate, that was: \\[\\left(n-1\\right)\\cdot n\\cdot x^{n-2}\\] In fact, the derivative of your answer, with respect to \\(x\\) is: \\[n^2\\cdot x^{n-1}\\] so you must have done something wrong! Antidiff <pre>n*x^n</pre> <pre>(assume(n&gt;0), n*x^(n-1))</pre> <pre>x</pre> 0 ATAntidiff_generic. The derivative of your answer should be equal to the expression that you were asked to integrate, that was: \\[\\left(n-1\\right)\\cdot n\\cdot x^{n-2}\\] In fact, the derivative of your answer, with respect to \\(x\\) is: \\[n^2\\cdot x^{n-1}\\] so you must have done something wrong! Special case Antidiff <pre>exp(x)+c</pre> <pre>exp(x)</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>exp(x)</pre> <pre>exp(x)</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>exp(x)</pre> <pre>exp(x)</pre> <pre>[x,NOCONST]</pre> -1 ATAntidiff_STACKERROR_Opt. The answer test failed to execute correctly: please alert your teacher. There is something wrong with the options given to the ATAntidiff answer test. Student differentiates by mistake Antidiff <pre>2*x</pre> <pre>x^3/3</pre> <pre>x</pre> 0 ATAntidiff_diff. It looks like you have differentiated instead! Antidiff <pre>2*x+c</pre> <pre>x^3/3</pre> <pre>x</pre> 0 ATAntidiff_diff. It looks like you have differentiated instead! Sloppy logs (teacher ignores abs(x) ) Antidiff <pre>ln(x)</pre> <pre>ln(x)</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>ln(x)</pre> <pre>ln(x)</pre> <pre>[x,NOCONST]</pre> -1 ATAntidiff_STACKERROR_Opt. The answer test failed to execute correctly: please alert your teacher. There is something wrong with the options given to the ATAntidiff answer test. Antidiff <pre>ln(x)+c</pre> <pre>ln(x)+c</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>ln(k*x)</pre> <pre>ln(x)+c</pre> <pre>x</pre> 1 ATAntidiff_true. Fussy logs (teacher uses abs(x) ) Antidiff <pre>ln(x)</pre> <pre>ln(abs(x))+c</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>ln(x)+c</pre> <pre>ln(abs(x))+c</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>ln(x)</pre> <pre>ln(abs(x))+c</pre> <pre>[x, NOCONST]</pre> -1 ATAntidiff_STACKERROR_Opt. The answer test failed to execute correctly: please alert your teacher. There is something wrong with the options given to the ATAntidiff answer test. Antidiff <pre>ln(abs(x))</pre> <pre>ln(abs(x))+c</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>ln(abs(x))+c</pre> <pre>ln(abs(x))+c</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>ln(k*x)</pre> <pre>ln(abs(x))+c</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>ln(k*abs(x))</pre> <pre>ln(abs(x))+c</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>ln(abs(k*x))</pre> <pre>ln(abs(x))+c</pre> <pre>x</pre> 1 ATAntidiff_true. Teacher uses ln(k*abs(x)) Antidiff <pre>ln(x)</pre> <pre>ln(k*abs(x))</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>ln(x)+c</pre> <pre>ln(k*abs(x))</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>ln(abs(x))</pre> <pre>ln(k*abs(x))</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>ln(abs(x))+c</pre> <pre>ln(k*abs(x))</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>ln(k*x)</pre> <pre>ln(k*abs(x))</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>ln(k*abs(x))</pre> <pre>ln(k*abs(x))</pre> <pre>x</pre> 1 ATAntidiff_true. Other logs Antidiff <pre>ln(x)+ln(a)</pre> <pre>ln(k*abs(x+a))</pre> <pre>x</pre> 0 ATAntidiff_generic. The derivative of your answer should be equal to the expression that you were asked to integrate, that was: \\[\\frac{1}{x+a}\\] In fact, the derivative of your answer, with respect to \\(x\\) is: \\[\\frac{1}{x}\\] so you must have done something wrong! Antidiff <pre>log(x)^2-2*log(c)*log(x)+k</pre> <pre>ln(c/x)^2</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff ! <pre>log(x)^2-2*log(c)*log(x)+k</pre> <pre>ln(abs(c/x))^2</pre> <pre>x</pre> -3 ATAntidiff_generic. The derivative of your answer should be equal to the expression that you were asked to integrate, that was: \\[-\\frac{2\\cdot \\ln \\left( \\frac{\\left| c\\right| }{\\left| x\\right| } \\right)}{x}\\] In fact, the derivative of your answer, with respect to \\(x\\) is: \\[\\frac{2\\cdot \\ln \\left( x \\right)}{x}-\\frac{2\\cdot \\ln \\left( c \\right)}{x}\\] so you must have done something wrong! Antidiff <pre>c-(log(2)-log(x))^2/2</pre> <pre>-1/2*log(2/x)^2</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>ln(abs(x+3))/2+c</pre> <pre>ln(abs(2*x+6))/2+c</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>ln(abs(x+3))/2+c</pre> <pre>ln(abs(2*x+6))/2+c</pre> <pre>[x, FORMAL]</pre> -1 ATAntidiff_STACKERROR_Opt. The answer test failed to execute correctly: please alert your teacher. There is something wrong with the options given to the ATAntidiff answer test. Antidiff <pre>ln(abs(x+3))/2</pre> <pre>ln(abs(2*x+6))/2+c</pre> <pre>[x, FORMAL]</pre> -1 ATAntidiff_STACKERROR_Opt. The answer test failed to execute correctly: please alert your teacher. There is something wrong with the options given to the ATAntidiff answer test. Antidiff <pre>ln(abs(x+3))/2</pre> <pre>ln(abs(2*x+6))/2+c</pre> <pre>[x, FORMAL, NOC\nONST]</pre> -1 ATAntidiff_STACKERROR_Opt. The answer test failed to execute correctly: please alert your teacher. There is something wrong with the options given to the ATAntidiff answer test. Antidiff <pre>ln(abs(x+3))/2</pre> <pre>ln(abs(2*x+6))/2+c</pre> <pre>[x, NOCONST, FO\nRMAL]</pre> -1 ATAntidiff_STACKERROR_Opt. The answer test failed to execute correctly: please alert your teacher. There is something wrong with the options given to the ATAntidiff answer test. Antidiff <pre>ln(abs(x+3))/2</pre> <pre>ln(abs(2*x+6))/2+c</pre> <pre>[x, NOCONST]</pre> -1 ATAntidiff_STACKERROR_Opt. The answer test failed to execute correctly: please alert your teacher. There is something wrong with the options given to the ATAntidiff answer test. Antidiff <pre>-log(sqrt(x^2-4*x+3)+x-2)/2+(x\n*sqrt(x^2-4*x+3))/2-sqrt(x^2-4\n*x+3)+c</pre> <pre>integrate(sqrt(x^2-4*x+3),x)</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>-log(sqrt(x^2-4*x+3)+x-2)/2+(x\n*sqrt(x^2-4*x+3))/2-sqrt(x^2-4\n*x+3)+c</pre> <pre>integrate(sqrt(x^2-4*x+3),x)</pre> <pre>[x, FORMAL]</pre> -1 ATAntidiff_STACKERROR_Opt. The answer test failed to execute correctly: please alert your teacher. There is something wrong with the options given to the ATAntidiff answer test. Irreducible quadratic Antidiff <pre>ln(x^2+7*x+7)</pre> <pre>ln(x^2+7*x+7)</pre> <pre>[x,NOCONST]</pre> -1 ATAntidiff_STACKERROR_Opt. The answer test failed to execute correctly: please alert your teacher. There is something wrong with the options given to the ATAntidiff answer test. Antidiff <pre>ln(x^2+7*x+7)</pre> <pre>ln(abs(x^2+7*x+7))</pre> <pre>[x,NOCONST]</pre> -1 ATAntidiff_STACKERROR_Opt. The answer test failed to execute correctly: please alert your teacher. There is something wrong with the options given to the ATAntidiff answer test. Antidiff <pre>ln(x^2+7*x+7)+c</pre> <pre>ln(x^2+7*x+7)+c</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>ln(k*(x^2+7*x+7))</pre> <pre>ln(x^2+7*x+7)+c</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>ln(x^2+7*x+7)</pre> <pre>ln(abs(x^2+7*x+7))+c</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>ln(x^2+7*x+7)+c</pre> <pre>ln(abs(x^2+7*x+7))+c</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>-2*log(x)-(10*x^6)/3+x^3/3+5*l\nog(x^4)+c</pre> <pre>-2*log(abs(x))+(10*x^6)/3-x^3/\n3-5/x^3+c</pre> <pre>x</pre> 0 ATAntidiff_generic. The derivative of your answer should be equal to the expression that you were asked to integrate, that was: \\[20\\cdot x^5-x^2-\\frac{2}{x}+\\frac{15}{x^4}\\] In fact, the derivative of your answer, with respect to \\(x\\) is: \\[-20\\cdot x^5+x^2+\\frac{18}{x}\\] so you must have done something wrong! Antidiff <pre>ln(abs(x^2+7*x+7))+c</pre> <pre>ln(abs(x^2+7*x+7))+c</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>ln(k*abs(x^2+7*x+7))</pre> <pre>ln(abs(x^2+7*x+7))+c</pre> <pre>x</pre> 1 ATAntidiff_true. Two logs Antidiff <pre>log(abs(x-3))+log(abs(x+3))</pre> <pre>log(abs(x-3))+log(abs(x+3))</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>log(abs(x-3))+log(abs(x+3))+c</pre> <pre>log(abs(x-3))+log(abs(x+3))</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>log(abs(x-3))+log(abs(x+3))</pre> <pre>log(x-3)+log(x+3)</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>log(abs(x-3))+log(abs(x+3))+c</pre> <pre>log(x-3)+log(x+3)</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>log(x-3)+log(x+3)</pre> <pre>log(x-3)+log(x+3)</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>log(x-3)+log(x+3)+c</pre> <pre>log(x-3)+log(x+3)</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>log(x-3)+log(x+3)</pre> <pre>log(abs(x-3))+log(abs(x+3))</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>log(x-3)+log(x+3)+c</pre> <pre>log(abs(x-3))+log(abs(x+3))</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>log(abs((x-3)*(x+3)))+c</pre> <pre>log(abs(x-3))+log(abs(x+3))</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>log(abs((x^2-9)))+c</pre> <pre>log(abs(x-3))+log(abs(x+3))</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>2*log(abs(x-2))-log(abs(x+2))+\n(x^2+4*x)/2</pre> <pre>-log(abs(x+2))+2*log(abs(x-2))\n+(x^2+4*x)/2+c</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>-log(abs(x+2))+2*log(abs(x-2))\n+(x^2+4*x)/2+c</pre> <pre>-log(abs(x+2))+2*log(abs(x-2))\n+(x^2+4*x)/2+c</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>-log(abs(x+2))+2*log(abs(x-2))\n+(x^2+4*x)/2+c</pre> <pre>-log((x+2))+2*log((x-2))+(x^2+\n4*x)/2</pre> <pre>x</pre> 1 ATAntidiff_true. Inconsistent log(abs()) Antidiff <pre>log(abs(x-3))+log((x+3))+c</pre> <pre>log(x-3)+log(x+3)</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>log((v-3))+log(abs(v+3))+c</pre> <pre>log(v-3)+log(v+3)</pre> <pre>v</pre> 1 ATAntidiff_true. Antidiff <pre>log((x-3))+log(abs(x+3))</pre> <pre>log(x-3)+log(x+3)</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>2*log((x-2))-log(abs(x+2))+(x^\n2+4*x)/2</pre> <pre>-log(abs(x+2))+2*log(abs(x-2))\n+(x^2+4*x)/2</pre> <pre>x</pre> 1 ATAntidiff_true. Significant integration constant differences Antidiff <pre>2*(sqrt(t)-5)-10*log((sqrt(t)-\n5))+c</pre> <pre>2*(sqrt(t)-5)-10*log((sqrt(t)-\n5))+c</pre> <pre>t</pre> 1 ATAntidiff_true. Antidiff <pre>2*(sqrt(t))-10*log((sqrt(t)-5)\n)+c</pre> <pre>2*(sqrt(t)-5)-10*log((sqrt(t)-\n5))+c</pre> <pre>t</pre> 1 ATAntidiff_true. Antidiff <pre>2*(sqrt(t)-5)-10*log((sqrt(t)-\n5))+c</pre> <pre>2*(sqrt(t)-5)-10*log(abs(sqrt(\nt)-5))+c</pre> <pre>t</pre> 1 ATAntidiff_true. Antidiff <pre>2*(sqrt(t))-10*log(abs(sqrt(t)\n-5))+c</pre> <pre>2*(sqrt(t)-5)-10*log(abs(sqrt(\nt)-5))+c</pre> <pre>t</pre> 1 ATAntidiff_true. Trig Antidiff <pre>2*sin(x)*cos(x)</pre> <pre>sin(2*x)+c</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>2*sin(x)*cos(x)+k</pre> <pre>sin(2*x)+c</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>-2*cos(3*x)/3-3*cos(2*x)/2</pre> <pre>-2*cos(3*x)/3-3*cos(2*x)/2+c</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>-2*cos(3*x)/3-3*cos(2*x)/2+1</pre> <pre>-2*cos(3*x)/3-3*cos(2*x)/2+c</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>-2*cos(3*x)/3-3*cos(2*x)/2+c</pre> <pre>-2*cos(3*x)/3-3*cos(2*x)/2+c</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>(tan(2*t)-2*t)/2</pre> <pre>-(t*sin(4*t)^2-sin(4*t)+t*cos(\n4*t)^2+2*t*cos(4*t)+t)/(sin(4*\nt)^2+cos(4*t)^2+2*cos(4*t)+1)</pre> <pre>t</pre> 1 ATAntidiff_true. Antidiff <pre>(tan(2*t)-2*t)/2+1</pre> <pre>-(t*sin(4*t)^2-sin(4*t)+t*cos(\n4*t)^2+2*t*cos(4*t)+t)/(sin(4*\nt)^2+cos(4*t)^2+2*cos(4*t)+1)</pre> <pre>t</pre> 1 ATAntidiff_true. Antidiff <pre>(tan(2*t)-2*t)/2+c</pre> <pre>-(t*sin(4*t)^2-sin(4*t)+t*cos(\n4*t)^2+2*t*cos(4*t)+t)/(sin(4*\nt)^2+cos(4*t)^2+2*cos(4*t)+1)</pre> <pre>t</pre> 1 ATAntidiff_true. Antidiff <pre>tan(x)-x+c</pre> <pre>tan(x)-x</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>4*x*cos(x^12/%pi)+c</pre> <pre>x*cos(x^12/%pi)+c</pre> <pre>x</pre> 0 ATAntidiff_generic. The derivative of your answer should be equal to the expression that you were asked to integrate, that was: \\[\\cos \\left( \\frac{x^{12}}{\\pi} \\right)-\\frac{12\\cdot x^{12}\\cdot \\sin \\left( \\frac{x^{12}}{\\pi} \\right)}{\\pi}\\] In fact, the derivative of your answer, with respect to \\(x\\) is: \\[4\\cdot \\cos \\left( \\frac{x^{12}}{\\pi} \\right)-\\frac{48\\cdot x^{12} \\cdot \\sin \\left( \\frac{x^{12}}{\\pi} \\right)}{\\pi}\\] so you must have done something wrong! Antidiff <pre>4*x*cos(x^50/%pi)+c</pre> <pre>x*cos(x^12/%pi)+c</pre> <pre>x</pre> 0 ATAntidiff_generic. The derivative of your answer should be equal to the expression that you were asked to integrate, that was: \\[\\cos \\left( \\frac{x^{12}}{\\pi} \\right)-\\frac{12\\cdot x^{12}\\cdot \\sin \\left( \\frac{x^{12}}{\\pi} \\right)}{\\pi}\\] In fact, the derivative of your answer, with respect to \\(x\\) is: \\[4\\cdot \\cos \\left( \\frac{x^{50}}{\\pi} \\right)-\\frac{200\\cdot x^{50} \\cdot \\sin \\left( \\frac{x^{50}}{\\pi} \\right)}{\\pi}\\] so you must have done something wrong! Note the difference in feedback here, generated by the options. Antidiff <pre>((5*%e^7*x-%e^7)*%e^(5*x))</pre> <pre>((5*%e^7*x-%e^7)*%e^(5*x))/25+\nc</pre> <pre>x</pre> 0 ATAntidiff_generic. The derivative of your answer should be equal to the expression that you were asked to integrate, that was: \\[\\frac{e^{5\\cdot x+7}}{5}+\\frac{\\left(5\\cdot e^7\\cdot x-e^7\\right) \\cdot e^{5\\cdot x}}{5}\\] In fact, the derivative of your answer, with respect to \\(x\\) is: \\[5\\cdot e^{5\\cdot x+7}+5\\cdot \\left(5\\cdot e^7\\cdot x-e^7\\right) \\cdot e^{5\\cdot x}\\] so you must have done something wrong! Antidiff <pre>((5*%e^7*x-%e^7)*%e^(5*x))</pre> <pre>((5*%e^7*x-%e^7)*%e^(5*x))/25+\nc</pre> <pre>[x,x*%e^(5*x+7)\n]</pre> -1 ATAntidiff_STACKERROR_Opt. The answer test failed to execute correctly: please alert your teacher. There is something wrong with the options given to the ATAntidiff answer test. Inverse hyperbolic integrals Antidiff <pre>log(x-3)/6-log(x+3)/6+c</pre> <pre>log(x-3)/6-log(x+3)/6</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>asinh(x)</pre> <pre>ln(x+sqrt(x^2+1))</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>asinh(x)+c</pre> <pre>ln(x+sqrt(x^2+1))</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>-acoth(x/3)/3</pre> <pre>log(x-3)/6-log(x+3)/6</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>-acoth(x/3)/3</pre> <pre>log(x-3)/6-log(x+3)/6</pre> <pre>[x, NOCONST]</pre> -1 ATAntidiff_STACKERROR_Opt. The answer test failed to execute correctly: please alert your teacher. There is something wrong with the options given to the ATAntidiff answer test. Antidiff <pre>-acoth(x/3)/3+c</pre> <pre>log(x-3)/6-log(x+3)/6</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>-acoth(x/3)/3+c</pre> <pre>log(abs(x-3))/6-log(abs(x+3))/\n6</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>log(x-a)/(2*a)-log(x+a)/(2*a)+\nc</pre> <pre>log(x-a)/(2*a)-log(x+a)/(2*a)</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>-acoth(x/a)/a+c</pre> <pre>log(x-a)/(2*a)-log(x+a)/(2*a)</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>-acoth(x/a)/a+c</pre> <pre>log(abs(x-a))/(2*a)-log(abs(x+\na))/(2*a)</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>log(x-a)/(2*a)-log(x+a)/(2*a)+\nc</pre> <pre>log(abs(x-a))/(2*a)-log(abs(x+\na))/(2*a)</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>log(x-3)/6-log(x+3)/6+c</pre> <pre>-acoth(x/3)/3</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>log(abs(x-3))/6-log(abs(x+3))/\n6+c</pre> <pre>-acoth(x/3)/3</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>log(x-3)/6-log(x+3)/6</pre> <pre>-acoth(x/3)/3</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>atan(2*x-3)+c</pre> <pre>atan(2*x-3)</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>atan((x-2)/(x-1))+c</pre> <pre>atan(2*x-3)</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>atan((x-2)/(x-1))</pre> <pre>atan(2*x-3)</pre> <pre>x</pre> 1 ATAntidiff_true. Antidiff <pre>atan((x-1)/(x-2))</pre> <pre>atan(2*x-3)</pre> <pre>x</pre> 0 ATAntidiff_generic. The derivative of your answer should be equal to the expression that you were asked to integrate, that was: \\[\\frac{2}{{\\left(2\\cdot x-3\\right)}^2+1}\\] In fact, the derivative of your answer, with respect to \\(x\\) is: \\[\\frac{\\frac{1}{x-2}-\\frac{x-1}{{\\left(x-2\\right)}^2}}{\\frac{{\\left( x-1\\right)}^2}{{\\left(x-2\\right)}^2}+1}\\] so you must have done something wrong! Stoutemyer (currently fails in ATInt, but works in ATAntidiff) Antidiff <pre>2/3*sqrt(3)*(atan(sin(x)/(sqrt\n(3)*(cos(x)+1)))-(atan(sin(x)/\n(cos(x)+1))))+x/sqrt(3)</pre> <pre>2*atan(sin(x)/(sqrt(3)*(cos(x)\n+1)))/sqrt(3)</pre> <pre>x</pre> 1 ATAntidiff_true."},{"location":"en/Authoring/Answer_Tests/Results/CasEqual/","title":"CasEqual: Answer test results","text":"<p>This page exposes the results of running answer tests on STACK test cases.  This page is automatically generated from the STACK unit tests and is designed to show question authors what answer tests actually do.  This includes cases where answer tests currentl fail, which gives a negative expected mark.  Comments and further test cases are very welcome.</p> CasEqual Test?Student responseTeacher answerOptMarkAnswer note CasEqual <pre>1/0</pre> <pre>x^2-2*x+1</pre> -1 ATCASEqual_STACKERROR_SAns. CasEqual <pre>x</pre> <pre>1/0</pre> -1 ATCASEqual_STACKERROR_TAns. CasEqual <pre>0.5</pre> <pre>1/2</pre> <pre>x</pre> 0 ATCASEqual (AlgEquiv-true). CasEqual <pre>x=1</pre> <pre>1</pre> 0 ATCASEqual ATAlgEquiv_TA_not_equation. You have entered an equation, but an equation is not expected here. You may have typed something like \"y=2*x+1\" when you only needed to type \"2*x+1\". Case sensitivity CasEqual <pre>a</pre> <pre>A</pre> 0 ATCASEqual_false. CasEqual <pre>exdowncase(X^2-2*X+1)</pre> <pre>x^2-2*x+1</pre> 1 ATCASEqual_true. Numbers CasEqual <pre>4^(-1/2)</pre> <pre>1/2</pre> 0 ATCASEqual (AlgEquiv-true). CasEqual <pre>ev(4^(-1/2),simp)</pre> <pre>ev(1/2,simp)</pre> 1 ATCASEqual_true. CasEqual <pre>2^2</pre> <pre>4</pre> 0 ATCASEqual (AlgEquiv-true). Unary plus CasEqual <pre>+1-2</pre> <pre>1-2</pre> 0 ATCASEqual (AlgEquiv-true). Powers CasEqual <pre>a^2/b^3</pre> <pre>a^2*b^(-3)</pre> 0 ATCASEqual (AlgEquiv-true). Expressions with subscripts CasEqual <pre>rho*z*V/(4*pi*epsilon[0]*(R^2+\nz^2)^(3/2))</pre> <pre>rho*z*V/(4*pi*epsilon[0]*(R^2+\nz^2)^(3/2))</pre> 1 ATCASEqual_true. CasEqual <pre>rho*z*V/(4*pi*epsilon[1]*(R^2+\nz^2)^(3/2))</pre> <pre>rho*z*V/(4*pi*epsilon[0]*(R^2+\nz^2)^(3/2))</pre> 0 ATCASEqual_false. Mix of floats and rational numbers CasEqual <pre>0.5</pre> <pre>1/2</pre> 0 ATCASEqual (AlgEquiv-true). CasEqual <pre>x^(1/2)</pre> <pre>sqrt(x)</pre> 0 ATCASEqual (AlgEquiv-true). CasEqual <pre>ev(x^(1/2),simp)</pre> <pre>ev(sqrt(x),simp)</pre> 1 ATCASEqual_true. CasEqual <pre>abs(x)</pre> <pre>sqrt(x^2)</pre> 0 ATCASEqual (AlgEquiv-true). CasEqual <pre>ev(abs(x),simp)</pre> <pre>ev(sqrt(x^2),simp)</pre> 1 ATCASEqual_true. CasEqual <pre>x-1</pre> <pre>(x^2-1)/(x+1)</pre> 0 ATCASEqual (AlgEquiv-true). Polynomials and rational function CasEqual <pre>x+x</pre> <pre>2*x</pre> 0 ATCASEqual (AlgEquiv-true). CasEqual <pre>ev(x+x,simp)</pre> <pre>ev(2*x,simp)</pre> 1 ATCASEqual_true. CasEqual <pre>x+x^2</pre> <pre>x^2+x</pre> 0 ATCASEqual (AlgEquiv-true). CasEqual <pre>ev(x+x^2,simp)</pre> <pre>ev(x^2+x,simp)</pre> 1 ATCASEqual_true. CasEqual <pre>(x-1)^2</pre> <pre>x^2-2*x+1</pre> 0 ATCASEqual (AlgEquiv-true). CasEqual <pre>(x-1)^(-2)</pre> <pre>1/(x^2-2*x+1)</pre> 0 ATCASEqual (AlgEquiv-true). CasEqual <pre>1/n-1/(n+1)</pre> <pre>1/(n*(n+1))</pre> 0 ATCASEqual (AlgEquiv-true). Trig functions CasEqual <pre>cos(x)</pre> <pre>cos(-x)</pre> 0 ATCASEqual (AlgEquiv-true). CasEqual <pre>ev(cos(x),simp)</pre> <pre>ev(cos(-x),simp)</pre> 1 ATCASEqual_true. CasEqual <pre>cos(x)^2+sin(x)^2</pre> <pre>1</pre> 0 ATCASEqual (AlgEquiv-true). CasEqual <pre>2*cos(x)^2-1</pre> <pre>cos(2*x)</pre> 0 ATCASEqual (AlgEquiv-true). Predicate function wrapper CasEqual <pre>imag_numberp(2*%i)</pre> <pre>true</pre> 1 ATCASEqual_true. CasEqual <pre>imag_numberp(%e^(%i*%pi/2))</pre> <pre>true</pre> 1 ATCASEqual_true. CasEqual <pre>imag_numberp(2)</pre> <pre>false</pre> 1 ATCASEqual_true. CasEqual <pre>imag_numberp(%e^(%pi/2))</pre> <pre>false</pre> 1 ATCASEqual_true. CasEqual <pre>complex_exponentialp(3*%e^(%i*\n%pi/6))</pre> <pre>true</pre> 1 ATCASEqual_true. CasEqual <pre>complex_exponentialp(3)</pre> <pre>true</pre> 1 ATCASEqual_true. CasEqual <pre>complex_exponentialp(-3)</pre> <pre>false</pre> 1 ATCASEqual_true. CasEqual <pre>complex_exponentialp(%e^(%i*%p\ni/6))</pre> <pre>true</pre> 1 ATCASEqual_true. CasEqual <pre>complex_exponentialp(%e^%i)</pre> <pre>true</pre> 1 ATCASEqual_true. CasEqual <pre>complex_exponentialp(%e^(%pi/6\n))</pre> <pre>true</pre> 1 ATCASEqual_true. CasEqual <pre>complex_exponentialp(3+%i)</pre> <pre>false</pre> 1 ATCASEqual_true. CasEqual <pre>complex_exponentialp(%e^(%i)/4\n)</pre> <pre>true</pre> 1 ATCASEqual_true. CasEqual <pre>complex_exponentialp(3*exp(%i*\n%pi/6))</pre> <pre>true</pre> 1 ATCASEqual_true. CasEqual <pre>complex_exponentialp(3*exp(-%i\n*%pi/6))</pre> <pre>true</pre> 1 ATCASEqual_true. CasEqual <pre>complex_exponentialp(3*%e^(-7*\n%i*%pi/3))</pre> <pre>false</pre> 1 ATCASEqual_true. CasEqual <pre>complex_exponentialp(7*%e^(3*%\ni*%pi))</pre> <pre>false</pre> 1 ATCASEqual_true. CasEqual <pre>complex_exponentialp(-3*exp(%i\n*%pi/6))</pre> <pre>false</pre> 1 ATCASEqual_true. CasEqual <pre>complex_exponentialp(-(3*exp(%\ni*%pi/6)))</pre> <pre>false</pre> 1 ATCASEqual_true. CasEqual <pre>complex_exponentialp(-(r*exp(i\n*atan(bb/aa))))</pre> <pre>true</pre> 0 ATCASEqual_false. CasEqual <pre>integerp(-1)</pre> <pre>true</pre> 0 ATCASEqual_false. CasEqual <pre>integerp(ev(-1,simp))</pre> <pre>true</pre> 1 ATCASEqual_true. Associativity CasEqual <pre>a+(b+c)</pre> <pre>(a+b)+c</pre> 0 ATCASEqual (AlgEquiv-true). CasEqual <pre>a+(b+c)</pre> <pre>\"+\"(a,b,c)</pre> 0 ATCASEqual (AlgEquiv-true). CasEqual <pre>(a+b)+c</pre> <pre>\"+\"(a,b,c)</pre> 0 ATCASEqual (AlgEquiv-true). CasEqual <pre>(a+b)+c</pre> <pre>a+b+c</pre> 0 ATCASEqual (AlgEquiv-true). CasEqual <pre>a+(b+c)</pre> <pre>a+b+c</pre> 0 ATCASEqual (AlgEquiv-true)."},{"location":"en/Authoring/Answer_Tests/Results/CompSquare/","title":"CompSquare: Answer test results","text":"<p>This page exposes the results of running answer tests on STACK test cases.  This page is automatically generated from the STACK unit tests and is designed to show question authors what answer tests actually do.  This includes cases where answer tests currentl fail, which gives a negative expected mark.  Comments and further test cases are very welcome.</p> CompSquare Test?Student responseTeacher answerOptMarkAnswer note CompSquare <pre>1/0</pre> <pre>0</pre> -1 STACKERROR_OPTION. TEST_FAILED The answer test failed to execute correctly: please alert your teacher. Missing option when executing the test.  CompSquare <pre>1/0</pre> <pre>0</pre> <pre>x</pre> -1 ATCompSquare_STACKERROR_SAns. TEST_FAILED The answer test failed to execute correctly: please alert your teacher. Division by zero. CompSquare <pre>0</pre> <pre>1/0</pre> <pre>x</pre> -1 ATCompSquare_STACKERROR_TAns. TEST_FAILED The answer test failed to execute correctly: please alert your teacher. Division by zero. CompSquare <pre>0</pre> <pre>0</pre> <pre>1/0</pre> -1 ATCompSquare_STACKERROR_Opt. TEST_FAILED The answer test failed to execute correctly: please alert your teacher. Division by zero. Category errors. CompSquare <pre>1</pre> <pre>(x-1)^2+1</pre> <pre>x</pre> 0 ATCompSquare_SA_not_depend_var. Your answer should depend on the variable \\(x\\) but it does not! CompSquare <pre>(t-1)^2+1</pre> <pre>(x-1)^2+1</pre> <pre>x</pre> 0 ATCompSquare_SA_not_depend_var. Your answer should depend on the variable \\(x\\) but it does not! CompSquare <pre>(x-1)^2+1=0</pre> <pre>(x-1)^2+1</pre> <pre>x</pre> 0 ATCompSquare_STACKERROR_LIST. Your answer should be an expression, not an equation, inequality, list, set or matrix. CompSquare <pre>sin(x-1)+a-1</pre> <pre>(x-1)^2+1</pre> <pre>x</pre> 0 ATCompSquare_false_not_AlgEquiv. Trivial cases CompSquare <pre>1</pre> <pre>1</pre> <pre>x</pre> 1 ATCompSquare_true_trivial. CompSquare <pre>x-a</pre> <pre>x-a</pre> <pre>x</pre> 1 ATCompSquare_true_trivial. CompSquare <pre>x^2</pre> <pre>x^2</pre> <pre>x</pre> 1 ATCompSquare_true. CompSquare <pre>x^2-1</pre> <pre>(x-1)*(x+1)</pre> <pre>x</pre> 1 ATCompSquare_true. CompSquare <pre>(x-1)^2*k</pre> <pre>(x-1)^2*k</pre> <pre>x</pre> 1 ATCompSquare_true. CompSquare <pre>(x-1)^2/k</pre> <pre>(x-1)^2/k</pre> <pre>x</pre> 1 ATCompSquare_true. Normal cases CompSquare <pre>(x-1)^2+1</pre> <pre>(x-1)^2+1</pre> <pre>x</pre> 1 ATCompSquare_true. CompSquare <pre>(1-x)^2+1</pre> <pre>(x-1)^2+1</pre> <pre>x</pre> 1 ATCompSquare_true. CompSquare <pre>(X-1)^2+1</pre> <pre>(x-1)^2+1</pre> <pre>x</pre> 0 ATCompSquare_SA_not_depend_var. Your answer should depend on the variable \\(x\\) but it does not! CompSquare <pre>9*(x-1)^2+1</pre> <pre>(3*x-3)^2+1</pre> <pre>x</pre> 1 ATCompSquare_true. CompSquare <pre>-(x-1)^2</pre> <pre>-(x-1)^2</pre> <pre>x</pre> 1 ATCompSquare_true. CompSquare <pre>-(1-x)^2</pre> <pre>-(x-1)^2</pre> <pre>x</pre> 1 ATCompSquare_true. CompSquare <pre>-(x-1)^2+3</pre> <pre>-(x-1)^2+3</pre> <pre>x</pre> 1 ATCompSquare_true. CompSquare <pre>-(1-x)^2+3</pre> <pre>-(x-1)^2+3</pre> <pre>x</pre> 1 ATCompSquare_true. CompSquare <pre>-4*(x-1)^2+3</pre> <pre>-4*(x-1)^2+3</pre> <pre>x</pre> 1 ATCompSquare_true. CompSquare <pre>-4*(x-1)^2+3</pre> <pre>-(2*x-2)^2+3</pre> <pre>x</pre> 1 ATCompSquare_true. CompSquare <pre>3-4*(x-1)^2</pre> <pre>-(2*x-2)^2+3</pre> <pre>x</pre> 1 ATCompSquare_true. CompSquare <pre>(x-1)^2+1</pre> <pre>(x+1)^2+1</pre> <pre>x</pre> 0 ATCompSquare_true_not_AlgEquiv. Your answer appears to be in the correct form, but is not equivalent to the correct answer. CompSquare <pre>(x-a^2)^2+1+b</pre> <pre>(x-a^2)^2+1+b</pre> <pre>x</pre> 1 ATCompSquare_true. CompSquare <pre>x^2-2*x+2</pre> <pre>(x-1)^2+1</pre> <pre>x</pre> 0 ATCompSquare_false_no_summands. The completed square is of the form \\( a(\\cdots\\cdots)^2 + b\\) where \\(a\\) and \\(b\\) do not depend on your variable. More than one of your summands appears to depend on the variable in your answer. CompSquare <pre>x+1</pre> <pre>(x-1)^2+1</pre> <pre>x</pre> 0 ATCompSquare_false_not_AlgEquiv. CompSquare <pre>a*(x-1)^2+1</pre> <pre>a*(x-1)^2+1</pre> <pre>x</pre> 1 ATCompSquare_true. CompSquare <pre>-a*(x-1)^2+1</pre> <pre>1-a*(x-1)^2</pre> <pre>x</pre> 1 ATCompSquare_true. Not simple variable CompSquare <pre>(sin(x)-1)^2+1</pre> <pre>(sin(x)-1)^2+1</pre> <pre>sin(x)</pre> 1 ATCompSquare_true. CompSquare <pre>(x^2-1)^2+1</pre> <pre>(x^2-1)^2+1</pre> <pre>x^2</pre> 1 ATCompSquare_true. CompSquare <pre>(y-1)^2+1</pre> <pre>(y-1)^2+1</pre> <pre>y</pre> 1 ATCompSquare_true. CompSquare <pre>(y+1)^2+1</pre> <pre>(y-1)^2+1</pre> <pre>y</pre> 0 ATCompSquare_true_not_AlgEquiv. Your answer appears to be in the correct form, but is not equivalent to the correct answer. CompSquare <pre>(x-1)^2+1</pre> <pre>(sin(x)-1)^2+1</pre> <pre>sin(x)</pre> 0 ATCompSquare_SA_not_depend_var. Your answer should depend on the variable \\({\\it facdum}\\) but it does not!"},{"location":"en/Authoring/Answer_Tests/Results/Diff/","title":"Diff: Answer test results","text":"<p>This page exposes the results of running answer tests on STACK test cases.  This page is automatically generated from the STACK unit tests and is designed to show question authors what answer tests actually do.  This includes cases where answer tests currentl fail, which gives a negative expected mark.  Comments and further test cases are very welcome.</p> Diff Test?Student responseTeacher answerOptMarkAnswer note Diff <pre>1/0</pre> <pre>3*x^2</pre> -1 STACKERROR_OPTION. TEST_FAILED The answer test failed to execute correctly: please alert your teacher. Missing option when executing the test.  Diff <pre>0</pre> <pre>1/0</pre> <pre>(x</pre> -1 STACKERROR_OPTION. TEST_FAILED The answer test failed to execute correctly: please alert your teacher. Option field is invalid. You have a missing right bracket ) in the expression: (x. Diff <pre>1/0</pre> <pre>3*x^2</pre> <pre>x</pre> -1 ATDiff_STACKERROR_SAns. Diff <pre>0</pre> <pre>1/0</pre> <pre>x</pre> -1 ATDiff_STACKERROR_TAns. Diff <pre>0</pre> <pre>0</pre> <pre>1/0</pre> -1 ATDiff_STACKERROR_Opt. Basic tests Diff <pre>3*x^2</pre> <pre>3*x^2</pre> <pre>x</pre> 1 ATDiff_true. Diff <pre>3*X^2</pre> <pre>3*x^2</pre> <pre>x</pre> 0 ATDiff_var_SB_notSA. Diff <pre>x^4/4</pre> <pre>3*x^2</pre> <pre>x</pre> 0 ATDiff_int. It looks like you have integrated instead! Diff <pre>x^4/4+1</pre> <pre>3*x^2</pre> <pre>x</pre> 0 ATDiff_int. It looks like you have integrated instead! Diff <pre>x^4/4+c</pre> <pre>3*x^2</pre> <pre>x</pre> 0 ATDiff_int. It looks like you have integrated instead! Diff <pre>y=x^4/4</pre> <pre>x^4/4</pre> <pre>x</pre> 0 ATDiff_SA_not_expression. Your answer should be an expression, not an equation, inequality, list, set or matrix. Diff <pre>x^4/4</pre> <pre>y=x^4/4</pre> <pre>x</pre> 0 Diff <pre>y=x^4/4</pre> <pre>y=x^4/4</pre> <pre>x</pre> 0 ATDiff_SA_not_expression. Your answer should be an expression, not an equation, inequality, list, set or matrix. Diff <pre>6000*(x-a)^5999</pre> <pre>6000*(x-a)^5999</pre> <pre>x</pre> 1 ATDiff_true. Diff <pre>5999*(x-a)^5999</pre> <pre>6000*(x-a)^5999</pre> <pre>x</pre> 0 Variable mismatch tests Diff <pre>y^2-2*y+1</pre> <pre>x^2-2*x+1</pre> <pre>x</pre> 0 ATDiff_var_SB_notSA. Diff <pre>x^2-2*x+1</pre> <pre>y^2-2*y+1</pre> <pre>x</pre> 0 ATDiff_var_SA_notSB. Diff <pre>y^2+2*y+1</pre> <pre>x^2-2*x+1</pre> <pre>z</pre> 0 ATDiff_var_notSASB_SAnceSB. Diff <pre>x^4/4</pre> <pre>3*x^2</pre> <pre>y</pre> 0 Edge cases Diff <pre>e^x+c</pre> <pre>e^x</pre> <pre>x</pre> 0 ATDiff_int. It looks like you have integrated instead! Diff <pre>e^x+2</pre> <pre>e^x</pre> <pre>x</pre> 0 ATDiff_int. It looks like you have integrated instead! Diff <pre>n*x^n</pre> <pre>n*x^(n-1)</pre> <pre>x</pre> -1 ATDiff_STACKERROR_SAns. TEST_FAILED The answer test failed to execute correctly: please alert your teacher. CAS failed to return any data due to timeout. Diff <pre>n*x^n</pre> <pre>(assume(n&gt;0), n*x^(n-1))</pre> <pre>x</pre> 0 Diff <pre>3*x/root(3*x^2+2)</pre> <pre>3*x/sqrt(3*x^2+2)</pre> <pre>x</pre> 1 ATDiff_true. Diff <pre>3*x/'root(3*x^2+2)</pre> <pre>3*x/sqrt(3*x^2+2)</pre> <pre>x</pre> 1 ATDiff_true. Diff <pre>'root(2*x/10+1)</pre> <pre>sqrt((2*x+10)/10)</pre> <pre>x</pre> 1 ATDiff_true."},{"location":"en/Authoring/Answer_Tests/Results/EqualComAss/","title":"EqualComAss: Answer test results","text":"<p>This page exposes the results of running answer tests on STACK test cases.  This page is automatically generated from the STACK unit tests and is designed to show question authors what answer tests actually do.  This includes cases where answer tests currentl fail, which gives a negative expected mark.  Comments and further test cases are very welcome.</p> EqualComAss Test?Student responseTeacher answerOptMarkAnswer note EqualComAss <pre>1/0</pre> <pre>0</pre> -1 ATEqualComAss_STACKERROR_SAns. EqualComAss <pre>0</pre> <pre>1/0</pre> -1 ATEqualComAss_STACKERROR_TAns. Numbers EqualComAss <pre>2/4</pre> <pre>1/2</pre> 0 ATEqualComAss (AlgEquiv-true). EqualComAss <pre>0.75</pre> <pre>3/4</pre> 0 ATEqualComAss (AlgEquiv-true). EqualComAss <pre>num_ensure_rational(0.75)</pre> <pre>3/4</pre> 1 EqualComAss <pre>3^2</pre> <pre>8</pre> 0 ATEqualComAss (AlgEquiv-false). EqualComAss <pre>3^2</pre> <pre>9</pre> 0 ATEqualComAss (AlgEquiv-true). EqualComAss <pre>cos(0)</pre> <pre>1</pre> 0 ATEqualComAss (AlgEquiv-true). EqualComAss <pre>4^(1/2)</pre> <pre>2</pre> 0 ATEqualComAss (AlgEquiv-true). EqualComAss <pre>1/3^(1/2)</pre> <pre>(1/3)^(1/2)</pre> 0 ATEqualComAss (AlgEquiv-true). EqualComAss <pre>sqrt(3)/3</pre> <pre>(1/3)^(1/2)</pre> 0 ATEqualComAss (AlgEquiv-true). EqualComAss <pre>sqrt(3)</pre> <pre>3^(1/2)</pre> 0 ATEqualComAss (AlgEquiv-true). EqualComAss <pre>2*sqrt(2)</pre> <pre>sqrt(8)</pre> 0 ATEqualComAss (AlgEquiv-true). EqualComAss <pre>2*2^(1/2)</pre> <pre>sqrt(8)</pre> 0 ATEqualComAss (AlgEquiv-true). EqualComAss <pre>sqrt(2)/4</pre> <pre>1/sqrt(8)</pre> 0 ATEqualComAss (AlgEquiv-true). EqualComAss <pre>1/sqrt(2)</pre> <pre>2^(1/2)/2</pre> 0 ATEqualComAss (AlgEquiv-true). EqualComAss <pre>4.0</pre> <pre>4</pre> 0 ATEqualComAss (AlgEquiv-true). Case sensitivity EqualComAss <pre>X</pre> <pre>x</pre> 0 ATEqualComAss (AlgEquiv-false)ATAlgEquiv_WrongCase. EqualComAss <pre>1/(R-r)</pre> <pre>1</pre> 0 ATEqualComAss (AlgEquiv-false). EqualComAss <pre>exdowncase(X)</pre> <pre>x</pre> 1 EqualComAss <pre>exdowncase((X-1)^2)</pre> <pre>x^2-2*x+1</pre> 0 ATEqualComAss (AlgEquiv-true). EqualComAss <pre>exdowncase(X^2-2*X+1)</pre> <pre>x^2-2*x+1</pre> 1 Powers EqualComAss <pre>a^2/b^3</pre> <pre>a^2*b^(-3)</pre> 0 ATEqualComAss (AlgEquiv-true). EqualComAss <pre>lg(a^x,a)</pre> <pre>x</pre> 0 ATEqualComAss (AlgEquiv-true). EqualComAss <pre>x^(2/4)</pre> <pre>x^(1/2)</pre> 0 ATEqualComAss (AlgEquiv-true). Simple polynomials EqualComAss <pre>1+2*x</pre> <pre>x*2+1</pre> 1 EqualComAss <pre>1+x</pre> <pre>2*x+1</pre> 0 ATEqualComAss (AlgEquiv-false). EqualComAss <pre>1+x+x</pre> <pre>2*x+1</pre> 0 ATEqualComAss (AlgEquiv-true). EqualComAss <pre>(x+y)+z</pre> <pre>z+x+y</pre> 1 EqualComAss <pre>x*x</pre> <pre>x^2</pre> 0 ATEqualComAss (AlgEquiv-true). EqualComAss <pre>(x+5)*x</pre> <pre>x*(5+x)</pre> 1 EqualComAss <pre>x*(x+5)</pre> <pre>5*x+x^2</pre> 0 ATEqualComAss (AlgEquiv-true). EqualComAss <pre>(1-x)^2</pre> <pre>(x-1)^2</pre> 0 ATEqualComAss (AlgEquiv-true). EqualComAss <pre>(a-x)^6000</pre> <pre>(x-a)^6000</pre> 0 ATEqualComAss (AlgEquiv-true). Expressions with subscripts EqualComAss <pre>rho*z*V/(4*pi*epsilon[0]*(R^2+\nz^2)^(3/2))</pre> <pre>rho*z*V/(4*pi*epsilon[0]*(R^2+\nz^2)^(3/2))</pre> 1 EqualComAss <pre>rho*z*V/(4*pi*epsilon[1]*(R^2+\nz^2)^(3/2))</pre> <pre>rho*z*V/(4*pi*epsilon[0]*(R^2+\nz^2)^(3/2))</pre> 0 ATEqualComAss (AlgEquiv-false). Unary plus EqualComAss <pre>+1-2</pre> <pre>1-2</pre> 1 Unary minus EqualComAss <pre>-1+2</pre> <pre>2-1</pre> 1 EqualComAss <pre>-1*2+3*4</pre> <pre>3*4-1*2</pre> 1 EqualComAss <pre>(-1*2)+3*4</pre> <pre>10</pre> 0 ATEqualComAss (AlgEquiv-true). EqualComAss <pre>-1*2+3*4</pre> <pre>3*4-1*2</pre> 1 EqualComAss <pre>x*(-y)</pre> <pre>-x*y</pre> 1 EqualComAss <pre>x*(-y)</pre> <pre>-(x*y)</pre> 1 EqualComAss <pre>(-x)*(-x)</pre> <pre>x*x</pre> 0 ATEqualComAss (AlgEquiv-true). EqualComAss <pre>(-x)*(-x)</pre> <pre>x^2</pre> 0 ATEqualComAss (AlgEquiv-true). EqualComAss <pre>-1/4*%pi*i</pre> <pre>-(%i*%pi)/4</pre> 0 ATEqualComAss (AlgEquiv-true). Rational expressions EqualComAss <pre>1/2</pre> <pre>3/6</pre> 0 ATEqualComAss (AlgEquiv-true). EqualComAss <pre>1/(1+2*x)</pre> <pre>1/(2*x+1)</pre> 1 EqualComAss <pre>2/(4+2*x)</pre> <pre>1/(x+2)</pre> 0 ATEqualComAss (AlgEquiv-true). EqualComAss <pre>(a*b)/c</pre> <pre>a*(b/c)</pre> 1 EqualComAss <pre>((x+1)/(x*(x-1)))*(x-1)</pre> <pre>((x+1)*(x-1))/(x*(x-1))</pre> 1 EqualComAss <pre>(-x)/y</pre> <pre>-(x/y)</pre> 1 EqualComAss <pre>x/(-y)</pre> <pre>-(x/y)</pre> 0 ATEqualComAss (AlgEquiv-true). EqualComAss <pre>-1/(1-x)</pre> <pre>1/(x-1)</pre> 0 ATEqualComAss (AlgEquiv-true). EqualComAss <pre>1/2*1/x</pre> <pre>1/(2*x)</pre> 0 ATEqualComAss (AlgEquiv-true). EqualComAss <pre>(k+8)/(k^2+4*k-12)</pre> <pre>(k+8)/(k^2+4*k-12)</pre> 1 EqualComAss <pre>(k+8)/(k^2+4*k-12)</pre> <pre>(k+8)/((k-2)*(k+6))</pre> 0 ATEqualComAss (AlgEquiv-true). EqualComAss <pre>(k+7)/(k^2+4*k-12)</pre> <pre>(k+8)/(k^2+4*k-12)</pre> 0 ATEqualComAss (AlgEquiv-false). EqualComAss <pre>-(2*k+6)/(k^2+4*k-12)</pre> <pre>-(2*k+6)/(k^2+4*k-12)</pre> 1 EqualComAss <pre>(a+b)/1</pre> <pre>(b+a)/1</pre> 1 No simplicifcation here EqualComAss <pre>1*x</pre> <pre>x</pre> 0 ATEqualComAss (AlgEquiv-true). EqualComAss <pre>23+0*x</pre> <pre>23</pre> 0 ATEqualComAss (AlgEquiv-true). EqualComAss <pre>num_ensure_rational(7/6*x-0.75\n*y)</pre> <pre>(7/6)*x-3/4*y</pre> 1 EqualComAss <pre>x+0</pre> <pre>x</pre> 0 ATEqualComAss (AlgEquiv-true). EqualComAss <pre>x^1</pre> <pre>x</pre> 0 ATEqualComAss (AlgEquiv-true). EqualComAss <pre>(1/2)*(a+b)</pre> <pre>(a+b)/2</pre> 0 ATEqualComAss (AlgEquiv-true). EqualComAss <pre>1/3*logbase(27,6)</pre> <pre>logbase(27,6)/3</pre> 0 ATEqualComAss (AlgEquiv-true). EqualComAss <pre>1/3*lg(27,6)</pre> <pre>lg(27,6)/3</pre> 0 ATEqualComAss (AlgEquiv-true). EqualComAss <pre>lg(root(x, n))</pre> <pre>lg(x, 10)/n</pre> 0 ATEqualComAss (AlgEquiv-true). EqualComAss <pre>exp(x)</pre> <pre>%e^x</pre> 1 EqualComAss <pre>exp(x)^2</pre> <pre>%e^(2*x)</pre> 0 ATEqualComAss (AlgEquiv-true). EqualComAss <pre>exp(x)^2</pre> <pre>(%e^(x))^2</pre> 1 EqualComAss <pre>1/3*i</pre> <pre>i/3</pre> 0 ATEqualComAss (AlgEquiv-true). Complex numbers EqualComAss <pre>%i</pre> <pre>e^(i*pi/2)</pre> 0 ATEqualComAss (AlgEquiv-true). EqualComAss <pre>(4*sqrt(3)*%i+4)^(1/5)</pre> <pre>rectform((4*sqrt(3)*%i+4)^(1/5\n))</pre> 0 ATEqualComAss (AlgEquiv-true). EqualComAss <pre>(4*sqrt(3)*%i+4)^(1/5)</pre> <pre>8^(1/5)*(cos(%pi/15)+%i*sin(%p\ni/15))</pre> 0 ATEqualComAss (AlgEquiv-true). EqualComAss <pre>(4*sqrt(3)*%i+4)^(1/5)</pre> <pre>polarform((4*sqrt(3)*%i+4)^(1/\n5))</pre> 0 ATEqualComAss (AlgEquiv-true). Equations EqualComAss <pre>y=x</pre> <pre>x=y</pre> 1 EqualComAss <pre>x+1</pre> <pre>y=2*x+1</pre> 0 ATEqualComAss ATAlgEquiv_SA_not_equation. Your answer should be an equation, but is not. EqualComAss <pre>y=1+2*x</pre> <pre>y=2*x+1</pre> 1 EqualComAss <pre>y=x+x+1</pre> <pre>y=1+2*x</pre> 0 ATEqualComAss (AlgEquiv-true). Logic EqualComAss <pre>A and B</pre> <pre>B and A</pre> 1 EqualComAss <pre>A or B</pre> <pre>B or A</pre> 1 EqualComAss <pre>A or B</pre> <pre>B and A</pre> 0 ATEqualComAss (AlgEquiv-false). EqualComAss <pre>not(true)</pre> <pre>false</pre> 0 ATEqualComAss (AlgEquiv-true). Sets EqualComAss <pre>{2*x+1,2}</pre> <pre>{2, 1+x*2}</pre> 1 EqualComAss <pre>2</pre> <pre>{2}</pre> 0 ATEqualComAss ATAlgEquiv_SA_not_set. Your answer should be a set, but is not. Note that the syntax to enter a set is to enclose the comma separated values with curly brackets. EqualComAss <pre>{2*x+1, 1+1}</pre> <pre>{2, 1+x*2}</pre> 0 ATEqualComAss (AlgEquiv-true). EqualComAss <pre>{1,2}</pre> <pre>{1,{2}}</pre> 0 ATEqualComAss (AlgEquiv-false)ATSet_wrongentries. EqualComAss <pre>{4,3}</pre> <pre>{3,4}</pre> 1 EqualComAss <pre>{4,4}</pre> <pre>{4}</pre> 0 ATEqualComAss (AlgEquiv-true). EqualComAss <pre>{-1,1,-1}</pre> <pre>{-1,-1,1}</pre> 1 EqualComAss <pre>{-1,1,-1}</pre> <pre>{-1,1}</pre> 0 ATEqualComAss (AlgEquiv-true). Lists EqualComAss <pre>[2*x+1,2]</pre> <pre>[1+x*2,2]</pre> 1 EqualComAss <pre>[x+x+1, 1+1]</pre> <pre>[1+x*2,2]</pre> 0 ATEqualComAss (AlgEquiv-true). Matrices EqualComAss <pre>matrix([1,2],[2,3])</pre> <pre>matrix([1,2],[2,3])</pre> 1 EqualComAss <pre>matrix([1,2],[2,3])</pre> <pre>matrix([1,2,3],[2,3,3])</pre> 0 ATEqualComAss (AlgEquiv-false)ATMatrix_wrongsz_columns. EqualComAss <pre>matrix([1,2],[2,3])</pre> <pre>matrix([1,2],[2,5])</pre> 0 ATEqualComAss (AlgEquiv-false)ATMatrix_wrongentries. EqualComAss <pre>matrix([1,2],[2,2+1])</pre> <pre>matrix([1,2],[2,3])</pre> 0 ATEqualComAss (AlgEquiv-true). EqualComAss <pre>matrix([x+x, 1],[1, 1])</pre> <pre>matrix([2*x, 1],[1, 1])</pre> 0 ATEqualComAss (AlgEquiv-true). Sums and products EqualComAss <pre>sum(k^n,n,0,3)</pre> <pre>sum(k^n,n,0,3)</pre> 1 EqualComAss <pre>1+k+k^2+k^3</pre> <pre>sum(k^n,n,0,3)</pre> 0 ATEqualComAss (AlgEquiv-true). EqualComAss <pre>sum(k,k,0,1+n)</pre> <pre>sum(k,k,0,n+1)</pre> 1 EqualComAss <pre>(n+1)*(n+2)/2</pre> <pre>sum(k,k,0,n+1)</pre> 0 ATEqualComAss (AlgEquiv-true). EqualComAss <pre>product(cos(k*x),k,1,3)</pre> <pre>product(cos(k*x),k,1,3)</pre> 1 EqualComAss <pre>cos(x)*cos(2*x)*cos(3*x)</pre> <pre>product(cos(k*x),k,1,3)</pre> 0 ATEqualComAss (AlgEquiv-true). Inequalities are not commutative under this test EqualComAss <pre>-6/5 &gt; x</pre> <pre>x &lt; -6/5</pre> 0 ATEqualComAss (AlgEquiv-true). EqualComAss <pre>x&lt;1 and -3&lt;x</pre> <pre>-3&lt;x and x&lt;1</pre> 1 EqualComAss <pre>1&gt;x and -3&lt;x</pre> <pre>-3&lt;x and x&lt;1</pre> 0 ATEqualComAss (AlgEquiv-true). EqualComAss <pre>make_less_ineq(-6/5 &gt; x)</pre> <pre>x &lt; -6/5</pre> 1 EqualComAss <pre>make_less_ineq(1&gt;x and -3&amp;l\nt;x)</pre> <pre>-3&lt;x and x&lt;1</pre> 1 EqualComAss <pre>make_less_ineq(6/3 &gt; x)</pre> <pre>x &lt; 2</pre> 0 ATEqualComAss (AlgEquiv-true). Unary Equations EqualComAss <pre>1</pre> <pre>stackeq(1)</pre> 1 EqualComAss <pre>stackeq(1)</pre> <pre>1</pre> 1 EqualComAss <pre>stackeq(1+1)</pre> <pre>2</pre> 0 ATEqualComAss (AlgEquiv-true). EqualComAss <pre>stackeq(1)</pre> <pre>0</pre> 0 ATEqualComAss (AlgEquiv-false). EqualComAss <pre>lowesttermsp(1/3)</pre> <pre>true</pre> 1 EqualComAss <pre>lowesttermsp(2/6)</pre> <pre>true</pre> 0 ATEqualComAss (AlgEquiv-false). EqualComAss <pre>lowesttermsp(x^2/x)</pre> <pre>true</pre> 0 ATEqualComAss (AlgEquiv-false). EqualComAss <pre>lowesttermsp(-y/-x)</pre> <pre>true</pre> 0 ATEqualComAss (AlgEquiv-false). EqualComAss <pre>lowesttermsp((x^2-1)/(x-1))</pre> <pre>true</pre> 0 ATEqualComAss (AlgEquiv-false). EqualComAss <pre>lowesttermsp((x^2-1)/(x+2))</pre> <pre>true</pre> 1 EqualComAss <pre>scientific_notationp(1/3)</pre> <pre>true</pre> 0 ATEqualComAss (AlgEquiv-false). EqualComAss <pre>scientific_notationp(4.1561*10\n^16)</pre> <pre>true</pre> 1 Bad things in denominators EqualComAss <pre>rationalized(1+sqrt(3)/3)</pre> <pre>true</pre> 1 EqualComAss <pre>rationalized(1+1/sqrt(3))</pre> <pre>[sqrt(3)]</pre> 1 EqualComAss <pre>rationalized(1/sqrt(3))</pre> <pre>[sqrt(3)]</pre> 1 EqualComAss <pre>rationalized(1/sqrt(2)+i/sqrt(\n2))</pre> <pre>[sqrt(2),sqrt(2)]</pre> 1 EqualComAss <pre>rationalized(sqrt(2)/2+1/sqrt(\n3))</pre> <pre>[sqrt(3)]</pre> 1 EqualComAss <pre>rationalized(1/sqrt(2)+1/sqrt(\n3))</pre> <pre>[sqrt(2),sqrt(3)]</pre> 1 EqualComAss <pre>rationalized(1/(1+i))</pre> <pre>[i]</pre> 1 EqualComAss <pre>rationalized(1/(1+1/root(3,2))\n)</pre> <pre>[root(3,2)]</pre> 1 Logic EqualComAss <pre>B nounand A</pre> <pre>A nounand B</pre> 1 EqualComAss <pre>A nounand A</pre> <pre>A</pre> 0 ATEqualComAss ATAlgEquiv_SA_not_expression. Your answer should be an expression, not an equation, inequality, list, set or matrix. EqualComAss <pre>subst([\"*\"=\"nou\nnand\", \"+\"=&amp;quo\nt;nounor\",\"!\"=&amp;\nquot;nounnot\"], A*B)</pre> <pre>A nounand B</pre> 1 Differential Equations EqualComAss <pre>diff(y,x)</pre> <pre>0</pre> 1 EqualComAss <pre>diff(x^2,x)</pre> <pre>2*x</pre> 1 EqualComAss <pre>noundiff(x^2,x)</pre> <pre>2*x</pre> 0 ATEqualComAss (AlgEquiv-true). EqualComAss <pre>diff(y,x)</pre> <pre>'diff(y,x)</pre> 0 ATEqualComAss (AlgEquiv-true). EqualComAss <pre>noundiff(y,x)</pre> <pre>'diff(y,x)</pre> 1 EqualComAss <pre>'diff(y(x),x)</pre> <pre>'diff(y(x),x,1)</pre> 1 EqualComAss <pre>noundiff(y(x),x)=-x/4</pre> <pre>4*noundiff(y(x),x)+x=0</pre> 0 ATEqualComAss (AlgEquiv-true)."},{"location":"en/Authoring/Answer_Tests/Results/EqualComAssRules/","title":"EqualComAssRules: Answer test results","text":"<p>This page exposes the results of running answer tests on STACK test cases.  This page is automatically generated from the STACK unit tests and is designed to show question authors what answer tests actually do.  This includes cases where answer tests currentl fail, which gives a negative expected mark.  Comments and further test cases are very welcome.</p> EqualComAssRules Test?Student responseTeacher answerOptMarkAnswer note EqualComAssRules <pre>1/0</pre> <pre>0</pre> <pre>[]</pre> -1 ATEqualComAssRules_STACKERROR_SAns. EqualComAssRules <pre>0</pre> <pre>1/0</pre> <pre>[]</pre> -1 ATEqualComAssRules_STACKERROR_TAns. EqualComAssRules <pre>0+a</pre> <pre>a</pre> -1 STACKERROR_OPTION. TEST_FAILED The answer test failed to execute correctly: please alert your teacher. Missing option when executing the test.  EqualComAssRules <pre>0+a</pre> <pre>a</pre> <pre>x</pre> -1 ATEqualComAssRules_Opt_List. The option to this answer test must be a non-empty list of supported rules. This is an error. Please contact your teacher. EqualComAssRules <pre>0+a</pre> <pre>a</pre> <pre>[x]</pre> -1 ATEqualComAssRules_Opt_Wrong. The option to this answer test must be a non-empty list of supported rules. This is an error. Please contact your teacher. EqualComAssRules <pre>0+a</pre> <pre>a</pre> <pre>[intMul,intFac]</pre> -1 ATEqualComAssRules_Opt_Incompatible. The option to this answer test contains incompatible rules. This is an error. Please contact your teacher. Basic cases EqualComAssRules <pre>1+1</pre> <pre>3</pre> <pre>[zeroAdd]</pre> 0 ATEqualComAssRules (AlgEquiv-false). EqualComAssRules <pre>1+1</pre> <pre>2</pre> <pre>[zeroAdd]</pre> 0 EqualComAssRules <pre>1+1</pre> <pre>2</pre> <pre>[testdebug,zero\nAdd]</pre> 0 ATEqualComAssRules: [1 nounadd 1,2]. EqualComAssRules <pre>0+a</pre> <pre>a</pre> <pre>[zeroAdd]</pre> 1 EqualComAssRules <pre>a+0</pre> <pre>a</pre> <pre>[zeroAdd]</pre> 1 EqualComAssRules <pre>a+b</pre> <pre>b+a</pre> <pre>[zeroAdd]</pre> 1 EqualComAssRules <pre>a+(b+c)</pre> <pre>(a+b)+c</pre> <pre>[zeroAdd]</pre> 1 EqualComAssRules <pre>a*b</pre> <pre>b*a</pre> <pre>[zeroAdd]</pre> 1 EqualComAssRules <pre>a*(b*c)</pre> <pre>(a*b)*c</pre> <pre>[zeroAdd]</pre> 1 EqualComAssRules <pre>a+b</pre> <pre>b+a</pre> <pre>[noncomAdd]</pre> 0 EqualComAssRules <pre>a+(b+c)</pre> <pre>(a+b)+c</pre> <pre>[noncomAdd]</pre> 1 EqualComAssRules <pre>-(-a*b)</pre> <pre>(-a)*(-b)</pre> <pre>[noncomMul]</pre> 0 EqualComAssRules <pre>-(-a*b)</pre> <pre>(-a)*(-b)</pre> <pre>[noncomMul,comN\neg]</pre> 1 EqualComAssRules <pre>-(-a*b)</pre> <pre>(-a)*(-b)</pre> <pre>[noncomMul]</pre> 0 EqualComAssRules <pre>-(-a*b)</pre> <pre>(-b)*(-a)</pre> <pre>[noncomMul,comN\neg]</pre> 0 EqualComAssRules <pre>-(-1*2)</pre> <pre>(-2)*(-1)</pre> <pre>[noncomMul,comN\neg]</pre> 0 EqualComAssRules <pre>a*b</pre> <pre>b*a</pre> <pre>[noncomMul]</pre> 0 EqualComAssRules <pre>a*(b*c)</pre> <pre>(a*b)*c</pre> <pre>[noncomMul]</pre> 1 EqualComAssRules <pre>-a*b</pre> <pre>b*-a</pre> <pre>[noncomMul]</pre> 0 EqualComAssRules <pre>-a/b</pre> <pre>a/-b</pre> <pre>[noncomMul]</pre> 0 EqualComAssRules <pre>A^2+A*B+A*B+B^2</pre> <pre>B^2+A*B+B*A+A^2</pre> <pre>[noncomMul]</pre> 0 EqualComAssRules <pre>a*2*b*3</pre> <pre>2*3*b*a</pre> <pre>[noncomMul]</pre> 0 EqualComAssRules <pre>a*2*b*3</pre> <pre>2*3*b*a</pre> <pre>[noncomMul,comM\nulNum]</pre> 0 EqualComAssRules <pre>a*2*b*3</pre> <pre>2*3*a*b</pre> <pre>[noncomMul,comM\nulNum]</pre> 1 EqualComAssRules <pre>a*2*b*3</pre> <pre>6*b*a</pre> <pre>[noncomMul,comM\nulNum]</pre> 0 EqualComAssRules <pre>a*2*-b*3</pre> <pre>-2*3*b*a</pre> <pre>[noncomMul,comM\nulNum]</pre> 0 EqualComAssRules <pre>a*2*-b*3</pre> <pre>-2*3*a*b</pre> <pre>[noncomMul,comM\nulNum]</pre> 1 EqualComAssRules <pre>-(-a*b)</pre> <pre>(-b)*(-a)</pre> <pre>[noncomMul,comM\nulNum]</pre> 0 EqualComAssRules <pre>-(-a*b)</pre> <pre>(-a)*(-b)</pre> <pre>[noncomMul,comM\nulNum]</pre> 1 EqualComAssRules <pre>1*a</pre> <pre>a</pre> <pre>[testdebug,zero\nAdd]</pre> 0 ATEqualComAssRules: [1 nounmul a,a]. EqualComAssRules <pre>1/2*sin(3*x)</pre> <pre>sin(3*x)/2</pre> <pre>[zeroAdd]</pre> 0 EqualComAssRules <pre>1/2*sin(3*x)</pre> <pre>sin(3*x)/2</pre> <pre>[oneMul]</pre> 1 EqualComAssRules <pre>1*a</pre> <pre>a</pre> <pre>[oneMul]</pre> 1 EqualComAssRules <pre>1*a</pre> <pre>a*1</pre> <pre>[oneMul,noncomM\nul]</pre> 1 EqualComAssRules <pre>0*a</pre> <pre>0</pre> <pre>[zeroMul,noncom\nMul]</pre> 1 EqualComAssRules <pre>a*0</pre> <pre>0</pre> <pre>[zeroMul,noncom\nMul]</pre> 1 EqualComAssRules <pre>1*a</pre> <pre>a</pre> <pre>ID_TRANS</pre> 1 EqualComAssRules <pre>a/1</pre> <pre>a</pre> <pre>ID_TRANS</pre> 1 EqualComAssRules <pre>0*a</pre> <pre>0</pre> <pre>ID_TRANS</pre> 1 EqualComAssRules <pre>0-1*i</pre> <pre>-i</pre> <pre>ID_TRANS</pre> 1 EqualComAssRules <pre>0-i</pre> <pre>-i</pre> <pre>ID_TRANS</pre> 1 EqualComAssRules <pre>2+1*i</pre> <pre>2+i</pre> <pre>ID_TRANS</pre> 1 EqualComAssRules <pre>x^0+x^1/1+x^2/2+x^3/3!+x^4/4!</pre> <pre>1+x+x^2/2+x^3/3!+x^4/4!</pre> <pre>ID_TRANS</pre> 1 EqualComAssRules <pre>%e^x</pre> <pre>exp(x)</pre> <pre>[testdebug,ID_T\nRANS]</pre> 1 ATEqualComAssRules: [%e nounpow x,%e nounpow x]. EqualComAssRules <pre>12*%e^((2*(%pi/2)*%i)/2)</pre> <pre>12*exp(%i*(%pi/2))</pre> <pre>ID_TRANS</pre> 0 EqualComAssRules <pre>12*%e^((2*(%pi/2)*%i)/2)</pre> <pre>12*exp(%i*(%pi/2))</pre> <pre>[ID_TRANS,[negN\neg,negDiv,negOr\nd],[recipMul,di\nvDiv,divCancel]\n,[intAdd,intMul\n,intPow]]</pre> 1 EqualComAssRules <pre>0^(1-1)</pre> <pre>0</pre> <pre>ID_TRANS</pre> 0 ATEqualComAssRules_STACKERROR_SAns. EqualComAssRules <pre>0*a</pre> <pre>0</pre> <pre>delete(zeroMul,\n ID_TRANS)</pre> 0 EqualComAssRules <pre>-(-a)</pre> <pre>a</pre> <pre>[negNeg]</pre> 1 EqualComAssRules <pre>-(-a)</pre> <pre>a</pre> <pre>[negNeg,noncomM\nul]</pre> 1 EqualComAssRules <pre>-(-(-a))</pre> <pre>-a</pre> <pre>[negNeg]</pre> 1 EqualComAssRules <pre>-(-(-a))</pre> <pre>-a</pre> <pre>[negNeg,noncomM\nul]</pre> 1 EqualComAssRules <pre>-(-(-a))</pre> <pre>a</pre> <pre>[testdebug,negN\neg]</pre> 0 ATEqualComAssRules (AlgEquiv-false). EqualComAssRules <pre>(-b)*(-a)</pre> <pre>a*b</pre> <pre>[negNeg]</pre> 1 EqualComAssRules <pre>(-b)*(-a)</pre> <pre>a*b</pre> <pre>[negNeg,noncomM\nul]</pre> 0 EqualComAssRules <pre>(-b)*(-a)</pre> <pre>b*a</pre> <pre>[negNeg,noncomM\nul]</pre> 1 EqualComAssRules <pre>3/(-x)</pre> <pre>-3/x</pre> <pre>ID_TRANS</pre> 0 EqualComAssRules <pre>3/(-x)</pre> <pre>-3/x</pre> <pre>[testdebug,ID_T\nRANS]</pre> 0 ATEqualComAssRules: [3 nounmul UNARY_RECIP UNARY_MINUS nounmul x,UNARY_MINUS nounmul 3 nounmul UNARY_RECIP x]. EqualComAssRules <pre>-x*(x+1)</pre> <pre>x*(-x-1)</pre> <pre>[negDist]</pre> 1 EqualComAssRules <pre>-x*(x-1)</pre> <pre>x*(1-x)</pre> <pre>NEG_TRANS</pre> 1 EqualComAssRules <pre>-x*(x-1)</pre> <pre>x*(1-x)</pre> <pre>NEG_TRANS</pre> 1 EqualComAssRules <pre>-5*x*(3-x)</pre> <pre>5*x*(x-3)</pre> <pre>NEG_TRANS</pre> 1 EqualComAssRules <pre>-x*(x-1)*(x+1)</pre> <pre>x*(x-1)*(-x-1)</pre> <pre>NEG_TRANS</pre> 1 EqualComAssRules <pre>-x*(x-1)*(x+1)</pre> <pre>x*(1-x)*(x+1)</pre> <pre>NEG_TRANS</pre> 1 EqualComAssRules <pre>-x*(y-1)*(x-1)</pre> <pre>x*(1-x)*(y-1)</pre> <pre>NEG_TRANS</pre> 1 EqualComAssRules <pre>-x*(y-1)*(x-1)</pre> <pre>x*(x-1)*(1-y)</pre> <pre>NEG_TRANS</pre> 1 EqualComAssRules <pre>(x-y)*(y-x)</pre> <pre>-(x-y)*(x-y)</pre> <pre>NEG_TRANS</pre> 1 EqualComAssRules <pre>(x-y)*(y-x)</pre> <pre>-(x-y)^2</pre> <pre>[testdebug,NEG_\nTRANS]</pre> 0 ATEqualComAssRules: [UNARY_MINUS nounmul (x nounadd UNARY_MINUS nounmul y) nounmul (x nounadd UNARY_MINUS nounmul y),UNARY_MINUS nounmul (x nounadd UNARY_MINUS nounmul y) nounpow 2]. EqualComAssRules <pre>-x*(x-1)*(x+1)</pre> <pre>x*(1-x)*(x+1)</pre> <pre>[testdebug,negD\nist,negNeg]</pre> 0 ATEqualComAssRules: [x nounmul (UNARY_MINUS nounmul 1 nounadd UNARY_MINUS nounmul x) nounmul (x nounadd UNARY_MINUS nounmul 1),x nounmul (1 nounadd UNARY_MINUS nounmul x) nounmul (1 nounadd x)]. EqualComAssRules <pre>-x*(y-1)*(x-1)</pre> <pre>x*(x-1)*(1-y)</pre> <pre>[testdebug,negD\nist,negNeg]</pre> 0 ATEqualComAssRules: [x nounmul (1 nounadd UNARY_MINUS nounmul x) nounmul (y nounadd UNARY_MINUS nounmul 1),x nounmul (1 nounadd UNARY_MINUS nounmul y) nounmul (x nounadd UNARY_MINUS nounmul 1)]. EqualComAssRules <pre>3/(-x)</pre> <pre>-3/x</pre> <pre>[negDiv]</pre> 1 EqualComAssRules <pre>3/(-x)</pre> <pre>ev(-3,simp)/x</pre> <pre>[negDiv]</pre> 1 EqualComAssRules <pre>(-a)/(-x)</pre> <pre>-(-a/x)</pre> <pre>[testdebug,ID_T\nRANS]</pre> 0 ATEqualComAssRules: [UNARY_MINUS nounmul a nounmul UNARY_RECIP UNARY_MINUS nounmul x,UNARY_MINUS nounmul UNARY_MINUS nounmul a nounmul UNARY_RECIP x]. EqualComAssRules <pre>(-a)/(-x)</pre> <pre>-(-a/x)</pre> <pre>[negDiv]</pre> 1 EqualComAssRules <pre>(-a)/(-x)</pre> <pre>a/x</pre> <pre>[testdebug,negD\niv]</pre> 0 ATEqualComAssRules: [UNARY_MINUS nounmul UNARY_MINUS nounmul a nounmul UNARY_RECIP x,a nounmul UNARY_RECIP x]. EqualComAssRules <pre>(-a)/(-x)</pre> <pre>a/x</pre> <pre>[negDiv,negNeg]</pre> 1 EqualComAssRules <pre>1/(-x)</pre> <pre>(-1)/x</pre> <pre>[negDiv]</pre> 1 EqualComAssRules <pre>1/(-x)</pre> <pre>ev(-1,simp)/x</pre> <pre>[negDiv]</pre> 1 EqualComAssRules <pre>(2/-3)*(x-y)</pre> <pre>-(2/3)*(x-y)</pre> <pre>[negDiv]</pre> 1 EqualComAssRules <pre>(2/-3)*(x-y)</pre> <pre>(2/3)*(y-x)</pre> <pre>[negDiv]</pre> 0 EqualComAssRules <pre>(2/-3)*(x-y)</pre> <pre>(2/3)*(y-x)</pre> <pre>[negDiv,negOrd]</pre> 1 EqualComAssRules <pre>-2/(1-x)</pre> <pre>2/(x-1)</pre> <pre>[testdebug,negD\niv]</pre> 0 ATEqualComAssRules: [UNARY_MINUS nounmul 2 nounmul UNARY_RECIP (1 nounadd UNARY_MINUS nounmul x),2 nounmul UNARY_RECIP (x nounadd UNARY_MINUS nounmul 1)]. EqualComAssRules <pre>1/2*3/x</pre> <pre>3/(2*x)</pre> <pre>[testdebug,ID_T\nRANS]</pre> 0 ATEqualComAssRules: [3 nounmul (UNARY_RECIP 2) nounmul UNARY_RECIP x,3 nounmul UNARY_RECIP 2 nounmul x]. EqualComAssRules <pre>1/2*3/x</pre> <pre>3/(2*x)</pre> <pre>[ID_TRANS,recip\nMul]</pre> 1 EqualComAssRules <pre>5/2*3/x</pre> <pre>15/(2*x)</pre> <pre>[testdebug,ID_T\nRANS,recipMul]</pre> 0 ATEqualComAssRules: [3 nounmul 5 nounmul UNARY_RECIP 2 nounmul x,15 nounmul UNARY_RECIP 2 nounmul x]. EqualComAssRules <pre>-(x-y)</pre> <pre>y-x</pre> <pre>[negOrd]</pre> 1 EqualComAssRules <pre>5/2*3/x</pre> <pre>15/(2*x)</pre> <pre>[ID_TRANS,recip\nMul,intMul]</pre> 1 EqualComAssRules <pre>(3+2)*x+x</pre> <pre>5*x+x</pre> <pre>[ID_TRANS,intAd\nd]</pre> 1 EqualComAssRules <pre>(3-5)*x+x</pre> <pre>-2*x+x</pre> <pre>[ID_TRANS,intAd\nd]</pre> 1 EqualComAssRules <pre>7*x*(-3*x)</pre> <pre>-21*x*x</pre> <pre>[ID_TRANS,intMu\nl]</pre> 1 EqualComAssRules <pre>(-7*x)*(-3*x)</pre> <pre>21*x*x</pre> <pre>[testdebug,ID_T\nRANS,intMul]</pre> 1 ATEqualComAssRules: [21 nounmul x nounmul x,21 nounmul x nounmul x]. EqualComAssRules <pre>(-7*x)*(-3*x)</pre> <pre>21*x*x</pre> <pre>[ID_TRANS,intMu\nl,negNeg]</pre> 1 EqualComAssRules <pre>2*a*3</pre> <pre>6*a</pre> <pre>[noncomMul,intM\nul]</pre> 1 EqualComAssRules <pre>2*a*3</pre> <pre>a*6</pre> <pre>[noncomMul,intM\nul]</pre> 1 EqualComAssRules <pre>a*6</pre> <pre>6*a</pre> <pre>[noncomMul,intM\nul]</pre> 1 EqualComAssRules <pre>A^2+2*A*B+B^2</pre> <pre>B^2+A*2*B+A^2</pre> <pre>[noncomMul,intM\nul]</pre> 1 EqualComAssRules <pre>2^3</pre> <pre>8</pre> <pre>[intPow]</pre> 1 EqualComAssRules <pre>2*2*2</pre> <pre>8</pre> <pre>[intPow]</pre> 0 ev(a/b/c, simp)=a/(b*c) EqualComAssRules <pre>a/b/c</pre> <pre>a/(b*c)</pre> <pre>[testdebug,ID_T\nRANS]</pre> 0 ATEqualComAssRules: [a nounmul (UNARY_RECIP b) nounmul UNARY_RECIP c,a nounmul UNARY_RECIP b nounmul c]. EqualComAssRules <pre>a/b/c</pre> <pre>a/(b*c)</pre> <pre>[ID_TRANS,recip\nMul]</pre> 1 EqualComAssRules <pre>(a/b)/c</pre> <pre>a/(b*c)</pre> <pre>[ID_TRANS,recip\nMul]</pre> 1 ev(a/(b/c), simp)=(a*c)/b EqualComAssRules <pre>a/(b/c)</pre> <pre>(a*c)/b</pre> <pre>[testdebug,ID_T\nRANS]</pre> 0 ATEqualComAssRules: [a nounmul UNARY_RECIP b nounmul UNARY_RECIP c,a nounmul c nounmul UNARY_RECIP b]. EqualComAssRules <pre>a/(b/c)</pre> <pre>(a*c)/b</pre> <pre>[testdebug,ID_T\nRANS,recipMul]</pre> 0 ATEqualComAssRules: [a nounmul UNARY_RECIP b nounmul UNARY_RECIP c,a nounmul c nounmul UNARY_RECIP b]. EqualComAssRules <pre>a/(b/c)</pre> <pre>(a*c)/b</pre> <pre>[ID_TRANS,divDi\nv]</pre> 1 EqualComAssRules <pre>A*a/(B*b/c)</pre> <pre>A*(a*c)/(B*b)</pre> <pre>[ID_TRANS,divDi\nv]</pre> 1 EqualComAssRules <pre>A*a/(B*b/c)*1/d</pre> <pre>A*(a*c)/(B*b)*1/d</pre> <pre>[ID_TRANS,divDi\nv]</pre> 1 EqualComAssRules <pre>D*A*a/(B*b/c)*1/d</pre> <pre>A*(a*c)/(B*b)*D/d</pre> <pre>[ID_TRANS,divDi\nv]</pre> 1 EqualComAssRules <pre>A*a/(B*b/c)*1/d</pre> <pre>A*(a*c)/(B*b*d)</pre> <pre>[testdebug,ID_T\nRANS,divDiv]</pre> 0 ATEqualComAssRules: [A nounmul a nounmul c nounmul (UNARY_RECIP B nounmul b) nounmul UNARY_RECIP d,A nounmul a nounmul c nounmul UNARY_RECIP B nounmul b nounmul d]. EqualComAssRules <pre>A*a/(B*b/c)*1/d</pre> <pre>A*(a*c)/(B*b*d)</pre> <pre>[ID_TRANS,divDi\nv,recipMul]</pre> 1 EqualComAssRules <pre>A/(B/(C/D))</pre> <pre>A*C/(B*D)</pre> <pre>[testdebug,ID_T\nRANS,divDiv]</pre> 0 ATEqualComAssRules: [A nounmul C nounmul (UNARY_RECIP B) nounmul UNARY_RECIP D,A nounmul C nounmul UNARY_RECIP B nounmul D]. EqualComAssRules <pre>A/(B/(C/D))</pre> <pre>A*C/(B*D)</pre> <pre>[ID_TRANS,divDi\nv,recipMul]</pre> 1 EqualComAssRules <pre>18</pre> <pre>2*3^2</pre> <pre>[intFac]</pre> 1 EqualComAssRules <pre>0+%i*(-(1/27))</pre> <pre>-(%i/27)</pre> <pre>[[zeroAdd,zeroM\nul,oneMul,onePo\nw,idPow,zeroPow\n,zPow,oneDiv],[\nnegNeg,negDiv,n\negOrd],[recipMu\nl,divDiv,divCan\ncel],[intAdd,in\ntMul,intPow]]</pre> 1 EqualComAssRules <pre>x=sqrt(3)+2</pre> <pre>x=3^(1/2)+2</pre> <pre>[ID_TRANS,sqrtR\nem]</pre> 1 EqualComAssRules <pre>x=sqrt(3)+2 nounor x=-sqrt(3)-\n2</pre> <pre>x=3^(1/2)+2 nounor x=-3^(1/2)-\n2</pre> <pre>ID_TRANS</pre> 0 EqualComAssRules <pre>x=sqrt(3)+2 nounor x=-sqrt(3)-\n2</pre> <pre>x=3^(1/2)+2 nounor x=-3^(1/2)-\n2</pre> <pre>[ID_TRANS,sqrtR\nem]</pre> 1 EqualComAssRules <pre>x=sqrt(3)+2 nounor x=-sqrt(3)+\n7</pre> <pre>x=3^(1/2)+2 nounor x=-3^(1/2)-\n2</pre> <pre>[ID_TRANS,sqrtR\nem]</pre> 0 ATEqualComAssRules (AlgEquiv-false)ATEquation_default. EqualComAssRules <pre>1/sqrt(3)</pre> <pre>1/3^(1/2)</pre> <pre>[ID_TRANS,sqrtR\nem]</pre> 1 EqualComAssRules <pre>1/sqrt(3)</pre> <pre>3^(-1/2)</pre> <pre>[ID_TRANS,sqrtR\nem]</pre> 0 EqualComAssRules <pre>1^x</pre> <pre>1</pre> <pre>[onePow]</pre> 1 EqualComAssRules <pre>(2-1)^x</pre> <pre>1</pre> <pre>[onePow]</pre> 0 EqualComAssRules <pre>x^1</pre> <pre>x</pre> <pre>[idPow]</pre> 1 EqualComAssRules <pre>x^(2-1)</pre> <pre>x</pre> <pre>[idPow]</pre> 0 EqualComAssRules <pre>x^0</pre> <pre>1</pre> <pre>[zPow]</pre> 1 EqualComAssRules <pre>x^(1-1)</pre> <pre>1</pre> <pre>[zPow]</pre> 0 EqualComAssRules <pre>0^x</pre> <pre>0</pre> <pre>[zeroPow]</pre> 1 EqualComAssRules <pre>(1-1)^x</pre> <pre>0</pre> <pre>[zeroPow]</pre> 0 EqualComAssRules <pre>x*y/1</pre> <pre>x*y</pre> <pre>[oneDiv]</pre> 1 EqualComAssRules <pre>x/1</pre> <pre>x</pre> <pre>[oneDiv]</pre> 1 EqualComAssRules <pre>x/1</pre> <pre>x*1</pre> <pre>[oneDiv]</pre> 0 EqualComAssRules <pre>x+y/1</pre> <pre>x+y</pre> <pre>[oneDiv]</pre> 1 EqualComAssRules <pre>x*y/(1*a)</pre> <pre>x*y/a</pre> <pre>[oneDiv]</pre> 0 EqualComAssRules <pre>x*y/(1*a)</pre> <pre>x*y/a</pre> <pre>[oneMul]</pre> 1 EqualComAssRules <pre>x*y/(1*a)</pre> <pre>x*y/a</pre> <pre>[oneMul]</pre> 1 EqualComAssRules <pre>2/4</pre> <pre>1/2</pre> <pre>[ID_TRANS,ratLo\nw]</pre> 1 EqualComAssRules <pre>2/-4</pre> <pre>-1/2</pre> <pre>[ID_TRANS,NEG_T\nRANS,ratLow]</pre> 1 EqualComAssRules <pre>7/-21+a</pre> <pre>a-1/3</pre> <pre>[ID_TRANS,NEG_T\nRANS,ratLow]</pre> 1 EqualComAssRules <pre>7/-20+a</pre> <pre>a-1/3</pre> <pre>[ID_TRANS,NEG_T\nRANS,ratLow]</pre> 0 ATEqualComAssRules (AlgEquiv-false). EqualComAssRules <pre>(1/2)*(4/3)</pre> <pre>4/6</pre> <pre>[ID_TRANS,recip\nMul,intMul]</pre> 1 EqualComAssRules <pre>(1/2)*(4/3)</pre> <pre>2/3</pre> <pre>[ID_TRANS,recip\nMul,intMul,ratL\now]</pre> 1 EqualComAssRules <pre>1/2+1/2</pre> <pre>1</pre> <pre>[ID_TRANS,NEG_T\nRANS,ratAdd]</pre> 1 EqualComAssRules <pre>(1/2+1/2)*x^2</pre> <pre>x^2</pre> <pre>[ID_TRANS,NEG_T\nRANS,ratAdd]</pre> 1 EqualComAssRules <pre>2/3+1/-2</pre> <pre>1/6</pre> <pre>[ID_TRANS,NEG_T\nRANS,ratAdd]</pre> 1 EqualComAssRules <pre>2/3+1/-2-1/6</pre> <pre>0</pre> <pre>[ID_TRANS,NEG_T\nRANS,ratAdd]</pre> 1 EqualComAssRules <pre>1/2+1/-1</pre> <pre>-1/2</pre> <pre>[NEG_TRANS,ratA\ndd]</pre> 1 EqualComAssRules <pre>1/2-1/1</pre> <pre>-1/2</pre> <pre>[NEG_TRANS,ratA\ndd]</pre> 1 EqualComAssRules <pre>1/2+1/-1</pre> <pre>-1/2</pre> <pre>[ID_TRANS,NEG_T\nRANS,ratAdd]</pre> 0 EqualComAssRules <pre>1/2-1/1</pre> <pre>-1/2</pre> <pre>[ID_TRANS,NEG_T\nRANS,ratAdd]</pre> 0"},{"location":"en/Authoring/Answer_Tests/Results/Equiv/","title":"Equiv: Answer test results","text":"<p>This page exposes the results of running answer tests on STACK test cases.  This page is automatically generated from the STACK unit tests and is designed to show question authors what answer tests actually do.  This includes cases where answer tests currentl fail, which gives a negative expected mark.  Comments and further test cases are very welcome.</p> Equiv Test?Student responseTeacher answerOptMarkAnswer note Equiv <pre>x</pre> <pre>[x^2=4,x=2 or x=-2]</pre> -1 ATEquiv_SA_not_list. The first argument to the Equiv answer test should be a list, but the test failed. Please contact your teacher. Equiv <pre>[x^2=4,x=2 or x=-2]</pre> <pre>x</pre> -1 ATEquiv_SB_not_list. The second argument to the Equiv answer test should be a list, but the test failed. Please contact your teacher. Equiv <pre>[1/0]</pre> <pre>[x^2=4,x=2 or x=-2]</pre> -1 ATEquiv_STACKERROR_SAns. Equiv <pre>[x^2=4,x=2 or x=-2]</pre> <pre>[1/0]</pre> -1 ATEquiv_STACKERROR_TAns. Equiv <pre>[x^2=4,x=2 or x=-2]</pre> <pre>[x^2=4,x=2 or x=-2]</pre> 1 (EMPTYCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;x^2=4&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x=2\\,{\\text{ or }}\\, x=-2&amp; \\cr \\end{array}\\] Equiv <pre>[x^2=4,x=#pm#2,x=2 and x=-2]</pre> <pre>[x^2=4,x=2 or x=-2]</pre> 0 (EMPTYCHAR, EQUIVCHAR,ANDOR) \\[\\begin{array}{lll} &amp;x^2=4&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x= \\pm 2&amp; \\cr \\color{red}{\\text{and/or confusion!}}&amp;\\left\\{\\begin{array}{l}x=2\\cr x=-2\\cr \\end{array}\\right.&amp; \\cr \\end{array}\\] Equiv <pre>[x^2=4,x=2]</pre> <pre>[x^2=4,x=2 or x=-2]</pre> 0 (EMPTYCHAR,IMPLIEDCHAR) \\[\\begin{array}{lll} &amp;x^2=4&amp; \\cr \\color{red}{\\Leftarrow}&amp;x=2&amp; \\cr \\end{array}\\] Equiv <pre>[x^2=4,x=2]</pre> <pre>[x^2=4,x=2]</pre> <pre>[assumepos]</pre> 1 (ASSUMEPOSVARS, EQUIVCHAR) \\[\\begin{array}{lll}\\color{blue}{\\text{Assume +ve vars}}&amp;x^2=4&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x=2&amp; \\cr \\end{array}\\] Equiv <pre>[x^2=4,x^2-4=0,(x-2)*(x+2)=0,x\n=2 or x=-2]</pre> <pre>[x^2=4,x=2 or x=-2]</pre> 1 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;x^2=4&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x^2-4=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left(x-2\\right)\\cdot \\left(x+2\\right)=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x=2\\,{\\text{ or }}\\, x=-2&amp; \\cr \\end{array}\\] Equiv <pre>[x^2=4,x= #pm#2, x=2 or x=-2]</pre> <pre>[x^2=4,x=2 or x=-2]</pre> 1 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;x^2=4&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x= \\pm 2&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x=2\\,{\\text{ or }}\\, x=-2&amp; \\cr \\end{array}\\] Equiv <pre>[x^2-6*x+9=0,x=3]</pre> <pre>[x^2-6*x+9=0,x=3]</pre> 1 (EMPTYCHAR,SAMEROOTS) \\[\\begin{array}{lll} &amp;x^2-6\\cdot x+9=0&amp; \\cr \\color{green}{\\text{(Same roots)}}&amp;x=3&amp; \\cr \\end{array}\\] Equiv <pre>[]</pre> <pre>[]</pre> 1 (EMPTYCHAR) \\[\\begin{array}{lll} &amp;\\left[ \\right] &amp; \\cr \\end{array}\\] Equiv <pre>[x^2=-1]</pre> <pre>[]</pre> 1 (EMPTYCHAR) \\[\\begin{array}{lll} &amp;x^2=-1&amp; \\cr \\end{array}\\] Equiv <pre>[x=x,all]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;x=x&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\mathbb{R}&amp; \\cr \\end{array}\\] Equiv <pre>[x=x,true]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;x=x&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\mathbf{True}&amp; \\cr \\end{array}\\] Equiv <pre>[x=x,false]</pre> <pre>[]</pre> 0 (EMPTYCHAR,QMCHAR) \\[\\begin{array}{lll} &amp;x=x&amp; \\cr \\color{red}{?}&amp;\\mathbf{False}&amp; \\cr \\end{array}\\] Equiv <pre>[1=1,all]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;1=1&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\mathbb{R}&amp; \\cr \\end{array}\\] Equiv <pre>[1=1,true]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;1=1&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\mathbf{True}&amp; \\cr \\end{array}\\] Equiv <pre>[0=0,all]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;0=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\mathbb{R}&amp; \\cr \\end{array}\\] Equiv <pre>[0=0,true]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;0=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\mathbf{True}&amp; \\cr \\end{array}\\] Equiv <pre>[1=2,false]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;1=2&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\mathbf{False}&amp; \\cr \\end{array}\\] Equiv <pre>[1=2,none]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;1=2&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\emptyset&amp; \\cr \\end{array}\\] Equiv <pre>[1=2,{}]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;1=2&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left \\{ \\right \\}&amp; \\cr \\end{array}\\] Equiv <pre>[false,none,all,true]</pre> <pre>[]</pre> 0 (EMPTYCHAR, CHECKMARK,QMCHAR, CHECKMARK) \\[\\begin{array}{lll} &amp;\\mathbf{False}&amp; \\cr \\color{green}{\\checkmark}&amp;\\emptyset&amp; \\cr \\color{red}{?}&amp;\\mathbb{R}&amp; \\cr \\color{green}{\\checkmark}&amp;\\mathbf{True}&amp; \\cr \\end{array}\\] Equiv <pre>[3=0,2=sqrt(-5),2=0,2=sqrt(5),\n2=0,2=sqrt(-5),3=0]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;3=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;2=\\sqrt{-5}&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;2=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;2=\\sqrt{5}&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;2=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;2=\\sqrt{-5}&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;3=0&amp; \\cr \\end{array}\\] Equiv <pre>[3=0,2=sqrt(-5),2=0,2=sqrt(5),\n2=0,2=sqrt(-5),3=0]</pre> <pre>[]</pre> <pre>[assumereal]</pre> 1 (ASSUMEREALVARS, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll}\\color{blue}{(\\mathbb{R})}&amp;3=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;2=\\sqrt{-5}&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;2=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;2=\\sqrt{5}&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;2=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;2=\\sqrt{-5}&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;3=0&amp; \\cr \\end{array}\\] Equiv <pre>[x=1,X=1]</pre> <pre>[]</pre> 0 (EMPTYCHAR,QMCHAR) \\[\\begin{array}{lll} &amp;x=1&amp; \\cr \\color{red}{?}&amp;X=1&amp; \\cr \\end{array}\\] Equiv <pre>[1/(x^2+1)=1/((x+%i)*(x-%i)),t\nrue]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;\\frac{1}{x^2+1}=\\frac{1}{\\left(x+\\mathrm{i}\\right)\\cdot \\left(x-\\mathrm{i}\\right)}&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\mathbf{True}&amp; \\cr \\end{array}\\] Equiv <pre>[true,false]</pre> <pre>[]</pre> 0 (EMPTYCHAR,QMCHAR) \\[\\begin{array}{lll} &amp;\\mathbf{True}&amp; \\cr \\color{red}{?}&amp;\\mathbf{False}&amp; \\cr \\end{array}\\] Equiv <pre>[true nounand false,false]</pre> <pre>[]</pre> 1 (EMPTYCHAR, CHECKMARK) \\[\\begin{array}{lll} &amp;\\left\\{\\begin{array}{l}\\mathbf{True}\\cr \\mathbf{False}\\cr \\end{array}\\right.&amp; \\cr \\color{green}{\\checkmark}&amp;\\mathbf{False}&amp; \\cr \\end{array}\\] Equiv <pre>[true nounor false,false]</pre> <pre>[]</pre> 0 (EMPTYCHAR,QMCHAR) \\[\\begin{array}{lll} &amp;\\mathbf{True}\\,{\\text{ or }}\\, \\mathbf{False}&amp; \\cr \\color{red}{?}&amp;\\mathbf{False}&amp; \\cr \\end{array}\\] Equiv <pre>[(A nounor B) nounand (not A n\nounor B),B]</pre> <pre>[]</pre> 1 (EMPTYCHAR, CHECKMARK) \\[\\begin{array}{lll} &amp;\\left\\{\\begin{array}{l}A\\,{\\text{ or }}\\, B\\cr {\\rm not}\\left( A \\right)\\,{\\text{ or }}\\, B\\cr \\end{array}\\right.&amp; \\cr \\color{green}{\\checkmark}&amp;B&amp; \\cr \\end{array}\\] Equiv <pre>[(A nounor B) nounand (not A n\nounor B),stackeq(B)]</pre> <pre>[]</pre> 1 (EMPTYCHAR, CHECKMARK) \\[\\begin{array}{lll} &amp;\\left\\{\\begin{array}{l}A\\,{\\text{ or }}\\, B\\cr {\\rm not}\\left( A \\right)\\,{\\text{ or }}\\, B\\cr \\end{array}\\right.&amp; \\cr \\color{green}{\\checkmark}&amp;=B&amp; \\cr \\end{array}\\] Equiv <pre>[2^2,stackeq(4)]</pre> <pre>[]</pre> 1 (EMPTYCHAR, CHECKMARK) \\[\\begin{array}{lll} &amp;2^2&amp; \\cr \\color{green}{\\checkmark}&amp;=4&amp; \\cr \\end{array}\\] Equiv <pre>[2^2,stackeq(3)]</pre> <pre>[]</pre> 0 (EMPTYCHAR,QMCHAR) \\[\\begin{array}{lll} &amp;2^2&amp; \\cr \\color{red}{?}&amp;=3&amp; \\cr \\end{array}\\] Equiv <pre>[2^2,4]</pre> <pre>[]</pre> 1 (EMPTYCHAR, CHECKMARK) \\[\\begin{array}{lll} &amp;2^2&amp; \\cr \\color{green}{\\checkmark}&amp;4&amp; \\cr \\end{array}\\] Equiv <pre>[2^2,3]</pre> <pre>[]</pre> 0 (EMPTYCHAR,QMCHAR) \\[\\begin{array}{lll} &amp;2^2&amp; \\cr \\color{red}{?}&amp;3&amp; \\cr \\end{array}\\] Equiv <pre>[lg(64,4),lg(4^3,4),3*lg(4,4),\n3]</pre> <pre>[]</pre> 1 (EMPTYCHAR, CHECKMARK, CHECKMARK, CHECKMARK) \\[\\begin{array}{lll} &amp;\\log_{4}\\left(64\\right)&amp; \\cr \\color{green}{\\checkmark}&amp;\\log_{4}\\left(4^3\\right)&amp; \\cr \\color{green}{\\checkmark}&amp;3\\cdot \\log_{4}\\left(4\\right)&amp; \\cr \\color{green}{\\checkmark}&amp;3&amp; \\cr \\end{array}\\] Equiv <pre>[lg(64,4),stackeq(lg(4^3,4)),s\ntackeq(3*lg(4,4)),stackeq(3)]</pre> <pre>[]</pre> 1 (EMPTYCHAR, CHECKMARK, CHECKMARK, CHECKMARK) \\[\\begin{array}{lll} &amp;\\log_{4}\\left(64\\right)&amp; \\cr \\color{green}{\\checkmark}&amp;=\\log_{4}\\left(4^3\\right)&amp; \\cr \\color{green}{\\checkmark}&amp;=3\\cdot \\log_{4}\\left(4\\right)&amp; \\cr \\color{green}{\\checkmark}&amp;=3&amp; \\cr \\end{array}\\] Equiv <pre>[x=1 or x=2,x=1 or 2]</pre> <pre>[]</pre> 0 (EMPTYCHAR,MISSINGVAR) \\[\\begin{array}{lll} &amp;x=1\\,{\\text{ or }}\\, x=2&amp; \\cr \\color{red}{\\text{Missing assignments}}&amp;x=1\\,{\\text{ or }}\\, 2&amp; \\cr \\end{array}\\] Equiv <pre>[x=1 or x=2,x=1 and x=2]</pre> <pre>[]</pre> 0 (EMPTYCHAR,ANDOR) \\[\\begin{array}{lll} &amp;x=1\\,{\\text{ or }}\\, x=2&amp; \\cr \\color{red}{\\text{and/or confusion!}}&amp;\\left\\{\\begin{array}{l}x=1\\cr x=2\\cr \\end{array}\\right.&amp; \\cr \\end{array}\\] Equiv <pre>[x=1 and y=2,x=1 or y=2]</pre> <pre>[]</pre> 0 (EMPTYCHAR,ANDOR) \\[\\begin{array}{lll} &amp;\\left\\{\\begin{array}{l}x=1\\cr y=2\\cr \\end{array}\\right.&amp; \\cr \\color{red}{\\text{and/or confusion!}}&amp;x=1\\,{\\text{ or }}\\, y=2&amp; \\cr \\end{array}\\] Equiv <pre>[a=b,a^2=b^2]</pre> <pre>[]</pre> 0 (EMPTYCHAR,IMPLIESCHAR) \\[\\begin{array}{lll} &amp;a=b&amp; \\cr \\color{red}{\\Rightarrow}&amp;a^2=b^2&amp; \\cr \\end{array}\\] Equiv <pre>[a=b,sqrt(a)=sqrt(b)]</pre> <pre>[]</pre> 0 (EMPTYCHAR,IMPLIEDCHAR) \\[\\begin{array}{lll} &amp;a=b&amp; \\cr \\color{red}{\\Leftarrow}&amp;\\sqrt{a}=\\sqrt{b}&amp; \\cr \\end{array}\\] Equiv <pre>[a^2=b^2,a=b]</pre> <pre>[]</pre> 0 (EMPTYCHAR,IMPLIEDCHAR) \\[\\begin{array}{lll} &amp;a^2=b^2&amp; \\cr \\color{red}{\\Leftarrow}&amp;a=b&amp; \\cr \\end{array}\\] Equiv <pre>[a^2=b^2,a=b or a=-b]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;a^2=b^2&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;a=b\\,{\\text{ or }}\\, a=-b&amp; \\cr \\end{array}\\] Equiv <pre>[a^2=b^2,a= #pm#b,a= b or a=-b\n]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;a^2=b^2&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;a= \\pm b&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;a=b\\,{\\text{ or }}\\, a=-b&amp; \\cr \\end{array}\\] Equiv <pre>[9*x^2/2-81*x/2+90=5*x^2/2-5*x\n-20 nounor 9*x^2/2-81*x/2+90=-\n(5*x^2/2-5*x-20),9*x^2-81*x+18\n0=5*x^2-10*x-40 nounor 9*x^2-8\n1*x+180=-5*x^2+10*x+40,4*x^2-7\n1*x+220=0 nounor 14*x^2-91*x+1\n40=0,x=(71 #pm# sqrt(71^2-4*4*\n220))/(2*4) nounor x=(91 #pm# \nsqrt(91^2-4*14*140))/(2*14),x=\n55/4 nounor x=4 nounor x=5/2]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR,SAMEROOTS) \\[\\begin{array}{lll} &amp;\\frac{9\\cdot x^2}{2}-\\frac{81\\cdot x}{2}+90=\\frac{5\\cdot x^2}{2}-5\\cdot x-20\\,{\\text{ or }}\\, \\frac{9\\cdot x^2}{2}-\\frac{81\\cdot x}{2}+90=-\\left(\\frac{5\\cdot x^2}{2}-5\\cdot x-20\\right)&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;9\\cdot x^2-81\\cdot x+180=5\\cdot x^2-10\\cdot x-40\\,{\\text{ or }}\\, 9\\cdot x^2-81\\cdot x+180=-5\\cdot x^2+10\\cdot x+40&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;4\\cdot x^2-71\\cdot x+220=0\\,{\\text{ or }}\\, 14\\cdot x^2-91\\cdot x+140=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x=\\frac{{71 \\pm \\sqrt{71^2-4\\cdot 4\\cdot 220}}}{2\\cdot 4}\\,{\\text{ or }}\\, x=\\frac{{91 \\pm \\sqrt{91^2-4\\cdot 14\\cdot 140}}}{2\\cdot 14}&amp; \\cr \\color{green}{\\text{(Same roots)}}&amp;x=\\frac{55}{4}\\,{\\text{ or }}\\, x=4\\,{\\text{ or }}\\, x=\\frac{5}{2}&amp; \\cr \\end{array}\\] Equiv <pre>[a=b,abs(a)=abs(b),a=b]</pre> <pre>[]</pre> 0 (EMPTYCHAR,IMPLIESCHAR,IMPLIEDCHAR) \\[\\begin{array}{lll} &amp;a=b&amp; \\cr \\color{red}{\\Rightarrow}&amp;\\left| a\\right| =\\left| b\\right| &amp; \\cr \\color{red}{\\Leftarrow}&amp;a=b&amp; \\cr \\end{array}\\] Equiv <pre>[abs(a)=abs(b),a=b or a=-b]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;\\left| a\\right| =\\left| b\\right| &amp; \\cr \\color{green}{\\Leftrightarrow}&amp;a=b\\,{\\text{ or }}\\, a=-b&amp; \\cr \\end{array}\\] Equiv <pre>[abs(a)=abs(b),a^2=b^2]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;\\left| a\\right| =\\left| b\\right| &amp; \\cr \\color{green}{\\Leftrightarrow}&amp;a^2=b^2&amp; \\cr \\end{array}\\] Equiv <pre>[x^3=8,x=2]</pre> <pre>[]</pre> 0 (EMPTYCHAR,IMPLIEDCHAR) \\[\\begin{array}{lll} &amp;x^3=8&amp; \\cr \\color{red}{\\Leftarrow}&amp;x=2&amp; \\cr \\end{array}\\] Equiv <pre>[x^3=8,x=2]</pre> <pre>[]</pre> <pre>[assumereal]</pre> 1 (ASSUMEREALVARS, EQUIVCHARREAL) \\[\\begin{array}{lll}\\color{blue}{(\\mathbb{R})}&amp;x^3=8&amp; \\cr \\color{green}{\\Leftrightarrow}\\, \\color{blue}{(\\mathbb{R})}&amp;x=2&amp; \\cr \\end{array}\\] Equiv <pre>[abs(x-1/2)+abs(x+1/2)=2,abs(x\n)=1]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;\\left| x-\\frac{1}{2}\\right| +\\left| x+\\frac{1}{2}\\right| =2&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left| x\\right| =1&amp; \\cr \\end{array}\\] Equiv <pre>[a^2=9 and a&gt;0,a=3]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;\\left\\{\\begin{array}{l}a^2=9\\cr a &gt; 0\\cr \\end{array}\\right.&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;a=3&amp; \\cr \\end{array}\\] Equiv <pre>[T=2*pi*sqrt(L/g),T^2=4*pi^2*L\n/g,g=4*pi^2*L/T^2]</pre> <pre>[]</pre> <pre>[assumepos]</pre> 1 (ASSUMEPOSVARS, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll}\\color{blue}{\\text{Assume +ve vars}}&amp;T=2\\cdot \\pi\\cdot \\sqrt{\\frac{L}{g}}&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;T^2=\\frac{4\\cdot \\pi^2\\cdot L}{g}&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;g=\\frac{4\\cdot \\pi^2\\cdot L}{T^2}&amp; \\cr \\end{array}\\] Equiv <pre>[a=b,a^2=b^2]</pre> <pre>[]</pre> <pre>[assumepos]</pre> 1 (ASSUMEPOSVARS, EQUIVCHAR) \\[\\begin{array}{lll}\\color{blue}{\\text{Assume +ve vars}}&amp;a=b&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;a^2=b^2&amp; \\cr \\end{array}\\] Equiv <pre>[a=b,sqrt(a)=sqrt(b)]</pre> <pre>[]</pre> <pre>[assumepos]</pre> 1 (ASSUMEPOSVARS, EQUIVCHAR) \\[\\begin{array}{lll}\\color{blue}{\\text{Assume +ve vars}}&amp;a=b&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\sqrt{a}=\\sqrt{b}&amp; \\cr \\end{array}\\] Equiv <pre>[a^2=b^2,a=b]</pre> <pre>[]</pre> <pre>[assumepos]</pre> 1 (ASSUMEPOSVARS, EQUIVCHAR) \\[\\begin{array}{lll}\\color{blue}{\\text{Assume +ve vars}}&amp;a^2=b^2&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;a=b&amp; \\cr \\end{array}\\] Equiv <pre>[a^2=b^2,a=b or a=-b]</pre> <pre>[]</pre> <pre>[assumepos]</pre> 1 (ASSUMEPOSVARS, EQUIVCHAR) \\[\\begin{array}{lll}\\color{blue}{\\text{Assume +ve vars}}&amp;a^2=b^2&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;a=b\\,{\\text{ or }}\\, a=-b&amp; \\cr \\end{array}\\] Equiv <pre>[a=b,abs(a)=abs(b)]</pre> <pre>[]</pre> <pre>[assumepos]</pre> 1 (ASSUMEPOSVARS, EQUIVCHAR) \\[\\begin{array}{lll}\\color{blue}{\\text{Assume +ve vars}}&amp;a=b&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left| a\\right| =\\left| b\\right| &amp; \\cr \\end{array}\\] Equiv <pre>[abs(a)=abs(b),a=b]</pre> <pre>[]</pre> <pre>[assumepos]</pre> 1 (ASSUMEPOSVARS, EQUIVCHAR) \\[\\begin{array}{lll}\\color{blue}{\\text{Assume +ve vars}}&amp;\\left| a\\right| =\\left| b\\right| &amp; \\cr \\color{green}{\\Leftrightarrow}&amp;a=b&amp; \\cr \\end{array}\\] Equiv <pre>[abs(a)=abs(b),a=-b]</pre> <pre>[]</pre> <pre>[assumepos]</pre> 1 (ASSUMEPOSVARS, EQUIVCHAR) \\[\\begin{array}{lll}\\color{blue}{\\text{Assume +ve vars}}&amp;\\left| a\\right| =\\left| b\\right| &amp; \\cr \\color{green}{\\Leftrightarrow}&amp;a=-b&amp; \\cr \\end{array}\\] Equiv <pre>[abs(a)=abs(b),a=b or a=-b]</pre> <pre>[]</pre> <pre>[assumepos]</pre> 1 (ASSUMEPOSVARS, EQUIVCHAR) \\[\\begin{array}{lll}\\color{blue}{\\text{Assume +ve vars}}&amp;\\left| a\\right| =\\left| b\\right| &amp; \\cr \\color{green}{\\Leftrightarrow}&amp;a=b\\,{\\text{ or }}\\, a=-b&amp; \\cr \\end{array}\\] Equiv <pre>[x=abs(-2),x=2]</pre> <pre>[]</pre> <pre>[assumepos]</pre> 1 (ASSUMEPOSVARS, EQUIVCHAR) \\[\\begin{array}{lll}\\color{blue}{\\text{Assume +ve vars}}&amp;x=\\left| -2\\right| &amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x=2&amp; \\cr \\end{array}\\] Equiv <pre>[abs(a)=abs(b),a^2=b^2]</pre> <pre>[]</pre> <pre>[assumepos]</pre> 1 (ASSUMEPOSVARS, EQUIVCHAR) \\[\\begin{array}{lll}\\color{blue}{\\text{Assume +ve vars}}&amp;\\left| a\\right| =\\left| b\\right| &amp; \\cr \\color{green}{\\Leftrightarrow}&amp;a^2=b^2&amp; \\cr \\end{array}\\] Equiv <pre>[x^2=9,x=#pm#3,x=3 or x=-3,x=3\n]</pre> <pre>[]</pre> <pre>[assumepos]</pre> 1 (ASSUMEPOSVARS, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll}\\color{blue}{\\text{Assume +ve vars}}&amp;x^2=9&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x= \\pm 3&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x=3\\,{\\text{ or }}\\, x=-3&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x=3&amp; \\cr \\end{array}\\] Equiv <pre>[x^2=9,x=3]</pre> <pre>[]</pre> <pre>[assumepos]</pre> 1 (ASSUMEPOSVARS, EQUIVCHAR) \\[\\begin{array}{lll}\\color{blue}{\\text{Assume +ve vars}}&amp;x^2=9&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x=3&amp; \\cr \\end{array}\\] Equiv <pre>[x^2=2,x=#pm#sqrt(2),x=sqrt(2)\n or x=-sqrt(2)]</pre> <pre>[]</pre> <pre>[assumepos]</pre> 1 (ASSUMEPOSVARS, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll}\\color{blue}{\\text{Assume +ve vars}}&amp;x^2=2&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x= \\pm \\sqrt{2}&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x=\\sqrt{2}\\,{\\text{ or }}\\, x=-\\sqrt{2}&amp; \\cr \\end{array}\\] Equiv <pre>[x^2=2,x=sqrt(2)]</pre> <pre>[]</pre> <pre>[assumepos]</pre> 1 (ASSUMEPOSVARS, EQUIVCHAR) \\[\\begin{array}{lll}\\color{blue}{\\text{Assume +ve vars}}&amp;x^2=2&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x=\\sqrt{2}&amp; \\cr \\end{array}\\] Equiv <pre>[x^2 = a^2-b,x = sqrt(a^2-b)]</pre> <pre>[]</pre> <pre>[assumepos]</pre> 1 (ASSUMEPOSVARS, EQUIVCHAR) \\[\\begin{array}{lll}\\color{blue}{\\text{Assume +ve vars}}&amp;x^2=a^2-b&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x=\\sqrt{a^2-b}&amp; \\cr \\end{array}\\] Equiv <pre>[2*(x-3) = 4*x-3*(x+2),2*x-6=x\n-6,x=0]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;2\\cdot \\left(x-3\\right)=4\\cdot x-3\\cdot \\left(x+2\\right)&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;2\\cdot x-6=x-6&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x=0&amp; \\cr \\end{array}\\] Equiv <pre>[2*(x-3) = 5*x-3*(x+2),2*x-6=2\n*x-6,0=0,all]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;2\\cdot \\left(x-3\\right)=5\\cdot x-3\\cdot \\left(x+2\\right)&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;2\\cdot x-6=2\\cdot x-6&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;0=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\mathbb{R}&amp; \\cr \\end{array}\\] Equiv <pre>[2*(x-3) = 5*x-3*(x+1),2*x-6=2\n*x-3,0=3,{}]</pre> <pre>[]</pre> 1 (EMPTYCHAR,SAMEROOTS, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;2\\cdot \\left(x-3\\right)=5\\cdot x-3\\cdot \\left(x+1\\right)&amp; \\cr \\color{green}{\\text{(Same roots)}}&amp;2\\cdot x-6=2\\cdot x-3&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;0=3&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left \\{ \\right \\}&amp; \\cr \\end{array}\\] Equiv <pre>[a^2=b^2,a^2-b^2=0,(a-b)*(a+b)\n=0,a=b or a=-b]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;a^2=b^2&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;a^2-b^2=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left(a-b\\right)\\cdot \\left(a+b\\right)=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;a=b\\,{\\text{ or }}\\, a=-b&amp; \\cr \\end{array}\\] Equiv <pre>[a^3=b^3,a^3-b^3=0,(a-b)*(a^2+\na*b+b^2)=0,(a-b)=0,a=b]</pre> <pre>[]</pre> 0 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR,IMPLIEDCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;a^3=b^3&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;a^3-b^3=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left(a-b\\right)\\cdot \\left(a^2+a\\cdot b+b^2\\right)=0&amp; \\cr \\color{red}{\\Leftarrow}&amp;a-b=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;a=b&amp; \\cr \\end{array}\\] Equiv <pre>[a^3=b^3,a^3-b^3=0,(a-b)*(a^2+\na*b+b^2)=0,(a-b)=0 or (a^2+a*b\n+b^2)=0, a=b or (a+(1+%i*sqrt(\n3))/2*b)*(a+(1-%i*sqrt(3))/2*b\n)=0, a=b or a=-(1+%i*sqrt(3))/\n2*b or a=-(1-%i*sqrt(3))/2*b]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;a^3=b^3&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;a^3-b^3=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left(a-b\\right)\\cdot \\left(a^2+a\\cdot b+b^2\\right)=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;a-b=0\\,{\\text{ or }}\\, a^2+a\\cdot b+b^2=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;a=b\\,{\\text{ or }}\\, \\left(a+\\frac{1+\\mathrm{i}\\cdot \\sqrt{3}}{2}\\cdot b\\right)\\cdot \\left(a+\\frac{1-\\mathrm{i}\\cdot \\sqrt{3}}{2}\\cdot b\\right)=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;a=b\\,{\\text{ or }}\\, a=\\frac{-\\left(1+\\mathrm{i}\\cdot \\sqrt{3}\\right)}{2}\\cdot b\\,{\\text{ or }}\\, a=\\frac{-\\left(1-\\mathrm{i}\\cdot \\sqrt{3}\\right)}{2}\\cdot b&amp; \\cr \\end{array}\\] Equiv <pre>[x^2-x=30,x^2-x-30=0,(x-6)*(x+\n5)=0,x-6=0 or x+5=0,x=6 or x=-\n5]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;x^2-x=30&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x^2-x-30=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left(x-6\\right)\\cdot \\left(x+5\\right)=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x-6=0\\,{\\text{ or }}\\, x+5=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x=6\\,{\\text{ or }}\\, x=-5&amp; \\cr \\end{array}\\] Equiv <pre>[x^2=2,x^2-2=0,(x-sqrt(2))*(x+\nsqrt(2))=0,x=sqrt(2) or x=-sqr\nt(2)]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;x^2=2&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x^2-2=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left(x-\\sqrt{2}\\right)\\cdot \\left(x+\\sqrt{2}\\right)=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x=\\sqrt{2}\\,{\\text{ or }}\\, x=-\\sqrt{2}&amp; \\cr \\end{array}\\] Equiv <pre>[x^2=2,x=#pm#sqrt(2),x=sqrt(2)\n or x=-sqrt(2)]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;x^2=2&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x= \\pm \\sqrt{2}&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x=\\sqrt{2}\\,{\\text{ or }}\\, x=-\\sqrt{2}&amp; \\cr \\end{array}\\] Equiv <pre>[(2*x-7)^2=(x+1)^2,(2*x-7)^2 -\n(x+1)^2=0,(2*x-7+x+1)*(2*x-7-x\n-1)=0,(3*x-6)*(x-8)=0,x=2 or x\n=8]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;{\\left(2\\cdot x-7\\right)}^2={\\left(x+1\\right)}^2&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;{\\left(2\\cdot x-7\\right)}^2-{\\left(x+1\\right)}^2=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left(2\\cdot x-7+x+1\\right)\\cdot \\left(2\\cdot x-7-x-1\\right)=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left(3\\cdot x-6\\right)\\cdot \\left(x-8\\right)=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x=2\\,{\\text{ or }}\\, x=8&amp; \\cr \\end{array}\\] Equiv <pre>[x^2-6*x=-9,(x-3)^2=0,x-3=0,x=\n3]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR,SAMEROOTS, EQUIVCHAR) \\[\\begin{array}{lll} &amp;x^2-6\\cdot x=-9&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;{\\left(x-3\\right)}^2=0&amp; \\cr \\color{green}{\\text{(Same roots)}}&amp;x-3=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x=3&amp; \\cr \\end{array}\\] Equiv <pre>[(2*x-7)^2=(x+1)^2,sqrt((2*x-7\n)^2)=sqrt((x+1)^2),2*x-7=x+1,x\n=8]</pre> <pre>[]</pre> 0 (EMPTYCHAR, EQUIVCHAR,IMPLIEDCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;{\\left(2\\cdot x-7\\right)}^2={\\left(x+1\\right)}^2&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\sqrt{{\\left(2\\cdot x-7\\right)}^2}=\\sqrt{{\\left(x+1\\right)}^2}&amp; \\cr \\color{red}{\\Leftarrow}&amp;2\\cdot x-7=x+1&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x=8&amp; \\cr \\end{array}\\] Equiv <pre>[x^2-10*x+9 = 0, (x-5)^2-16 = \n0, (x-5)^2 =16, x-5 =#pm#4, x-\n5 =4 or x-5=-4, x = 1 or x = 9\n]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;x^2-10\\cdot x+9=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;{\\left(x-5\\right)}^2-16=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;{\\left(x-5\\right)}^2=16&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x-5= \\pm 4&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x-5=4\\,{\\text{ or }}\\, x-5=-4&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x=1\\,{\\text{ or }}\\, x=9&amp; \\cr \\end{array}\\] Equiv <pre>[x^2-2*p*x-q=0,x^2-2*p*x=q,x^2\n-2*p*x+p^2=q+p^2,(x-p)^2=q+p^2\n,x-p=#pm#sqrt(q+p^2),x-p=sqrt(\nq+p^2) or x-p=-sqrt(q+p^2),x=p\n+sqrt(q+p^2) or x=p-sqrt(q+p^2\n)]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;x^2-2\\cdot p\\cdot x-q=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x^2-2\\cdot p\\cdot x=q&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x^2-2\\cdot p\\cdot x+p^2=q+p^2&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;{\\left(x-p\\right)}^2=q+p^2&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x-p= \\pm \\sqrt{q+p^2}&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x-p=\\sqrt{q+p^2}\\,{\\text{ or }}\\, x-p=-\\sqrt{q+p^2}&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x=p+\\sqrt{q+p^2}\\,{\\text{ or }}\\, x=p-\\sqrt{q+p^2}&amp; \\cr \\end{array}\\] Equiv <pre>[x^2-10*x+7=0,(x-5)^2-18=0,(x-\n5)^2=sqrt(18)^2,(x-5)^2-sqrt(1\n8)^2=0,(x-5-sqrt(18))*(x-5+sqr\nt(18))=0,x=5-sqrt(18) or x=5+s\nqrt(18)]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;x^2-10\\cdot x+7=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;{\\left(x-5\\right)}^2-18=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;{\\left(x-5\\right)}^2={\\sqrt{18}}^2&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;{\\left(x-5\\right)}^2-{\\sqrt{18}}^2=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left(x-5-\\sqrt{18}\\right)\\cdot \\left(x-5+\\sqrt{18}\\right)=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x=5-\\sqrt{18}\\,{\\text{ or }}\\, x=5+\\sqrt{18}&amp; \\cr \\end{array}\\] Equiv <pre>[9*x^2/2-81*x/2+90=5*x^2/2-5*x\n-20,4*x^2-71*x+220 = 0,x = (71\n #pm# 39)/8,x=55/4 nounor x=4]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;\\frac{9\\cdot x^2}{2}-\\frac{81\\cdot x}{2}+90=\\frac{5\\cdot x^2}{2}-5\\cdot x-20&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;4\\cdot x^2-71\\cdot x+220=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x=\\frac{{71 \\pm 39}}{8}&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x=\\frac{55}{4}\\,{\\text{ or }}\\, x=4&amp; \\cr \\end{array}\\] Equiv <pre>[(x-4)*(x-7)=-3*(x-4),x-7=-3,x\n=4]</pre> <pre>[]</pre> 1 (EMPTYCHAR,SAMEROOTS, EQUIVCHAR) \\[\\begin{array}{lll} &amp;\\left(x-4\\right)\\cdot \\left(x-7\\right)=-3\\cdot \\left(x-4\\right)&amp; \\cr \\color{green}{\\text{(Same roots)}}&amp;x-7=-3&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x=4&amp; \\cr \\end{array}\\] Equiv <pre>[x^2+2*a*x = 0, x*(x+2*a)=0, (\nx+a-a)*(x+a+a)=0, (x+a)^2-a^2=\n0]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;x^2+2\\cdot a\\cdot x=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x\\cdot \\left(x+2\\cdot a\\right)=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left(x+a-a\\right)\\cdot \\left(x+a+a\\right)=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;{\\left(x+a\\right)}^2-a^2=0&amp; \\cr \\end{array}\\] Equiv <pre>[x^3-1=0,(x-1)*(x^2+x+1)=0,x=1\n]</pre> <pre>[]</pre> 0 (EMPTYCHAR, EQUIVCHAR,IMPLIEDCHAR) \\[\\begin{array}{lll} &amp;x^3-1=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left(x-1\\right)\\cdot \\left(x^2+x+1\\right)=0&amp; \\cr \\color{red}{\\Leftarrow}&amp;x=1&amp; \\cr \\end{array}\\] Equiv <pre>[x^3-1=0,(x-1)*(x^2+x+1)=0,x=1\n or x^2+x+1=0,x=1 or x = -(sqr\nt(3)*%i+1)/2 or x=(sqrt(3)*%i-\n1)/2]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;x^3-1=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left(x-1\\right)\\cdot \\left(x^2+x+1\\right)=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x=1\\,{\\text{ or }}\\, x^2+x+1=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x=1\\,{\\text{ or }}\\, x=\\frac{-\\left(\\sqrt{3}\\cdot \\mathrm{i}+1\\right)}{2}\\,{\\text{ or }}\\, x=\\frac{\\sqrt{3}\\cdot \\mathrm{i}-1}{2}&amp; \\cr \\end{array}\\] Equiv <pre>[a*x^2+b*x+c=0 or a=0,a^2*x^2+\na*b*x+a*c=0,(a*x)^2+b*(a*x)+a*\nc=0, (a*x)^2+b*(a*x)+b^2/4-b^2\n/4+a*c=0,(a*x+b/2)^2-b^2/4+a*c\n=0,(a*x+b/2)^2=b^2/4-a*c, a*x+\nb/2= #pm#sqrt(b^2/4-a*c),a*x=-\nb/2+sqrt(b^2/4-a*c) or a*x=-b/\n2-sqrt(b^2/4-a*c), (a=0 or x=(\n-b+sqrt(b^2-4*a*c))/(2*a)) or \n(a=0 or x=(-b-sqrt(b^2-4*a*c))\n/(2*a)), a^2=0 or x=(-b+sqrt(b\n^2-4*a*c))/(2*a) or x=(-b-sqrt\n(b^2-4*a*c))/(2*a)]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;a\\cdot x^2+b\\cdot x+c=0\\,{\\text{ or }}\\, a=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;a^2\\cdot x^2+a\\cdot b\\cdot x+a\\cdot c=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;{\\left(a\\cdot x\\right)}^2+b\\cdot \\left(a\\cdot x\\right)+a\\cdot c=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;{\\left(a\\cdot x\\right)}^2+b\\cdot \\left(a\\cdot x\\right)+\\frac{b^2}{4}-\\frac{b^2}{4}+a\\cdot c=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;{\\left(a\\cdot x+\\frac{b}{2}\\right)}^2-\\frac{b^2}{4}+a\\cdot c=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;{\\left(a\\cdot x+\\frac{b}{2}\\right)}^2=\\frac{b^2}{4}-a\\cdot c&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;a\\cdot x+\\frac{b}{2}= \\pm \\sqrt{\\frac{b^2}{4}-a\\cdot c}&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;a\\cdot x=-\\frac{b}{2}+\\sqrt{\\frac{b^2}{4}-a\\cdot c}\\,{\\text{ or }}\\, a\\cdot x=-\\frac{b}{2}-\\sqrt{\\frac{b^2}{4}-a\\cdot c}&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;a=0\\,{\\text{ or }}\\, x=\\frac{-b+\\sqrt{b^2-4\\cdot a\\cdot c}}{2\\cdot a}\\,{\\text{ or }}\\, \\left(a=0\\,{\\text{ or }}\\, x=\\frac{-b-\\sqrt{b^2-4\\cdot a\\cdot c}}{2\\cdot a}\\right)&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;a^2=0\\,{\\text{ or }}\\, x=\\frac{-b+\\sqrt{b^2-4\\cdot a\\cdot c}}{2\\cdot a}\\,{\\text{ or }}\\, x=\\frac{-b-\\sqrt{b^2-4\\cdot a\\cdot c}}{2\\cdot a}&amp; \\cr \\end{array}\\] Equiv <pre>[a*x^2+b*x=-c,4*a^2*x^2+4*a*b*\nx+b^2=b^2-4*a*c,(2*a*x+b)^2=b^\n2-4*a*c,2*a*x+b=#pm#sqrt(b^2-4\n*a*c),2*a*x=-b#pm#sqrt(b^2-4*a\n*c),x=(-b#pm#sqrt(b^2-4*a*c))/\n(2*a)]</pre> <pre>[]</pre> 0 (EMPTYCHAR,IMPLIESCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR,QMCHAR) \\[\\begin{array}{lll} &amp;a\\cdot x^2+b\\cdot x=-c&amp; \\cr \\color{red}{\\Rightarrow}&amp;4\\cdot a^2\\cdot x^2+4\\cdot a\\cdot b\\cdot x+b^2=b^2-4\\cdot a\\cdot c&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;{\\left(2\\cdot a\\cdot x+b\\right)}^2=b^2-4\\cdot a\\cdot c&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;2\\cdot a\\cdot x+b= \\pm \\sqrt{b^2-4\\cdot a\\cdot c}&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;2\\cdot a\\cdot x={-b \\pm \\sqrt{b^2-4\\cdot a\\cdot c}}&amp; \\cr \\color{red}{?}&amp;x=\\frac{{-b \\pm \\sqrt{b^2-4\\cdot a\\cdot c}}}{2\\cdot a}&amp; \\cr \\end{array}\\] Equiv <pre>[a*x^2+b*x=-c or a=0,4*a^2*x^2\n+4*a*b*x+b^2=b^2-4*a*c,(2*a*x+\nb)^2=b^2-4*a*c,2*a*x+b=#pm#sqr\nt(b^2-4*a*c),2*a*x=-b#pm#sqrt(\nb^2-4*a*c),x=(-b#pm#sqrt(b^2-4\n*a*c))/(2*a) or a=0]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;a\\cdot x^2+b\\cdot x=-c\\,{\\text{ or }}\\, a=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;4\\cdot a^2\\cdot x^2+4\\cdot a\\cdot b\\cdot x+b^2=b^2-4\\cdot a\\cdot c&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;{\\left(2\\cdot a\\cdot x+b\\right)}^2=b^2-4\\cdot a\\cdot c&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;2\\cdot a\\cdot x+b= \\pm \\sqrt{b^2-4\\cdot a\\cdot c}&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;2\\cdot a\\cdot x={-b \\pm \\sqrt{b^2-4\\cdot a\\cdot c}}&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x=\\frac{{-b \\pm \\sqrt{b^2-4\\cdot a\\cdot c}}}{2\\cdot a}\\,{\\text{ or }}\\, a=0&amp; \\cr \\end{array}\\] Equiv <pre>[sqrt(3*x+4) = 2+sqrt(x+2), 3*\nx+4=4+4*sqrt(x+2)+(x+2),x-1=2*\nsqrt(x+2),x^2-2*x+1 = 4*x+8,x^\n2-6*x-7 = 0,(x-7)*(x+1) = 0,x=\n7 or x=-1]</pre> <pre>[]</pre> 0 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR,IMPLIESCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;\\sqrt{3\\cdot x+4}=2+\\sqrt{x+2}&amp;{\\color{blue}{{x \\in {\\left[ -\\frac{4}{3},\\, \\infty \\right)}}}}\\cr \\color{green}{\\Leftrightarrow}&amp;3\\cdot x+4=4+4\\cdot \\sqrt{x+2}+\\left(x+2\\right)&amp;{\\color{blue}{{x \\in {\\left[ -2,\\, \\infty \\right)}}}}\\cr \\color{green}{\\Leftrightarrow}&amp;x-1=2\\cdot \\sqrt{x+2}&amp;{\\color{blue}{{x \\in {\\left[ -2,\\, \\infty \\right)}}}}\\cr \\color{red}{\\Rightarrow}&amp;x^2-2\\cdot x+1=4\\cdot x+8&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x^2-6\\cdot x-7=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left(x-7\\right)\\cdot \\left(x+1\\right)=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x=7\\,{\\text{ or }}\\, x=-1&amp; \\cr \\end{array}\\] Equiv <pre>[sqrt(3*x+4) = 2+sqrt(x+2), 3*\nx+4=4+4*sqrt(x+2)+(x+2),x-1=2*\nsqrt(x+2),x^2-2*x+1 = 4*x+8,x^\n2-6*x-7 = 0,(x-7)*(x+1) = 0,x=\n7 or x=-1,x=7]</pre> <pre>[]</pre> <pre>[assumepos]</pre> 1 (ASSUMEPOSVARS, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll}\\color{blue}{\\text{Assume +ve vars}}&amp;\\sqrt{3\\cdot x+4}=2+\\sqrt{x+2}&amp;{\\color{blue}{{x \\in {\\left[ 0,\\, \\infty \\right)}}}}\\cr \\color{green}{\\Leftrightarrow}&amp;3\\cdot x+4=4+4\\cdot \\sqrt{x+2}+\\left(x+2\\right)&amp;{\\color{blue}{{x \\in {\\left[ 0,\\, \\infty \\right)}}}}\\cr \\color{green}{\\Leftrightarrow}&amp;x-1=2\\cdot \\sqrt{x+2}&amp;{\\color{blue}{{x \\in {\\left[ 0,\\, \\infty \\right)}}}}\\cr \\color{green}{\\Leftrightarrow}&amp;x^2-2\\cdot x+1=4\\cdot x+8&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x^2-6\\cdot x-7=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left(x-7\\right)\\cdot \\left(x+1\\right)=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x=7\\,{\\text{ or }}\\, x=-1&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x=7&amp; \\cr \\end{array}\\] Equiv <pre>[x*(x-1)*(x-2)=0,x*(x-1)=0,x*(\nx-1)*(x-2)=0,x*(x^2-2)=0]</pre> <pre>[]</pre> 0 (EMPTYCHAR,IMPLIEDCHAR,IMPLIESCHAR,QMCHAR) \\[\\begin{array}{lll} &amp;x\\cdot \\left(x-1\\right)\\cdot \\left(x-2\\right)=0&amp; \\cr \\color{red}{\\Leftarrow}&amp;x\\cdot \\left(x-1\\right)=0&amp; \\cr \\color{red}{\\Rightarrow}&amp;x\\cdot \\left(x-1\\right)\\cdot \\left(x-2\\right)=0&amp; \\cr \\color{red}{?}&amp;x\\cdot \\left(x^2-2\\right)=0&amp; \\cr \\end{array}\\] Equiv <pre>[x^2-6*x=-9,x=3]</pre> <pre>[]</pre> 1 (EMPTYCHAR,SAMEROOTS) \\[\\begin{array}{lll} &amp;x^2-6\\cdot x=-9&amp; \\cr \\color{green}{\\text{(Same roots)}}&amp;x=3&amp; \\cr \\end{array}\\] Equiv <pre>[x=1 nounor x=-2 nounor x=1,x^\n3-3*x=-2,x=1 nounor x=-2]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR,SAMEROOTS) \\[\\begin{array}{lll} &amp;x=1\\,{\\text{ or }}\\, x=-2\\,{\\text{ or }}\\, x=1&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x^3-3\\cdot x=-2&amp; \\cr \\color{green}{\\text{(Same roots)}}&amp;x=1\\,{\\text{ or }}\\, x=-2&amp; \\cr \\end{array}\\] Equiv <pre>[9*x^3-24*x^2+13*x=2,x=1/3 nou\nnor x=2]</pre> <pre>[]</pre> 1 (EMPTYCHAR,SAMEROOTS) \\[\\begin{array}{lll} &amp;9\\cdot x^3-24\\cdot x^2+13\\cdot x=2&amp; \\cr \\color{green}{\\text{(Same roots)}}&amp;x=\\frac{1}{3}\\,{\\text{ or }}\\, x=2&amp; \\cr \\end{array}\\] Equiv <pre>[(x-2)^43*(x+1/3)^60=0,(3*x+1)\n^4*(x-2)^2=0,x=-1/3 nounor x=2\n]</pre> <pre>[]</pre> 1 (EMPTYCHAR,SAMEROOTS,SAMEROOTS) \\[\\begin{array}{lll} &amp;{\\left(x-2\\right)}^{43}\\cdot {\\left(x+\\frac{1}{3}\\right)}^{60}=0&amp; \\cr \\color{green}{\\text{(Same roots)}}&amp;{\\left(3\\cdot x+1\\right)}^4\\cdot {\\left(x-2\\right)}^2=0&amp; \\cr \\color{green}{\\text{(Same roots)}}&amp;x=\\frac{-1}{3}\\,{\\text{ or }}\\, x=2&amp; \\cr \\end{array}\\] Equiv <pre>[2^x=4,x*log(2)=log(4),x=log(2\n^2)/log(2),x=2*log(2)/log(2),x\n=2]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;2^{x}=4&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x\\cdot \\ln \\left( 2 \\right)=\\ln \\left( 4 \\right)&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x=\\frac{\\ln \\left( 2^2 \\right)}{\\ln \\left( 2 \\right)}&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x=\\frac{2\\cdot \\ln \\left( 2 \\right)}{\\ln \\left( 2 \\right)}&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x=2&amp; \\cr \\end{array}\\] Equiv <pre>[x^log(y),stackeq(e^(log(x)*lo\ng(y))),stackeq(e^(log(y)*log(x\n))),stackeq(y^log(x))]</pre> <pre>[]</pre> 1 (EMPTYCHAR, CHECKMARK, CHECKMARK, CHECKMARK) \\[\\begin{array}{lll} &amp;x^{\\ln \\left( y \\right)}&amp; \\cr \\color{green}{\\checkmark}&amp;=e^{\\ln \\left( x \\right)\\cdot \\ln \\left( y \\right)}&amp; \\cr \\color{green}{\\checkmark}&amp;=e^{\\ln \\left( y \\right)\\cdot \\ln \\left( x \\right)}&amp; \\cr \\color{green}{\\checkmark}&amp;=y^{\\ln \\left( x \\right)}&amp; \\cr \\end{array}\\] Equiv <pre>[lg(x+17,3)-2=lg(2*x,3),lg(x+1\n7,3)-lg(2*x,3)=2,lg((x+17)/(2*\nx),3)=2,(x+17)/(2*x)=3^2,(x+17\n)=18*x,17*x=17,x=1]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;\\log_{3}\\left(x+17\\right)-2=\\log_{3}\\left(2\\cdot x\\right)&amp;{\\color{blue}{{x \\in {\\left( 0,\\, \\infty \\right)}}}}\\cr \\color{green}{\\Leftrightarrow}&amp;\\log_{3}\\left(x+17\\right)-\\log_{3}\\left(2\\cdot x\\right)=2&amp;{\\color{blue}{{x \\in {\\left( 0,\\, \\infty \\right)}}}}\\cr \\color{green}{\\Leftrightarrow}&amp;\\log_{3}\\left(\\frac{x+17}{2\\cdot x}\\right)=2&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\frac{x+17}{2\\cdot x}=3^2&amp;{\\color{blue}{{x \\not\\in {\\left \\{0 \\right \\}}}}}\\cr \\color{green}{\\Leftrightarrow}&amp;x+17=18\\cdot x&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;17\\cdot x=17&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x=1&amp; \\cr \\end{array}\\] Equiv <pre>[lg((x+17)/(-2*x),2)=3,(x+17)/\n(-2*x)=2^3,(x+17)=2^3*(-2*x),x\n+17=-16*x,17*x=-17,x=-1]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;\\log_{2}\\left(\\frac{x+17}{-2\\cdot x}\\right)=3&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\frac{x+17}{-2\\cdot x}=2^3&amp;{\\color{blue}{{x \\not\\in {\\left \\{0 \\right \\}}}}}\\cr \\color{green}{\\Leftrightarrow}&amp;x+17=2^3\\cdot \\left(-2\\cdot x\\right)&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x+17=-16\\cdot x&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;17\\cdot x=-17&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x=-1&amp; \\cr \\end{array}\\] Equiv <pre>[a=logbase(9,3),3^a=9,3^a=3^2,\na=2]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;a=\\log_{3}\\left(9\\right)&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;3^{a}=9&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;3^{a}=3^2&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;a=2&amp; \\cr \\end{array}\\] Equiv <pre>[x=(1+y/n)^n,x^(1/n)=(1+y/n),y\n/n=x^(1/n)-1,y=n*(x^(1/n)-1)]</pre> <pre>[]</pre> 0 (EMPTYCHAR,QMCHAR, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;x={\\left(1+\\frac{y}{n}\\right)}^{n}&amp; \\cr \\color{red}{?}&amp;x^{\\frac{1}{n}}=1+\\frac{y}{n}&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\frac{y}{n}=x^{\\frac{1}{n}}-1&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;y=n\\cdot \\left(x^{\\frac{1}{n}}-1\\right)&amp; \\cr \\end{array}\\] Equiv <pre>[a^3=b^3,a^3-b^3=0,(a-b)*(a^2+\na*b+b^2)=0,(a-b)=0,a=b]</pre> <pre>[]</pre> <pre>[assumereal]</pre> 0 (ASSUMEREALVARS, EQUIVCHAR, EQUIVCHAR,IMPLIEDCHAR, EQUIVCHAR) \\[\\begin{array}{lll}\\color{blue}{(\\mathbb{R})}&amp;a^3=b^3&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;a^3-b^3=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left(a-b\\right)\\cdot \\left(a^2+a\\cdot b+b^2\\right)=0&amp; \\cr \\color{red}{\\Leftarrow}&amp;a-b=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;a=b&amp; \\cr \\end{array}\\] Equiv <pre>[x^3-1=0,(x-1)*(x^2+x+1)=0,x=1\n]</pre> <pre>[]</pre> <pre>[assumereal]</pre> 1 (ASSUMEREALVARS, EQUIVCHAR, EQUIVCHARREAL) \\[\\begin{array}{lll}\\color{blue}{(\\mathbb{R})}&amp;x^3-1=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left(x-1\\right)\\cdot \\left(x^2+x+1\\right)=0&amp; \\cr \\color{green}{\\Leftrightarrow}\\, \\color{blue}{(\\mathbb{R})}&amp;x=1&amp; \\cr \\end{array}\\] Equiv <pre>[x^4=2,x^4-2=0,(x^2-sqrt(2))*(\nx^2+sqrt(2))=0,x^2=sqrt(2),x=#\npm# 2^(1/4)]</pre> <pre>[]</pre> <pre>[assumereal]</pre> 1 (ASSUMEREALVARS, EQUIVCHAR, EQUIVCHAR, EQUIVCHARREAL, EQUIVCHAR) \\[\\begin{array}{lll}\\color{blue}{(\\mathbb{R})}&amp;x^4=2&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x^4-2=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left(x^2-\\sqrt{2}\\right)\\cdot \\left(x^2+\\sqrt{2}\\right)=0&amp; \\cr \\color{green}{\\Leftrightarrow}\\, \\color{blue}{(\\mathbb{R})}&amp;x^2=\\sqrt{2}&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x= \\pm 2^{\\frac{1}{4}}&amp; \\cr \\end{array}\\] Equiv <pre>[6*x-12=3*(x-2),6*x-12+3*(x-2)\n=0,9*x-18=0,x=2]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;6\\cdot x-12=3\\cdot \\left(x-2\\right)&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;6\\cdot x-12+3\\cdot \\left(x-2\\right)=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;9\\cdot x-18=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x=2&amp; \\cr \\end{array}\\] Equiv <pre>[x^2-6*x+9=0,x^2-6*x=-9,x*(x-6\n)=3*-3,x=3 or x-6=-3,x=3]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR,SAMEROOTS) \\[\\begin{array}{lll} &amp;x^2-6\\cdot x+9=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x^2-6\\cdot x=-9&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x\\cdot \\left(x-6\\right)=3\\cdot \\left(-3\\right)&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x=3\\,{\\text{ or }}\\, x-6=-3&amp; \\cr \\color{green}{\\text{(Same roots)}}&amp;x=3&amp; \\cr \\end{array}\\] Equiv <pre>[(x+3)*(2-x)=4,x+3=4 or (2-x)=\n4,x=1 or x=-2]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;\\left(x+3\\right)\\cdot \\left(2-x\\right)=4&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x+3=4\\,{\\text{ or }}\\, 2-x=4&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x=1\\,{\\text{ or }}\\, x=-2&amp; \\cr \\end{array}\\] Equiv <pre>[(x-p)*(x-q)=0,x^2-p*x-q*x+p*q\n=0,1+q-x-p-p*q+p*x+x+q*x-x^2=1\n-p+q,(1+q-x)*(1-p+x)=1-p+q,(1+\nq-x)=1-p+q or (1-p+x)=1-p+q,x=\np or x=q]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;\\left(x-p\\right)\\cdot \\left(x-q\\right)=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x^2-p\\cdot x+\\left(-q\\right)\\cdot x+p\\cdot q=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;1+q-x-p+\\left(-p\\right)\\cdot q+p\\cdot x+x+q\\cdot x-x^2=1-p+q&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left(1+q-x\\right)\\cdot \\left(1-p+x\\right)=1-p+q&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;1+q-x=1-p+q\\,{\\text{ or }}\\, 1-p+x=1-p+q&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x=p\\,{\\text{ or }}\\, x=q&amp; \\cr \\end{array}\\] Equiv <pre>[a=b, a^2=a*b, a^2-b^2=a*b-b^2\n, (a-b)*(a+b)=b*(a-b), a+b=b, \n2*a=a, 1=2]</pre> <pre>[]</pre> 0 (EMPTYCHAR,IMPLIESCHAR, EQUIVCHAR, EQUIVCHAR,IMPLIEDCHAR, EQUIVCHAR,IMPLIEDCHAR) \\[\\begin{array}{lll} &amp;a=b&amp; \\cr \\color{red}{\\Rightarrow}&amp;a^2=a\\cdot b&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;a^2-b^2=a\\cdot b-b^2&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left(a-b\\right)\\cdot \\left(a+b\\right)=b\\cdot \\left(a-b\\right)&amp; \\cr \\color{red}{\\Leftarrow}&amp;a+b=b&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;2\\cdot a=a&amp; \\cr \\color{red}{\\Leftarrow}&amp;1=2&amp; \\cr \\end{array}\\] Equiv <pre>[a=b or a=0, a^2=a*b, a^2-b^2=\na*b-b^2, (a-b)*(a+b)=b*(a-b), \na+b=b or a-b=0, 2*a=a or a=b, \n2=1 or a=0 or a=b, a=0 or a=b]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;a=b\\,{\\text{ or }}\\, a=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;a^2=a\\cdot b&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;a^2-b^2=a\\cdot b-b^2&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left(a-b\\right)\\cdot \\left(a+b\\right)=b\\cdot \\left(a-b\\right)&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;a+b=b\\,{\\text{ or }}\\, a-b=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;2\\cdot a=a\\,{\\text{ or }}\\, a=b&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;2=1\\,{\\text{ or }}\\, a=0\\,{\\text{ or }}\\, a=b&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;a=0\\,{\\text{ or }}\\, a=b&amp; \\cr \\end{array}\\] Equiv <pre>[(x^2-4)/(x-2)=0,(x-2)*(x+2)/(\nx-2)=0,x+2=0,x=-2]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;\\frac{x^2-4}{x-2}=0&amp;{\\color{blue}{{x \\not\\in {\\left \\{2 \\right \\}}}}}\\cr \\color{green}{\\Leftrightarrow}&amp;\\frac{\\left(x-2\\right)\\cdot \\left(x+2\\right)}{x-2}=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x+2=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x=-2&amp; \\cr \\end{array}\\] Equiv <pre>[(x^2-4)/(x-2)=0,(x^2-4)=0,(x-\n2)*(x+2)=0,x=-2 or x=2]</pre> <pre>[]</pre> 0 (EMPTYCHAR,IMPLIESCHAR, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;\\frac{x^2-4}{x-2}=0&amp;{\\color{blue}{{x \\not\\in {\\left \\{2 \\right \\}}}}}\\cr \\color{red}{\\Rightarrow}&amp;x^2-4=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left(x-2\\right)\\cdot \\left(x+2\\right)=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x=-2\\,{\\text{ or }}\\, x=2&amp; \\cr \\end{array}\\] Equiv <pre>[5*x/(2*x+1)-3/(x+1) = 1,5*x*(\nx+1)-3*(2*x+1)=(x+1)*(2*x+1),5\n*x^2+5*x-6*x-3=2*x^2+3*x+1,3*x\n^2-4*x-4=0,(x-2)*(3*x+2)=0,x=2\n or x=-2/3]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;\\frac{5\\cdot x}{2\\cdot x+1}-\\frac{3}{x+1}=1&amp;{\\color{blue}{{x \\not\\in {\\left \\{-1 , -\\frac{1}{2} \\right \\}}}}}\\cr \\color{green}{\\Leftrightarrow}&amp;5\\cdot x\\cdot \\left(x+1\\right)-3\\cdot \\left(2\\cdot x+1\\right)=\\left(x+1\\right)\\cdot \\left(2\\cdot x+1\\right)&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;5\\cdot x^2+5\\cdot x-6\\cdot x-3=2\\cdot x^2+3\\cdot x+1&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;3\\cdot x^2-4\\cdot x-4=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left(x-2\\right)\\cdot \\left(3\\cdot x+2\\right)=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x=2\\,{\\text{ or }}\\, x=\\frac{-2}{3}&amp; \\cr \\end{array}\\] Equiv <pre>[(x+10)/(x-6)-5= (4*x-40)/(13-\nx),(x+10-5*(x-6))/(x-6)= (4*x-\n40)/(13-x), (4*x-40)/(6-x)= (4\n*x-40)/(13-x),6-x= 13-x,6= 13]</pre> <pre>[]</pre> 0 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR,QMCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;\\frac{x+10}{x-6}-5=\\frac{4\\cdot x-40}{13-x}&amp;{\\color{blue}{{x \\not\\in {\\left \\{6 , 13 \\right \\}}}}}\\cr \\color{green}{\\Leftrightarrow}&amp;\\frac{x+10-5\\cdot \\left(x-6\\right)}{x-6}=\\frac{4\\cdot x-40}{13-x}&amp;{\\color{blue}{{x \\not\\in {\\left \\{6 , 13 \\right \\}}}}}\\cr \\color{green}{\\Leftrightarrow}&amp;\\frac{4\\cdot x-40}{6-x}=\\frac{4\\cdot x-40}{13-x}&amp;{\\color{blue}{{x \\not\\in {\\left \\{6 , 13 \\right \\}}}}}\\cr \\color{red}{?}&amp;6-x=13-x&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;6=13&amp; \\cr \\end{array}\\] Equiv <pre>[(x+5)/(x-7)-5= (4*x-40)/(13-x\n),(x+5-5*(x-7))/(x-7)= (4*x-40\n)/(13-x), (4*x-40)/(7-x)= (4*x\n-40)/(13-x),7-x= 13-x,7= 13]</pre> <pre>[]</pre> 0 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR,IMPLIEDCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;\\frac{x+5}{x-7}-5=\\frac{4\\cdot x-40}{13-x}&amp;{\\color{blue}{{x \\not\\in {\\left \\{7 , 13 \\right \\}}}}}\\cr \\color{green}{\\Leftrightarrow}&amp;\\frac{x+5-5\\cdot \\left(x-7\\right)}{x-7}=\\frac{4\\cdot x-40}{13-x}&amp;{\\color{blue}{{x \\not\\in {\\left \\{7 , 13 \\right \\}}}}}\\cr \\color{green}{\\Leftrightarrow}&amp;\\frac{4\\cdot x-40}{7-x}=\\frac{4\\cdot x-40}{13-x}&amp;{\\color{blue}{{x \\not\\in {\\left \\{7 , 13 \\right \\}}}}}\\cr \\color{red}{\\Leftarrow}&amp;7-x=13-x&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;7=13&amp; \\cr \\end{array}\\] Equiv <pre>[(x+5)/(x-7)-5= (4*x-40)/(13-x\n),(x+5-5*(x-7))/(x-7)= (4*x-40\n)/(13-x), (4*x-40)/(7-x)= (4*x\n-40)/(13-x),7-x= 13-x or 4*x-4\n0=0,7= 13 or 4*x=40,x=10]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;\\frac{x+5}{x-7}-5=\\frac{4\\cdot x-40}{13-x}&amp;{\\color{blue}{{x \\not\\in {\\left \\{7 , 13 \\right \\}}}}}\\cr \\color{green}{\\Leftrightarrow}&amp;\\frac{x+5-5\\cdot \\left(x-7\\right)}{x-7}=\\frac{4\\cdot x-40}{13-x}&amp;{\\color{blue}{{x \\not\\in {\\left \\{7 , 13 \\right \\}}}}}\\cr \\color{green}{\\Leftrightarrow}&amp;\\frac{4\\cdot x-40}{7-x}=\\frac{4\\cdot x-40}{13-x}&amp;{\\color{blue}{{x \\not\\in {\\left \\{7 , 13 \\right \\}}}}}\\cr \\color{green}{\\Leftrightarrow}&amp;7-x=13-x\\,{\\text{ or }}\\, 4\\cdot x-40=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;7=13\\,{\\text{ or }}\\, 4\\cdot x=40&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x=10&amp; \\cr \\end{array}\\] Equiv <pre>[1/(a-b)-1/(b-a),stackeq(1/(a-\nb)+1/(b-a))]</pre> <pre>[]</pre> 0 (EMPTYCHAR,QMCHAR) \\[\\begin{array}{lll} &amp;\\frac{1}{a-b}-\\frac{1}{b-a}&amp; \\cr \\color{red}{?}&amp;=\\frac{1}{a-b}+\\frac{1}{b-a}&amp; \\cr \\end{array}\\] Equiv <pre>[a*x^2+b*x+c=0,a=0 nounand b=0\n nounand c=0,a*x^2+b*x+c=0]</pre> <pre>[]</pre> 1 (EMPTYCHAR,EQUATECOEFFLOSS(x),EQUATECOEFFGAIN(x)) \\[\\begin{array}{lll} &amp;a\\cdot x^2+b\\cdot x+c=0&amp; \\cr \\color{green}{\\equiv (\\cdots ? x)}&amp;\\left\\{\\begin{array}{l}a=0\\cr b=0\\cr c=0\\cr \\end{array}\\right.&amp; \\cr \\color{green}{(\\cdots ? x)\\equiv}&amp;a\\cdot x^2+b\\cdot x+c=0&amp; \\cr \\end{array}\\] Equiv <pre>[a*x^2+b*x+c=A*x^2+B*x+C,a=A n\nounand b=B nounand c=C,a*x^2+b\n*x+c=A*x^2+B*x+C]</pre> <pre>[]</pre> 1 (EMPTYCHAR,EQUATECOEFFLOSS(x),EQUATECOEFFGAIN(x)) \\[\\begin{array}{lll} &amp;a\\cdot x^2+b\\cdot x+c=A\\cdot x^2+B\\cdot x+C&amp; \\cr \\color{green}{\\equiv (\\cdots ? x)}&amp;\\left\\{\\begin{array}{l}a=A\\cr b=B\\cr c=C\\cr \\end{array}\\right.&amp; \\cr \\color{green}{(\\cdots ? x)\\equiv}&amp;a\\cdot x^2+b\\cdot x+c=A\\cdot x^2+B\\cdot x+C&amp; \\cr \\end{array}\\] Equiv <pre>[x+1,stackeq((x+1)^2),stackeq(\n(x+1)^3),stackeq((x+1))]</pre> <pre>[]</pre> 0 (EMPTYCHAR,QMCHAR,QMCHAR,QMCHAR) \\[\\begin{array}{lll} &amp;x+1&amp; \\cr \\color{red}{?}&amp;={\\left(x+1\\right)}^2&amp; \\cr \\color{red}{?}&amp;={\\left(x+1\\right)}^3&amp; \\cr \\color{red}{?}&amp;=x+1&amp; \\cr \\end{array}\\] Equiv <pre>[x+1=0,(x+1)^2=0,(x+1)^3=0,(x+\n1)=0]</pre> <pre>[]</pre> <pre>[assumereal]</pre> 1 (ASSUMEREALVARS,SAMEROOTS,SAMEROOTS,SAMEROOTS) \\[\\begin{array}{lll}\\color{blue}{(\\mathbb{R})}&amp;x+1=0&amp; \\cr \\color{green}{\\text{(Same roots)}}&amp;{\\left(x+1\\right)}^2=0&amp; \\cr \\color{green}{\\text{(Same roots)}}&amp;{\\left(x+1\\right)}^3=0&amp; \\cr \\color{green}{\\text{(Same roots)}}&amp;x+1=0&amp; \\cr \\end{array}\\] Equiv <pre>[x+1=0,(x+1)^2=0,0=x+1,0=(x+1)\n^3]</pre> <pre>[]</pre> <pre>[assumereal]</pre> 1 (ASSUMEREALVARS,SAMEROOTS,SAMEROOTS,SAMEROOTS) \\[\\begin{array}{lll}\\color{blue}{(\\mathbb{R})}&amp;x+1=0&amp; \\cr \\color{green}{\\text{(Same roots)}}&amp;{\\left(x+1\\right)}^2=0&amp; \\cr \\color{green}{\\text{(Same roots)}}&amp;0=x+1&amp; \\cr \\color{green}{\\text{(Same roots)}}&amp;0={\\left(x+1\\right)}^3&amp; \\cr \\end{array}\\] Equiv <pre>[8=x^3,2=x,x=2,x^3=8]</pre> <pre>[]</pre> <pre>[assumereal]</pre> 1 (ASSUMEREALVARS, EQUIVCHARREAL, EQUIVCHAR, EQUIVCHARREAL) \\[\\begin{array}{lll}\\color{blue}{(\\mathbb{R})}&amp;8=x^3&amp; \\cr \\color{green}{\\Leftrightarrow}\\, \\color{blue}{(\\mathbb{R})}&amp;2=x&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x=2&amp; \\cr \\color{green}{\\Leftrightarrow}\\, \\color{blue}{(\\mathbb{R})}&amp;x^3=8&amp; \\cr \\end{array}\\] Equiv <pre>[16=x^4,#pm#2=x,x^4=16,x=#pm#2\n]</pre> <pre>[]</pre> <pre>[assumereal]</pre> 1 (ASSUMEREALVARS, EQUIVCHARREAL, EQUIVCHARREAL, EQUIVCHARREAL) \\[\\begin{array}{lll}\\color{blue}{(\\mathbb{R})}&amp;16=x^4&amp; \\cr \\color{green}{\\Leftrightarrow}\\, \\color{blue}{(\\mathbb{R})}&amp; \\pm 2=x&amp; \\cr \\color{green}{\\Leftrightarrow}\\, \\color{blue}{(\\mathbb{R})}&amp;x^4=16&amp; \\cr \\color{green}{\\Leftrightarrow}\\, \\color{blue}{(\\mathbb{R})}&amp;x= \\pm 2&amp; \\cr \\end{array}\\] Equiv <pre>[(x-1)*(x+4), stackeq(x^2-x+4*\nx-4),stackeq(x^2+3*x-4)]</pre> <pre>[]</pre> 1 (EMPTYCHAR, CHECKMARK, CHECKMARK) \\[\\begin{array}{lll} &amp;\\left(x-1\\right)\\cdot \\left(x+4\\right)&amp; \\cr \\color{green}{\\checkmark}&amp;=x^2-x+4\\cdot x-4&amp; \\cr \\color{green}{\\checkmark}&amp;=x^2+3\\cdot x-4&amp; \\cr \\end{array}\\] Equiv <pre>[x^2-2,stackeq((x-sqrt(2))*(x+\nsqrt(2)))]</pre> <pre>[]</pre> 1 (EMPTYCHAR, CHECKMARK) \\[\\begin{array}{lll} &amp;x^2-2&amp; \\cr \\color{green}{\\checkmark}&amp;=\\left(x-\\sqrt{2}\\right)\\cdot \\left(x+\\sqrt{2}\\right)&amp; \\cr \\end{array}\\] Equiv <pre>[x^2+4,stackeq((x-2*i)*(x+2*i)\n)]</pre> <pre>[]</pre> 1 (EMPTYCHAR, CHECKMARK) \\[\\begin{array}{lll} &amp;x^2+4&amp; \\cr \\color{green}{\\checkmark}&amp;=\\left(x-2\\cdot \\mathrm{i}\\right)\\cdot \\left(x+2\\cdot \\mathrm{i}\\right)&amp; \\cr \\end{array}\\] Equiv <pre>[x^2+2*a*x,x^2+2*a*x+a^2-a^2,(\nx+a)^2-a^2]</pre> <pre>[]</pre> 1 (EMPTYCHAR, CHECKMARK, CHECKMARK) \\[\\begin{array}{lll} &amp;x^2+2\\cdot a\\cdot x&amp; \\cr \\color{green}{\\checkmark}&amp;x^2+2\\cdot a\\cdot x+a^2-a^2&amp; \\cr \\color{green}{\\checkmark}&amp;{\\left(x+a\\right)}^2-a^2&amp; \\cr \\end{array}\\] Equiv <pre>[x^2+2*a*x,stackeq(x^2+2*a*x+a\n^2-a^2),stackeq((x+a)^2-a^2)]</pre> <pre>[]</pre> 1 (EMPTYCHAR, CHECKMARK, CHECKMARK) \\[\\begin{array}{lll} &amp;x^2+2\\cdot a\\cdot x&amp; \\cr \\color{green}{\\checkmark}&amp;=x^2+2\\cdot a\\cdot x+a^2-a^2&amp; \\cr \\color{green}{\\checkmark}&amp;={\\left(x+a\\right)}^2-a^2&amp; \\cr \\end{array}\\] Equiv <pre>[(y-z)/(y*z)+(z-x)/(z*x)+(x-y)\n/(x*y),(x*(y-z)+y*(z-x)+z*(x-y\n))/(x*y*z),0]</pre> <pre>[]</pre> 1 (EMPTYCHAR, CHECKMARK, CHECKMARK) \\[\\begin{array}{lll} &amp;\\frac{y-z}{y\\cdot z}+\\frac{z-x}{z\\cdot x}+\\frac{x-y}{x\\cdot y}&amp; \\cr \\color{green}{\\checkmark}&amp;\\frac{x\\cdot \\left(y-z\\right)+y\\cdot \\left(z-x\\right)+z\\cdot \\left(x-y\\right)}{x\\cdot y\\cdot z}&amp; \\cr \\color{green}{\\checkmark}&amp;0&amp; \\cr \\end{array}\\] Equiv <pre>[(y-z)/(y*z)+(z-x)/(z*x)+(x-y)\n/(x*y),stackeq((x*(y-z)+y*(z-x\n)+z*(x-y))/(x*y*z)),stackeq(0)\n]</pre> <pre>[]</pre> 1 (EMPTYCHAR, CHECKMARK, CHECKMARK) \\[\\begin{array}{lll} &amp;\\frac{y-z}{y\\cdot z}+\\frac{z-x}{z\\cdot x}+\\frac{x-y}{x\\cdot y}&amp; \\cr \\color{green}{\\checkmark}&amp;=\\frac{x\\cdot \\left(y-z\\right)+y\\cdot \\left(z-x\\right)+z\\cdot \\left(x-y\\right)}{x\\cdot y\\cdot z}&amp; \\cr \\color{green}{\\checkmark}&amp;=0&amp; \\cr \\end{array}\\] Equiv <pre>[2*(a^2*b^2+b^2*c^2+c^2*a^2)-(\na^4+b^4+c^4),stackeq(4*a^2*b^2\n-(a^4+b^4+c^4+2*a^2*b^2-2*b^2*\nc^2-2*c^2*a^2)),stackeq((2*a*b\n)^2-(b^2+a^2-c^2)^2,(2*a*b+b^2\n+a^2-c^2)*(2*a*b-b^2-a^2+c^2))\n,stackeq(((a+b)^2-c^2)*(c^2-(a\n-b)^2)),stackeq((a+b+c)*(a+b-c\n)*(c+a-b)*(c-a+b))]</pre> <pre>[]</pre> 1 (EMPTYCHAR, CHECKMARK, CHECKMARK, CHECKMARK, CHECKMARK) \\[\\begin{array}{lll} &amp;2\\cdot \\left(a^2\\cdot b^2+b^2\\cdot c^2+c^2\\cdot a^2\\right)-\\left(a^4+b^4+c^4\\right)&amp; \\cr \\color{green}{\\checkmark}&amp;=4\\cdot a^2\\cdot b^2-\\left(a^4+b^4+c^4+2\\cdot a^2\\cdot b^2-2\\cdot b^2\\cdot c^2-2\\cdot c^2\\cdot a^2\\right)&amp; \\cr \\color{green}{\\checkmark}&amp;={\\left(2\\cdot a\\cdot b\\right)}^2-{\\left(b^2+a^2-c^2\\right)}^2&amp; \\cr \\color{green}{\\checkmark}&amp;=\\left({\\left(a+b\\right)}^2-c^2\\right)\\cdot \\left(c^2-{\\left(a-b\\right)}^2\\right)&amp; \\cr \\color{green}{\\checkmark}&amp;=\\left(a+b+c\\right)\\cdot \\left(a+b-c\\right)\\cdot \\left(c+a-b\\right)\\cdot \\left(c-a+b\\right)&amp; \\cr \\end{array}\\] Equiv <pre>[abs(x-1/2)+abs(x+1/2)-2,stack\neq(abs(x)-1)]</pre> <pre>[]</pre> 0 (EMPTYCHAR,QMCHAR) \\[\\begin{array}{lll} &amp;\\left| x-\\frac{1}{2}\\right| +\\left| x+\\frac{1}{2}\\right| -2&amp; \\cr \\color{red}{?}&amp;=\\left| x\\right| -1&amp; \\cr \\end{array}\\] Equiv <pre>[11*sqrt(abs(x)+1)=25-x,11^2*(\nabs(x)+1)=(25-x)^2,11^2*abs(x)\n=(25-x)^2-11^2,11^4*x^2=((25-x\n)^2-11^2)^2, ((25-x)^2-11^2)^2\n-11^4*x^2=0,((25-x)^2-11^2-11^\n2*x)*((25-x)^2-11^2+11^2*x)=0,\n(x^2-50*x+504-121*x)*(x^2-50*x\n+504+121*x)=0, (x-168)*(x-3)*(\nx+8)*(x+63)=0]</pre> <pre>[]</pre> 0 (EMPTYCHAR,QMCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;11\\cdot \\sqrt{\\left| x\\right| +1}=25-x&amp; \\cr \\color{red}{?}&amp;11^2\\cdot \\left(\\left| x\\right| +1\\right)={\\left(25-x\\right)}^2&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;11^2\\cdot \\left| x\\right| ={\\left(25-x\\right)}^2-11^2&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;11^4\\cdot x^2={\\left({\\left(25-x\\right)}^2-11^2\\right)}^2&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;{\\left({\\left(25-x\\right)}^2-11^2\\right)}^2-11^4\\cdot x^2=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left({\\left(25-x\\right)}^2-11^2+\\left(-11^2\\right)\\cdot x\\right)\\cdot \\left({\\left(25-x\\right)}^2-11^2+11^2\\cdot x\\right)=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left(x^2-50\\cdot x+504-121\\cdot x\\right)\\cdot \\left(x^2-50\\cdot x+504+121\\cdot x\\right)=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left(x-168\\right)\\cdot \\left(x-3\\right)\\cdot \\left(x+8\\right)\\cdot \\left(x+63\\right)=0&amp; \\cr \\end{array}\\] Equiv <pre>[1/(x^2+1)=1/((x+%i)*(x-%i)), \nstackeq(1/(2*%i)*(1/(x-%i)-1/(\nx+%i)))]</pre> <pre>[]</pre> 1 (CHECKMARK, CHECKMARK) \\[\\begin{array}{lll}\\color{green}{\\checkmark}&amp;\\frac{1}{x^2+1}=\\frac{1}{\\left(x+\\mathrm{i}\\right)\\cdot \\left(x-\\mathrm{i}\\right)}&amp; \\cr \\color{green}{\\checkmark}&amp;=\\frac{1}{2\\cdot \\mathrm{i}}\\cdot \\left(\\frac{1}{x-\\mathrm{i}}-\\frac{1}{x+\\mathrm{i}}\\right)&amp; \\cr \\end{array}\\] Equiv <pre>[((a-b)/(a^2+a*b))/((a^2-2*a*b\n+b^2)/(a^4-b^4)),stackeq(((a-b\n)*(a-b)*(a+b)*(a^2+b^2))/(a*(a\n+b)*(a-b)^2)),stackeq((a^2+b^2\n)/a),stackeq(a+b^2/a)]</pre> <pre>[]</pre> 1 (EMPTYCHAR, CHECKMARK, CHECKMARK, CHECKMARK) \\[\\begin{array}{lll} &amp;\\frac{\\frac{a-b}{a^2+a\\cdot b}}{\\frac{a^2-2\\cdot a\\cdot b+b^2}{a^4-b^4}}&amp; \\cr \\color{green}{\\checkmark}&amp;=\\frac{\\left(a-b\\right)\\cdot \\left(a-b\\right)\\cdot \\left(a+b\\right)\\cdot \\left(a^2+b^2\\right)}{a\\cdot \\left(a+b\\right)\\cdot {\\left(a-b\\right)}^2}&amp; \\cr \\color{green}{\\checkmark}&amp;=\\frac{a^2+b^2}{a}&amp; \\cr \\color{green}{\\checkmark}&amp;=a+\\frac{b^2}{a}&amp; \\cr \\end{array}\\] Equiv <pre>[a^4+4*b^4,stackeq((a^2)^2+4*a\n^2*b^2+(2*b^2)^2-4*a^2*b^2),st\nackeq((a^2+2*b^2)^2-(2*a*b)^2)\n,stackeq((2*b^2-2*a*b+a^2)*(2*\nb^2+2*a*b+a^2))]</pre> <pre>[]</pre> 1 (EMPTYCHAR, CHECKMARK, CHECKMARK, CHECKMARK) \\[\\begin{array}{lll} &amp;a^4+4\\cdot b^4&amp; \\cr \\color{green}{\\checkmark}&amp;={\\left(a^2\\right)}^2+4\\cdot a^2\\cdot b^2+{\\left(2\\cdot b^2\\right)}^2-4\\cdot a^2\\cdot b^2&amp; \\cr \\color{green}{\\checkmark}&amp;={\\left(a^2+2\\cdot b^2\\right)}^2-{\\left(2\\cdot a\\cdot b\\right)}^2&amp; \\cr \\color{green}{\\checkmark}&amp;=\\left(2\\cdot b^2-2\\cdot a\\cdot b+a^2\\right)\\cdot \\left(2\\cdot b^2+2\\cdot a\\cdot b+a^2\\right)&amp; \\cr \\end{array}\\] Equiv <pre>[sum(k,k,1,n+1),stackeq(sum(k,\nk,1,n)+(n+1)),stackeq(n*(n+1)/\n2 +n+1),stackeq((n+1)*(n+1+1)/\n2),stackeq((n+1)*(n+2)/2)]</pre> <pre>[]</pre> 1 (EMPTYCHAR, CHECKMARK, CHECKMARK, CHECKMARK, CHECKMARK) \\[\\begin{array}{lll} &amp;\\sum_{k=1}^{n+1}{k}&amp; \\cr \\color{green}{\\checkmark}&amp;=\\sum_{k=1}^{n}{k}+\\left(n+1\\right)&amp; \\cr \\color{green}{\\checkmark}&amp;=\\frac{n\\cdot \\left(n+1\\right)}{2}+n+1&amp; \\cr \\color{green}{\\checkmark}&amp;=\\frac{\\left(n+1\\right)\\cdot \\left(n+1+1\\right)}{2}&amp; \\cr \\color{green}{\\checkmark}&amp;=\\frac{\\left(n+1\\right)\\cdot \\left(n+2\\right)}{2}&amp; \\cr \\end{array}\\] Equiv <pre>[log((a-1)^n*product(x_i^(-a),\ni,1,n)),stackeq(n*log(a-1)-a*s\num(log(x_i),i,1,n))]</pre> <pre>[]</pre> 1 (EMPTYCHAR, CHECKMARK) \\[\\begin{array}{lll} &amp;\\ln \\left( {\\left(a-1\\right)}^{n}\\cdot \\prod_{i=1}^{n}{\\frac{1}{{{x}_{i}}^{a}}} \\right)&amp; \\cr \\color{green}{\\checkmark}&amp;=n\\cdot \\ln \\left( a-1 \\right)-a\\cdot \\sum_{i=1}^{n}{\\ln \\left( {x}_{i} \\right)}&amp; \\cr \\end{array}\\] Equiv <pre>[binomial(n,k)+binomial(n,k+1)\n,stackeq(n!/(k!*(n-k)!)+n!/((k\n+1)!*(n-k-1)!)),stackeq(n!/(k!\n*(n-k)*(n-k-1)!)+n!/((k+1)!*(n\n-k-1)!)),stackeq(n!/(k!*(n-k-1\n)!)*(1/(n-k)+1/(k+1))),stackeq\n(n!/(k!*(n-k-1)!)*((n+1)/((n-k\n)*(k+1)))),stackeq((n+1)*n!/(k\n!*(n-k-1)!)*(1/((k+1)*(n-k))))\n,stackeq((n+1)*n!/((k+1)*k!*(n\n-k)*(n-k-1)!)),stackeq(((n+1)!\n/((k+1)!)*(1/((n-k)*(n-k-1)!))\n)),stackeq((n+1)!/((k+1)!*(n-k\n)!)),stackeq(binomial(n+1,k+1)\n)]</pre> <pre>[]</pre> 1 (EMPTYCHAR, CHECKMARK, CHECKMARK, CHECKMARK, CHECKMARK, CHECKMARK, CHECKMARK, CHECKMARK, CHECKMARK, CHECKMARK) \\[\\begin{array}{lll} &amp;{{n}\\choose{k}}+{{n}\\choose{k+1}}&amp; \\cr \\color{green}{\\checkmark}&amp;=\\frac{n!}{k!\\cdot \\left(n-k\\right)!}+\\frac{n!}{\\left(k+1\\right)!\\cdot \\left(n-k-1\\right)!}&amp; \\cr \\color{green}{\\checkmark}&amp;=\\frac{n!}{k!\\cdot \\left(n-k\\right)\\cdot \\left(n-k-1\\right)!}+\\frac{n!}{\\left(k+1\\right)!\\cdot \\left(n-k-1\\right)!}&amp; \\cr \\color{green}{\\checkmark}&amp;=\\frac{n!}{k!\\cdot \\left(n-k-1\\right)!}\\cdot \\left(\\frac{1}{n-k}+\\frac{1}{k+1}\\right)&amp; \\cr \\color{green}{\\checkmark}&amp;=\\frac{n!}{k!\\cdot \\left(n-k-1\\right)!}\\cdot \\left(\\frac{n+1}{\\left(n-k\\right)\\cdot \\left(k+1\\right)}\\right)&amp; \\cr \\color{green}{\\checkmark}&amp;=\\frac{\\left(n+1\\right)\\cdot n!}{k!\\cdot \\left(n-k-1\\right)!}\\cdot \\left(\\frac{1}{\\left(k+1\\right)\\cdot \\left(n-k\\right)}\\right)&amp; \\cr \\color{green}{\\checkmark}&amp;=\\frac{\\left(n+1\\right)\\cdot n!}{\\left(k+1\\right)\\cdot k!\\cdot \\left(n-k\\right)\\cdot \\left(n-k-1\\right)!}&amp; \\cr \\color{green}{\\checkmark}&amp;=\\frac{\\left(n+1\\right)!}{\\left(k+1\\right)!}\\cdot \\left(\\frac{1}{\\left(n-k\\right)\\cdot \\left(n-k-1\\right)!}\\right)&amp; \\cr \\color{green}{\\checkmark}&amp;=\\frac{\\left(n+1\\right)!}{\\left(k+1\\right)!\\cdot \\left(n-k\\right)!}&amp; \\cr \\color{green}{\\checkmark}&amp;={{n+1}\\choose{k+1}}&amp; \\cr \\end{array}\\] Equiv <pre>[binomial(n,k)+binomial(n,k-1)\n,stackeq(n!/((k-1)!*(n-k+1)!)+\nn!/(k!*(n-k)!)),stackeq(n!*k/(\nk!*(n-k+1)!)+n!*(n-k+1)/(k!*(n\n-k+1)!)),stackeq(n!*k/(k!*(n-k\n+1)!)+n!/(k!*(n-k)!)),stackeq(\n((n-k+1)*n!+k*n!)/(k!*(n-k+1)!\n)),stackeq(((n+1)*n!)/(k!*(n-k\n+1)!))]</pre> <pre>[]</pre> 1 (EMPTYCHAR, CHECKMARK, CHECKMARK, CHECKMARK, CHECKMARK, CHECKMARK) \\[\\begin{array}{lll} &amp;{{n}\\choose{k}}+{{n}\\choose{k-1}}&amp; \\cr \\color{green}{\\checkmark}&amp;=\\frac{n!}{\\left(k-1\\right)!\\cdot \\left(n-k+1\\right)!}+\\frac{n!}{k!\\cdot \\left(n-k\\right)!}&amp; \\cr \\color{green}{\\checkmark}&amp;=\\frac{n!\\cdot k}{k!\\cdot \\left(n-k+1\\right)!}+\\frac{n!\\cdot \\left(n-k+1\\right)}{k!\\cdot \\left(n-k+1\\right)!}&amp; \\cr \\color{green}{\\checkmark}&amp;=\\frac{n!\\cdot k}{k!\\cdot \\left(n-k+1\\right)!}+\\frac{n!}{k!\\cdot \\left(n-k\\right)!}&amp; \\cr \\color{green}{\\checkmark}&amp;=\\frac{\\left(n-k+1\\right)\\cdot n!+k\\cdot n!}{k!\\cdot \\left(n-k+1\\right)!}&amp; \\cr \\color{green}{\\checkmark}&amp;=\\frac{\\left(n+1\\right)\\cdot n!}{k!\\cdot \\left(n-k+1\\right)!}&amp; \\cr \\end{array}\\] Equiv <pre>[(x-1)^2=(x-1)*(x-1), stackeq(\nx^2-2*x+1)]</pre> <pre>[]</pre> 1 (CHECKMARK, CHECKMARK) \\[\\begin{array}{lll}\\color{green}{\\checkmark}&amp;{\\left(x-1\\right)}^2=\\left(x-1\\right)\\cdot \\left(x-1\\right)&amp; \\cr \\color{green}{\\checkmark}&amp;=x^2-2\\cdot x+1&amp; \\cr \\end{array}\\] Equiv <pre>[(x-1)^2=(x-1)*(x-1), stackeq(\nx^2-2*x+2)]</pre> <pre>[]</pre> 0 (CHECKMARK,QMCHAR) \\[\\begin{array}{lll}\\color{green}{\\checkmark}&amp;{\\left(x-1\\right)}^2=\\left(x-1\\right)\\cdot \\left(x-1\\right)&amp; \\cr \\color{red}{?}&amp;=x^2-2\\cdot x+2&amp; \\cr \\end{array}\\] Equiv <pre>[(x-2)^2=(x-1)*(x-1), stackeq(\nx^2-2*x+1)]</pre> <pre>[]</pre> 0 (QMCHAR, CHECKMARK) \\[\\begin{array}{lll}\\color{red}{?}&amp;{\\left(x-2\\right)}^2=\\left(x-1\\right)\\cdot \\left(x-1\\right)&amp; \\cr \\color{green}{\\checkmark}&amp;=x^2-2\\cdot x+1&amp; \\cr \\end{array}\\] Equiv <pre>[4^((n+1)+1)-1= 4*4^(n+1)-1,st\nackeq(4*(4^(n+1)-1)+3)]</pre> <pre>[]</pre> 1 (CHECKMARK, CHECKMARK) \\[\\begin{array}{lll}\\color{green}{\\checkmark}&amp;4^{n+1+1}-1=4\\cdot 4^{n+1}-1&amp; \\cr \\color{green}{\\checkmark}&amp;=4\\cdot \\left(4^{n+1}-1\\right)+3&amp; \\cr \\end{array}\\] Equiv <pre>[2*x+3*y=6 and 4*x+9*y=15,2*x+\n3*y=6 and -2*x=-3,3+3*y=6 and \n2*x=3,y=1 and x=3/2]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;\\left\\{\\begin{array}{l}2\\cdot x+3\\cdot y=6\\cr 4\\cdot x+9\\cdot y=15\\cr \\end{array}\\right.&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left\\{\\begin{array}{l}2\\cdot x+3\\cdot y=6\\cr -2\\cdot x=-3\\cr \\end{array}\\right.&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left\\{\\begin{array}{l}3+3\\cdot y=6\\cr 2\\cdot x=3\\cr \\end{array}\\right.&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left\\{\\begin{array}{l}y=1\\cr x=\\frac{3}{2}\\cr \\end{array}\\right.&amp; \\cr \\end{array}\\] Equiv <pre>[2*x+3*y=6 and 4*x+9*y=15,2*x+\n3*y=6 and -2*x=-3,3+3*y=6 and \n2*x=3,y=1 and x=3]</pre> <pre>[]</pre> 0 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR,QMCHAR) \\[\\begin{array}{lll} &amp;\\left\\{\\begin{array}{l}2\\cdot x+3\\cdot y=6\\cr 4\\cdot x+9\\cdot y=15\\cr \\end{array}\\right.&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left\\{\\begin{array}{l}2\\cdot x+3\\cdot y=6\\cr -2\\cdot x=-3\\cr \\end{array}\\right.&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left\\{\\begin{array}{l}3+3\\cdot y=6\\cr 2\\cdot x=3\\cr \\end{array}\\right.&amp; \\cr \\color{red}{?}&amp;\\left\\{\\begin{array}{l}y=1\\cr x=3\\cr \\end{array}\\right.&amp; \\cr \\end{array}\\] Equiv <pre>[x^2+y^2=8 and x=y, 2*x^2=8 an\nd y=x, x^2=4 and y=x, x= #pm#2\n and y=x, (x= 2 and y=x) or (x\n=-2 and y=x), (x=2 and y=2) or\n (x=-2 and y=-2)]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;\\left\\{\\begin{array}{l}x^2+y^2=8\\cr x=y\\cr \\end{array}\\right.&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left\\{\\begin{array}{l}2\\cdot x^2=8\\cr y=x\\cr \\end{array}\\right.&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left\\{\\begin{array}{l}x^2=4\\cr y=x\\cr \\end{array}\\right.&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left\\{\\begin{array}{l}x= \\pm 2\\cr y=x\\cr \\end{array}\\right.&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x=2\\,{\\text{ and }}\\, y=x\\,{\\text{ or }}\\, x=-2\\,{\\text{ and }}\\, y=x&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x=2\\,{\\text{ and }}\\, y=2\\,{\\text{ or }}\\, x=-2\\,{\\text{ and }}\\, y=-2&amp; \\cr \\end{array}\\] Equiv <pre>[x^2+y^2=5 and x*y=2, x^2+y^2-\n5=0 and x*y-2=0, x^2-2*x*y+y^2\n-1=0 and x^2+2*x*y+y^2-9=0, (x\n-y)^2-1=0 and (x+y)^2-3^2=0, (\nx-y=1 and x+y=3) or (x-y=-1 an\nd x+y=3) or (x-y=1 and x+y=-3)\n or (x-y=-1 and x+y=-3), (x=1 \nand y=2) or (x=2 and y=1) or (\nx=-2 and y=-1) or (x=-1 and y=\n-2)]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;\\left\\{\\begin{array}{l}x^2+y^2=5\\cr x\\cdot y=2\\cr \\end{array}\\right.&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left\\{\\begin{array}{l}x^2+y^2-5=0\\cr x\\cdot y-2=0\\cr \\end{array}\\right.&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left\\{\\begin{array}{l}x^2-2\\cdot x\\cdot y+y^2-1=0\\cr x^2+2\\cdot x\\cdot y+y^2-9=0\\cr \\end{array}\\right.&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left\\{\\begin{array}{l}{\\left(x-y\\right)}^2-1=0\\cr {\\left(x+y\\right)}^2-3^2=0\\cr \\end{array}\\right.&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x-y=1\\,{\\text{ and }}\\, x+y=3\\,{\\text{ or }}\\, x-y=-1\\,{\\text{ and }}\\, x+y=3\\,{\\text{ or }}\\, x-y=1\\,{\\text{ and }}\\, x+y=-3\\,{\\text{ or }}\\, x-y=-1\\,{\\text{ and }}\\, x+y=-3&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x=1\\,{\\text{ and }}\\, y=2\\,{\\text{ or }}\\, x=2\\,{\\text{ and }}\\, y=1\\,{\\text{ or }}\\, x=-2\\,{\\text{ and }}\\, y=-1\\,{\\text{ or }}\\, x=-1\\,{\\text{ and }}\\, y=-2&amp; \\cr \\end{array}\\] Equiv <pre>[4*x^2+7*x*y+4*y^2=4 and y=x-4\n, 4*x^2+7*x*(x-4)+4*(x-4)^2-4=\n0 and y=x-4, 15*x^2-60*x+60=0 \nand y=x-4, (x-2)^2=0 and y=x-4\n, x=2 and y=x-4, x=2 and y=-2]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;\\left\\{\\begin{array}{l}4\\cdot x^2+7\\cdot x\\cdot y+4\\cdot y^2=4\\cr y=x-4\\cr \\end{array}\\right.&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left\\{\\begin{array}{l}4\\cdot x^2+7\\cdot x\\cdot \\left(x-4\\right)+4\\cdot {\\left(x-4\\right)}^2-4=0\\cr y=x-4\\cr \\end{array}\\right.&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left\\{\\begin{array}{l}15\\cdot x^2-60\\cdot x+60=0\\cr y=x-4\\cr \\end{array}\\right.&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left\\{\\begin{array}{l}{\\left(x-2\\right)}^2=0\\cr y=x-4\\cr \\end{array}\\right.&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left\\{\\begin{array}{l}x=2\\cr y=x-4\\cr \\end{array}\\right.&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left\\{\\begin{array}{l}x=2\\cr y=-2\\cr \\end{array}\\right.&amp; \\cr \\end{array}\\] Equiv <pre>[a^2=b and a^2=1, b=a^2 and (a\n=1 or a=-1), (b=1 and a=1) or \n(b=1 and a=-1)]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;\\left\\{\\begin{array}{l}a^2=b\\cr a^2=1\\cr \\end{array}\\right.&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left\\{\\begin{array}{l}b=a^2\\cr a=1\\,{\\text{ or }}\\, a=-1\\cr \\end{array}\\right.&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;b=1\\,{\\text{ and }}\\, a=1\\,{\\text{ or }}\\, b=1\\,{\\text{ and }}\\, a=-1&amp; \\cr \\end{array}\\] Equiv <pre>[a^2=b and x=1, b=a^2 and x=1]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;\\left\\{\\begin{array}{l}a^2=b\\cr x=1\\cr \\end{array}\\right.&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left\\{\\begin{array}{l}b=a^2\\cr x=1\\cr \\end{array}\\right.&amp; \\cr \\end{array}\\] Equiv <pre>[a^2=b and b^2=a, b=a^2 and a^\n4=a, b=a^2 and a^4-a=0, b=a^2 \nand a*(a-1)*(a^2+a+1)=0, b=a^2\n and (a=0 or a=1 or a^2+a+1=0)\n, (b=0 and a=0) or (b=1 and a=\n1)]</pre> <pre>[]</pre> <pre>[assumereal]</pre> 1 (ASSUMEREALVARS, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll}\\color{blue}{(\\mathbb{R})}&amp;\\left\\{\\begin{array}{l}a^2=b\\cr b^2=a\\cr \\end{array}\\right.&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left\\{\\begin{array}{l}b=a^2\\cr a^4=a\\cr \\end{array}\\right.&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left\\{\\begin{array}{l}b=a^2\\cr a^4-a=0\\cr \\end{array}\\right.&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left\\{\\begin{array}{l}b=a^2\\cr a\\cdot \\left(a-1\\right)\\cdot \\left(a^2+a+1\\right)=0\\cr \\end{array}\\right.&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left\\{\\begin{array}{l}b=a^2\\cr a=0\\,{\\text{ or }}\\, a=1\\,{\\text{ or }}\\, a^2+a+1=0\\cr \\end{array}\\right.&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;b=0\\,{\\text{ and }}\\, a=0\\,{\\text{ or }}\\, b=1\\,{\\text{ and }}\\, a=1&amp; \\cr \\end{array}\\] Equiv <pre>[2*x^3-9*x^2+10*x-3,stacklet(x\n,1),2*1^3-9*1^2+10*1-3,stackeq\n(0),\"So\",2*x^3-9*x^2\n+10*x-3,stackeq((x-1)*(2*x^2-7\n*x+3)),stackeq((x-1)*(2*x-1)*(\nx-3))]</pre> <pre>[]</pre> 0 (EMPTYCHAR, EMPTYCHAR, CHECKMARK, CHECKMARK, EMPTYCHAR, EMPTYCHAR, CHECKMARK, CHECKMARK) \\[\\begin{array}{lll} &amp;2\\cdot x^3-9\\cdot x^2+10\\cdot x-3&amp; \\cr &amp;\\text{Let }x = 1&amp; \\cr \\color{green}{\\checkmark}&amp;2\\cdot 1^3-9\\cdot 1^2+10\\cdot 1-3&amp; \\cr \\color{green}{\\checkmark}&amp;=0&amp; \\cr &amp;\\text{So}&amp; \\cr &amp;2\\cdot x^3-9\\cdot x^2+10\\cdot x-3&amp; \\cr \\color{green}{\\checkmark}&amp;=\\left(x-1\\right)\\cdot \\left(2\\cdot x^2-7\\cdot x+3\\right)&amp; \\cr \\color{green}{\\checkmark}&amp;=\\left(x-1\\right)\\cdot \\left(2\\cdot x-1\\right)\\cdot \\left(x-3\\right)&amp; \\cr \\end{array}\\] Equiv <pre>[stacklet(x,1),1-x=(x+1)^(1/5)\n,0=2^(1/5)]</pre> <pre>[]</pre> 0 (EMPTYCHAR,QMCHAR,QMCHAR) \\[\\begin{array}{lll} &amp;\\text{Let }x = 1&amp; \\cr \\color{red}{?}&amp;1-x={\\left(x+1\\right)}^{\\frac{1}{5}}&amp; \\cr \\color{red}{?}&amp;0=2^{\\frac{1}{5}}&amp; \\cr \\end{array}\\] Equiv <pre>[2*x^2+x&gt;=6, 2*x^2+x-6&gt;=\n0, (2*x-3)*(x+2)&gt;= 0,((2*x-\n3)&gt;=0 and (x+2)&gt;=0) or (\n(2*x-3)&lt;=0 and (x+2)&lt;=0)\n, (x&gt;=3/2 and x&gt;=-2) or \n(x&lt;=3/2 and x&lt;=-2), x&gt;\n;=3/2 or x &lt;=-2]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;2\\cdot x^2+x\\geq 6&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;2\\cdot x^2+x-6\\geq 0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left(2\\cdot x-3\\right)\\cdot \\left(x+2\\right)\\geq 0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;2\\cdot x-3\\geq 0\\,{\\text{ and }}\\, x+2\\geq 0\\,{\\text{ or }}\\, 2\\cdot x-3\\leq 0\\,{\\text{ and }}\\, x+2\\leq 0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x\\geq \\frac{3}{2}\\,{\\text{ and }}\\, x\\geq -2\\,{\\text{ or }}\\, x\\leq \\frac{3}{2}\\,{\\text{ and }}\\, x\\leq -2&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x\\geq \\frac{3}{2}\\,{\\text{ or }}\\, x\\leq -2&amp; \\cr \\end{array}\\] Equiv <pre>[2*x^2+x&gt;=6, 2*x^2+x-6&gt;=\n0, (2*x-3)*(x+2)&gt;= 0,((2*x-\n3)&gt;=0 and (x+2)&gt;=0) or (\n(2*x-3)&lt;=0 and (x+2)&lt;=0)\n, (x&gt;=3/2 and x&gt;=-2) or \n(x&lt;=3/2 and x&lt;=-2), x&gt;\n;=3/2 or x &lt;=2]</pre> <pre>[]</pre> 0 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR,QMCHAR) \\[\\begin{array}{lll} &amp;2\\cdot x^2+x\\geq 6&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;2\\cdot x^2+x-6\\geq 0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left(2\\cdot x-3\\right)\\cdot \\left(x+2\\right)\\geq 0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;2\\cdot x-3\\geq 0\\,{\\text{ and }}\\, x+2\\geq 0\\,{\\text{ or }}\\, 2\\cdot x-3\\leq 0\\,{\\text{ and }}\\, x+2\\leq 0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x\\geq \\frac{3}{2}\\,{\\text{ and }}\\, x\\geq -2\\,{\\text{ or }}\\, x\\leq \\frac{3}{2}\\,{\\text{ and }}\\, x\\leq -2&amp; \\cr \\color{red}{?}&amp;x\\geq \\frac{3}{2}\\,{\\text{ or }}\\, x\\leq 2&amp; \\cr \\end{array}\\] Equiv <pre>[x^2&gt;=9 and x&gt;3, x^2-9&amp;g\nt;=0 and x&gt;3, (x&gt;=3 or x\n&lt;=-3) and x&gt;3, x&gt;3]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;\\left\\{\\begin{array}{l}x^2\\geq 9\\cr x &gt; 3\\cr \\end{array}\\right.&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left\\{\\begin{array}{l}x^2-9\\geq 0\\cr x &gt; 3\\cr \\end{array}\\right.&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left\\{\\begin{array}{l}x\\geq 3\\,{\\text{ or }}\\, x\\leq -3\\cr x &gt; 3\\cr \\end{array}\\right.&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x &gt; 3&amp; \\cr \\end{array}\\] Equiv <pre>[-x^2+a*x+a-3&lt;0, a-3&lt;x^2\n-a*x, a-3&lt;(x-a/2)^2-a^2/4, \na^2/4+a-3&lt;(x-a/2)^2, a^2+4*\na-12&lt;4*(x-a/2)^2, (a-2)*(a+\n6)&lt;4*(x-a/2)^2, \"This \ninequality is required to be t\nrue for all x.\", \"So\n it must be true when the righ\nt hand side takes its minimum \nvalue.\", \"This happe\nns for x=a/2.\", (a-2)*(a+\n6)&lt;0, ((a-2)&lt;0 and (a+6)\n&gt;0) or ((a-2)&gt;0 and (a+6\n)&lt;0), (a&lt;2 and a&gt;-6) \nor (a&gt;2 and a&lt;-6), (-6&amp;l\nt;a and a&lt;2) or false, (-6&amp;\nlt;a and a&lt;2)]</pre> <pre>[]</pre> 0 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EMPTYCHAR, EMPTYCHAR, EMPTYCHAR, EMPTYCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;-x^2+a\\cdot x+a-3 &lt; 0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;a-3 &lt; x^2-a\\cdot x&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;a-3 &lt; {\\left(x-\\frac{a}{2}\\right)}^2-\\frac{a^2}{4}&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\frac{a^2}{4}+a-3 &lt; {\\left(x-\\frac{a}{2}\\right)}^2&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;a^2+4\\cdot a-12 &lt; 4\\cdot {\\left(x-\\frac{a}{2}\\right)}^2&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left(a-2\\right)\\cdot \\left(a+6\\right) &lt; 4\\cdot {\\left(x-\\frac{a}{2}\\right)}^2&amp; \\cr &amp;\\text{This inequality is required to be true for all x.}&amp; \\cr &amp;\\text{So it must be true when the right hand side takes its minimum value.}&amp; \\cr &amp;\\text{This happens for x=a/2.}&amp; \\cr &amp;\\left(a-2\\right)\\cdot \\left(a+6\\right) &lt; 0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;a-2 &lt; 0\\,{\\text{ and }}\\, a+6 &gt; 0\\,{\\text{ or }}\\, a-2 &gt; 0\\,{\\text{ and }}\\, a+6 &lt; 0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;a &lt; 2\\,{\\text{ and }}\\, a &gt; -6\\,{\\text{ or }}\\, a &gt; 2\\,{\\text{ and }}\\, a &lt; -6&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;-6 &lt; a\\,{\\text{ and }}\\, a &lt; 2\\,{\\text{ or }}\\, \\mathbf{False}&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left\\{\\begin{array}{l}-6 &lt; a\\cr a &lt; 2\\cr \\end{array}\\right.&amp; \\cr \\end{array}\\] Equiv <pre>[x-2&gt;0 and x*(x-2)&lt;15,x&amp;\ngt;2 and x^2-2*x-15&lt;0,x&gt;\n2 and (x-5)*(x+3)&lt;0,x&gt;2 \nand ((x&lt;5 and x&gt;-3) or (\nx&gt;5 and x&lt;-3)),x&gt;2 an\nd (x&lt;5 and x&gt;-3),x&gt;2 \nand x&lt;5]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;\\left\\{\\begin{array}{l}x-2 &gt; 0\\cr x\\cdot \\left(x-2\\right) &lt; 15\\cr \\end{array}\\right.&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left\\{\\begin{array}{l}x &gt; 2\\cr x^2-2\\cdot x-15 &lt; 0\\cr \\end{array}\\right.&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left\\{\\begin{array}{l}x &gt; 2\\cr \\left(x-5\\right)\\cdot \\left(x+3\\right) &lt; 0\\cr \\end{array}\\right.&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left\\{\\begin{array}{l}x &gt; 2\\cr x &lt; 5\\,{\\text{ and }}\\, x &gt; -3\\,{\\text{ or }}\\, x &gt; 5\\,{\\text{ and }}\\, x &lt; -3\\cr \\end{array}\\right.&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left\\{\\begin{array}{l}x &gt; 2\\cr x &lt; 5\\,{\\text{ and }}\\, x &gt; -3\\cr \\end{array}\\right.&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left\\{\\begin{array}{l}x &gt; 2\\cr x &lt; 5\\cr \\end{array}\\right.&amp; \\cr \\end{array}\\] Equiv <pre>[x-2&gt;0 and x*(x-2)&lt;15,x&amp;\ngt;2 and x^2-2*x-15&lt;0,x&gt;\n2 and (x-5)*(x+3)&lt;0,x&gt;2 \nand ((x&lt;5 and x&gt;-3) or (\nx&gt;5 and x&lt;-3)),x&gt;7 an\nd (x&lt;5 and x&gt;-3),x&gt;2 \nand x&lt;5]</pre> <pre>[]</pre> 0 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR,QMCHAR,QMCHAR) \\[\\begin{array}{lll} &amp;\\left\\{\\begin{array}{l}x-2 &gt; 0\\cr x\\cdot \\left(x-2\\right) &lt; 15\\cr \\end{array}\\right.&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left\\{\\begin{array}{l}x &gt; 2\\cr x^2-2\\cdot x-15 &lt; 0\\cr \\end{array}\\right.&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left\\{\\begin{array}{l}x &gt; 2\\cr \\left(x-5\\right)\\cdot \\left(x+3\\right) &lt; 0\\cr \\end{array}\\right.&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left\\{\\begin{array}{l}x &gt; 2\\cr x &lt; 5\\,{\\text{ and }}\\, x &gt; -3\\,{\\text{ or }}\\, x &gt; 5\\,{\\text{ and }}\\, x &lt; -3\\cr \\end{array}\\right.&amp; \\cr \\color{red}{?}&amp;\\left\\{\\begin{array}{l}x &gt; 7\\cr x &lt; 5\\,{\\text{ and }}\\, x &gt; -3\\cr \\end{array}\\right.&amp; \\cr \\color{red}{?}&amp;\\left\\{\\begin{array}{l}x &gt; 2\\cr x &lt; 5\\cr \\end{array}\\right.&amp; \\cr \\end{array}\\] Equiv <pre>[x^2 + (a-2)*x + a = 0,(x + (a\n-2)/2)^2 -((a-2)/2)^2 + a = 0,\n(x + (a-2)/2)^2 =(a-2)^2/4 - a\n,\"This has real roots iff\n\",(a-2)^2/4-a &gt;=0,a^2-\n4*a+4-4*a &gt;=0,a^2-8*a+4&gt;\n=0,(a-4)^2-16+4&gt;=0,(a-4)^2&amp;\ngt;=12,a-4&gt;=sqrt(12) or a-4\n&lt;= -sqrt(12),\"Ignoring\n the negative solution.\",\na&gt;=sqrt(12)+4,\"Using e\nxternal domain information tha\nt a is an integer.\",a&gt;\n=8]</pre> <pre>[]</pre> 0 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR, EMPTYCHAR, EMPTYCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EMPTYCHAR, EMPTYCHAR, EMPTYCHAR, EMPTYCHAR) \\[\\begin{array}{lll} &amp;x^2+\\left(a-2\\right)\\cdot x+a=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;{\\left(x+\\frac{a-2}{2}\\right)}^2-{\\left(\\frac{a-2}{2}\\right)}^2+a=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;{\\left(x+\\frac{a-2}{2}\\right)}^2=\\frac{{\\left(a-2\\right)}^2}{4}-a&amp; \\cr &amp;\\text{This has real roots iff}&amp; \\cr &amp;\\frac{{\\left(a-2\\right)}^2}{4}-a\\geq 0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;a^2-4\\cdot a+4-4\\cdot a\\geq 0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;a^2-8\\cdot a+4\\geq 0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;{\\left(a-4\\right)}^2-16+4\\geq 0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;{\\left(a-4\\right)}^2\\geq 12&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;a-4\\geq \\sqrt{12}\\,{\\text{ or }}\\, a-4\\leq -\\sqrt{12}&amp; \\cr &amp;\\text{Ignoring the negative solution.}&amp; \\cr &amp;a\\geq \\sqrt{12}+4&amp; \\cr &amp;\\text{Using external domain information that a is an integer.}&amp; \\cr &amp;a\\geq 8&amp; \\cr \\end{array}\\] Equiv <pre>[x^2#1,x^2-1#0,(x-1)*(x+1)#0,x\n&lt;-1 nounor (-1&lt;x nounand\n x&lt;1) nounor x&gt;1]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;x^2\\neq 1&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x^2-1\\neq 0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left(x-1\\right)\\cdot \\left(x+1\\right)\\neq 0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x &lt; -1\\,{\\text{ or }}\\, -1 &lt; x\\,{\\text{ and }}\\, x &lt; 1\\,{\\text{ or }}\\, x &gt; 1&amp; \\cr \\end{array}\\] Equiv <pre>[\"Set P(n) be the stateme\nnt that\",sum(k^2,k,1,n) =\n n*(n+1)*(2*n+1)/6, \"Then\n P(1) is the statement\", \n1^2 = 1*(1+1)*(2*1+1)/6, 1 = 1\n, \"So P(1) holds.  Now as\nsume P(n) is true.\",sum(k\n^2,k,1,n) = n*(n+1)*(2*n+1)/6,\nsum(k^2,k,1,n) +(n+1)^2= n*(n+\n1)*(2*n+1)/6 +(n+1)^2,sum(k^2,\nk,1,n+1)= (n+1)*(n*(2*n+1) +6*\n(n+1))/6,sum(k^2,k,1,n+1)= (n+\n1)*(2*n^2+7*n+6)/6,sum(k^2,k,1\n,n+1)= (n+1)*(n+1+1)*(2*(n+1)+\n1)/6]</pre> <pre>[]</pre> 0 (EMPTYCHAR, EMPTYCHAR, EMPTYCHAR, EMPTYCHAR, EQUIVCHAR, EMPTYCHAR, EMPTYCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;\\text{Set P(n) be the statement that}&amp; \\cr &amp;\\sum_{k=1}^{n}{k^2}=\\frac{n\\cdot \\left(n+1\\right)\\cdot \\left(2\\cdot n+1\\right)}{6}&amp; \\cr &amp;\\text{Then P(1) is the statement}&amp; \\cr &amp;1^2=\\frac{1\\cdot \\left(1+1\\right)\\cdot \\left(2\\cdot 1+1\\right)}{6}&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;1=1&amp; \\cr &amp;\\text{So P(1) holds. Now assume P(n) is true.}&amp; \\cr &amp;\\sum_{k=1}^{n}{k^2}=\\frac{n\\cdot \\left(n+1\\right)\\cdot \\left(2\\cdot n+1\\right)}{6}&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\sum_{k=1}^{n}{k^2}+{\\left(n+1\\right)}^2=\\frac{n\\cdot \\left(n+1\\right)\\cdot \\left(2\\cdot n+1\\right)}{6}+{\\left(n+1\\right)}^2&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\sum_{k=1}^{n+1}{k^2}=\\frac{\\left(n+1\\right)\\cdot \\left(n\\cdot \\left(2\\cdot n+1\\right)+6\\cdot \\left(n+1\\right)\\right)}{6}&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\sum_{k=1}^{n+1}{k^2}=\\frac{\\left(n+1\\right)\\cdot \\left(2\\cdot n^2+7\\cdot n+6\\right)}{6}&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\sum_{k=1}^{n+1}{k^2}=\\frac{\\left(n+1\\right)\\cdot \\left(n+1+1\\right)\\cdot \\left(2\\cdot \\left(n+1\\right)+1\\right)}{6}&amp; \\cr \\end{array}\\] Equiv <pre>[(n+1)^2+sum(k^2,k,1,n) = (n+1\n)^2+(n*(n+1)*(2*n+1))/6, sum(k\n^2,k,1,n+1) = ((n+1)*(n*(2*n+1\n)+6*(n+1)))/6, sum(k^2,k,1,n+1\n) = ((n+1)*(2*n^2+7*n+6))/6, s\num(k^2,k,1,n+1) = ((n+1)*(n+2)\n*(2*(n+1)+1))/6]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;{\\left(n+1\\right)}^2+\\sum_{k=1}^{n}{k^2}={\\left(n+1\\right)}^2+\\frac{n\\cdot \\left(n+1\\right)\\cdot \\left(2\\cdot n+1\\right)}{6}&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\sum_{k=1}^{n+1}{k^2}=\\frac{\\left(n+1\\right)\\cdot \\left(n\\cdot \\left(2\\cdot n+1\\right)+6\\cdot \\left(n+1\\right)\\right)}{6}&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\sum_{k=1}^{n+1}{k^2}=\\frac{\\left(n+1\\right)\\cdot \\left(2\\cdot n^2+7\\cdot n+6\\right)}{6}&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\sum_{k=1}^{n+1}{k^2}=\\frac{\\left(n+1\\right)\\cdot \\left(n+2\\right)\\cdot \\left(2\\cdot \\left(n+1\\right)+1\\right)}{6}&amp; \\cr \\end{array}\\] Equiv <pre>[conjugate(a)*conjugate(b),sta\ncklet(a,x+i*y),stacklet(b,r+i*\ns),stackeq(conjugate(x+i*y)*co\nnjugate(r+i*s)),stackeq((x-i*y\n)*(r-i*s)),stackeq((x*r-y*s)-i\n*(y*r+x*s)),stackeq(conjugate(\n(x*r-y*s)+i*(y*r+x*s))),stacke\nq(conjugate((x+i*y)*(r+i*s))),\nstacklet(x+i*y,a),stacklet(r+i\n*s,b),stackeq(conjugate(a*b))]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EMPTYCHAR, EMPTYCHAR, CHECKMARK, CHECKMARK, CHECKMARK, CHECKMARK, CHECKMARK, EMPTYCHAR, EMPTYCHAR, CHECKMARK) \\[\\begin{array}{lll} &amp;a^\\star\\cdot b^\\star&amp; \\cr &amp;\\text{Let }a = x+\\mathrm{i}\\cdot y&amp; \\cr &amp;\\text{Let }b = r+\\mathrm{i}\\cdot s&amp; \\cr \\color{green}{\\checkmark}&amp;=\\left(x+\\mathrm{i}\\cdot y\\right)^\\star\\cdot \\left(r+\\mathrm{i}\\cdot s\\right)^\\star&amp; \\cr \\color{green}{\\checkmark}&amp;=\\left(x-\\mathrm{i}\\cdot y\\right)\\cdot \\left(r-\\mathrm{i}\\cdot s\\right)&amp; \\cr \\color{green}{\\checkmark}&amp;=x\\cdot r-y\\cdot s-\\mathrm{i}\\cdot \\left(y\\cdot r+x\\cdot s\\right)&amp; \\cr \\color{green}{\\checkmark}&amp;=\\left(x\\cdot r-y\\cdot s+\\mathrm{i}\\cdot \\left(y\\cdot r+x\\cdot s\\right)\\right)^\\star&amp; \\cr \\color{green}{\\checkmark}&amp;=\\left(\\left(x+\\mathrm{i}\\cdot y\\right)\\cdot \\left(r+\\mathrm{i}\\cdot s\\right)\\right)^\\star&amp; \\cr &amp;\\text{Let }x+\\mathrm{i}\\cdot y = a&amp; \\cr &amp;\\text{Let }r+\\mathrm{i}\\cdot s = b&amp; \\cr \\color{green}{\\checkmark}&amp;=\\left(a\\cdot b\\right)^\\star&amp; \\cr \\end{array}\\] Equiv <pre>[nounint(x*e^x,x,-inf,0),nounl\nimit(nounint(x*e^x,x,t,0),t,-i\nnf),nounlimit(e^t-t*e^t-1,t,-i\nnf),nounlimit(e^t,t,-inf)+noun\nlimit(-t*e^t,t,-inf)+nounlimit\n(-1,t,-inf),-1]</pre> <pre>[]</pre> 1 (EMPTYCHAR, CHECKMARK, CHECKMARK, CHECKMARK, CHECKMARK) \\[\\begin{array}{lll} &amp;\\int_{-\\infty }^{0}{x\\cdot e^{x}\\;\\mathrm{d}x}&amp; \\cr \\color{green}{\\checkmark}&amp;\\lim_{t\\rightarrow -\\infty }{\\int_{t}^{0}{x\\cdot e^{x}\\;\\mathrm{d}x}}&amp; \\cr \\color{green}{\\checkmark}&amp;\\lim_{t\\rightarrow -\\infty }{e^{t}-t\\cdot e^{t}-1}&amp; \\cr \\color{green}{\\checkmark}&amp;\\lim_{t\\rightarrow -\\infty }{e^{t}}+\\lim_{t\\rightarrow -\\infty }{\\left(-t\\right)\\cdot e^{t}}+\\lim_{t\\rightarrow -\\infty }{-1}&amp; \\cr \\color{green}{\\checkmark}&amp;-1&amp; \\cr \\end{array}\\] Equiv <pre>[noundiff(x^2,x),stackeq(nounl\nimit(((x+h)^2-x^2)/h,h,0)),sta\nckeq(nounlimit(2*x+h,h,0)),sta\nckeq(2*x)]</pre> <pre>[]</pre> 1 (EMPTYCHAR, CHECKMARK, CHECKMARK, CHECKMARK) \\[\\begin{array}{lll} &amp;\\frac{\\mathrm{d}}{\\mathrm{d} x} x^2&amp; \\cr \\color{green}{\\checkmark}&amp;=\\lim_{h\\rightarrow 0}{\\frac{{\\left(x+h\\right)}^2-x^2}{h}}&amp; \\cr \\color{green}{\\checkmark}&amp;=\\lim_{h\\rightarrow 0}{2\\cdot x+h}&amp; \\cr \\color{green}{\\checkmark}&amp;=2\\cdot x&amp; \\cr \\end{array}\\] Equiv <pre>[4*x=2,x=0.500,x=1/2]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;4\\cdot x=2&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x=0.5&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x=\\frac{1}{2}&amp; \\cr \\end{array}\\] Equiv <pre>[4*x=6,x=0.33333,x=1/3]</pre> <pre>[]</pre> 0 (EMPTYCHAR,QMCHAR,QMCHAR) \\[\\begin{array}{lll} &amp;4\\cdot x=6&amp; \\cr \\color{red}{?}&amp;x=0.33333&amp; \\cr \\color{red}{?}&amp;x=\\frac{1}{3}&amp; \\cr \\end{array}\\] Equiv <pre>[-2.5*t-11.25 = 0,-2.5*t = 11.\n25,t = 11.25/-2.50,t = -4.500]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;-2.5\\cdot t-11.25=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;-2.5\\cdot t=11.25&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;t=\\frac{11.25}{-2.5}&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;t=-4.5&amp; \\cr \\end{array}\\] Equiv <pre>[4*x-6*y=-3 and 3*y+4*x=3, 4*x\n-6*y=-3 and 9*y=6, 4*x=1 and 3\n*y=2, x=0.25 and y=2/3]</pre> <pre>[]</pre> 1 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;\\left\\{\\begin{array}{l}4\\cdot x-6\\cdot y=-3\\cr 3\\cdot y+4\\cdot x=3\\cr \\end{array}\\right.&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left\\{\\begin{array}{l}4\\cdot x-6\\cdot y=-3\\cr 9\\cdot y=6\\cr \\end{array}\\right.&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left\\{\\begin{array}{l}4\\cdot x=1\\cr 3\\cdot y=2\\cr \\end{array}\\right.&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left\\{\\begin{array}{l}x=0.25\\cr y=\\frac{2}{3}\\cr \\end{array}\\right.&amp; \\cr \\end{array}\\] Equiv <pre>[-12+3*noundiff(y(x),x)+8-8*no\nundiff(y(x),x)=0,-5*noundiff(y\n(x),x)=4,noundiff(y(x),x)=-4/5\n]</pre> <pre>[]</pre> <pre>[calculus]</pre> 1 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;-12+3\\cdot \\left(\\frac{\\mathrm{d}}{\\mathrm{d} x} y\\left(x\\right)\\right)+8-8\\cdot \\left(\\frac{\\mathrm{d}}{\\mathrm{d} x} y\\left(x\\right)\\right)=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;-5\\cdot \\left(\\frac{\\mathrm{d}}{\\mathrm{d} x} y\\left(x\\right)\\right)=4&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left(\\frac{\\mathrm{d}}{\\mathrm{d} x} y\\left(x\\right)\\right)=\\frac{-4}{5}&amp; \\cr \\end{array}\\] Equiv <pre>[x^2+1,x^3/3+x,x^2+1,x^3/3+x+c\n]</pre> <pre>[]</pre> <pre>[calculus]</pre> 1 (EMPTYCHAR,INTCHAR(x),DIFFCHAR(x),INTCHAR(x)) \\[\\begin{array}{lll} &amp;x^2+1&amp; \\cr \\color{blue}{\\int\\ldots\\mathrm{d}x}&amp;\\frac{x^3}{3}+x&amp; \\cr \\color{blue}{\\frac{\\mathrm{d}}{\\mathrm{d}x}\\ldots}&amp;x^2+1&amp; \\cr \\color{blue}{\\int\\ldots\\mathrm{d}x}&amp;\\frac{x^3}{3}+x+c&amp; \\cr \\end{array}\\] Equiv <pre>[3*x^(3/2)-2/x,(9*sqrt(x))/2+2\n/x^2,3*x^(3/2)-2/x+c]</pre> <pre>[]</pre> <pre>[calculus]</pre> 1 (EMPTYCHAR,DIFFCHAR(x),INTCHAR(x)) \\[\\begin{array}{lll} &amp;3\\cdot x^{\\frac{3}{2}}-\\frac{2}{x}&amp; \\cr \\color{blue}{\\frac{\\mathrm{d}}{\\mathrm{d}x}\\ldots}&amp;\\frac{9\\cdot \\sqrt{x}}{2}+\\frac{2}{x^2}&amp; \\cr \\color{blue}{\\int\\ldots\\mathrm{d}x}&amp;3\\cdot x^{\\frac{3}{2}}-\\frac{2}{x}+c&amp; \\cr \\end{array}\\] Equiv <pre>[x^2+1,stackeq(x^3/3+x),stacke\nq(x^2+1),stackeq(x^3/3+x+c)]</pre> <pre>[]</pre> <pre>[calculus]</pre> 1 (EMPTYCHAR,INTCHAR(x),DIFFCHAR(x),INTCHAR(x)) \\[\\begin{array}{lll} &amp;x^2+1&amp; \\cr \\color{blue}{\\int\\ldots\\mathrm{d}x}&amp;=\\frac{x^3}{3}+x&amp; \\cr \\color{blue}{\\frac{\\mathrm{d}}{\\mathrm{d}x}\\ldots}&amp;=x^2+1&amp; \\cr \\color{blue}{\\int\\ldots\\mathrm{d}x}&amp;=\\frac{x^3}{3}+x+c&amp; \\cr \\end{array}\\] Equiv <pre>[noundiff(x^2*sin(x),x),stacke\nq(x^2*noundiff(sin(x),x)+nound\niff(x^2,x)*sin(x)),stackeq(x^2\n*cos(x)+2*x*sin(x))]</pre> <pre>[]</pre> <pre>[calculus]</pre> 1 (EMPTYCHAR, CHECKMARK, CHECKMARK) \\[\\begin{array}{lll} &amp;\\frac{\\mathrm{d}}{\\mathrm{d} x} x^2\\cdot \\sin \\left( x \\right)&amp; \\cr \\color{green}{\\checkmark}&amp;=x^2\\cdot \\left(\\frac{\\mathrm{d}}{\\mathrm{d} x} \\sin \\left( x \\right)\\right)+\\left(\\frac{\\mathrm{d}}{\\mathrm{d} x} x^2\\right)\\cdot \\sin \\left( x \\right)&amp; \\cr \\color{green}{\\checkmark}&amp;=x^2\\cdot \\cos \\left( x \\right)+2\\cdot x\\cdot \\sin \\left( x \\right)&amp; \\cr \\end{array}\\] Equiv <pre>[y(x)*cos(x)+y(x)^2 = 6*x,cos(\nx)*diff(y(x),x)+2*y(x)*diff(y(\nx),x)-y(x)*sin(x) = 6,(cos(x)+\n2*y(x))*diff(y(x),x) = y(x)*si\nn(x)+6,diff(y(x),x) = (y(x)*si\nn(x)+6)/(cos(x)+2*y(x))]</pre> <pre>[]</pre> <pre>[calculus]</pre> 1 (EMPTYCHAR,DIFFCHAR(x), EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;y\\left(x\\right)\\cdot \\cos \\left( x \\right)+y^2\\left(x\\right)=6\\cdot x&amp; \\cr \\color{blue}{\\frac{\\mathrm{d}}{\\mathrm{d}x}\\ldots}&amp;\\cos \\left( x \\right)\\cdot \\left(\\frac{\\mathrm{d}}{\\mathrm{d} x} y\\left(x\\right)\\right)+2\\cdot y\\left(x\\right)\\cdot \\left(\\frac{\\mathrm{d}}{\\mathrm{d} x} y\\left(x\\right)\\right)+\\left(-y\\left(x\\right)\\right)\\cdot \\sin \\left( x \\right)=6&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left(\\cos \\left( x \\right)+2\\cdot y\\left(x\\right)\\right)\\cdot \\left(\\frac{\\mathrm{d}}{\\mathrm{d} x} y\\left(x\\right)\\right)=y\\left(x\\right)\\cdot \\sin \\left( x \\right)+6&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left(\\frac{\\mathrm{d}}{\\mathrm{d} x} y\\left(x\\right)\\right)=\\frac{y\\left(x\\right)\\cdot \\sin \\left( x \\right)+6}{\\cos \\left( x \\right)+2\\cdot y\\left(x\\right)}&amp; \\cr \\end{array}\\] Equiv <pre>[nounint(s^2+1,s),stackeq(s^3/\n3+s+c)]</pre> <pre>[]</pre> <pre>[calculus]</pre> 1 (EMPTYCHAR,INTCHAR(s)) \\[\\begin{array}{lll} &amp;\\int {s^2+1}{\\;\\mathrm{d}s}&amp; \\cr \\color{blue}{\\int\\ldots\\mathrm{d}s}&amp;=\\frac{s^3}{3}+s+c&amp; \\cr \\end{array}\\] Equiv <pre>[nounint(x^3*log(x),x),x^4/4*l\nog(x)-1/4*nounint(x^3,x),x^4/4\n*log(x)-x^4/16]</pre> <pre>[]</pre> <pre>[calculus]</pre> 1 (EMPTYCHAR, CHECKMARK, CHECKMARK) \\[\\begin{array}{lll} &amp;\\int {x^3\\cdot \\ln \\left( x \\right)}{\\;\\mathrm{d}x}&amp; \\cr \\color{green}{\\checkmark}&amp;\\frac{x^4}{4}\\cdot \\ln \\left( x \\right)-\\frac{1}{4}\\cdot \\int {x^3}{\\;\\mathrm{d}x}&amp; \\cr \\color{green}{\\checkmark}&amp;\\frac{x^4}{4}\\cdot \\ln \\left( x \\right)-\\frac{x^4}{16}&amp; \\cr \\end{array}\\] Equiv <pre>[nounint(x^3*log(x),x),x^4/4*l\nog(x)-1/4*nounint(x^3,x),x^4/4\n*log(x)-x^4/16+c]</pre> <pre>[]</pre> <pre>[calculus]</pre> 1 (EMPTYCHAR, CHECKMARK,INTCHAR(x)) \\[\\begin{array}{lll} &amp;\\int {x^3\\cdot \\ln \\left( x \\right)}{\\;\\mathrm{d}x}&amp; \\cr \\color{green}{\\checkmark}&amp;\\frac{x^4}{4}\\cdot \\ln \\left( x \\right)-\\frac{1}{4}\\cdot \\int {x^3}{\\;\\mathrm{d}x}&amp; \\cr \\color{blue}{\\int\\ldots\\mathrm{d}x}&amp;\\frac{x^4}{4}\\cdot \\ln \\left( x \\right)-\\frac{x^4}{16}+c&amp; \\cr \\end{array}\\] Equiv <pre>[noundiff(y,x)-2/x*y=x^3*sin(3\n*x),1/x^2*noundiff(y,x)-2/x^3*\ny=x*sin(3*x),noundiff(y/x^2,x)\n=x*sin(3*x),y/x^2 = nounint(x*\nsin(3*x),x),y/x^2=(sin(3*x)-3*\nx*cos(3*x))/9+c]</pre> <pre>[]</pre> <pre>[calculus]</pre> 1 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR,INTCHAR(x),INTCHAR(x)) \\[\\begin{array}{lll} &amp;\\frac{\\mathrm{d} y}{\\mathrm{d} x}-\\frac{2}{x}\\cdot y=x^3\\cdot \\sin \\left( 3\\cdot x \\right)&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\frac{1}{x^2}\\cdot \\left(\\frac{\\mathrm{d} y}{\\mathrm{d} x}\\right)-\\frac{2}{x^3}\\cdot y=x\\cdot \\sin \\left( 3\\cdot x \\right)&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left(\\frac{\\mathrm{d}}{\\mathrm{d} x} \\frac{y}{x^2}\\right)=x\\cdot \\sin \\left( 3\\cdot x \\right)&amp; \\cr \\color{blue}{\\int\\ldots\\mathrm{d}x}&amp;\\frac{y}{x^2}=\\int {x\\cdot \\sin \\left( 3\\cdot x \\right)}{\\;\\mathrm{d}x}&amp; \\cr \\color{blue}{\\int\\ldots\\mathrm{d}x}&amp;\\frac{y}{x^2}=\\frac{\\sin \\left( 3\\cdot x \\right)-3\\cdot x\\cdot \\cos \\left( 3\\cdot x \\right)}{9}+c&amp; \\cr \\end{array}\\]"},{"location":"en/Authoring/Answer_Tests/Results/EquivFirst/","title":"EquivFirst: Answer test results","text":"<p>This page exposes the results of running answer tests on STACK test cases.  This page is automatically generated from the STACK unit tests and is designed to show question authors what answer tests actually do.  This includes cases where answer tests currentl fail, which gives a negative expected mark.  Comments and further test cases are very welcome.</p> EquivFirst Test?Student responseTeacher answerOptMarkAnswer note EquivFirst <pre>x</pre> <pre>[x^2=4,x=2 or x=-2]</pre> -1 ATEquivFirst_SA_not_list. The first argument to the Equiv answer test should be a list, but the test failed. Please contact your teacher. EquivFirst <pre>[x^2=4,x=2 or x=-2]</pre> <pre>x</pre> -1 ATEquivFirst_SB_not_list. The second argument to the Equiv answer test should be a list, but the test failed. Please contact your teacher. EquivFirst <pre>[1/0]</pre> <pre>[x^2=4,x=2 or x=-2]</pre> -1 ATEquivFirst_STACKERROR_SAns. EquivFirst <pre>[x^2=4,x=2 or x=-2]</pre> <pre>[1/0]</pre> -1 ATEquivFirst_STACKERROR_TAns. EquivFirst <pre>[x^2=4,x=2 or x=-2]</pre> <pre>[x^2=4,x=2 or x=-2]</pre> 1 (EMPTYCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;x^2=4&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x=2\\,{\\text{ or }}\\, x=-2&amp; \\cr \\end{array}\\] EquivFirst <pre>[x^2=9,x=3 or x=-3]</pre> <pre>[x^2=4,x=2 or x=-2]</pre> 0 ATEquivFirst_SA_wrong_start The first line in your argument must be \"\\(x^2=4\\)\". EquivFirst <pre>[x^2=4,x=2]</pre> <pre>[x^2=4,x=2 or x=-2]</pre> 0 (EMPTYCHAR,IMPLIEDCHAR) \\[\\begin{array}{lll} &amp;x^2=4&amp; \\cr \\color{red}{\\Leftarrow}&amp;x=2&amp; \\cr \\end{array}\\] EquivFirst <pre>[x^2=4,x^2-4=0,(x-2)*(x+2)=0,x\n=2 or x=-2]</pre> <pre>[x^2=4,x=2 or x=-2]</pre> 1 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;x^2=4&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x^2-4=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;\\left(x-2\\right)\\cdot \\left(x+2\\right)=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x=2\\,{\\text{ or }}\\, x=-2&amp; \\cr \\end{array}\\] EquivFirst <pre>[x^2=4,x= #pm#2, x=2 or x=-2]</pre> <pre>[x^2=4,x=2 or x=-2]</pre> 1 (EMPTYCHAR, EQUIVCHAR, EQUIVCHAR) \\[\\begin{array}{lll} &amp;x^2=4&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x= \\pm 2&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x=2\\,{\\text{ or }}\\, x=-2&amp; \\cr \\end{array}\\] EquivFirst <pre>[x^2-6*x+9=0,x=3]</pre> <pre>[x^2-6*x+9=0,x=3]</pre> 1 (EMPTYCHAR,SAMEROOTS) \\[\\begin{array}{lll} &amp;x^2-6\\cdot x+9=0&amp; \\cr \\color{green}{\\text{(Same roots)}}&amp;x=3&amp; \\cr \\end{array}\\] EquivFirst <pre>[x^2=4,x=2]</pre> <pre>[x^2=4,x=2]</pre> <pre>[assumepos]</pre> 1 (ASSUMEPOSVARS, EQUIVCHAR) \\[\\begin{array}{lll}\\color{blue}{\\text{Assume +ve vars}}&amp;x^2=4&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x=2&amp; \\cr \\end{array}\\]"},{"location":"en/Authoring/Answer_Tests/Results/Expanded/","title":"Expanded: Answer test results","text":"<p>This page exposes the results of running answer tests on STACK test cases.  This page is automatically generated from the STACK unit tests and is designed to show question authors what answer tests actually do.  This includes cases where answer tests currentl fail, which gives a negative expected mark.  Comments and further test cases are very welcome.</p> Expanded Test?Student responseTeacher answerOptMarkAnswer note Expanded <pre>1/0</pre> <pre>0</pre> -1 ATExpanded_STACKERROR_SAns. TEST_FAILED The answer test failed to execute correctly: please alert your teacher. Division by zero. Expanded <pre>x&gt;2</pre> <pre>x^2-2*x+1</pre> 0 ATExpanded_SA_not_expression. Your answer should be an expression, not an equation, inequality, list, set or matrix. Expanded <pre>x^2-1</pre> <pre>0</pre> 1 ATExpanded_TRUE. Expanded <pre>2*(x-1)</pre> <pre>0</pre> 0 ATExpanded_FALSE. Expanded <pre>(x-1)*(x+1)</pre> <pre>0</pre> 0 ATExpanded_FALSE. Expanded <pre>(x-a)*(x-b)</pre> <pre>0</pre> 0 ATExpanded_FALSE. Expanded <pre>x^2-(a+b)*x+a*b</pre> <pre>0</pre> 0 ATExpanded_FALSE. Expanded <pre>x^2-a*x-b*x+a*b</pre> <pre>0</pre> 1 ATExpanded_TRUE. Expanded <pre>cos(2*x)</pre> <pre>0</pre> 1 ATExpanded_TRUE. Expanded <pre>p+1</pre> <pre>0</pre> 1 ATExpanded_TRUE. Expanded <pre>(p+1)*(p-1)</pre> <pre>0</pre> 0 ATExpanded_FALSE. Expanded <pre>3+2*sqrt(3)</pre> <pre>0</pre> 1 ATExpanded_TRUE. Expanded <pre>3+sqrt(12)</pre> <pre>0</pre> 1 ATExpanded_TRUE. Expanded <pre>(1+sqrt(5))*(1-sqrt(3))</pre> <pre>0</pre> 0 ATExpanded_FALSE. This fails, but you are never going to ask students to do this anyway... Expanded ! <pre>(a-x)^6000</pre> <pre>0</pre> -2 ATExpanded_TRUE."},{"location":"en/Authoring/Answer_Tests/Results/FacForm/","title":"FacForm: Answer test results","text":"<p>This page exposes the results of running answer tests on STACK test cases.  This page is automatically generated from the STACK unit tests and is designed to show question authors what answer tests actually do.  This includes cases where answer tests currentl fail, which gives a negative expected mark.  Comments and further test cases are very welcome.</p> FacForm Test?Student responseTeacher answerOptMarkAnswer note FacForm <pre>1/0</pre> <pre>0</pre> <pre>x</pre> -1 ATFacForm_STACKERROR_SAns. FacForm <pre>0</pre> <pre>1/0</pre> <pre>x</pre> -1 ATFacForm_STACKERROR_TAns. FacForm <pre>0</pre> <pre>0</pre> <pre>1/0</pre> -1 ATFacForm_STACKERROR_Opt. Trivial cases FacForm <pre>2</pre> <pre>2</pre> <pre>x</pre> 1 ATFacForm_int_true. FacForm <pre>6</pre> <pre>6</pre> <pre>x</pre> 1 ATFacForm_int_true. FacForm <pre>1/3</pre> <pre>1/3</pre> <pre>x</pre> 1 ATFacForm_true. FacForm <pre>3*x^2</pre> <pre>3*x^2</pre> <pre>x</pre> 1 ATFacForm_true. FacForm <pre>4*x^2</pre> <pre>4*x^2</pre> <pre>x</pre> 1 ATFacForm_true. Linear integer factors FacForm <pre>2*(x-1)</pre> <pre>2*x-2</pre> <pre>x</pre> 1 ATFacForm_true. FacForm <pre>2*x-2</pre> <pre>2*x-2</pre> <pre>x</pre> 0 ATFacForm_notfactored. Your answer is not factored. You need to take out a common factor. FacForm <pre>2*(x+1)</pre> <pre>2*x-2</pre> <pre>x</pre> 0 ATFacForm_isfactored. ATFacForm_notalgequiv. Your answer is factored, well done. Note that your answer is not algebraically equivalent to the correct answer. You must have done something wrong. FacForm <pre>2*x+2</pre> <pre>2*x-2</pre> <pre>x</pre> 0 ATFacForm_notfactored. ATFacForm_notalgequiv. Your answer is not factored. You need to take out a common factor. Note that your answer is not algebraically equivalent to the correct answer. You must have done something wrong. FacForm <pre>2*(x+0.5)</pre> <pre>2*x+1</pre> <pre>x</pre> 1 ATFacForm_default_true. Linear factors FacForm <pre>t*(2*x+1)</pre> <pre>t*(2*x+1)</pre> <pre>x</pre> 1 ATFacForm_true. FacForm <pre>t*x+t</pre> <pre>t*(x+1)</pre> <pre>x</pre> 0 ATFacForm_notfactored. Your answer is not factored. FacForm <pre>6*s*t+10*s</pre> <pre>2*s*(3*t+5)</pre> <pre>t</pre> 0 ATFacForm_notfactored. Your answer is not factored. Quadratic, with no const FacForm <pre>2*x*(x-3)</pre> <pre>2*x^2-6*x</pre> <pre>x</pre> 1 ATFacForm_true. FacForm <pre>2*(x^2-3*x)</pre> <pre>2*x*(x-3)</pre> <pre>x</pre> 0 ATFacForm_notfactored. Your answer is not factored. You could still do some more work on the term \\(x^2-3\\cdot x\\). FacForm <pre>x*(2*x-6)</pre> <pre>2*x*(x-3)</pre> <pre>x</pre> 0 ATFacForm_notfactored. Your answer is not factored. You could still do some more work on the term \\(2\\cdot x-6\\). You need to take out a common factor. Quadratic FacForm <pre>(x+2)*(x+3)</pre> <pre>(x+2)*(x+3)</pre> <pre>x</pre> 1 ATFacForm_true. FacForm <pre>(x+2)*(2*x+6)</pre> <pre>2*(x+2)*(x+3)</pre> <pre>x</pre> 0 ATFacForm_notfactored. Your answer is not factored. You could still do some more work on the term \\(2\\cdot x+6\\). You need to take out a common factor. FacForm <pre>(z*x+z)*(2*x+6)</pre> <pre>2*z*(x+1)*(x+3)</pre> <pre>x</pre> 0 ATFacForm_notfactored. Your answer is not factored. You could still do some more work on the term \\(z\\cdot x+z\\). You could still do some more work on the term \\(2\\cdot x+6\\). You need to take out a common factor. FacForm <pre>(x+t)*(x-t)</pre> <pre>x^2-t^2</pre> <pre>x</pre> 1 ATFacForm_true. FacForm <pre>t^2-1</pre> <pre>(t-1)*(t+1)</pre> <pre>t</pre> 0 ATFacForm_notfactored. Your answer is not factored. FacForm <pre>t^2+1</pre> <pre>t^2+1</pre> <pre>t</pre> 1 ATFacForm_true. FacForm <pre>v^2+1</pre> <pre>v^2+1</pre> <pre>v</pre> 1 ATFacForm_true. FacForm <pre>v^2-1</pre> <pre>v^2-1</pre> <pre>v</pre> 0 ATFacForm_notfactored. Your answer is not factored. FacForm <pre>-(3*w-4*v+9*u)*(3*w+4*v-u)</pre> <pre>-(3*w-4*v+9*u)*(3*w+4*v-u)</pre> <pre>v</pre> 1 ATFacForm_true. FacForm <pre>-6*k*(4*b-k-1)</pre> <pre>6*k*(1+k-4*b)</pre> <pre>k</pre> 1 ATFacForm_default_true. FacForm <pre>-2*3*k*(4*b-k-1)</pre> <pre>6*k*(1+k-4*b)</pre> <pre>k</pre> 1 ATFacForm_true. FacForm <pre>-(6*k*(4*b-k-1))</pre> <pre>6*k*(1+k-4*b)</pre> <pre>k</pre> 1 ATFacForm_default_true. FacForm <pre>-(6*a*(4*b-a-1))</pre> <pre>6*a*(1+a-4*b)</pre> <pre>a</pre> 1 ATFacForm_true. FacForm <pre>-(6*a*(4*b-a-1))</pre> <pre>6*a*(-(4*b)+a+1)</pre> <pre>a</pre> 1 ATFacForm_true. FacForm <pre>x*(x-4+4/x)</pre> <pre>x^2-4*x+4</pre> <pre>x</pre> 0 ATFacForm_notfactored. Your answer is not factored. You could still do some more work on the term \\(x-4+\\frac{4}{x}\\). This term is expected to be a polynomial, but is not. These are delicate cases! FacForm <pre>(2-x)*(3-x)</pre> <pre>(x-2)*(x-3)</pre> <pre>x</pre> 1 ATFacForm_true. FacForm <pre>(1-x)^2</pre> <pre>(x-1)^2</pre> <pre>x</pre> 1 ATFacForm_true. FacForm <pre>(1-x)*(1-x)</pre> <pre>(x-1)^2</pre> <pre>x</pre> 1 ATFacForm_true. FacForm <pre>-(1-x)^2</pre> <pre>-(x-1)^2</pre> <pre>x</pre> 1 ATFacForm_true. FacForm <pre>(1-x)^2</pre> <pre>(x-1)^2</pre> <pre>x</pre> 1 ATFacForm_true. FacForm <pre>4*(1-x/2)^2</pre> <pre>(x-2)^2</pre> <pre>x</pre> 1 ATFacForm_default_true. FacForm <pre>-3*(x-4)*(x+1)</pre> <pre>-3*x^2+9*x+12</pre> <pre>x</pre> 1 ATFacForm_true. FacForm <pre>3*(-x+4)*(x+1)</pre> <pre>-3*x^2+9*x+12</pre> <pre>x</pre> 1 ATFacForm_true. FacForm <pre>3*(4-x)*(x+1)</pre> <pre>-3*x^2+9*x+12</pre> <pre>x</pre> 1 ATFacForm_true. Cubics FacForm <pre>(x-1)*(x^2+x+1)</pre> <pre>x^3-1</pre> <pre>x</pre> 1 ATFacForm_true. FacForm <pre>x^3-x+1</pre> <pre>x^3-x+1</pre> <pre>x</pre> 1 ATFacForm_true. FacForm <pre>7*x^3-7*x+7</pre> <pre>7*(x^3-x+1)</pre> <pre>x</pre> 0 ATFacForm_notfactored. Your answer is not factored. You need to take out a common factor. FacForm <pre>(1-x)*(2-x)*(3-x)</pre> <pre>-x^3+6*x^2-11*x+6</pre> <pre>x</pre> 1 ATFacForm_true. FacForm <pre>(2-x)*(2-x)*(3-x)</pre> <pre>-x^3+7*x^2-16*x+12</pre> <pre>x</pre> 1 ATFacForm_true. FacForm <pre>(2-x)^2*(3-x)</pre> <pre>-x^3+7*x^2-16*x+12</pre> <pre>x</pre> 1 ATFacForm_true. FacForm <pre>(x^2-4*x+4)*(3-x)</pre> <pre>-x^3+7*x^2-16*x+12</pre> <pre>x</pre> 0 ATFacForm_notfactored. Your answer is not factored. You could still do some more work on the term \\(x^2-4\\cdot x+4\\). FacForm <pre>(x^2-3*x+2)*(3-x)</pre> <pre>-x^3+6*x^2-11*x+6</pre> <pre>x</pre> 0 ATFacForm_notfactored. Your answer is not factored. You could still do some more work on the term \\(x^2-3\\cdot x+2\\). FacForm <pre>3*y^3-6*y^2-24*y</pre> <pre>3*(y-4)*y*(y+2)</pre> <pre>y</pre> 0 ATFacForm_notfactored. Your answer is not factored. You need to take out a common factor. FacForm <pre>3*(y^3-2*y^2-8*y)</pre> <pre>3*(y-4)*y*(y+2)</pre> <pre>y</pre> 0 ATFacForm_notfactored. Your answer is not factored. You could still do some more work on the term \\(y^3-2\\cdot y^2-8\\cdot y\\). FacForm <pre>3*y*(y^2-2*y-8)</pre> <pre>3*(y-4)*y*(y+2)</pre> <pre>y</pre> 0 ATFacForm_notfactored. Your answer is not factored. You could still do some more work on the term \\(y^2-2\\cdot y-8\\). FacForm <pre>3*(y^2-4*y)*(y+2)</pre> <pre>3*(y-4)*y*(y+2)</pre> <pre>y</pre> 0 ATFacForm_notfactored. Your answer is not factored. You could still do some more work on the term \\(y^2-4\\cdot y\\). FacForm <pre>(y-4)*y*(3*y+6)</pre> <pre>3*(y-4)*y*(y+2)</pre> <pre>y</pre> 0 ATFacForm_notfactored. Your answer is not factored. You could still do some more work on the term \\(3\\cdot y+6\\). You need to take out a common factor. FacForm <pre>(a-x)^6000</pre> <pre>(a-x)^6000</pre> <pre>x</pre> 1 ATFacForm_true. FacForm <pre>(x-a)^6000</pre> <pre>(a-x)^6000</pre> <pre>x</pre> 1 ATFacForm_true. Needs flattening FacForm <pre>2*a*(a*b-1)</pre> <pre>2*a*(a*b-1)</pre> <pre>a</pre> 1 ATFacForm_true. FacForm <pre>(2*a)*(a*b-1)</pre> <pre>2*a*(a*b-1)</pre> <pre>a</pre> 1 ATFacForm_true. FacForm <pre>3*x*(7*y-3)*(7*y+3)</pre> <pre>3*x*(7*y-3)*(7*y+3)</pre> <pre>x</pre> 1 ATFacForm_true. FacForm <pre>3*x*(7*y-3)*(7*y+3)</pre> <pre>3*x*(7*y-3)*(7*y+3)</pre> <pre>y</pre> 1 ATFacForm_true. Not polynomials in a variable FacForm <pre>(sin(x)+1)*(sin(x)-1)</pre> <pre>sin(x)^2-1</pre> <pre>sin(x)</pre> 1 ATFacForm_true. FacForm <pre>(cos(t)-sqrt(2))^2</pre> <pre>cos(t)^2-2*sqrt(2)*cos(t)+2</pre> <pre>cos(t)</pre> 1 ATFacForm_true. FacForm <pre>7</pre> <pre>7</pre> <pre>x</pre> 1 ATFacForm_int_true. Factors over other fields FacForm <pre>24*(x-1/4)</pre> <pre>24*x-6</pre> <pre>x</pre> 1 ATFacForm_default_true. FacForm <pre>(x-sqrt(2))*(x+sqrt(2))</pre> <pre>x^2-2</pre> <pre>x</pre> 1 ATFacForm_true. FacForm <pre>x^2-2</pre> <pre>x^2-2</pre> <pre>x</pre> 1 ATFacForm_true. FacForm <pre>(%i*x-2*%i)</pre> <pre>%i*(x-2)</pre> <pre>x</pre> 0 ATFacForm_notfactored. Your answer is not factored. FacForm <pre>%i*(x-2)</pre> <pre>(%i*x-2*%i)</pre> <pre>x</pre> 1 ATFacForm_true. FacForm <pre>(x-%i)*(x+%i)</pre> <pre>x^2+1</pre> <pre>x</pre> 1 ATFacForm_true. FacForm <pre>(x-1)*(x+(1+sqrt(3)*%i)/2)*(x+\n(1-sqrt(3)*%i)/2)</pre> <pre>x^3-1</pre> <pre>x</pre> 1 ATFacForm_default_true."},{"location":"en/Authoring/Answer_Tests/Results/GT/","title":"GT: Answer test results","text":"<p>This page exposes the results of running answer tests on STACK test cases.  This page is automatically generated from the STACK unit tests and is designed to show question authors what answer tests actually do.  This includes cases where answer tests currentl fail, which gives a negative expected mark.  Comments and further test cases are very welcome.</p> GT Test?Student responseTeacher answerOptMarkAnswer note GT <pre>1/0</pre> <pre>1</pre> -1 ATGT_STACKERROR_SAns. TEST_FAILED The answer test failed to execute correctly: please alert your teacher. Division by zero. GT <pre>1</pre> <pre>1/0</pre> -1 ATGT_STACKERROR_TAns. TEST_FAILED The answer test failed to execute correctly: please alert your teacher. Division by zero. GT <pre>1</pre> <pre>1</pre> 0 ATGT_false. GT <pre>2</pre> <pre>1</pre> 1 ATGT_true. GT <pre>1</pre> <pre>2.1</pre> 0 ATGT_false. GT <pre>pi</pre> <pre>3</pre> 1 ATGT_true. GT <pre>pi+2</pre> <pre>5</pre> 1 ATGT_true. Infinity GT <pre>-inf</pre> <pre>0</pre> 0 Not number GT <pre>inf</pre> <pre>0</pre> 0 Not number"},{"location":"en/Authoring/Answer_Tests/Results/GTE/","title":"GTE: Answer test results","text":"<p>This page exposes the results of running answer tests on STACK test cases.  This page is automatically generated from the STACK unit tests and is designed to show question authors what answer tests actually do.  This includes cases where answer tests currentl fail, which gives a negative expected mark.  Comments and further test cases are very welcome.</p> GTE Test?Student responseTeacher answerOptMarkAnswer note GTE <pre>1/0</pre> <pre>1</pre> -1 ATGTE_STACKERROR_SAns. TEST_FAILED The answer test failed to execute correctly: please alert your teacher. Division by zero. GTE <pre>1</pre> <pre>1/0</pre> -1 ATGTE_STACKERROR_TAns. TEST_FAILED The answer test failed to execute correctly: please alert your teacher. Division by zero. GTE <pre>1</pre> <pre>1</pre> 1 ATGTE_true. GTE <pre>2</pre> <pre>1</pre> 1 ATGTE_true. GTE <pre>1</pre> <pre>2.1</pre> 0 ATGTE_false. GTE <pre>pi</pre> <pre>3</pre> 1 ATGTE_true. GTE <pre>pi+2</pre> <pre>5</pre> 1 ATGTE_true."},{"location":"en/Authoring/Answer_Tests/Results/Int/","title":"Int: Answer test results","text":"<p>This page exposes the results of running answer tests on STACK test cases.  This page is automatically generated from the STACK unit tests and is designed to show question authors what answer tests actually do.  This includes cases where answer tests currentl fail, which gives a negative expected mark.  Comments and further test cases are very welcome.</p> Int Test?Student responseTeacher answerOptMarkAnswer note Int <pre>1/0</pre> <pre>1</pre> -1 STACKERROR_OPTION. TEST_FAILED The answer test failed to execute correctly: please alert your teacher. Missing option when executing the test.  Int <pre>1/0</pre> <pre>1</pre> <pre>x</pre> -1 ATInt_STACKERROR_SAns. Int <pre>1</pre> <pre>1/0</pre> <pre>x</pre> -1 ATInt_STACKERROR_TAns. Int <pre>0</pre> <pre>0</pre> <pre>1/0</pre> -1 ATInt_STACKERROR_Opt. Int <pre>0</pre> <pre>0</pre> <pre>[x,1/0]</pre> -1 ATInt_STACKERROR_Opt. Int <pre>0</pre> <pre>0</pre> <pre>[x,NOCONST,1/0]</pre> -1 ATInt_STACKERROR_Opt. Basic tests Int <pre>x^3/3</pre> <pre>x^3/3</pre> <pre>x</pre> 0 ATInt_const. You need to add a constant of integration, otherwise this appears to be correct. Int <pre>x^3/3+1</pre> <pre>x^3/3</pre> <pre>x</pre> 0 ATInt_const_int. You need to add a constant of integration. This should be an arbitrary constant, not a number. Int <pre>x^3/3+c</pre> <pre>x^3/3</pre> <pre>x</pre> 1 ATInt_true. Int <pre>x^3/3-c</pre> <pre>x^3/3</pre> <pre>x</pre> 1 ATInt_true. Int <pre>x^3/3+c+1</pre> <pre>x^3/3</pre> <pre>x</pre> 1 ATInt_true. Int <pre>x^3/3+3*c</pre> <pre>x^3/3</pre> <pre>x</pre> 1 ATInt_true. Int <pre>(x^3+c)/3</pre> <pre>x^3/3</pre> <pre>x</pre> 1 ATInt_true. Int <pre>x^(k+1)/(k+1)</pre> <pre>x^(k+1)/(k+1)</pre> <pre>x</pre> 0 ATInt_const. You need to add a constant of integration, otherwise this appears to be correct. Int <pre>x^(k+1)/(k+1)+c</pre> <pre>x^(k+1)/(k+1)</pre> <pre>x</pre> 1 ATInt_true. Int ! <pre>(x^(k+1)-1)/(k+1)</pre> <pre>x^(k+1)/(k+1)</pre> <pre>x</pre> -2 ATInt_true. Int ! <pre>(x^(k+1)-1)/(k+1)+c</pre> <pre>x^(k+1)/(k+1)+c</pre> <pre>x</pre> -3 ATInt_weirdconst. The formal derivative of your answer does equal the expression that you were asked to integrate. However, you have a strange constant of integration. Please ask your teacher about this. Int <pre>x^3/3+c+k</pre> <pre>x^3/3</pre> <pre>x</pre> 0 ATInt_weirdconst. The formal derivative of your answer does equal the expression that you were asked to integrate. However, you have a strange constant of integration. Please ask your teacher about this. Int <pre>x^3/3+c^2</pre> <pre>x^3/3</pre> <pre>x</pre> 0 ATInt_weirdconst. The formal derivative of your answer does equal the expression that you were asked to integrate. However, you have a strange constant of integration. Please ask your teacher about this. Int <pre>x^3/3+c^3</pre> <pre>x^3/3</pre> <pre>x</pre> 0 ATInt_weirdconst. The formal derivative of your answer does equal the expression that you were asked to integrate. However, you have a strange constant of integration. Please ask your teacher about this. Int <pre>x^3/3*c</pre> <pre>x^3/3</pre> <pre>x</pre> 0 ATInt_generic. The derivative of your answer should be equal to the expression that you were asked to integrate, that was: \\[x^2\\] In fact, the derivative of your answer, with respect to \\(x\\) is: \\[c\\cdot x^2\\] so you must have done something wrong! Int <pre>X^3/3+c</pre> <pre>x^3/3</pre> <pre>x</pre> 0 ATInt_generic. ATInt_var_SB_notSA. The derivative of your answer should be equal to the expression that you were asked to integrate, that was: \\[x^2\\] In fact, the derivative of your answer, with respect to \\(x\\) is: \\[0\\] so you must have done something wrong! Int <pre>sin(2*x)</pre> <pre>x^3/3</pre> <pre>x</pre> 0 ATInt_generic. The derivative of your answer should be equal to the expression that you were asked to integrate, that was: \\[x^2\\] In fact, the derivative of your answer, with respect to \\(x\\) is: \\[2\\cdot \\cos \\left( 2\\cdot x \\right)\\] so you must have done something wrong! Int <pre>x^2/2-2*x+2+c</pre> <pre>(x-2)^2/2</pre> <pre>x</pre> 1 ATInt_true. Int <pre>(t-1)^5/5+c</pre> <pre>(t-1)^5/5</pre> <pre>t</pre> 1 ATInt_true. Int <pre>(v-1)^5/5+c</pre> <pre>(v-1)^5/5</pre> <pre>v</pre> 1 ATInt_true. Int <pre>cos(2*x)/2+1+c</pre> <pre>cos(2*x)/2</pre> <pre>x</pre> 1 ATInt_true. Int <pre>(x-a)^6001/6001+c</pre> <pre>(x-a)^6001/6001</pre> <pre>x</pre> 1 ATInt_true. Int <pre>(x-a)^6001/6001</pre> <pre>(x-a)^6001/6001</pre> <pre>x</pre> 0 ATInt_const. You need to add a constant of integration, otherwise this appears to be correct. Int <pre>6000*(x-a)^5999</pre> <pre>(x-a)^6001/6001</pre> <pre>x</pre> 0 ATInt_diff. It looks like you have differentiated instead! Int <pre>4*%e^(4*x)/(%e^(4*x)+1)</pre> <pre>log(%e^(4*x)+1)+c</pre> <pre>x</pre> 0 ATInt_generic. The derivative of your answer should be equal to the expression that you were asked to integrate, that was: \\[\\frac{4\\cdot e^{4\\cdot x}}{e^{4\\cdot x}+1}\\] In fact, the derivative of your answer, with respect to \\(x\\) is: \\[\\frac{16\\cdot e^{4\\cdot x}}{e^{4\\cdot x}+1}-\\frac{16\\cdot e^{8 \\cdot x}}{{\\left(e^{4\\cdot x}+1\\right)}^2}\\] so you must have done something wrong! The teacher adds a constant Int <pre>x^3/3+c</pre> <pre>x^3/3+c</pre> <pre>x</pre> 1 ATInt_true. Int <pre>x^2/2-2*x+2+c</pre> <pre>(x-2)^2/2+k</pre> <pre>x</pre> 1 ATInt_true. The teacher condones lack of constant, or numerical constant Int <pre>x^3/3</pre> <pre>x^3/3</pre> <pre>[x,NOCONST]</pre> 1 ATInt_const_condone. Int <pre>x^3/3+c</pre> <pre>x^3/3</pre> <pre>[x,NOCONST]</pre> 1 ATInt_true. Int <pre>x^2/2-2*x+2</pre> <pre>(x-2)^2/2+k</pre> <pre>[x,NOCONST]</pre> 1 ATInt_const_condone. Int <pre>x^3/3+1</pre> <pre>x^3/3</pre> <pre>[x,NOCONST]</pre> 1 ATInt_const_int_condone. Int <pre>x^3/3+c^2</pre> <pre>x^3/3</pre> <pre>[x,NOCONST]</pre> 0 ATInt_weirdconst. The formal derivative of your answer does equal the expression that you were asked to integrate. However, you have a strange constant of integration. Please ask your teacher about this. Int <pre>n*x^n</pre> <pre>n*x^(n-1)</pre> <pre>x</pre> 0 ATInt_generic. The derivative of your answer should be equal to the expression that you were asked to integrate, that was: \\[\\left(n-1\\right)\\cdot n\\cdot x^{n-2}\\] In fact, the derivative of your answer, with respect to \\(x\\) is: \\[n^2\\cdot x^{n-1}\\] so you must have done something wrong! Int <pre>n*x^n</pre> <pre>(assume(n&gt;0), n*x^(n-1))</pre> <pre>x</pre> 0 ATInt_generic. The derivative of your answer should be equal to the expression that you were asked to integrate, that was: \\[\\left(n-1\\right)\\cdot n\\cdot x^{n-2}\\] In fact, the derivative of your answer, with respect to \\(x\\) is: \\[n^2\\cdot x^{n-1}\\] so you must have done something wrong! Special case Int <pre>exp(x)+c</pre> <pre>exp(x)</pre> <pre>x</pre> 1 ATInt_true. Int <pre>exp(x)</pre> <pre>exp(x)</pre> <pre>x</pre> 0 ATInt_const. You need to add a constant of integration, otherwise this appears to be correct. Int <pre>exp(x)</pre> <pre>exp(x)</pre> <pre>[x,NOCONST]</pre> 1 ATInt_const_condone. Student differentiates by mistake Int <pre>2*x</pre> <pre>x^3/3</pre> <pre>x</pre> 0 ATInt_diff. It looks like you have differentiated instead! Int <pre>2*x+c</pre> <pre>x^3/3</pre> <pre>x</pre> 0 ATInt_diff. It looks like you have differentiated instead! Sloppy logs (teacher ignores abs(x) ) Int <pre>ln(x)</pre> <pre>ln(x)</pre> <pre>x</pre> 0 ATInt_const. You need to add a constant of integration, otherwise this appears to be correct. Int <pre>ln(x)</pre> <pre>ln(x)</pre> <pre>[x,NOCONST]</pre> 1 ATInt_const_condone. Int <pre>ln(x)+c</pre> <pre>ln(x)+c</pre> <pre>x</pre> 1 ATInt_true_equiv. Int <pre>ln(k*x)</pre> <pre>ln(x)+c</pre> <pre>x</pre> 1 ATInt_true_equiv. Fussy logs (teacher uses abs(x) ) Int <pre>ln(x)</pre> <pre>ln(abs(x))+c</pre> <pre>x</pre> 0 ATInt_EqFormalDiff. ATInt_logabs. The formal derivative of your answer does equal the expression that you were asked to integrate. However, your answer differs from the correct answer in a significant way, that is to say not just, e.g., a constant of integration. Please ask your teacher about this. Your teacher may expect you to use the result \\(\\int\\frac{1}{x} dx = \\log(|x|)+c\\), rather than \\(\\int\\frac{1}{x} dx = \\log(x)+c\\). Int <pre>ln(x)+c</pre> <pre>ln(abs(x))+c</pre> <pre>x</pre> 0 ATInt_EqFormalDiff. ATInt_logabs. The formal derivative of your answer does equal the expression that you were asked to integrate. However, your answer differs from the correct answer in a significant way, that is to say not just, e.g., a constant of integration. Please ask your teacher about this. Your teacher may expect you to use the result \\(\\int\\frac{1}{x} dx = \\log(|x|)+c\\), rather than \\(\\int\\frac{1}{x} dx = \\log(x)+c\\). Int <pre>ln(x)</pre> <pre>ln(abs(x))+c</pre> <pre>[x, NOCONST]</pre> 0 ATInt_EqFormalDiff. ATInt_logabs. The formal derivative of your answer does equal the expression that you were asked to integrate. However, your answer differs from the correct answer in a significant way, that is to say not just, e.g., a constant of integration. Please ask your teacher about this. Your teacher may expect you to use the result \\(\\int\\frac{1}{x} dx = \\log(|x|)+c\\), rather than \\(\\int\\frac{1}{x} dx = \\log(x)+c\\). Int <pre>ln(abs(x))</pre> <pre>ln(abs(x))+c</pre> <pre>x</pre> 0 ATInt_const. You need to add a constant of integration, otherwise this appears to be correct. Int <pre>ln(abs(x))+c</pre> <pre>ln(abs(x))+c</pre> <pre>x</pre> 1 ATInt_true_equiv. Int <pre>ln(k*x)</pre> <pre>ln(abs(x))+c</pre> <pre>x</pre> 0 ATInt_EqFormalDiff. ATInt_logabs. The formal derivative of your answer does equal the expression that you were asked to integrate. However, your answer differs from the correct answer in a significant way, that is to say not just, e.g., a constant of integration. Please ask your teacher about this. Your teacher may expect you to use the result \\(\\int\\frac{1}{x} dx = \\log(|x|)+c\\), rather than \\(\\int\\frac{1}{x} dx = \\log(x)+c\\). Int <pre>ln(k*abs(x))</pre> <pre>ln(abs(x))+c</pre> <pre>x</pre> 1 ATInt_true_equiv. Int <pre>ln(abs(k*x))</pre> <pre>ln(abs(x))+c</pre> <pre>x</pre> 1 ATInt_true_equiv. Teacher uses ln(k*abs(x)) Int <pre>ln(x)</pre> <pre>ln(k*abs(x))</pre> <pre>x</pre> 0 ATInt_EqFormalDiff. ATInt_logabs. The formal derivative of your answer does equal the expression that you were asked to integrate. However, your answer differs from the correct answer in a significant way, that is to say not just, e.g., a constant of integration. Please ask your teacher about this. Your teacher may expect you to use the result \\(\\int\\frac{1}{x} dx = \\log(|x|)+c\\), rather than \\(\\int\\frac{1}{x} dx = \\log(x)+c\\). Int <pre>ln(x)+c</pre> <pre>ln(k*abs(x))</pre> <pre>x</pre> 0 ATInt_EqFormalDiff. ATInt_logabs. The formal derivative of your answer does equal the expression that you were asked to integrate. However, your answer differs from the correct answer in a significant way, that is to say not just, e.g., a constant of integration. Please ask your teacher about this. Your teacher may expect you to use the result \\(\\int\\frac{1}{x} dx = \\log(|x|)+c\\), rather than \\(\\int\\frac{1}{x} dx = \\log(x)+c\\). Int <pre>ln(abs(x))</pre> <pre>ln(k*abs(x))</pre> <pre>x</pre> 0 ATInt_const. You need to add a constant of integration, otherwise this appears to be correct. Int <pre>ln(abs(x))+c</pre> <pre>ln(k*abs(x))</pre> <pre>x</pre> 1 ATInt_true_equiv. Int <pre>ln(k*x)</pre> <pre>ln(k*abs(x))</pre> <pre>x</pre> 0 ATInt_EqFormalDiff. ATInt_logabs. The formal derivative of your answer does equal the expression that you were asked to integrate. However, your answer differs from the correct answer in a significant way, that is to say not just, e.g., a constant of integration. Please ask your teacher about this. Your teacher may expect you to use the result \\(\\int\\frac{1}{x} dx = \\log(|x|)+c\\), rather than \\(\\int\\frac{1}{x} dx = \\log(x)+c\\). Int <pre>ln(k*abs(x))</pre> <pre>ln(k*abs(x))</pre> <pre>x</pre> 1 ATInt_true_equiv. Other logs Int <pre>ln(x)+ln(a)</pre> <pre>ln(k*abs(x+a))</pre> <pre>x</pre> 0 ATInt_generic. ATInt_logabs. The derivative of your answer should be equal to the expression that you were asked to integrate, that was: \\[\\frac{1}{x+a}\\] In fact, the derivative of your answer, with respect to \\(x\\) is: \\[\\frac{1}{x}\\] so you must have done something wrong! Your teacher may expect you to use the result \\(\\int\\frac{1}{x} dx = \\log(|x|)+c\\), rather than \\(\\int\\frac{1}{x} dx = \\log(x)+c\\). Int <pre>log(x)^2-2*log(c)*log(x)+k</pre> <pre>ln(c/x)^2</pre> <pre>x</pre> 0 ATInt_EqFormalDiff. The formal derivative of your answer does equal the expression that you were asked to integrate. However, your answer differs from the correct answer in a significant way, that is to say not just, e.g., a constant of integration. Please ask your teacher about this. Int <pre>log(x)^2-2*log(c)*log(x)+k</pre> <pre>ln(abs(c/x))^2</pre> <pre>x</pre> 0 ATInt_generic. The derivative of your answer should be equal to the expression that you were asked to integrate, that was: \\[-\\frac{2\\cdot \\ln \\left( \\frac{\\left| c\\right| }{\\left| x\\right| } \\right)}{x}\\] In fact, the derivative of your answer, with respect to \\(x\\) is: \\[\\frac{2\\cdot \\ln \\left( x \\right)}{x}-\\frac{2\\cdot \\ln \\left( c \\right)}{x}\\] so you must have done something wrong! Int <pre>c-(log(2)-log(x))^2/2</pre> <pre>-1/2*log(2/x)^2</pre> <pre>x</pre> 1 ATInt_true_equiv. Int <pre>ln(abs(x+3))/2+c</pre> <pre>ln(abs(2*x+6))/2+c</pre> <pre>x</pre> 0 ATInt_EqFormalDiff. The formal derivative of your answer does equal the expression that you were asked to integrate. However, your answer differs from the correct answer in a significant way, that is to say not just, e.g., a constant of integration. Please ask your teacher about this. Int <pre>ln(abs(x+3))/2+c</pre> <pre>ln(abs(2*x+6))/2+c</pre> <pre>[x, FORMAL]</pre> 1 ATInt_EqFormalDiff. The formal derivative of your answer does equal the expression that you were asked to integrate. However, your answer differs from the correct answer in a significant way, that is to say not just, e.g., a constant of integration. Please ask your teacher about this. Int <pre>ln(abs(x+3))/2</pre> <pre>ln(abs(2*x+6))/2+c</pre> <pre>[x, FORMAL]</pre> 1 ATInt_EqFormalDiff. The formal derivative of your answer does equal the expression that you were asked to integrate. However, your answer differs from the correct answer in a significant way, that is to say not just, e.g., a constant of integration. Please ask your teacher about this. Int <pre>ln(abs(x+3))/2</pre> <pre>ln(abs(2*x+6))/2+c</pre> <pre>[x, FORMAL, NOC\nONST]</pre> 1 ATInt_EqFormalDiff. The formal derivative of your answer does equal the expression that you were asked to integrate. However, your answer differs from the correct answer in a significant way, that is to say not just, e.g., a constant of integration. Please ask your teacher about this. Int <pre>ln(abs(x+3))/2</pre> <pre>ln(abs(2*x+6))/2+c</pre> <pre>[x, NOCONST, FO\nRMAL]</pre> 1 ATInt_EqFormalDiff. The formal derivative of your answer does equal the expression that you were asked to integrate. However, your answer differs from the correct answer in a significant way, that is to say not just, e.g., a constant of integration. Please ask your teacher about this. Int ! <pre>ln(abs(x+3))/2</pre> <pre>ln(abs(2*x+6))/2+c</pre> <pre>[x, NOCONST]</pre> -3 ATInt_EqFormalDiff. The formal derivative of your answer does equal the expression that you were asked to integrate. However, your answer differs from the correct answer in a significant way, that is to say not just, e.g., a constant of integration. Please ask your teacher about this. Int <pre>-log(sqrt(x^2-4*x+3)+x-2)/2+(x\n*sqrt(x^2-4*x+3))/2-sqrt(x^2-4\n*x+3)+c</pre> <pre>integrate(sqrt(x^2-4*x+3),x)</pre> <pre>x</pre> 0 ATInt_EqFormalDiff. The formal derivative of your answer does equal the expression that you were asked to integrate. However, your answer differs from the correct answer in a significant way, that is to say not just, e.g., a constant of integration. Please ask your teacher about this. Int <pre>-log(sqrt(x^2-4*x+3)+x-2)/2+(x\n*sqrt(x^2-4*x+3))/2-sqrt(x^2-4\n*x+3)+c</pre> <pre>integrate(sqrt(x^2-4*x+3),x)</pre> <pre>[x, FORMAL]</pre> 1 ATInt_EqFormalDiff. The formal derivative of your answer does equal the expression that you were asked to integrate. However, your answer differs from the correct answer in a significant way, that is to say not just, e.g., a constant of integration. Please ask your teacher about this. Irreducible quadratic Int <pre>ln(x^2+7*x+7)</pre> <pre>ln(x^2+7*x+7)</pre> <pre>[x,NOCONST]</pre> 1 ATInt_const_condone. Int <pre>ln(x^2+7*x+7)</pre> <pre>ln(abs(x^2+7*x+7))</pre> <pre>[x,NOCONST]</pre> 0 ATInt_EqFormalDiff. ATInt_logabs. The formal derivative of your answer does equal the expression that you were asked to integrate. However, your answer differs from the correct answer in a significant way, that is to say not just, e.g., a constant of integration. Please ask your teacher about this. Your teacher may expect you to use the result \\(\\int\\frac{1}{x} dx = \\log(|x|)+c\\), rather than \\(\\int\\frac{1}{x} dx = \\log(x)+c\\). Int <pre>ln(x^2+7*x+7)+c</pre> <pre>ln(x^2+7*x+7)+c</pre> <pre>x</pre> 1 ATInt_true_equiv. Int <pre>ln(k*(x^2+7*x+7))</pre> <pre>ln(x^2+7*x+7)+c</pre> <pre>x</pre> 1 ATInt_true_equiv. Int <pre>ln(x^2+7*x+7)</pre> <pre>ln(abs(x^2+7*x+7))+c</pre> <pre>x</pre> 0 ATInt_EqFormalDiff. ATInt_logabs. The formal derivative of your answer does equal the expression that you were asked to integrate. However, your answer differs from the correct answer in a significant way, that is to say not just, e.g., a constant of integration. Please ask your teacher about this. Your teacher may expect you to use the result \\(\\int\\frac{1}{x} dx = \\log(|x|)+c\\), rather than \\(\\int\\frac{1}{x} dx = \\log(x)+c\\). Int <pre>ln(x^2+7*x+7)+c</pre> <pre>ln(abs(x^2+7*x+7))+c</pre> <pre>x</pre> 0 ATInt_EqFormalDiff. ATInt_logabs. The formal derivative of your answer does equal the expression that you were asked to integrate. However, your answer differs from the correct answer in a significant way, that is to say not just, e.g., a constant of integration. Please ask your teacher about this. Your teacher may expect you to use the result \\(\\int\\frac{1}{x} dx = \\log(|x|)+c\\), rather than \\(\\int\\frac{1}{x} dx = \\log(x)+c\\). Int <pre>-2*log(x)-(10*x^6)/3+x^3/3+5*l\nog(x^4)+c</pre> <pre>-2*log(abs(x))+(10*x^6)/3-x^3/\n3-5/x^3+c</pre> <pre>x</pre> 0 ATInt_generic. ATInt_logabs. The derivative of your answer should be equal to the expression that you were asked to integrate, that was: \\[20\\cdot x^5-x^2-\\frac{2}{x}+\\frac{15}{x^4}\\] In fact, the derivative of your answer, with respect to \\(x\\) is: \\[-20\\cdot x^5+x^2+\\frac{18}{x}\\] so you must have done something wrong! Your teacher may expect you to use the result \\(\\int\\frac{1}{x} dx = \\log(|x|)+c\\), rather than \\(\\int\\frac{1}{x} dx = \\log(x)+c\\). Int <pre>ln(abs(x^2+7*x+7))+c</pre> <pre>ln(abs(x^2+7*x+7))+c</pre> <pre>x</pre> 1 ATInt_true_equiv. Int <pre>ln(k*abs(x^2+7*x+7))</pre> <pre>ln(abs(x^2+7*x+7))+c</pre> <pre>x</pre> 1 ATInt_true_equiv. Two logs Int <pre>log(abs(x-3))+log(abs(x+3))</pre> <pre>log(abs(x-3))+log(abs(x+3))</pre> <pre>x</pre> 0 ATInt_const. You need to add a constant of integration, otherwise this appears to be correct. Int <pre>log(abs(x-3))+log(abs(x+3))+c</pre> <pre>log(abs(x-3))+log(abs(x+3))</pre> <pre>x</pre> 1 ATInt_true_equiv. Int <pre>log(abs(x-3))+log(abs(x+3))</pre> <pre>log(x-3)+log(x+3)</pre> <pre>x</pre> 0 ATInt_const. You need to add a constant of integration, otherwise this appears to be correct. Int <pre>log(abs(x-3))+log(abs(x+3))+c</pre> <pre>log(x-3)+log(x+3)</pre> <pre>x</pre> 1 ATInt_true_equiv. Int <pre>log(x-3)+log(x+3)</pre> <pre>log(x-3)+log(x+3)</pre> <pre>x</pre> 0 ATInt_const. You need to add a constant of integration, otherwise this appears to be correct. Int <pre>log(x-3)+log(x+3)+c</pre> <pre>log(x-3)+log(x+3)</pre> <pre>x</pre> 1 ATInt_true_equiv. Int <pre>log(x-3)+log(x+3)</pre> <pre>log(abs(x-3))+log(abs(x+3))</pre> <pre>x</pre> 0 ATInt_EqFormalDiff. ATInt_logabs. The formal derivative of your answer does equal the expression that you were asked to integrate. However, your answer differs from the correct answer in a significant way, that is to say not just, e.g., a constant of integration. Please ask your teacher about this. Your teacher may expect you to use the result \\(\\int\\frac{1}{x} dx = \\log(|x|)+c\\), rather than \\(\\int\\frac{1}{x} dx = \\log(x)+c\\). Int <pre>log(x-3)+log(x+3)+c</pre> <pre>log(abs(x-3))+log(abs(x+3))</pre> <pre>x</pre> 0 ATInt_EqFormalDiff. ATInt_logabs. The formal derivative of your answer does equal the expression that you were asked to integrate. However, your answer differs from the correct answer in a significant way, that is to say not just, e.g., a constant of integration. Please ask your teacher about this. Your teacher may expect you to use the result \\(\\int\\frac{1}{x} dx = \\log(|x|)+c\\), rather than \\(\\int\\frac{1}{x} dx = \\log(x)+c\\). Int <pre>log(abs((x-3)*(x+3)))+c</pre> <pre>log(abs(x-3))+log(abs(x+3))</pre> <pre>x</pre> 1 ATInt_true_equiv. Int <pre>log(abs((x^2-9)))+c</pre> <pre>log(abs(x-3))+log(abs(x+3))</pre> <pre>x</pre> 0 ATInt_EqFormalDiff. The formal derivative of your answer does equal the expression that you were asked to integrate. However, your answer differs from the correct answer in a significant way, that is to say not just, e.g., a constant of integration. Please ask your teacher about this. Int <pre>2*log(abs(x-2))-log(abs(x+2))+\n(x^2+4*x)/2</pre> <pre>-log(abs(x+2))+2*log(abs(x-2))\n+(x^2+4*x)/2+c</pre> <pre>x</pre> 0 ATInt_const. You need to add a constant of integration, otherwise this appears to be correct. Int <pre>-log(abs(x+2))+2*log(abs(x-2))\n+(x^2+4*x)/2+c</pre> <pre>-log(abs(x+2))+2*log(abs(x-2))\n+(x^2+4*x)/2+c</pre> <pre>x</pre> 1 ATInt_true_equiv. Int <pre>-log(abs(x+2))+2*log(abs(x-2))\n+(x^2+4*x)/2+c</pre> <pre>-log((x+2))+2*log((x-2))+(x^2+\n4*x)/2</pre> <pre>x</pre> 1 ATInt_true_equiv. Inconsistent log(abs()) Int <pre>log(abs(x-3))+log((x+3))+c</pre> <pre>log(x-3)+log(x+3)</pre> <pre>x</pre> 0 ATInt_true_equiv. ATInt_logabs_inconsistent. There appear to be strange inconsistencies between your use of \\(\\log(...)\\) and \\(\\log(|...|)\\). Please ask your teacher about this. Int <pre>log((v-3))+log(abs(v+3))+c</pre> <pre>log(v-3)+log(v+3)</pre> <pre>v</pre> 0 ATInt_true_equiv. ATInt_logabs_inconsistent. There appear to be strange inconsistencies between your use of \\(\\log(...)\\) and \\(\\log(|...|)\\). Please ask your teacher about this. Int <pre>log((x-3))+log(abs(x+3))</pre> <pre>log(x-3)+log(x+3)</pre> <pre>x</pre> 0 ATInt_const. ATInt_logabs_inconsistent. There appear to be strange inconsistencies between your use of \\(\\log(...)\\) and \\(\\log(|...|)\\). Please ask your teacher about this. Int <pre>2*log((x-2))-log(abs(x+2))+(x^\n2+4*x)/2</pre> <pre>-log(abs(x+2))+2*log(abs(x-2))\n+(x^2+4*x)/2</pre> <pre>x</pre> 0 ATInt_EqFormalDiff. ATInt_logabs. ATInt_logabs_inconsistent. There appear to be strange inconsistencies between your use of \\(\\log(...)\\) and \\(\\log(|...|)\\). Please ask your teacher about this. Significant integration constant differences Int <pre>2*(sqrt(t)-5)-10*log((sqrt(t)-\n5))+c</pre> <pre>2*(sqrt(t)-5)-10*log((sqrt(t)-\n5))+c</pre> <pre>t</pre> 1 ATInt_true_equiv. Int <pre>2*(sqrt(t))-10*log((sqrt(t)-5)\n)+c</pre> <pre>2*(sqrt(t)-5)-10*log((sqrt(t)-\n5))+c</pre> <pre>t</pre> 1 ATInt_true_differentconst. Int <pre>2*(sqrt(t)-5)-10*log((sqrt(t)-\n5))+c</pre> <pre>2*(sqrt(t)-5)-10*log(abs(sqrt(\nt)-5))+c</pre> <pre>t</pre> 0 ATInt_EqFormalDiff. ATInt_logabs. The formal derivative of your answer does equal the expression that you were asked to integrate. However, your answer differs from the correct answer in a significant way, that is to say not just, e.g., a constant of integration. Please ask your teacher about this. Your teacher may expect you to use the result \\(\\int\\frac{1}{x} dx = \\log(|x|)+c\\), rather than \\(\\int\\frac{1}{x} dx = \\log(x)+c\\). Int <pre>2*(sqrt(t))-10*log(abs(sqrt(t)\n-5))+c</pre> <pre>2*(sqrt(t)-5)-10*log(abs(sqrt(\nt)-5))+c</pre> <pre>t</pre> 1 ATInt_true_differentconst. Trig Int <pre>2*sin(x)*cos(x)</pre> <pre>sin(2*x)+c</pre> <pre>x</pre> 0 ATInt_const. You need to add a constant of integration, otherwise this appears to be correct. Int <pre>2*sin(x)*cos(x)+k</pre> <pre>sin(2*x)+c</pre> <pre>x</pre> 1 ATInt_true. Int <pre>-2*cos(3*x)/3-3*cos(2*x)/2</pre> <pre>-2*cos(3*x)/3-3*cos(2*x)/2+c</pre> <pre>x</pre> 0 ATInt_const. You need to add a constant of integration, otherwise this appears to be correct. Int <pre>-2*cos(3*x)/3-3*cos(2*x)/2+1</pre> <pre>-2*cos(3*x)/3-3*cos(2*x)/2+c</pre> <pre>x</pre> 0 ATInt_const_int. You need to add a constant of integration. This should be an arbitrary constant, not a number. Int <pre>-2*cos(3*x)/3-3*cos(2*x)/2+c</pre> <pre>-2*cos(3*x)/3-3*cos(2*x)/2+c</pre> <pre>x</pre> 1 ATInt_true. Int <pre>(tan(2*t)-2*t)/2</pre> <pre>-(t*sin(4*t)^2-sin(4*t)+t*cos(\n4*t)^2+2*t*cos(4*t)+t)/(sin(4*\nt)^2+cos(4*t)^2+2*cos(4*t)+1)</pre> <pre>t</pre> 0 ATInt_const. You need to add a constant of integration, otherwise this appears to be correct. Int <pre>(tan(2*t)-2*t)/2+1</pre> <pre>-(t*sin(4*t)^2-sin(4*t)+t*cos(\n4*t)^2+2*t*cos(4*t)+t)/(sin(4*\nt)^2+cos(4*t)^2+2*cos(4*t)+1)</pre> <pre>t</pre> 0 ATInt_const_int. You need to add a constant of integration. This should be an arbitrary constant, not a number. Int <pre>(tan(2*t)-2*t)/2+c</pre> <pre>-(t*sin(4*t)^2-sin(4*t)+t*cos(\n4*t)^2+2*t*cos(4*t)+t)/(sin(4*\nt)^2+cos(4*t)^2+2*cos(4*t)+1)</pre> <pre>t</pre> 1 ATInt_true. Int <pre>tan(x)-x+c</pre> <pre>tan(x)-x</pre> <pre>x</pre> 1 ATInt_true. Int <pre>4*x*cos(x^12/%pi)+c</pre> <pre>x*cos(x^12/%pi)+c</pre> <pre>x</pre> 0 ATInt_generic. The derivative of your answer should be equal to the expression that you were asked to integrate, that was: \\[\\cos \\left( \\frac{x^{12}}{\\pi} \\right)-\\frac{12\\cdot x^{12}\\cdot \\sin \\left( \\frac{x^{12}}{\\pi} \\right)}{\\pi}\\] In fact, the derivative of your answer, with respect to \\(x\\) is: \\[4\\cdot \\cos \\left( \\frac{x^{12}}{\\pi} \\right)-\\frac{48\\cdot x^{12} \\cdot \\sin \\left( \\frac{x^{12}}{\\pi} \\right)}{\\pi}\\] so you must have done something wrong! Int <pre>4*x*cos(x^50/%pi)+c</pre> <pre>x*cos(x^12/%pi)+c</pre> <pre>x</pre> 0 ATInt_generic. The derivative of your answer should be equal to the expression that you were asked to integrate, that was: \\[\\cos \\left( \\frac{x^{12}}{\\pi} \\right)-\\frac{12\\cdot x^{12}\\cdot \\sin \\left( \\frac{x^{12}}{\\pi} \\right)}{\\pi}\\] In fact, the derivative of your answer, with respect to \\(x\\) is: \\[4\\cdot \\cos \\left( \\frac{x^{50}}{\\pi} \\right)-\\frac{200\\cdot x^{50} \\cdot \\sin \\left( \\frac{x^{50}}{\\pi} \\right)}{\\pi}\\] so you must have done something wrong! Note the difference in feedback here, generated by the options. Int <pre>((5*%e^7*x-%e^7)*%e^(5*x))</pre> <pre>((5*%e^7*x-%e^7)*%e^(5*x))/25+\nc</pre> <pre>x</pre> 0 ATInt_generic. The derivative of your answer should be equal to the expression that you were asked to integrate, that was: \\[\\frac{e^{5\\cdot x+7}}{5}+\\frac{\\left(5\\cdot e^7\\cdot x-e^7\\right) \\cdot e^{5\\cdot x}}{5}\\] In fact, the derivative of your answer, with respect to \\(x\\) is: \\[5\\cdot e^{5\\cdot x+7}+5\\cdot \\left(5\\cdot e^7\\cdot x-e^7\\right) \\cdot e^{5\\cdot x}\\] so you must have done something wrong! Int <pre>((5*%e^7*x-%e^7)*%e^(5*x))</pre> <pre>((5*%e^7*x-%e^7)*%e^(5*x))/25+\nc</pre> <pre>[x,x*%e^(5*x+7)\n]</pre> 0 ATInt_generic. The derivative of your answer should be equal to the expression that you were asked to integrate, that was: \\[x\\cdot e^{5\\cdot x+7}\\] In fact, the derivative of your answer, with respect to \\(x\\) is: \\[5\\cdot e^{5\\cdot x+7}+5\\cdot \\left(5\\cdot e^7\\cdot x-e^7\\right) \\cdot e^{5\\cdot x}\\] so you must have done something wrong! Inverse hyperbolic integrals Int <pre>log(x-3)/6-log(x+3)/6+c</pre> <pre>log(x-3)/6-log(x+3)/6</pre> <pre>x</pre> 1 ATInt_true_equiv. Int <pre>asinh(x)</pre> <pre>ln(x+sqrt(x^2+1))</pre> <pre>x</pre> 0 ATInt_const. You need to add a constant of integration, otherwise this appears to be correct. Int <pre>asinh(x)+c</pre> <pre>ln(x+sqrt(x^2+1))</pre> <pre>x</pre> 1 ATInt_true. Int <pre>-acoth(x/3)/3</pre> <pre>log(x-3)/6-log(x+3)/6</pre> <pre>x</pre> 0 ATInt_const. You need to add a constant of integration, otherwise this appears to be correct. Int <pre>-acoth(x/3)/3</pre> <pre>log(x-3)/6-log(x+3)/6</pre> <pre>[x, NOCONST]</pre> 1 ATInt_true. Int <pre>-acoth(x/3)/3+c</pre> <pre>log(x-3)/6-log(x+3)/6</pre> <pre>x</pre> 1 ATInt_true. Int <pre>-acoth(x/3)/3+c</pre> <pre>log(abs(x-3))/6-log(abs(x+3))/\n6</pre> <pre>x</pre> 1 ATInt_true. Int <pre>log(x-a)/(2*a)-log(x+a)/(2*a)+\nc</pre> <pre>log(x-a)/(2*a)-log(x+a)/(2*a)</pre> <pre>x</pre> 1 ATInt_true_equiv. Int <pre>-acoth(x/a)/a+c</pre> <pre>log(x-a)/(2*a)-log(x+a)/(2*a)</pre> <pre>x</pre> 1 ATInt_true. Int <pre>-acoth(x/a)/a+c</pre> <pre>log(abs(x-a))/(2*a)-log(abs(x+\na))/(2*a)</pre> <pre>x</pre> 1 ATInt_true. Int <pre>log(x-a)/(2*a)-log(x+a)/(2*a)+\nc</pre> <pre>log(abs(x-a))/(2*a)-log(abs(x+\na))/(2*a)</pre> <pre>x</pre> 0 ATInt_EqFormalDiff. ATInt_logabs. The formal derivative of your answer does equal the expression that you were asked to integrate. However, your answer differs from the correct answer in a significant way, that is to say not just, e.g., a constant of integration. Please ask your teacher about this. Your teacher may expect you to use the result \\(\\int\\frac{1}{x} dx = \\log(|x|)+c\\), rather than \\(\\int\\frac{1}{x} dx = \\log(x)+c\\). Int <pre>log(x-3)/6-log(x+3)/6+c</pre> <pre>-acoth(x/3)/3</pre> <pre>x</pre> 1 ATInt_true. Int <pre>log(abs(x-3))/6-log(abs(x+3))/\n6+c</pre> <pre>-acoth(x/3)/3</pre> <pre>x</pre> 1 ATInt_true. Int <pre>log(x-3)/6-log(x+3)/6</pre> <pre>-acoth(x/3)/3</pre> <pre>x</pre> 0 ATInt_const. You need to add a constant of integration, otherwise this appears to be correct. Int <pre>atan(2*x-3)+c</pre> <pre>atan(2*x-3)</pre> <pre>x</pre> 1 ATInt_true. Int <pre>atan((x-2)/(x-1))+c</pre> <pre>atan(2*x-3)</pre> <pre>x</pre> 1 ATInt_true. Int <pre>atan((x-2)/(x-1))</pre> <pre>atan(2*x-3)</pre> <pre>x</pre> 0 ATInt_const. You need to add a constant of integration, otherwise this appears to be correct. Int <pre>atan((x-1)/(x-2))</pre> <pre>atan(2*x-3)</pre> <pre>x</pre> 0 ATInt_generic. The derivative of your answer should be equal to the expression that you were asked to integrate, that was: \\[\\frac{2}{{\\left(2\\cdot x-3\\right)}^2+1}\\] In fact, the derivative of your answer, with respect to \\(x\\) is: \\[\\frac{\\frac{1}{x-2}-\\frac{x-1}{{\\left(x-2\\right)}^2}}{\\frac{{\\left( x-1\\right)}^2}{{\\left(x-2\\right)}^2}+1}\\] so you must have done something wrong! Int <pre>atan((x-1)/(x+1))+c</pre> <pre>atan(x)</pre> <pre>x</pre> 1 ATInt_true. Int <pre>atan((a*x+1)/(a-x))</pre> <pre>atan(x)</pre> <pre>x</pre> 1 ATInt_true. Stoutemyer (currently fails) Int ! <pre>2/3*sqrt(3)*(atan(sin(x)/(sqrt\n(3)*(cos(x)+1)))-(atan(sin(x)/\n(cos(x)+1))))+x/sqrt(3)</pre> <pre>2*atan(sin(x)/(sqrt(3)*(cos(x)\n+1)))/sqrt(3)</pre> <pre>x</pre> -3 ATInt_const. You need to add a constant of integration, otherwise this appears to be correct. Int <pre>3*x/'root(3*x^2+2)+c</pre> <pre>3*x/sqrt(3*x^2+2)</pre> <pre>x</pre> 1 ATInt_true."},{"location":"en/Authoring/Answer_Tests/Results/Levenshtein/","title":"Levenshtein: Answer test results","text":"<p>This page exposes the results of running answer tests on STACK test cases.  This page is automatically generated from the STACK unit tests and is designed to show question authors what answer tests actually do.  This includes cases where answer tests currentl fail, which gives a negative expected mark.  Comments and further test cases are very welcome.</p> Levenshtein Test?Student responseTeacher answerOptMarkAnswer note Levenshtein <pre>\"Hello\"</pre> <pre>\"Hello\"</pre> 0 STACKERROR_OPTION. TEST_FAILED The answer test failed to execute correctly: please alert your teacher. Missing option when executing the test.  Levenshtein <pre>1/0</pre> <pre>\"Hello\"</pre> <pre>0.9</pre> -1 ATLevenshtein_STACKERROR_SAns. TEST_FAILED The answer test failed to execute correctly: please alert your teacher. Division by zero. Levenshtein <pre>x^2</pre> <pre>\"Hello\"</pre> <pre>0.9</pre> 0 ATLevenshtein_SA_not_string. The first argument to the Levenshtein answer test must be a string. The test failed. Please contact your teacher. Levenshtein <pre>\"Hello\"</pre> <pre>\"Hello\"</pre> <pre>0.9</pre> 0 ATLevenshtein_SB_malformed. The second argument to the Levenshtein answer test must be in the form [allow, deny] where each item is a list of strings. This argument is malformed and so the test failed. Please contact your teacher. Levenshtein <pre>\"Hello\"</pre> <pre>[\"Hello\"]</pre> <pre>0.9</pre> 0 ATLevenshtein_SB_malformed. The second argument to the Levenshtein answer test must be in the form [allow, deny] where each item is a list of strings. This argument is malformed and so the test failed. Please contact your teacher. Levenshtein <pre>\"Hello\"</pre> <pre>[[\"Hello\"]]</pre> <pre>0.9</pre> 0 ATLevenshtein_SB_malformed. The second argument to the Levenshtein answer test must be in the form [allow, deny] where each item is a list of strings. This argument is malformed and so the test failed. Please contact your teacher. Levenshtein <pre>\"Hello\"</pre> <pre>[[\"Hello\"], x^2]</pre> <pre>0.9</pre> 0 ATLevenshtein_SB_malformed. The second argument to the Levenshtein answer test must be in the form [allow, deny] where each item is a list of strings. This argument is malformed and so the test failed. Please contact your teacher. Levenshtein <pre>\"Hello\"</pre> <pre>[[\"Hello\"], [x^2]]</pre> <pre>0.9</pre> 0 ATLevenshtein_SB_malformed. The second argument to the Levenshtein answer test must be in the form [allow, deny] where each item is a list of strings. This argument is malformed and so the test failed. Please contact your teacher. Levenshtein <pre>\"Hello\"</pre> <pre>[[\"Hello\"], [\"G\noodbye\"], [\"Excess&amp;q\nuot;]]</pre> <pre>0.9</pre> 0 ATLevenshtein_SB_malformed. The second argument to the Levenshtein answer test must be in the form [allow, deny] where each item is a list of strings. This argument is malformed and so the test failed. Please contact your teacher. Levenshtein <pre>\"Hello\"</pre> <pre>[[], [\"Goodbye\"]]</pre> <pre>0.9</pre> 0 ATLevenshtein_SB_malformed. The second argument to the Levenshtein answer test must be in the form [allow, deny] where each item is a list of strings. This argument is malformed and so the test failed. Please contact your teacher. Levenshtein <pre>\"Hello\"</pre> <pre>[[\"Hello\"], [\"G\noodbye\"]]</pre> <pre>z</pre> 0 ATLevenshtein_tol_not_number. The tolerance in the Levenshtein answer test must be a number, but is not. The test failed. Please contact your teacher. Levenshtein <pre>\"Hello\"</pre> <pre>[[\"Hello\"], [\"G\noodbye\"]]</pre> <pre>[z]</pre> 0 ATLevenshtein_tol_not_number. The tolerance in the Levenshtein answer test must be a number, but is not. The test failed. Please contact your teacher. Usage tests Levenshtein <pre>\"Hello\"</pre> <pre>[[\"Hello\"], [\"G\noodbye\"]]</pre> <pre>0.9</pre> 1 ATLevenshtein_true: [[1,\"Hello\"],[0,\"Goodbye\"]]. Levenshtein <pre>\"hello\"</pre> <pre>[[\"Hello\"], [\"G\noodbye\"]]</pre> <pre>[0.9]</pre> 1 ATLevenshtein_true: [[1,\"Hello\"],[0,\"Goodbye\"]]. Levenshtein <pre>\"hello\"</pre> <pre>[[\"Hello\", \"Goo\nd day\", \"Hi\"], \n[\"Goodbye\", \"By\ne\", \"Fairwell\"]\n]</pre> <pre>[0.8, CASE]</pre> 1 ATLevenshtein_match: [[0.8,\"Hello\"],[0.25,\"Fairwell\"]]. The closest match was \"\\(\\text{Hello}\\)\". Levenshtein <pre>\"goodday\"</pre> <pre>[[\"Hello\", \"Goo\nd day\", \"Hi\"], \n[\"Goodbye\", \"By\ne\", \"Fairwell\"]\n]</pre> <pre>0.8</pre> 1 ATLevenshtein_match: [[0.875,\"Good day\"],[0.57143,\"Goodbye\"]]. The closest match was \"\\(\\text{Good day}\\)\". Levenshtein <pre>\"goodday\"</pre> <pre>[[\"Hello\", \"Goo\nd day\", \"Hi\"], \n[\"Goodbye\", \"By\ne\", \"Fairwell\"]\n]</pre> <pre>[0.8, CASE]</pre> 0 ATLevenshtein_far: [[0.75,\"Good day\"],[0.42857,\"Goodbye\"]]. Levenshtein <pre>\"Jello\"</pre> <pre>[[\"Hello\", \"Goo\nd day\", \"Hi\"], \n[\"Goodbye\", \"By\ne\", \"Fairwell\"]\n]</pre> <pre>0.9</pre> 0 ATLevenshtein_far: [[0.8,\"Hello\"],[0.25,\"Fairwell\"]]. Levenshtein <pre>\"Jello\"</pre> <pre>[[\"Hello\", \"Goo\nd day\", \"Hi\"], \n[\"Goodbye\", \"By\ne\", \"Fairwell\"]\n]</pre> <pre>0.75</pre> 1 ATLevenshtein_match: [[0.8,\"Hello\"],[0.25,\"Fairwell\"]]. The closest match was \"\\(\\text{Hello}\\)\". Levenshtein <pre>\"Jello\"</pre> <pre>[[\"Hello\", \"Goo\nd day\", \"Hi\"], \n[]]</pre> <pre>0.75</pre> 1 ATLevenshtein_match: [[0.8,\"Hello\"],[0,[]]]. The closest match was \"\\(\\text{Hello}\\)\". Levenshtein <pre>\"Good bye\"</pre> <pre>[[\"Hello\", \"Goo\nd day\", \"Hi\"], \n[\"Goodbye\", \"By\ne\", \"Fairwell\"]\n]</pre> <pre>0.75</pre> 0 ATLevenshtein_deny: [[0.625,\"Good day\"],[0.875,\"Goodbye\"]]. Levenshtein <pre>\"Good, day!\"</pre> <pre>[[\"Hello\", \"Goo\nd day\", \"Hi\"], \n[\"Goodbye\", \"By\ne\", \"Fairwell\"]\n]</pre> <pre>0.75</pre> 1 ATLevenshtein_match: [[0.8,\"Good day\"],[0.5,\"Goodbye\"]]. The closest match was \"\\(\\text{Good day}\\)\". Levenshtein <pre>sremove_chars(\".,!?\"\n, \"Good, day!\")</pre> <pre>[[\"Hello\", \"Goo\nd day\", \"Hi\"], \n[\"Goodbye\", \"By\ne\", \"Fairwell\"]\n]</pre> <pre>0.75</pre> 1 ATLevenshtein_true: [[1,\"Good day\"],[0.5,\"Goodbye\"]]. Levenshtein <pre>\"   good     day  \"</pre> <pre>[[\"Hello\", \"Goo\nd day\", \"Hi\"], \n[\"Goodbye\", \"By\ne\", \"Fairwell\"]\n]</pre> <pre>0.75</pre> 1 ATLevenshtein_true: [[1,\"Good day\"],[0.5,\"Goodbye\"]]. Levenshtein <pre>\"   good     day  \"</pre> <pre>[[\"Hello\", \"Goo\nd day\", \"Hi\"], \n[\"Goodbye\", \"By\ne\", \"Fairwell\"]\n]</pre> <pre>[0.75, WHITESPA\nCE]</pre> 0 ATLevenshtein_far: [[0.47059,\"Good day\"],[0.29412,\"Goodbye\"]]."},{"location":"en/Authoring/Answer_Tests/Results/LowestTerms/","title":"LowestTerms: Answer test results","text":"<p>This page exposes the results of running answer tests on STACK test cases.  This page is automatically generated from the STACK unit tests and is designed to show question authors what answer tests actually do.  This includes cases where answer tests currentl fail, which gives a negative expected mark.  Comments and further test cases are very welcome.</p> LowestTerms Test?Student responseTeacher answerOptMarkAnswer note LowestTerms <pre>1/0</pre> <pre>0</pre> -1 ATLowestTerms_STACKERROR_SAns. Mix of floats and rational numbers LowestTerms <pre>0.5</pre> <pre>0</pre> 1 LowestTerms <pre>0.33</pre> <pre>0</pre> 1 LowestTerms <pre>2/4</pre> <pre>0</pre> 0 ATLowestTerms_entries. The following terms in your answer are not in lowest terms. \\[\\left[ \\frac{2}{4} \\right] \\] Please try again. Negative numbers LowestTerms <pre>-1/3</pre> <pre>0</pre> 1 LowestTerms <pre>1/-3</pre> <pre>0</pre> 1 LowestTerms <pre>-2/4</pre> <pre>0</pre> 0 ATLowestTerms_entries. The following terms in your answer are not in lowest terms. \\[\\left[ \\frac{-2}{4} \\right] \\] Please try again. LowestTerms <pre>2/-4</pre> <pre>0</pre> 0 ATLowestTerms_entries. The following terms in your answer are not in lowest terms. \\[\\left[ \\frac{2}{-4} \\right] \\] Please try again. LowestTerms <pre>-1/-3</pre> <pre>0</pre> 0 ATLowestTerms_entries. The following terms in your answer are not in lowest terms. \\[\\left[ \\frac{-1}{-3} \\right] \\] Please try again. LowestTerms <pre>-2/-4</pre> <pre>0</pre> 0 ATLowestTerms_entries. The following terms in your answer are not in lowest terms. \\[\\left[ \\frac{-2}{-4} \\right] \\] Please try again. Polynomials LowestTerms <pre>x+1/3</pre> <pre>0</pre> 1 LowestTerms <pre>x+2/6</pre> <pre>0</pre> 0 ATLowestTerms_entries. The following terms in your answer are not in lowest terms. \\[\\left[ \\frac{2}{6} \\right] \\] Please try again. LowestTerms <pre>2*x/4+2/6</pre> <pre>0</pre> 0 ATLowestTerms_entries. The following terms in your answer are not in lowest terms. \\[\\left[ \\frac{2}{6} \\right] \\] Please try again. LowestTerms <pre>2/4*x+2/6</pre> <pre>0</pre> 0 ATLowestTerms_entries. The following terms in your answer are not in lowest terms. \\[\\left[ \\frac{2}{4} , \\frac{2}{6} \\right] \\] Please try again. LowestTerms <pre>x-1/-4</pre> <pre>0</pre> 0 ATLowestTerms_entries. The following terms in your answer are not in lowest terms. \\[\\left[ \\frac{-1}{-4} \\right] \\] Please try again. Trig functions LowestTerms <pre>cos(x)</pre> <pre>0</pre> 1 LowestTerms <pre>cos(3/6*x)</pre> <pre>0</pre> 0 ATLowestTerms_entries. The following terms in your answer are not in lowest terms. \\[\\left[ \\frac{3}{6} \\right] \\] Please try again. Matrices LowestTerms <pre>matrix([1,2/4],[2,3])</pre> <pre>0</pre> 0 ATLowestTerms_entries. The following terms in your answer are not in lowest terms. \\[\\left[ \\frac{2}{4} \\right] \\] Please try again. Equations LowestTerms <pre>x=1/2</pre> <pre>0</pre> 1 LowestTerms <pre>3/9=x</pre> <pre>0</pre> 0 ATLowestTerms_entries. The following terms in your answer are not in lowest terms. \\[\\left[ \\frac{3}{9} \\right] \\] Please try again. Use predicate lowesttermsp LowestTerms <pre>x^2/x</pre> <pre>0</pre> 1 LowestTerms <pre>(2*x)/(4*t)</pre> <pre>0</pre> 1 LowestTerms <pre>(2/4)*(x^2/t)</pre> <pre>0</pre> 0 ATLowestTerms_entries. The following terms in your answer are not in lowest terms. \\[\\left[ \\frac{2}{4} \\right] \\] Please try again. LowestTerms <pre>x^(2/4)</pre> <pre>0</pre> 0 ATLowestTerms_entries. The following terms in your answer are not in lowest terms. \\[\\left[ \\frac{2}{4} \\right] \\] Please try again. Need to rationalize demoninator LowestTerms <pre>sqrt(3)/3</pre> <pre>sqrt(3)/3</pre> 1 LowestTerms <pre>1/sqrt(3)</pre> <pre>sqrt(3)/3</pre> 0 ATLowestTerms_not_rat. You must clear the following from the denominator of your fraction: \\[\\left[ \\sqrt{3} \\right] \\] LowestTerms <pre>1/(1-sqrt(2))</pre> <pre>1/(1-sqrt(2))</pre> 0 ATLowestTerms_not_rat. You must clear the following from the denominator of your fraction: \\[\\left[ \\sqrt{2} \\right] \\] LowestTerms <pre>1/(1+i)</pre> <pre>(1-i)/2</pre> 0 ATLowestTerms_not_rat. You must clear the following from the denominator of your fraction: \\[\\left[ \\mathrm{i} \\right] \\] LowestTerms <pre>1+2/sqrt(3)</pre> <pre>(2*sqrt(3)+3)/3</pre> 0 ATLowestTerms_not_rat. You must clear the following from the denominator of your fraction: \\[\\left[ \\sqrt{3} \\right] \\] LowestTerms <pre>1/(1+1/root(3,2))</pre> <pre>sqrt(3)/(sqrt(3)+1)</pre> 0 ATLowestTerms_not_rat. You must clear the following from the denominator of your fraction: \\[\\left[ 3^{\\frac{1}{2}} \\right] \\] LowestTerms <pre>1/(1+1/root(2,3))</pre> <pre>1/(1+1/root(2,3))</pre> 0 ATLowestTerms_not_rat. You must clear the following from the denominator of your fraction: \\[\\left[ 2^{\\frac{1}{3}} \\right] \\]"},{"location":"en/Authoring/Answer_Tests/Results/NumAbsolute/","title":"NumAbsolute: Answer test results","text":"<p>This page exposes the results of running answer tests on STACK test cases.  This page is automatically generated from the STACK unit tests and is designed to show question authors what answer tests actually do.  This includes cases where answer tests currentl fail, which gives a negative expected mark.  Comments and further test cases are very welcome.</p> NumAbsolute Test?Student responseTeacher answerOptMarkAnswer note Basic tests NumAbsolute <pre>1/0</pre> <pre>0</pre> -1 ATNumAbsolute_STACKERROR_SAns. TEST_FAILED The answer test failed to execute correctly: please alert your teacher. Division by zero. NumAbsolute <pre>0</pre> <pre>1/0</pre> -1 ATNumAbsolute_STACKERROR_TAns. TEST_FAILED The answer test failed to execute correctly: please alert your teacher. Division by zero. NumAbsolute <pre>0</pre> <pre>0</pre> <pre>1/0</pre> -1 ATNumAbsolute_STACKERROR_Opt. TEST_FAILED The answer test failed to execute correctly: please alert your teacher. Division by zero. NumAbsolute <pre>0</pre> <pre>(x</pre> -1 ATNumAbsoluteTEST_FAILED-Empty TA. The answer test failed to execute correctly: please alert your teacher. Attempted to execute an answer test with an empty teacher answer, probably a CAS validation problem when authoring the question. NumAbsolute <pre>1</pre> <pre>0</pre> <pre>(x</pre> 0 No option, so 5% NumAbsolute <pre>1.1</pre> <pre>1</pre> 0 NumAbsolute <pre>1.05</pre> <pre>1</pre> 1 Options passed NumAbsolute <pre>1.05</pre> <pre>1</pre> <pre>0.1</pre> 1 NumAbsolute <pre>1.05</pre> <pre>3</pre> <pre>0.1</pre> 0 NumAbsolute <pre>3.14</pre> <pre>pi</pre> <pre>0.001</pre> 0 NumAbsolute <pre>1.41e-2</pre> <pre>1.41e-2</pre> <pre>0.0001</pre> 1 NumAbsolute <pre>0.0141</pre> <pre>1.41e-2</pre> <pre>0.0001</pre> 1 NumAbsolute <pre>0.00141</pre> <pre>0.00141</pre> <pre>0.0001</pre> 1 NumAbsolute <pre>0.00141</pre> <pre>1.41*10^-3</pre> <pre>0.0001</pre> 1 NumAbsolute <pre>1.41*10^-3</pre> <pre>1.41*10^-3</pre> <pre>0.0001</pre> 1 NumAbsolute <pre>[3.141,1.414]</pre> <pre>[pi,sqrt(2)]</pre> <pre>0.01</pre> 1 NumAbsolute <pre>[3,1.414]</pre> <pre>[pi,sqrt(2)]</pre> <pre>0.01</pre> 0 ATNumerical_wrongentries SA/TA=[3.0]. The entries underlined in red below are those that are incorrect. \\[\\left[ {\\color{red}{\\underline{3.0}}} , 1.414 \\right] \\] NumAbsolute <pre>[3,1.414]</pre> <pre>{pi,sqrt(2)}</pre> <pre>0.01</pre> 0 ATNumerical_SA_not_set. Your answer should be a set, but is not. Note that the syntax to enter a set is to enclose the comma separated values with curly brackets. NumAbsolute <pre>{1.414,3.1}</pre> <pre>{significantfigures(pi,6),sqrt\n(2)}</pre> <pre>0.01</pre> 0 ATNumerical_wrongentries: TA/SA=[3.14159], SA/TA=[3.1]. The entries underlined in red below are those that are incorrect. \\[\\left \\{{\\color{red}{\\underline{3.1}}} \\right \\}\\] NumAbsolute <pre>{1,1.414,3.1,2}</pre> <pre>{1,2,pi,sqrt(2)}</pre> <pre>0.1</pre> 1 NumAbsolute <pre>{-1,2,3}</pre> <pre>{-1,2,3}</pre> <pre>0.01</pre> 1 NumAbsolute <pre>{-1.1,2,3}</pre> <pre>{-1,2,3}</pre> <pre>0.01</pre> 0 ATNumerical_wrongentries: TA/SA=[-1.0], SA/TA=[-1.1]. The entries underlined in red below are those that are incorrect. \\[\\left \\{{\\color{red}{\\underline{-1.1}}} \\right \\}\\] NumAbsolute <pre>dispdp(4.09,2)</pre> <pre>4.1</pre> <pre>0.02</pre> 1 NumAbsolute <pre>displaydp(4.09,2)</pre> <pre>4.1</pre> <pre>0.02</pre> 1 NumAbsolute <pre>remove_numerical_inert(dispdp(\n409/100,2))</pre> <pre>4.1</pre> <pre>0.02</pre> 1 NumAbsolute <pre>[displaydp(-1,0),2,3]</pre> <pre>[-1,2,3]</pre> <pre>0.01</pre> 1 NumAbsolute <pre>{displaydp(-1,0),2,3}</pre> <pre>{-1,2,3}</pre> <pre>0.01</pre> 1"},{"location":"en/Authoring/Answer_Tests/Results/NumDecPlaces/","title":"NumDecPlaces: Answer test results","text":"<p>This page exposes the results of running answer tests on STACK test cases.  This page is automatically generated from the STACK unit tests and is designed to show question authors what answer tests actually do.  This includes cases where answer tests currentl fail, which gives a negative expected mark.  Comments and further test cases are very welcome.</p> NumDecPlaces Test?Student responseTeacher answerOptMarkAnswer note Basic tests NumDecPlaces <pre>1/0</pre> <pre>3</pre> <pre>2</pre> -1 ATNumDecPlaces_STACKERROR_SAns. NumDecPlaces <pre>0.1</pre> <pre>1/0</pre> <pre>2</pre> -1 ATNumDecPlaces_STACKERROR_TAns. NumDecPlaces <pre>0.1</pre> <pre>0</pre> <pre>1/0</pre> -1 ATNumDecPlaces_STACKERROR_Opt. NumDecPlaces <pre>0.1</pre> <pre>1</pre> <pre>x</pre> -1 ATNumDecPlaces_OptNotInt. For ATNumDecPlaces the test option must be a positive integer, in fact \"\\(x\\)\" was received. NumDecPlaces <pre>0.1</pre> <pre>1</pre> <pre>-1</pre> -1 ATNumDecPlaces_OptNotInt. For ATNumDecPlaces the test option must be a positive integer, in fact \"\\(-1\\)\" was received. NumDecPlaces <pre>0.1</pre> <pre>1</pre> <pre>0</pre> -1 ATNumDecPlaces_OptNotInt. For ATNumDecPlaces the test option must be a positive integer, in fact \"\\(0\\)\" was received. NumDecPlaces <pre>0.1</pre> <pre>1</pre> <pre>(</pre> -1 STACKERROR_OPTION. TEST_FAILED The answer test failed to execute correctly: please alert your teacher. Option field is invalid. You have a missing right bracket ) in the expression: (. NumDecPlaces <pre>(</pre> <pre>1</pre> <pre>1</pre> -1 ATNumDecPlacesTEST_FAILED-Empty SA. The answer test failed to execute correctly: please alert your teacher. Attempted to execute an answer test with an empty student answer, probably a CAS validation problem when authoring the question. Student's answer not a floating point number NumDecPlaces <pre>x</pre> <pre>3.143</pre> <pre>2</pre> 0 ATNumDecPlaces_SA_Not_num. Your answer must be a floating point number, but is not. NumDecPlaces <pre>pi</pre> <pre>3.000</pre> <pre>3</pre> 0 ATNumDecPlaces_SA_Not_num. Your answer must be a floating point number, but is not. Right number of places NumDecPlaces <pre>3.14</pre> <pre>3.143</pre> <pre>2</pre> 1 ATNumDecPlaces_Correct. ATNumDecPlaces_Equiv. NumDecPlaces <pre>3.14</pre> <pre>3.14</pre> <pre>2</pre> 1 ATNumDecPlaces_Correct. ATNumDecPlaces_Equiv. NumDecPlaces <pre>3.140</pre> <pre>3.140</pre> <pre>3</pre> 1 ATNumDecPlaces_Correct. ATNumDecPlaces_Equiv. NumDecPlaces <pre>3141.5972</pre> <pre>3141.5972</pre> <pre>4</pre> 1 ATNumDecPlaces_Correct. ATNumDecPlaces_Equiv. NumDecPlaces <pre>4.14</pre> <pre>3.14</pre> <pre>2</pre> 0 ATNumDecPlaces_Correct. ATNumDecPlaces_Not_equiv. NumDecPlaces <pre>3.1416</pre> <pre>pi</pre> <pre>4</pre> 1 ATNumDecPlaces_Correct. ATNumDecPlaces_Equiv. NumDecPlaces <pre>-7.3</pre> <pre>-7.3</pre> <pre>1</pre> 1 ATNumDecPlaces_Correct. ATNumDecPlaces_Equiv. Wrong number of places NumDecPlaces <pre>3.14</pre> <pre>3.143</pre> <pre>1</pre> 0 ATNumDecPlaces_Wrong_DPs. ATNumDecPlaces_Equiv. Your answer has been given to the wrong number of decimal places. NumDecPlaces <pre>3.14</pre> <pre>3.143</pre> <pre>1</pre> 0 ATNumDecPlaces_Wrong_DPs. ATNumDecPlaces_Equiv. Your answer has been given to the wrong number of decimal places. NumDecPlaces <pre>3.14</pre> <pre>3.140</pre> <pre>3</pre> 0 ATNumDecPlaces_Wrong_DPs. ATNumDecPlaces_Equiv. Your answer has been given to the wrong number of decimal places. NumDecPlaces <pre>7.000</pre> <pre>7</pre> <pre>4</pre> 0 ATNumDecPlaces_Wrong_DPs. ATNumDecPlaces_Equiv. Your answer has been given to the wrong number of decimal places. NumDecPlaces <pre>7.0000</pre> <pre>7</pre> <pre>4</pre> 1 ATNumDecPlaces_Correct. ATNumDecPlaces_Equiv. Both wrong DPs and inaccurate. NumDecPlaces <pre>8.0000</pre> <pre>7</pre> <pre>3</pre> 0 ATNumDecPlaces_Wrong_DPs. ATNumDecPlaces_Not_equiv. Your answer has been given to the wrong number of decimal places. Teacher needs to round their answer. NumDecPlaces <pre>4.000</pre> <pre>3.99999</pre> <pre>3</pre> 1 ATNumDecPlaces_Correct. ATNumDecPlaces_Equiv. Teacher uses displaydp NumDecPlaces <pre>0.10</pre> <pre>displaydp(0.1,2)</pre> <pre>2</pre> 1 ATNumDecPlaces_Correct. ATNumDecPlaces_Equiv."},{"location":"en/Authoring/Answer_Tests/Results/NumDecPlacesWrong/","title":"NumDecPlacesWrong: Answer test results","text":"<p>This page exposes the results of running answer tests on STACK test cases.  This page is automatically generated from the STACK unit tests and is designed to show question authors what answer tests actually do.  This includes cases where answer tests currentl fail, which gives a negative expected mark.  Comments and further test cases are very welcome.</p> NumDecPlacesWrong Test?Student responseTeacher answerOptMarkAnswer note Basic tests NumDecPlacesWrong <pre>1/0</pre> <pre>3</pre> <pre>2</pre> -1 ATNumDecPlacesWrong_STACKERROR_SAns. NumDecPlacesWrong <pre>0.1</pre> <pre>1/0</pre> <pre>2</pre> -1 ATNumDecPlacesWrong_STACKERROR_TAns. NumDecPlacesWrong <pre>0.1</pre> <pre>0</pre> <pre>1/0</pre> -1 ATNumDecPlacesWrong_STACKERROR_Opt. NumDecPlacesWrong <pre>0.1</pre> <pre>0</pre> <pre>x</pre> -1 ATNumDecPlacesWrong_OptNotInt. For ATNumDecPlacesWrong the test option must be a positive integer, in fact \"\\(x\\)\" was received. NumDecPlacesWrong <pre>x^2</pre> <pre>1234</pre> <pre>4</pre> 0 ATNumDecPlacesWrong_SA_Not_num. Your answer must be a floating point number, but is not. NumDecPlacesWrong <pre>1234.5</pre> <pre>x^2</pre> <pre>4</pre> 0 ATNumDecPlacesWrong_Tans_Not_Num. NumDecPlacesWrong <pre>3.141</pre> <pre>31.41</pre> <pre>4</pre> 1 ATNumDecPlacesWrong_Correct. NumDecPlacesWrong <pre>3.141</pre> <pre>31.14</pre> <pre>4</pre> 0 ATNumDecPlacesWrong_Wrong. NumDecPlacesWrong <pre>pi</pre> <pre>31.14</pre> <pre>4</pre> 0 ATNumDecPlacesWrong_SA_Not_num. Your answer must be a floating point number, but is not. NumDecPlacesWrong <pre>0.1234</pre> <pre>1234</pre> <pre>4</pre> 1 ATNumDecPlacesWrong_Correct. NumDecPlacesWrong <pre>0.1235</pre> <pre>1234</pre> <pre>4</pre> 0 ATNumDecPlacesWrong_Wrong. NumDecPlacesWrong <pre>0.0001234</pre> <pre>1234</pre> <pre>4</pre> 1 ATNumDecPlacesWrong_Correct. NumDecPlacesWrong <pre>0.0001235</pre> <pre>1234</pre> <pre>4</pre> 0 ATNumDecPlacesWrong_Wrong. NumDecPlacesWrong <pre>0.1233</pre> <pre>1234</pre> <pre>3</pre> 1 ATNumDecPlacesWrong_Correct. NumDecPlacesWrong <pre>0.1243</pre> <pre>1234</pre> <pre>3</pre> 0 ATNumDecPlacesWrong_Wrong. NumDecPlacesWrong <pre>0.1230</pre> <pre>1239</pre> <pre>3</pre> 1 ATNumDecPlacesWrong_Correct. NumDecPlacesWrong <pre>0.1240</pre> <pre>1239</pre> <pre>3</pre> 0 ATNumDecPlacesWrong_Wrong. NumDecPlacesWrong <pre>1230</pre> <pre>1239</pre> <pre>3</pre> 1 ATNumDecPlacesWrong_Correct. NumDecPlacesWrong <pre>2230</pre> <pre>1239</pre> <pre>3</pre> 0 ATNumDecPlacesWrong_Wrong. NumDecPlacesWrong <pre>0.100</pre> <pre>1.00</pre> <pre>3</pre> 1 ATNumDecPlacesWrong_Correct. NumDecPlacesWrong <pre>0.1000</pre> <pre>1.00</pre> <pre>3</pre> 1 ATNumDecPlacesWrong_Correct. NumDecPlacesWrong <pre>0.1001</pre> <pre>1.001</pre> <pre>3</pre> 1 ATNumDecPlacesWrong_Correct. Condone lack of trailing zeros NumDecPlacesWrong <pre>0.100</pre> <pre>1.0</pre> <pre>4</pre> 1 ATNumDecPlacesWrong_Correct. NumDecPlacesWrong <pre>1</pre> <pre>1.00</pre> <pre>4</pre> 1 ATNumDecPlacesWrong_Correct. Teacher uses displaydp NumDecPlacesWrong <pre>0.101</pre> <pre>displaydp(101,3)</pre> <pre>3</pre> 1 ATNumDecPlacesWrong_Correct."},{"location":"en/Authoring/Answer_Tests/Results/NumRelative/","title":"NumRelative: Answer test results","text":"<p>This page exposes the results of running answer tests on STACK test cases.  This page is automatically generated from the STACK unit tests and is designed to show question authors what answer tests actually do.  This includes cases where answer tests currentl fail, which gives a negative expected mark.  Comments and further test cases are very welcome.</p> NumRelative Test?Student responseTeacher answerOptMarkAnswer note Basic tests NumRelative <pre>1/0</pre> <pre>0</pre> -1 ATNumRelative_STACKERROR_SAns. TEST_FAILED The answer test failed to execute correctly: please alert your teacher. Division by zero. NumRelative <pre>0</pre> <pre>1/0</pre> -1 ATNumRelative_STACKERROR_TAns. TEST_FAILED The answer test failed to execute correctly: please alert your teacher. Division by zero. NumRelative <pre>0</pre> <pre>0</pre> <pre>1/0</pre> -1 ATNumRelative_STACKERROR_Opt. TEST_FAILED The answer test failed to execute correctly: please alert your teacher. Division by zero. NumRelative <pre>0</pre> <pre>(x</pre> -1 ATNumRelativeTEST_FAILED-Empty TA. The answer test failed to execute correctly: please alert your teacher. Attempted to execute an answer test with an empty teacher answer, probably a CAS validation problem when authoring the question. NumRelative <pre>1.5</pre> <pre>1.5</pre> <pre>x</pre> -1 ATNumerical_STACKERROR_tol. The numerical tolerance for ATNumerical should be a floating point number, but is not. This is an internal error with the test. Please ask your teacher about this. NumRelative <pre>1</pre> <pre>0</pre> <pre>(x</pre> 0 NumRelative <pre>x=1.5</pre> <pre>1.5</pre> 0 ATNumerical_SA_not_number. Your answer should be a floating point number, but is not. NumRelative <pre>1.5</pre> <pre>x=1.5</pre> 0 ATNumerical_SB_not_number. The value supplied for the teacher's answer should be a floating point number, but is not. This is an internal error with the test. Please ask your teacher about this. No option, so 5% NumRelative <pre>1.1</pre> <pre>1</pre> 0 NumRelative <pre>1.05</pre> <pre>1</pre> 1 NumRelative <pre>0.95</pre> <pre>1</pre> 1 NumRelative <pre>0.949</pre> <pre>1</pre> 0 NumRelative <pre>1.05e33</pre> <pre>1e33</pre> 1 NumRelative <pre>1.06e33</pre> <pre>1e33</pre> 0 NumRelative <pre>0.95e33</pre> <pre>1e33</pre> 1 NumRelative <pre>0.949e33</pre> <pre>1e33</pre> 0 NumRelative <pre>1.05e-33</pre> <pre>1e-33</pre> 1 NumRelative <pre>1.06e-33</pre> <pre>1e-33</pre> 0 NumRelative <pre>0.95e-33</pre> <pre>1e-33</pre> 1 NumRelative <pre>0.949e-33</pre> <pre>1e-33</pre> 0 Remove display dp etc. NumRelative <pre>1</pre> <pre>displaydp(1.05,2)</pre> <pre>0.1</pre> 1 NumRelative <pre>1000</pre> <pre>displaysci(1.05,2,3)</pre> <pre>0.1</pre> 1 Options passed NumRelative <pre>1.05</pre> <pre>1</pre> <pre>0.1</pre> 1 NumRelative <pre>1.05</pre> <pre>3</pre> <pre>0.1</pre> 0 NumRelative <pre>3.14</pre> <pre>pi</pre> <pre>0.001</pre> 1 Infinity NumRelative <pre>inf</pre> <pre>0</pre> 0 ATNumerical_SA_not_number. Your answer should be a floating point number, but is not. Lists NumRelative <pre>1</pre> <pre>[1,2]</pre> 0 ATNumerical_SA_not_list. Your answer should be a list, but is not. Note that the syntax to enter a list is to enclose the comma separated values with square brackets. NumRelative <pre>[1,2]</pre> <pre>[1,2,3]</pre> 0 ATNumerical_wronglen. Your list should have \\(3\\) elements, but it actually has \\(2\\). NumRelative <pre>[1,2]</pre> <pre>[1,2]</pre> 1 NumRelative <pre>[3.141,1.414]</pre> <pre>[pi,sqrt(2)]</pre> 1 NumRelative <pre>[3,1.414]</pre> <pre>[pi,sqrt(2)]</pre> <pre>0.01</pre> 0 ATNumerical_wrongentries SA/TA=[3.0]. The entries underlined in red below are those that are incorrect. \\[\\left[ {\\color{red}{\\underline{3.0}}} , 1.414 \\right] \\] NumRelative <pre>[3,1.414]</pre> <pre>{pi,sqrt(2)}</pre> <pre>0.01</pre> 0 ATNumerical_SA_not_set. Your answer should be a set, but is not. Note that the syntax to enter a set is to enclose the comma separated values with curly brackets. NumRelative <pre>{1.414,3.1}</pre> <pre>{significantfigures(pi,6),sqrt\n(2)}</pre> <pre>0.01</pre> 0 ATNumerical_wrongentries: TA/SA=[3.14159], SA/TA=[3.1]. The entries underlined in red below are those that are incorrect. \\[\\left \\{{\\color{red}{\\underline{3.1}}} \\right \\}\\] NumRelative <pre>{1.414,3.1}</pre> <pre>{pi,sqrt(2)}</pre> <pre>0.1</pre> 1 NumRelative <pre>{0,1,2}</pre> <pre>{0,1,2}</pre> <pre>0.1</pre> 1 NumRelative <pre>{-1,2,3}</pre> <pre>{-1,2,3}</pre> <pre>0.01</pre> 1 NumRelative <pre>{-1.1,2,3}</pre> <pre>{-1,2,3}</pre> <pre>0.01</pre> 0 ATNumerical_wrongentries: TA/SA=[-1.0], SA/TA=[-1.1]. The entries underlined in red below are those that are incorrect. \\[\\left \\{{\\color{red}{\\underline{-1.1}}} \\right \\}\\] Complex numbers NumRelative <pre>0.99*%i</pre> <pre>%i</pre> <pre>0.1</pre> 0 ATNumerical_SA_not_number. Your answer should be a floating point number, but is not. NumRelative <pre>displaydp(0.95,2)</pre> <pre>1</pre> 1"},{"location":"en/Authoring/Answer_Tests/Results/NumSigFigs/","title":"NumSigFigs: Answer test results","text":"<p>This page exposes the results of running answer tests on STACK test cases.  This page is automatically generated from the STACK unit tests and is designed to show question authors what answer tests actually do.  This includes cases where answer tests currentl fail, which gives a negative expected mark.  Comments and further test cases are very welcome.</p> NumSigFigs Test?Student responseTeacher answerOptMarkAnswer note Basic tests NumSigFigs <pre>3.141</pre> <pre>3.1415927</pre> -1 STACKERROR_OPTION. TEST_FAILED The answer test failed to execute correctly: please alert your teacher. Missing option when executing the test.  NumSigFigs <pre>1/0</pre> <pre>3</pre> <pre>3</pre> -1 ATNumSigFigs_STACKERROR_SAns. NumSigFigs <pre>0</pre> <pre>1/0</pre> <pre>3</pre> -1 ATNumSigFigs_STACKERROR_TAns. NumSigFigs <pre>0</pre> <pre>0</pre> <pre>1/0</pre> -1 ATNumSigFigs_STACKERROR_Opt. NumSigFigs <pre>0</pre> <pre>1</pre> <pre>(</pre> -1 STACKERROR_OPTION. TEST_FAILED The answer test failed to execute correctly: please alert your teacher. Option field is invalid. You have a missing right bracket ) in the expression: (. NumSigFigs <pre>(</pre> <pre>1</pre> <pre>1</pre> -1 ATNumSigFigsTEST_FAILED-Empty SA. The answer test failed to execute correctly: please alert your teacher. Attempted to execute an answer test with an empty student answer, probably a CAS validation problem when authoring the question. NumSigFigs <pre>1</pre> <pre>3</pre> <pre>pi</pre> -1 ATNumSigFigs_STACKERROR_not_integer. The answer test failed to execute correctly: please alert your teacher. NumSigFigs <pre>1</pre> <pre>3</pre> <pre>[3,x]</pre> -1 ATNumSigFigs_STACKERROR_not_integer. The answer test failed to execute correctly: please alert your teacher. NumSigFigs <pre>1</pre> <pre>3</pre> <pre>[1,2,3]</pre> -1 ATNumSigFigs_STACKERROR_list_wrong_length. The answer test failed to execute correctly: please alert your teacher. NumSigFigs <pre>1</pre> <pre>3</pre> -1 STACKERROR_OPTION. TEST_FAILED The answer test failed to execute correctly: please alert your teacher. Missing option when executing the test.  NumSigFigs <pre>pi</pre> <pre>pi</pre> <pre>4</pre> 0 ATNumSigFigs_NotDecimal. Your answer should be a decimal number, but is not! Edge cases NumSigFigs <pre>0</pre> <pre>0</pre> <pre>2</pre> 0 ATNumSigFigs_WrongDigits. Your answer contains the wrong number of significant digits. NumSigFigs <pre>0</pre> <pre>0</pre> <pre>1</pre> 1 NumSigFigs <pre>0.0</pre> <pre>0</pre> <pre>1</pre> 1 NumSigFigs <pre>0.0</pre> <pre>0</pre> <pre>2</pre> 0 ATNumSigFigs_WrongDigits. Your answer contains the wrong number of significant digits. NumSigFigs <pre>0</pre> <pre>0.0</pre> <pre>2</pre> 0 ATNumSigFigs_WrongDigits. Your answer contains the wrong number of significant digits. NumSigFigs <pre>0.0</pre> <pre>0.0</pre> <pre>2</pre> 0 ATNumSigFigs_WrongDigits. Your answer contains the wrong number of significant digits. NumSigFigs <pre>0.00</pre> <pre>0.00</pre> <pre>2</pre> 1 Large numbers NumSigFigs <pre>5.4e21</pre> <pre>5.3e21</pre> <pre>2</pre> 0 ATNumSigFigs_Inaccurate. The accuracy of your answer is not correct. Either you have not rounded correctly, or you have rounded an intermediate answer which propagates an error. NumSigFigs <pre>5.3e21</pre> <pre>5.3e21</pre> <pre>2</pre> 1 NumSigFigs <pre>5.3e22</pre> <pre>5.3e22</pre> <pre>2</pre> 1 NumSigFigs <pre>5.3e20</pre> <pre>5.3e22</pre> <pre>2</pre> 0 ATNumSigFigs_VeryInaccurate. NumSigFigs <pre>9.8</pre> <pre>10</pre> <pre>2</pre> 1 NumSigFigs <pre>9.5</pre> <pre>10</pre> <pre>2</pre> 0 ATNumSigFigs_Inaccurate. The accuracy of your answer is not correct. Either you have not rounded correctly, or you have rounded an intermediate answer which propagates an error. NumSigFigs <pre>10.0</pre> <pre>10</pre> <pre>2</pre> 0 ATNumSigFigs_WrongDigits. Your answer contains the wrong number of significant digits. NumSigFigs <pre>6.02214086e23</pre> <pre>6.02214086e23</pre> <pre>9</pre> 1 NumSigFigs <pre>6.0221409e23</pre> <pre>6.02214086e23</pre> <pre>9</pre> 0 ATNumSigFigs_WrongDigits. ATNumSigFigs_Inaccurate. Your answer contains the wrong number of significant digits. The accuracy of your answer is not correct. Either you have not rounded correctly, or you have rounded an intermediate answer which propagates an error. NumSigFigs <pre>6.02214087e23</pre> <pre>6.02214086e23</pre> <pre>9</pre> 0 ATNumSigFigs_Inaccurate. The accuracy of your answer is not correct. Either you have not rounded correctly, or you have rounded an intermediate answer which propagates an error. NumSigFigs <pre>6.02214085e23</pre> <pre>6.02214086e23</pre> <pre>9</pre> 0 ATNumSigFigs_Inaccurate. The accuracy of your answer is not correct. Either you have not rounded correctly, or you have rounded an intermediate answer which propagates an error. NumSigFigs <pre>5.3910632e-44</pre> <pre>5.3910632e-44</pre> <pre>8</pre> 1 NumSigFigs <pre>5.391063e-44</pre> <pre>5.3910632e-44</pre> <pre>8</pre> 0 ATNumSigFigs_WrongDigits. ATNumSigFigs_Inaccurate. Your answer contains the wrong number of significant digits. The accuracy of your answer is not correct. Either you have not rounded correctly, or you have rounded an intermediate answer which propagates an error. NumSigFigs <pre>5.3910631e-44</pre> <pre>5.3910632e-44</pre> <pre>8</pre> 0 ATNumSigFigs_Inaccurate. The accuracy of your answer is not correct. Either you have not rounded correctly, or you have rounded an intermediate answer which propagates an error. NumSigFigs <pre>5.3910633e-44</pre> <pre>5.3910632e-44</pre> <pre>8</pre> 0 ATNumSigFigs_Inaccurate. The accuracy of your answer is not correct. Either you have not rounded correctly, or you have rounded an intermediate answer which propagates an error. NumSigFigs <pre>1.61622938e-35</pre> <pre>1.61622938e-35</pre> <pre>9</pre> 1 NumSigFigs <pre>1.6162294e-35</pre> <pre>1.61622938e-35</pre> <pre>9</pre> 0 ATNumSigFigs_WrongDigits. ATNumSigFigs_Inaccurate. Your answer contains the wrong number of significant digits. The accuracy of your answer is not correct. Either you have not rounded correctly, or you have rounded an intermediate answer which propagates an error. NumSigFigs <pre>1.61622939e-35</pre> <pre>1.61622938e-35</pre> <pre>9</pre> 0 ATNumSigFigs_Inaccurate. The accuracy of your answer is not correct. Either you have not rounded correctly, or you have rounded an intermediate answer which propagates an error. NumSigFigs <pre>1.61622937e-35</pre> <pre>1.61622938e-35</pre> <pre>9</pre> 0 ATNumSigFigs_Inaccurate. The accuracy of your answer is not correct. Either you have not rounded correctly, or you have rounded an intermediate answer which propagates an error. NumSigFigs <pre>1.2345e82</pre> <pre>1.2345e82</pre> <pre>5</pre> 1 NumSigFigs <pre>1.2346e82</pre> <pre>1.2345e82</pre> <pre>5</pre> 0 ATNumSigFigs_Inaccurate. The accuracy of your answer is not correct. Either you have not rounded correctly, or you have rounded an intermediate answer which propagates an error. NumSigFigs <pre>1.2344e82</pre> <pre>1.2345e82</pre> <pre>5</pre> 0 ATNumSigFigs_Inaccurate. The accuracy of your answer is not correct. Either you have not rounded correctly, or you have rounded an intermediate answer which propagates an error. No trailing zeros. NumSigFigs <pre>1.234</pre> <pre>4</pre> <pre>1</pre> 0 ATNumSigFigs_WrongDigits. ATNumSigFigs_Inaccurate. Your answer contains the wrong number of significant digits. The accuracy of your answer is not correct. Either you have not rounded correctly, or you have rounded an intermediate answer which propagates an error. NumSigFigs <pre>3.141</pre> <pre>3.1415927</pre> <pre>3</pre> 0 ATNumSigFigs_WrongDigits. Your answer contains the wrong number of significant digits. NumSigFigs <pre>3.141</pre> <pre>3.1415927</pre> <pre>4</pre> 0 ATNumSigFigs_Inaccurate. The accuracy of your answer is not correct. Either you have not rounded correctly, or you have rounded an intermediate answer which propagates an error. NumSigFigs <pre>3.146</pre> <pre>3.1415927</pre> <pre>4</pre> 0 ATNumSigFigs_Inaccurate. The accuracy of your answer is not correct. Either you have not rounded correctly, or you have rounded an intermediate answer which propagates an error. NumSigFigs <pre>3.147</pre> <pre>3.1415927</pre> <pre>4</pre> 0 ATNumSigFigs_VeryInaccurate. NumSigFigs <pre>3.142</pre> <pre>3.1415927</pre> <pre>4</pre> 1 NumSigFigs <pre>3.142</pre> <pre>pi</pre> <pre>4</pre> 1 NumSigFigs <pre>3141</pre> <pre>3.1415927</pre> <pre>4</pre> 0 ATNumSigFigs_VeryInaccurate. NumSigFigs <pre>0.00123</pre> <pre>0.001234567</pre> <pre>3</pre> 1 NumSigFigs <pre>1.23e-3</pre> <pre>0.001234567</pre> <pre>3</pre> 1 NumSigFigs <pre>138*10^-3</pre> <pre>138*10^-3</pre> <pre>3</pre> 1 NumSigFigs <pre>-138*10^-3</pre> <pre>-138*10^-3</pre> <pre>3</pre> 1 NumSigFigs <pre>138*10^-3</pre> <pre>-138*10^-3</pre> <pre>3</pre> 0 ATNumSigFigs_WrongSign. Your answer has the wrong algebraic sign. NumSigFigs <pre>1.38*10^-1</pre> <pre>138*10^-3</pre> <pre>3</pre> 1 NumSigFigs <pre>1.24e-3</pre> <pre>0.001234567</pre> <pre>3</pre> 0 ATNumSigFigs_Inaccurate. The accuracy of your answer is not correct. Either you have not rounded correctly, or you have rounded an intermediate answer which propagates an error. NumSigFigs <pre>1.235e-3</pre> <pre>0.001234567</pre> <pre>4</pre> 1 NumSigFigs <pre>1000</pre> <pre>999</pre> <pre>2</pre> 1 ATNumSigFigs_WithinRange. NumSigFigs <pre>1E3</pre> <pre>999</pre> <pre>2</pre> 0 ATNumSigFigs_WrongDigits. Your answer contains the wrong number of significant digits. NumSigFigs <pre>-100</pre> <pre>-149</pre> <pre>1</pre> 1 NumSigFigs <pre>-0.05</pre> <pre>-0.0499</pre> <pre>1</pre> 1 NumSigFigs <pre>-(0.05)</pre> <pre>-0.0499</pre> <pre>1</pre> 1 NumSigFigs <pre>1170</pre> <pre>1174.34</pre> <pre>3</pre> 1 NumSigFigs <pre>61300</pre> <pre>61250</pre> <pre>3</pre> 1 Previous tricky case NumSigFigs <pre>0.1667</pre> <pre>0.1667</pre> <pre>4</pre> 1 NumSigFigs <pre>0.1666</pre> <pre>0.1667</pre> <pre>4</pre> 0 ATNumSigFigs_Inaccurate. The accuracy of your answer is not correct. Either you have not rounded correctly, or you have rounded an intermediate answer which propagates an error. NumSigFigs <pre>0.1663</pre> <pre>0.1667</pre> <pre>4</pre> 0 ATNumSigFigs_Inaccurate. The accuracy of your answer is not correct. Either you have not rounded correctly, or you have rounded an intermediate answer which propagates an error. NumSigFigs <pre>0.1662</pre> <pre>0.1667</pre> <pre>4</pre> 0 ATNumSigFigs_VeryInaccurate. NumSigFigs <pre>0.166</pre> <pre>0.1667</pre> <pre>4</pre> 0 ATNumSigFigs_WrongDigits. ATNumSigFigs_VeryInaccurate. Your answer contains the wrong number of significant digits. NumSigFigs <pre>0.16667</pre> <pre>0.1667</pre> <pre>4</pre> 0 ATNumSigFigs_WrongDigits. Your answer contains the wrong number of significant digits. Negative numbers NumSigFigs <pre>-3.141</pre> <pre>-3.1415927</pre> <pre>4</pre> 0 ATNumSigFigs_Inaccurate. The accuracy of your answer is not correct. Either you have not rounded correctly, or you have rounded an intermediate answer which propagates an error. NumSigFigs <pre>-3.141</pre> <pre>-3.1415927</pre> <pre>3</pre> 0 ATNumSigFigs_WrongDigits. Your answer contains the wrong number of significant digits. NumSigFigs <pre>-3.141</pre> <pre>-3.1415927</pre> <pre>4</pre> 0 ATNumSigFigs_Inaccurate. The accuracy of your answer is not correct. Either you have not rounded correctly, or you have rounded an intermediate answer which propagates an error. NumSigFigs <pre>-3.142</pre> <pre>-3.1415927</pre> <pre>4</pre> 1 NumSigFigs <pre>3.142</pre> <pre>-3.1415927</pre> <pre>4</pre> 0 ATNumSigFigs_WrongSign. Your answer has the wrong algebraic sign. NumSigFigs <pre>-3.142</pre> <pre>3.1415927</pre> <pre>4</pre> 0 ATNumSigFigs_WrongSign. Your answer has the wrong algebraic sign. NumSigFigs <pre>-3.149</pre> <pre>3.1415927</pre> <pre>4</pre> 0 ATNumSigFigs_WrongSign. ATNumSigFigs_VeryInaccurate. Your answer has the wrong algebraic sign. NumSigFigs <pre>2.15</pre> <pre>75701719/35227192</pre> <pre>3</pre> 1 Round teacher answer NumSigFigs <pre>0.0499</pre> <pre>0.04985</pre> <pre>3</pre> 1 NumSigFigs <pre>0.0498</pre> <pre>0.04985</pre> <pre>3</pre> 0 ATNumSigFigs_Inaccurate. The accuracy of your answer is not correct. Either you have not rounded correctly, or you have rounded an intermediate answer which propagates an error. NumSigFigs <pre>0.0498</pre> <pre>0.04975</pre> <pre>3</pre> 1 NumSigFigs <pre>0.0497</pre> <pre>0.04975</pre> <pre>3</pre> 0 ATNumSigFigs_Inaccurate. The accuracy of your answer is not correct. Either you have not rounded correctly, or you have rounded an intermediate answer which propagates an error. NumSigFigs <pre>0.0499</pre> <pre>0.0498</pre> <pre>3</pre> 0 ATNumSigFigs_Inaccurate. The accuracy of your answer is not correct. Either you have not rounded correctly, or you have rounded an intermediate answer which propagates an error. Final zeros after the decimal are significant. NumSigFigs <pre>1.5</pre> <pre>1.500</pre> <pre>3</pre> 0 ATNumSigFigs_WrongDigits. Your answer contains the wrong number of significant digits. NumSigFigs <pre>1.50</pre> <pre>1.500</pre> <pre>3</pre> 1 NumSigFigs <pre>1.500</pre> <pre>1.500</pre> <pre>3</pre> 0 ATNumSigFigs_WrongDigits. Your answer contains the wrong number of significant digits. NumSigFigs <pre>245.0</pre> <pre>245</pre> <pre>3</pre> 0 ATNumSigFigs_WrongDigits. Your answer contains the wrong number of significant digits. Too few digits NumSigFigs <pre>180</pre> <pre>178.35</pre> <pre>3</pre> 0 ATNumSigFigs_WithinRange. ATNumSigFigs_Inaccurate. The accuracy of your answer is not correct. Either you have not rounded correctly, or you have rounded an intermediate answer which propagates an error. NumSigFigs <pre>33</pre> <pre>33.1558</pre> <pre>3</pre> 0 ATNumSigFigs_WrongDigits. ATNumSigFigs_Inaccurate. Your answer contains the wrong number of significant digits. The accuracy of your answer is not correct. Either you have not rounded correctly, or you have rounded an intermediate answer which propagates an error. Mixed options NumSigFigs <pre>3.142</pre> <pre>3.1415927</pre> <pre>[4,3]</pre> 1 NumSigFigs <pre>3.143</pre> <pre>3.1415927</pre> <pre>[4,3]</pre> 1 NumSigFigs <pre>3.150</pre> <pre>3.1415927</pre> <pre>[4,3]</pre> 0 ATNumSigFigs_Inaccurate. The accuracy of your answer is not correct. Either you have not rounded correctly, or you have rounded an intermediate answer which propagates an error. NumSigFigs <pre>3.211</pre> <pre>3.1415927</pre> <pre>[4,3]</pre> 0 ATNumSigFigs_VeryInaccurate. NumSigFigs <pre>3.1416</pre> <pre>3.1415927</pre> <pre>[4,3]</pre> 0 ATNumSigFigs_WrongDigits. Your answer contains the wrong number of significant digits. NumSigFigs <pre>0.1666</pre> <pre>0.1667</pre> <pre>[4,3]</pre> 1 NumSigFigs <pre>180</pre> <pre>178.35</pre> <pre>[3,1]</pre> 1 ATNumSigFigs_WithinRange. NumSigFigs <pre>33</pre> <pre>33.1558</pre> <pre>[3,1]</pre> 0 ATNumSigFigs_WrongDigits. Your answer contains the wrong number of significant digits. NumSigFigs <pre>1.500</pre> <pre>1.5</pre> <pre>[3,1]</pre> 0 ATNumSigFigs_WrongDigits. Your answer contains the wrong number of significant digits. NumSigFigs <pre>245.0</pre> <pre>245</pre> <pre>[3,1]</pre> 0 ATNumSigFigs_WrongDigits. Your answer contains the wrong number of significant digits. NumSigFigs <pre>12345.7</pre> <pre>12345.654321</pre> <pre>[6,6]</pre> 1 NumSigFigs <pre>12345.7</pre> <pre>12345.654321</pre> <pre>[6,3]</pre> 1 NumSigFigs <pre>12300.0</pre> <pre>12345.654321</pre> <pre>[6,3]</pre> 1 NumSigFigs <pre>12400.0</pre> <pre>12345.654321</pre> <pre>[6,3]</pre> 0 ATNumSigFigs_Inaccurate. The accuracy of your answer is not correct. Either you have not rounded correctly, or you have rounded an intermediate answer which propagates an error. NumSigFigs <pre>13500.0</pre> <pre>12345.654321</pre> <pre>[6,3]</pre> 0 ATNumSigFigs_VeryInaccurate. NumSigFigs <pre>12000.0</pre> <pre>12345.654321</pre> <pre>[6,2]</pre> 1 NumSigFigs <pre>13000.0</pre> <pre>12345.654321</pre> <pre>[6,2]</pre> 0 ATNumSigFigs_Inaccurate. The accuracy of your answer is not correct. Either you have not rounded correctly, or you have rounded an intermediate answer which propagates an error. NumSigFigs <pre>11000.0</pre> <pre>12345.654321</pre> <pre>[6,2]</pre> 0 ATNumSigFigs_Inaccurate. The accuracy of your answer is not correct. Either you have not rounded correctly, or you have rounded an intermediate answer which propagates an error. Zero option and trailing zeros NumSigFigs <pre>0.0010</pre> <pre>0</pre> <pre>[1,0]</pre> 0 ATNumSigFigs_WrongDigits. Your answer contains the wrong number of significant digits. NumSigFigs <pre>0.0010</pre> <pre>0</pre> <pre>[2,0]</pre> 1 NumSigFigs <pre>0.0010</pre> <pre>0</pre> <pre>[3,0]</pre> 0 ATNumSigFigs_WrongDigits. Your answer contains the wrong number of significant digits. NumSigFigs <pre>0.001</pre> <pre>0</pre> <pre>[1,0]</pre> 1 NumSigFigs <pre>0.001</pre> <pre>0</pre> <pre>[2,0]</pre> 0 ATNumSigFigs_WrongDigits. Your answer contains the wrong number of significant digits. NumSigFigs <pre>0.00100</pre> <pre>null</pre> <pre>[2,0]</pre> 0 ATNumSigFigs_WrongDigits. Your answer contains the wrong number of significant digits. NumSigFigs <pre>0.00100</pre> <pre>null</pre> <pre>[3,0]</pre> 1 NumSigFigs <pre>0.00100</pre> <pre>null</pre> <pre>[4,0]</pre> 0 ATNumSigFigs_WrongDigits. Your answer contains the wrong number of significant digits. NumSigFigs <pre>5.00</pre> <pre>null</pre> <pre>[2,0]</pre> 0 ATNumSigFigs_WrongDigits. Your answer contains the wrong number of significant digits. NumSigFigs <pre>5.00</pre> <pre>null</pre> <pre>[3,0]</pre> 1 NumSigFigs <pre>5.00</pre> <pre>null</pre> <pre>[4,0]</pre> 0 ATNumSigFigs_WrongDigits. Your answer contains the wrong number of significant digits. NumSigFigs <pre>100</pre> <pre>0</pre> <pre>[1,0]</pre> 1 NumSigFigs <pre>100</pre> <pre>0</pre> <pre>[2,0]</pre> 1 ATNumSigFigs_WithinRange. NumSigFigs <pre>100</pre> <pre>0</pre> <pre>[3,0]</pre> 1 ATNumSigFigs_WithinRange. NumSigFigs <pre>100</pre> <pre>0</pre> <pre>[4,0]</pre> 0 ATNumSigFigs_WrongDigits. Your answer contains the wrong number of significant digits. NumSigFigs <pre>10.0</pre> <pre>0</pre> <pre>[2,0]</pre> 0 ATNumSigFigs_WrongDigits. Your answer contains the wrong number of significant digits. NumSigFigs <pre>10.0</pre> <pre>0</pre> <pre>[3,0]</pre> 1 NumSigFigs <pre>10.0</pre> <pre>0</pre> <pre>[4,0]</pre> 0 ATNumSigFigs_WrongDigits. Your answer contains the wrong number of significant digits. NumSigFigs <pre>0</pre> <pre>0</pre> <pre>[1,0]</pre> 1 NumSigFigs <pre>0</pre> <pre>0</pre> <pre>[2,0]</pre> 0 ATNumSigFigs_WrongDigits. Your answer contains the wrong number of significant digits. NumSigFigs <pre>0.00</pre> <pre>0</pre> <pre>[1,0]</pre> 0 ATNumSigFigs_WrongDigits. Your answer contains the wrong number of significant digits. NumSigFigs <pre>0.00</pre> <pre>0</pre> <pre>[2,0]</pre> 1 NumSigFigs <pre>0.00</pre> <pre>0</pre> <pre>[3,0]</pre> 0 ATNumSigFigs_WrongDigits. Your answer contains the wrong number of significant digits. NumSigFigs <pre>0.00</pre> <pre>0</pre> <pre>[4,0]</pre> 0 ATNumSigFigs_WrongDigits. Your answer contains the wrong number of significant digits. Condone too many sfs. NumSigFigs <pre>8.250</pre> <pre>8.250</pre> <pre>[4,-1]</pre> 1 NumSigFigs <pre>8.25</pre> <pre>8.250</pre> <pre>[4,-1]</pre> 0 ATNumSigFigs_WrongDigits. Your answer contains the wrong number of significant digits. NumSigFigs <pre>8.250000</pre> <pre>8.250</pre> <pre>[4,-1]</pre> 1 NumSigFigs <pre>8.250434</pre> <pre>8.250</pre> <pre>[4,-1]</pre> 1 NumSigFigs <pre>82.4</pre> <pre>82</pre> <pre>[2,-1]</pre> 1 NumSigFigs <pre>82.5</pre> <pre>82</pre> <pre>[2,-1]</pre> 0 ATNumSigFigs_Inaccurate. The accuracy of your answer is not correct. Either you have not rounded correctly, or you have rounded an intermediate answer which propagates an error. NumSigFigs <pre>83</pre> <pre>82</pre> <pre>[2,-1]</pre> 0 ATNumSigFigs_Inaccurate. The accuracy of your answer is not correct. Either you have not rounded correctly, or you have rounded an intermediate answer which propagates an error. 1/7 = 0.142857142857... NumSigFigs <pre>0.1430</pre> <pre>1/7</pre> <pre>[4,-1]</pre> 0 ATNumSigFigs_Inaccurate. The accuracy of your answer is not correct. Either you have not rounded correctly, or you have rounded an intermediate answer which propagates an error. NumSigFigs <pre>0.1429</pre> <pre>1/7</pre> <pre>[4,-1]</pre> 1 NumSigFigs <pre>0.1428</pre> <pre>1/7</pre> <pre>[4,-1]</pre> 0 ATNumSigFigs_Inaccurate. The accuracy of your answer is not correct. Either you have not rounded correctly, or you have rounded an intermediate answer which propagates an error. NumSigFigs <pre>0.143</pre> <pre>1/7</pre> <pre>[4,-1]</pre> 0 ATNumSigFigs_WrongDigits. ATNumSigFigs_Inaccurate. Your answer contains the wrong number of significant digits. The accuracy of your answer is not correct. Either you have not rounded correctly, or you have rounded an intermediate answer which propagates an error. NumSigFigs <pre>0.14284</pre> <pre>1/7</pre> <pre>[4,-1]</pre> 0 ATNumSigFigs_Inaccurate. The accuracy of your answer is not correct. Either you have not rounded correctly, or you have rounded an intermediate answer which propagates an error. NumSigFigs <pre>0.14285</pre> <pre>1/7</pre> <pre>[4,-1]</pre> 1 NumSigFigs <pre>0.14286</pre> <pre>1/7</pre> <pre>[4,-1]</pre> 1 NumSigFigs <pre>0.14291</pre> <pre>1/7</pre> <pre>[4,-1]</pre> 1 NumSigFigs <pre>0.14294</pre> <pre>1/7</pre> <pre>[4,-1]</pre> 1 NumSigFigs <pre>0.14295</pre> <pre>1/7</pre> <pre>[4,-1]</pre> 0 ATNumSigFigs_Inaccurate. The accuracy of your answer is not correct. Either you have not rounded correctly, or you have rounded an intermediate answer which propagates an error. NumSigFigs <pre>0.142</pre> <pre>1/7</pre> <pre>[2,-1]</pre> 1 NumSigFigs <pre>0.14290907676</pre> <pre>1/7</pre> <pre>[2,-1]</pre> 1 NumSigFigs <pre>0.143</pre> <pre>1/7</pre> <pre>[2,-1]</pre> 1 NumSigFigs <pre>0.1433333</pre> <pre>1/7</pre> <pre>[2,-1]</pre> 1 NumSigFigs <pre>0.144</pre> <pre>1/7</pre> <pre>[2,-1]</pre> 1 NumSigFigs <pre>0.145</pre> <pre>1/7</pre> <pre>[2,-1]</pre> 1 NumSigFigs <pre>0.146</pre> <pre>1/7</pre> <pre>[2,-1]</pre> 0 ATNumSigFigs_Inaccurate. The accuracy of your answer is not correct. Either you have not rounded correctly, or you have rounded an intermediate answer which propagates an error. Logarithms, numbers and surds NumSigFigs <pre>1.279</pre> <pre>ev(lg(19),lg=logbasesimp)</pre> <pre>4</pre> 1 NumSigFigs <pre>3.14</pre> <pre>pi</pre> <pre>3</pre> 1 NumSigFigs <pre>3.15</pre> <pre>pi</pre> <pre>3</pre> 0 ATNumSigFigs_Inaccurate. The accuracy of your answer is not correct. Either you have not rounded correctly, or you have rounded an intermediate answer which propagates an error. NumSigFigs <pre>1.73205</pre> <pre>sqrt(3)</pre> <pre>6</pre> 1 No support for matrices! NumSigFigs <pre>matrix([0.33,1],[1,1])</pre> <pre>matrix([0.333,1],[1,1])</pre> <pre>2</pre> -1 ATNumSigFigs_NotDecimal. Your answer should be a decimal number, but is not! NumSigFigs <pre>3.1415</pre> <pre>matrix([0.333,1],[1,1])</pre> <pre>2</pre> 0 ATNumSigFigs_WrongDigits. ATNumSigFigs_WrongSign. Your answer contains the wrong number of significant digits. Your answer has the wrong algebraic sign. Teacher uses dispsf NumSigFigs <pre>1.50</pre> <pre>dispsf(1.500,3)</pre> <pre>3</pre> 1 NumSigFigs <pre>1.50</pre> <pre>dispdp(1.500,3)</pre> <pre>3</pre> 1"},{"location":"en/Authoring/Answer_Tests/Results/PartFrac/","title":"PartFrac: Answer test results","text":"<p>This page exposes the results of running answer tests on STACK test cases.  This page is automatically generated from the STACK unit tests and is designed to show question authors what answer tests actually do.  This includes cases where answer tests currentl fail, which gives a negative expected mark.  Comments and further test cases are very welcome.</p> PartFrac Test?Student responseTeacher answerOptMarkAnswer note PartFrac <pre>1/0</pre> <pre>3*x^2</pre> -1 STACKERROR_OPTION. TEST_FAILED The answer test failed to execute correctly: please alert your teacher. Missing option when executing the test.  PartFrac <pre>1/0</pre> <pre>3*x^2</pre> <pre>x</pre> -1 ATPartFrac_STACKERROR_SAns. TEST_FAILED The answer test failed to execute correctly: please alert your teacher. Division by zero. PartFrac <pre>0</pre> <pre>0</pre> <pre>1/0</pre> -1 ATPartFrac_STACKERROR_Opt. TEST_FAILED The answer test failed to execute correctly: please alert your teacher. Division by zero. PartFrac <pre>0</pre> <pre>1/0</pre> <pre>x</pre> -1 ATPartFrac_STACKERROR_TAns. TEST_FAILED The answer test failed to execute correctly: please alert your teacher. Division by zero. PartFrac <pre>1/n=0</pre> <pre>1/n</pre> <pre>n</pre> 0 ATPartFrac_SA_not_expression. Your answer should be an expression, not an equation, inequality, list, set or matrix. PartFrac <pre>1/n</pre> <pre>{1/n}</pre> <pre>n</pre> 0 ATPartFrac_TA_not_expression. The answer test failed. Please contact your systems administrator Basic tests PartFrac <pre>1/m</pre> <pre>1/n</pre> <pre>n</pre> 0 ATPartFrac_diff_variables. The variables in your answer are different to those of the question, please check them. PartFrac <pre>2/(x+1)-1/(x+2)</pre> <pre>s/((s+1)*(s+2))</pre> <pre>s</pre> 0 ATPartFrac_diff_variables. The variables in your answer are different to those of the question, please check them. PartFrac <pre>1/n</pre> <pre>1/n</pre> <pre>n</pre> 1 ATPartFrac_true. PartFrac <pre>n^3/(n-1)</pre> <pre>n^3/(n-1)</pre> <pre>n</pre> 0 ATPartFrac_false_factor. PartFrac <pre>1+n+n^2+1/(n-1)</pre> <pre>n^3/(n-1)</pre> <pre>n</pre> 1 ATPartFrac_true. PartFrac <pre>1+n+n^2-1/(1-n)</pre> <pre>n^3/(n-1)</pre> <pre>n</pre> 1 ATPartFrac_true. Distinct linear factors in denominator PartFrac <pre>1/(n+1)-1/n</pre> <pre>1/(n+1)-1/n</pre> <pre>n</pre> 1 ATPartFrac_true. PartFrac <pre>1/(n+1)+1/(1-n)</pre> <pre>1/(n+1)-1/(n-1)</pre> <pre>n</pre> 1 ATPartFrac_true. PartFrac <pre>1/(2*(n-1))-1/(2*(n+1))</pre> <pre>1/((n-1)*(n+1))</pre> <pre>n</pre> 1 ATPartFrac_true. PartFrac <pre>1/(2*(n+1))-1/(2*(n-1))</pre> <pre>1/((n-1)*(n+1))</pre> <pre>n</pre> 0 ATPartFrac_ret_expression. Your answer as a single fraction is \\(-\\frac{1}{\\left(n-1\\right)\\cdot \\left(n+1\\right)}\\) PartFrac <pre>-9/(x-2) + -9/(x+1)</pre> <pre>-9/(x-2) + -9/(x+1)</pre> <pre>x</pre> 1 ATPartFrac_true. Addition and Subtraction errors PartFrac <pre>1/(x+1) + 1/(x+2)</pre> <pre>2/(x+1) + 1/(x+2)</pre> <pre>x</pre> 0 ATPartFrac_ret_expression. Your answer as a single fraction is \\(\\frac{2\\cdot x+3}{\\left(x+1\\right)\\cdot \\left(x+2\\right)}\\) PartFrac <pre>1/(x+1) + 1/(x+2)</pre> <pre>1/(x+1) + 2/(x+2)</pre> <pre>x</pre> 0 ATPartFrac_ret_expression. Your answer as a single fraction is \\(\\frac{2\\cdot x+3}{\\left(x+1\\right)\\cdot \\left(x+2\\right)}\\) Denominator Error PartFrac <pre>1/(x+1) + 1/(x+2)</pre> <pre>1/(x+3) + 1/(x+2)</pre> <pre>x</pre> 0 ATPartFrac_ret_expression. Your answer as a single fraction is \\(\\frac{2\\cdot x+3}{\\left(x+1\\right)\\cdot \\left(x+2\\right)}\\) Repeated linear factors in denominator PartFrac <pre>(9*y-8)/(y-4)^2</pre> <pre>(9*y-8)/(y-4)^2</pre> <pre>y</pre> 0 ATPartFrac_false_factor. PartFrac <pre>9/(y-4)+28/(y-4)^2</pre> <pre>(9*y-8)/(y-4)^2</pre> <pre>y</pre> 1 ATPartFrac_true. PartFrac <pre>(-5/(x+3))+(16/(x+3)^2)-(2/(x+\n2))+4</pre> <pre>(-5/(x+3))+(16/(x+3)^2)-(2/(x+\n2))+4</pre> <pre>x</pre> 1 ATPartFrac_true. PartFrac <pre>(3*x^2-5)/((x-4)^2*x)</pre> <pre>(3*x^2-5)/((x-4)^2*x)</pre> <pre>x</pre> 0 ATPartFrac_false_factor. PartFrac <pre>-4/(16*x)+53/(16*(x-4))+43/(4*\n(x-4)^2)</pre> <pre>(3*x^2-5)/((x-4)^2*x)</pre> <pre>x</pre> 0 ATPartFrac_ret_expression. Your answer as a single fraction is \\(\\frac{49\\cdot x^2-8\\cdot x-64}{16\\cdot {\\left(x-4\\right)}^2\\cdot x}\\) PartFrac <pre>-5/(16*x)+53/(16*(x-4))+43/(4*\n(x-4)^2)</pre> <pre>(3*x^2-5)/((x-4)^2*x)</pre> <pre>x</pre> 1 ATPartFrac_true. PartFrac <pre>(5*x+6)/((x+1)*(x+5)^2)</pre> <pre>(5*x+6)/((x+1)*(x+5)^2)</pre> <pre>x</pre> 0 ATPartFrac_false_factor. PartFrac <pre>-1/(16*(x+5))+19/(4*(x+5)^2)+1\n/(16*(x+1))</pre> <pre>(5*x+6)/((x+1)*(x+5)^2)</pre> <pre>x</pre> 1 ATPartFrac_true. PartFrac <pre>5/(x*(x+3)*(5*x-2))</pre> <pre>5/(x*(x+3)*(5*x-2))</pre> <pre>x</pre> 0 ATPartFrac_false_factor. PartFrac <pre>125/(34*(5*x-2))+5/(51*(x+3))-\n5/(6*x)</pre> <pre>5/(x*(x+3)*(5*x-2))</pre> <pre>x</pre> 1 ATPartFrac_true. PartFrac <pre>-4/(16*x)+1/(2*(x-1))-1/(8*(x-\n1)^2)</pre> <pre>(3*x^2-5)/((4*x-4)^2*x)</pre> <pre>x</pre> 0 ATPartFrac_ret_expression. Your answer as a single fraction is \\(\\frac{2\\cdot x^2-x-2}{8\\cdot {\\left(x-1\\right)}^2\\cdot x}\\) PartFrac <pre>-5/(16*x)+1/(2*(x-1))-1/(8*(x-\n1)^2)</pre> <pre>(3*x^2-5)/((4*x-4)^2*x)</pre> <pre>x</pre> 1 ATPartFrac_true. Irreducible quadratic in denominator PartFrac <pre>1/(x-1)-(x+1)/(x^2+1)</pre> <pre>2/((x-1)*(x^2+1))</pre> <pre>x</pre> 1 ATPartFrac_true. PartFrac <pre>1/(2*x-2)-(x+1)/(2*(x^2+1))</pre> <pre>1/((x-1)*(x^2+1))</pre> <pre>x</pre> 1 ATPartFrac_true. PartFrac <pre>1/(2*(x-1))+x/(2*(x^2+1))</pre> <pre>1/((x-1)*(x^2+1))</pre> <pre>x</pre> 0 ATPartFrac_ret_expression. Your answer as a single fraction is \\(\\frac{2\\cdot x^2-x+1}{2\\cdot \\left(x-1\\right)\\cdot \\left(x^2+1 \\right)}\\) PartFrac <pre>(2*x+1)/(x^2+1)-2/(x-1)</pre> <pre>(2*x+1)/(x^2+1)-2/(x-1)</pre> <pre>x</pre> 1 ATPartFrac_true. 2 answers to the same question PartFrac <pre>3/(x+1) + 3/(x+2)</pre> <pre>3*(2*x+3)/((x+1)*(x+2))</pre> <pre>x</pre> 1 ATPartFrac_true. PartFrac <pre>3*(1/(x+1) + 1/(x+2))</pre> <pre>3*(2*x+3)/((x+1)*(x+2))</pre> <pre>x</pre> 1 ATPartFrac_true. Algebraically equivalent, but numerators of same order than denominator, i.e. not in partial fraction form. PartFrac <pre>3*x*(1/(x+1) + 2/(x+2))</pre> <pre>-12/(x+2)-3/(x+1)+9</pre> <pre>x</pre> 0 ATPartFrac_false_factor. PartFrac <pre>(3*x+3)*(1/(x+1) + 2/(x+2))</pre> <pre>9-6/(x+2)</pre> <pre>x</pre> 0 ATPartFrac_false_factor. PartFrac <pre>n/(2*n-1)-(n+1)/(2*n+1)</pre> <pre>1/(4*n-2)-1/(4*n+2)</pre> <pre>n</pre> 0 ATPartFrac_false_factor. Correct Answer, Numerator &gt; Denominator PartFrac <pre>10/(x+3) - 2/(x+2) + x -2</pre> <pre>(x^3 + 3*x^2 + 4*x +2)/((x+2)*\n(x+3))</pre> <pre>x</pre> 1 ATPartFrac_true. PartFrac <pre>2*x+1/(x+1)+1/(x-1)</pre> <pre>2*x^3/(x^2-1)</pre> <pre>x</pre> 1 ATPartFrac_true. Simple mistakes PartFrac <pre>1/(n*(n-1))</pre> <pre>1/(n*(n-1))</pre> <pre>n</pre> 0 ATPartFrac_false_factor. PartFrac <pre>((1-x)^4*x^4)/(x^2+1)</pre> <pre>((1-x)^4*x^4)/(x^2+1)</pre> <pre>x</pre> 0 ATPartFrac_false_factor. PartFrac <pre>1/(n-1)-1/n^2</pre> <pre>1/((n+1)*n)</pre> <pre>n</pre> 0 ATPartFrac_denom_ret. If your answer is written as a single fraction then the denominator would be \\(\\left(n-1\\right)\\cdot n^2\\). In fact, it should be \\(n\\cdot \\left(n+1\\right)\\). PartFrac <pre>1/(n-1)-1/n</pre> <pre>1/(n-1)+1/n</pre> <pre>n</pre> 0 ATPartFrac_ret_expression. Your answer as a single fraction is \\(\\frac{1}{\\left(n-1\\right)\\cdot n}\\) PartFrac <pre>1/(x+1)-1/x</pre> <pre>1/(x-1)+1/x</pre> <pre>x</pre> 0 ATPartFrac_ret_expression. Your answer as a single fraction is \\(-\\frac{1}{x\\cdot \\left(x+1\\right)}\\) PartFrac <pre>1/(n*(n+1))+1/n</pre> <pre>2/n-1/(n+1)</pre> <pre>n</pre> 0 ATPartFrac_false_factor. Too many parts in the partial fraction PartFrac <pre>s/((s+1)^2) + s/(s+2) - 1/(s+1\n)</pre> <pre>s/((s+1)*(s+2))</pre> <pre>s</pre> 0 ATPartFrac_denom_ret. If your answer is written as a single fraction then the denominator would be \\({\\left(s+1\\right)}^2\\cdot \\left(s+2\\right)\\). In fact, it should be \\(\\left(s+1\\right)\\cdot \\left(s+2\\right)\\). Too few parts in the partial fraction PartFrac <pre>s/(s+2) - 1/(s+1)</pre> <pre>s/((s+1)*(s+2)*(s+3))</pre> <pre>s</pre> 0 ATPartFrac_denom_ret. If your answer is written as a single fraction then the denominator would be \\(\\left(s+1\\right)\\cdot \\left(s+2\\right)\\). In fact, it should be \\(\\left(s+1\\right)\\cdot \\left(s+2\\right)\\cdot \\left(s+3\\right)\\). PartFrac <pre>(3*x^2-5)/((4*x-4)^2*x)</pre> <pre>(3*x^2-5)/((4*x-4)^2*x)</pre> <pre>x</pre> 0 ATPartFrac_false_factor."},{"location":"en/Authoring/Answer_Tests/Results/PropLogic/","title":"PropLogic: Answer test results","text":"<p>This page exposes the results of running answer tests on STACK test cases.  This page is automatically generated from the STACK unit tests and is designed to show question authors what answer tests actually do.  This includes cases where answer tests currentl fail, which gives a negative expected mark.  Comments and further test cases are very welcome.</p> PropLogic Test?Student responseTeacher answerOptMarkAnswer note PropLogic <pre>1/0</pre> <pre>0</pre> -1 ATPropLogic_STACKERROR_SAns. TEST_FAILED The answer test failed to execute correctly: please alert your teacher. Division by zero. PropLogic <pre>0</pre> <pre>1/0</pre> -1 ATPropLogic_STACKERROR_TAns. TEST_FAILED The answer test failed to execute correctly: please alert your teacher. Division by zero. PropLogic <pre>true</pre> <pre>true</pre> 1 PropLogic <pre>true</pre> <pre>false</pre> 0 PropLogic <pre>not(A) and not(B)</pre> <pre>not(A or B)</pre> 1 PropLogic <pre>not(A) and not(B)</pre> <pre>not(A and B)</pre> 0 PropLogic <pre>not(A) or B</pre> <pre>boolean_form(A implies B)</pre> 1 PropLogic <pre>not(A) or B</pre> <pre>A implies B</pre> 1 PropLogic <pre>not(A) and B</pre> <pre>A implies B</pre> 0 PropLogic <pre>(not A and B) or (not B and A)</pre> <pre>A xor B</pre> 1 PropLogic <pre>(A and B) or (not A and not B)</pre> <pre>A xnor B</pre> 1 PropLogic <pre>((not A) and (not B)) or ((not\n A) and B)</pre> <pre>not A</pre> 1 PropLogic <pre>(A xor B) nounand (A xnor B)</pre> <pre>false</pre> 1 PropLogic <pre>(a and b and c) xor (a and b) \nxor (a and c) xor a xor true</pre> <pre>(a implies b) or c</pre> 1"},{"location":"en/Authoring/Answer_Tests/Results/SRegExp/","title":"SRegExp: Answer test results","text":"<p>This page exposes the results of running answer tests on STACK test cases.  This page is automatically generated from the STACK unit tests and is designed to show question authors what answer tests actually do.  This includes cases where answer tests currentl fail, which gives a negative expected mark.  Comments and further test cases are very welcome.</p> SRegExp Test?Student responseTeacher answerOptMarkAnswer note SRegExp <pre>1/0</pre> <pre>\"hello\"</pre> -1 ATSRegExp_STACKERROR_SAns. TEST_FAILED The answer test failed to execute correctly: please alert your teacher. Division by zero. SRegExp <pre>\"1/0\"</pre> <pre>1/0</pre> -1 ATSRegExp_STACKERROR_TAns. TEST_FAILED The answer test failed to execute correctly: please alert your teacher. Division by zero. SRegExp <pre>Hello</pre> <pre>hello</pre> -1 ATSRegExp_SB_not_string. The second argument to the SRegExp answer test must be a string. The test failed. Please contact your teacher. SRegExp <pre>Hello</pre> <pre>\"hello\"</pre> -1 ATSRegExp_SA_not_string. The first argument to the SRegExp answer test must be a string. The test failed. Please contact your teacher. SRegExp <pre>\"aaaaabbb\"</pre> <pre>\"(aaa)*b\"</pre> 1 ATSRegExp: [\"aaab\",\"aaa\"]. SRegExp <pre>\"aab\"</pre> <pre>\"(aaa)*b\"</pre> 1 ATSRegExp: [\"b\",false]. SRegExp <pre>\"aaac\"</pre> <pre>\"(aaa)*b\"</pre> 0 Anchor pattern to the start and the end of the string SRegExp <pre>\"aab\"</pre> <pre>\"^[aA]*b$\"</pre> 1 ATSRegExp: [\"aab\"]. SRegExp <pre>\"aab\"</pre> <pre>\"^(aaa)*b$\"</pre> 0 SRegExp <pre>\"aAb\"</pre> <pre>\"^[aA]*b$\"</pre> 1 ATSRegExp: [\"aAb\"]. SRegExp <pre>\" aAb\"</pre> <pre>\"^[aA]*b$\"</pre> 0 Case insensitive SRegExp <pre>\"caAb\"</pre> <pre>\"(?i:a*b)\"</pre> 1 ATSRegExp: [\"aAb\"]. Options SRegExp <pre>\"Alice went to the market\n\"</pre> <pre>\"(Alice|Bob) went to the \n(bank|market)\"</pre> 1 ATSRegExp: [\"Alice went to the market\",\"Alice\",\"market\"]. SRegExp <pre>\"Malice went to the shop&amp;\nquot;</pre> <pre>\"(Alice|Bob) went to the \n(bank|market)\"</pre> 0 Whitespace, note test rendering issue, the test string has additional spaces and tabs as does the result SRegExp <pre>\"Alice   went  to      th\ne market\"</pre> <pre>\"(Alice|Bob)\\\\s+went\\\\s+t\no\\\\s+the\\\\s+(bank|market)\"\n;</pre> 1 ATSRegExp: [\"Alice   went  to      the market\",\"Alice\",\"market\"]. SRegExp <pre>\"Alice   went  to      th\nemarket\"</pre> <pre>\"(Alice|Bob)\\\\s+went\\\\s+t\no\\\\s+the\\\\s+(bank|market)\"\n;</pre> 0 Escaping patterns, note the function that does it SRegExp <pre>\"x^2.2\"</pre> <pre>\"x\\\\^2\\\\.2\"</pre> 1 ATSRegExp: [\"x^2.2\"]. SRegExp <pre>\"x^2+sin(x)\"</pre> <pre>sconcat(string_to_regex(\"\nsin(x)\"),\"$\")</pre> 1 ATSRegExp: [\"sin(x)\"]. SRegExp <pre>\"sin(x)+x^2\"</pre> <pre>sconcat(string_to_regex(\"\nsin(x)\"),\"$\")</pre> 0"},{"location":"en/Authoring/Answer_Tests/Results/SameType/","title":"SameType: Answer test results","text":"<p>This page exposes the results of running answer tests on STACK test cases.  This page is automatically generated from the STACK unit tests and is designed to show question authors what answer tests actually do.  This includes cases where answer tests currentl fail, which gives a negative expected mark.  Comments and further test cases are very welcome.</p> SameType Test?Student responseTeacher answerOptMarkAnswer note SameType <pre>1/0</pre> <pre>1</pre> -1 ATSameType_STACKERROR_SAns. TEST_FAILED The answer test failed to execute correctly: please alert your teacher. Division by zero. SameType <pre>1</pre> <pre>1/0</pre> -1 ATSameType_STACKERROR_TAns. TEST_FAILED The answer test failed to execute correctly: please alert your teacher. Division by zero. Numbers SameType <pre>4^(-1/2)</pre> <pre>1/2</pre> 1 Lists SameType <pre>x</pre> <pre>[1,2,3]</pre> 0 SameType <pre>[1,2]</pre> <pre>[1,2,3]</pre> 1 SameType <pre>[1,x&gt;2]</pre> <pre>[1,2&lt;x]</pre> 1 SameType <pre>[1,x,3]</pre> <pre>[1,2&lt;x,4]</pre> 0 Sets SameType <pre>x</pre> <pre>{1,2,3}</pre> 0 SameType <pre>{1,2}</pre> <pre>{1,2,3}</pre> 1 Matrices SameType <pre>matrix([1,2],[2,3])</pre> <pre>matrix([1,2],[2,3])</pre> 1 SameType <pre>[[1,2],[2,3]]</pre> <pre>matrix([1,2],[2,3])</pre> 0 SameType <pre>matrix([1,2],[2,3])</pre> <pre>matrix([1,2,3],[2,3,3])</pre> 1 SameType <pre>matrix([x&gt;4,{1,x^2}],[[1,2]\n,[1,3]])</pre> <pre>matrix([4-x&lt;0,{x^2, 1}],[[1\n,2],[1,3]])</pre> 1 SameType <pre>matrix([x&gt;4,[1,x^2]],[[1,2]\n,[1,3]])</pre> <pre>matrix([4-x&lt;0,{x^2, 1}],[[1\n,2],[1,4]])</pre> 0 Equations SameType <pre>1</pre> <pre>x=1</pre> 0 SameType <pre>x=1</pre> <pre>x=1</pre> 1 Inequalities SameType <pre>1</pre> <pre>x&gt;1</pre> 0 SameType <pre>x&gt;2</pre> <pre>x&gt;1</pre> 1 SameType <pre>x&gt;1</pre> <pre>x&gt;=1</pre> 1 SameType <pre>x&gt;1 and x&lt;3</pre> <pre>x&gt;=1</pre> 1 SameType <pre>{x&gt;1,x&lt;3}</pre> <pre>x&gt;=1</pre> 0 SameType <pre>sqrt(2)*sqrt(3)+2*(sqrt(2/3))*\nx-(2/3)*(sqrt(2/3))*x^2+(4/9)*\n(sqrt(2/3))*x^3</pre> <pre>4*sqrt(6)*x^3/27-(2*sqrt(6)*x^\n2)/9+(2*sqrt(6)*x)/3+sqrt(6)</pre> 1"},{"location":"en/Authoring/Answer_Tests/Results/Sets/","title":"Sets: Answer test results","text":"<p>This page exposes the results of running answer tests on STACK test cases.  This page is automatically generated from the STACK unit tests and is designed to show question authors what answer tests actually do.  This includes cases where answer tests currentl fail, which gives a negative expected mark.  Comments and further test cases are very welcome.</p> Sets Test?Student responseTeacher answerOptMarkAnswer note Sets <pre>{1/0}</pre> <pre>{0}</pre> -1 ATSets_STACKERROR_SAns. TEST_FAILED The answer test failed to execute correctly: please alert your teacher. Division by zero. Sets <pre>{0}</pre> <pre>{1/0}</pre> -1 ATSets_STACKERROR_TAns. TEST_FAILED The answer test failed to execute correctly: please alert your teacher. Division by zero. Sets <pre>x</pre> <pre>{1,2,3}</pre> 0 ATSets_SA_not_set. Your answer should be a set, but is not. Note that the syntax to enter a set is to enclose the comma separated values with curly brackets. Sets <pre>{1,2}</pre> <pre>x</pre> 0 ATSets_SB_not_set. The \"Sets\" answer test expects its second argument to be a set. This is an error. Please contact your teacher. Sets <pre>{1,2}</pre> <pre>{1,2,3}</pre> 0 ATSets_missingentries. The following are missing from your set. \\[\\left \\{3 \\right \\}\\] Sets <pre>{1,2,4}</pre> <pre>{1,2}</pre> 0 ATSets_wrongentries. These entries should not be elements of your set. \\[\\left \\{4 \\right \\}\\] Sets <pre>{1,2,2+2}</pre> <pre>{1,2}</pre> 0 ATSets_wrongentries. These entries should not be elements of your set. \\[\\left \\{4 \\right \\}\\] Sets <pre>{5,1,2,4}</pre> <pre>{1,2,3}</pre> 0 ATSets_wrongentries. ATSets_missingentries. These entries should not be elements of your set. \\[\\left \\{4 , 5 \\right \\}\\] The following are missing from your set. \\[\\left \\{3 \\right \\}\\] Sets <pre>{2/4, 1/3}</pre> <pre>{1/2, 1/3}</pre> 1 Duplicate entries Sets <pre>{1,2,1}</pre> <pre>{1,2}</pre> 1 ATSets_duplicates. Your set appears to contain duplicate entries! Sets <pre>{1,2,1+1}</pre> <pre>{1,2}</pre> 1 ATSets_duplicates. Your set appears to contain duplicate entries! Sets <pre>{1,2,1+1}</pre> <pre>{1,2,3}</pre> 0 ATSets_duplicates. ATSets_missingentries. Your set appears to contain duplicate entries! The following are missing from your set. \\[\\left \\{3 \\right \\}\\] Sets <pre>{(x-a)^6000}</pre> <pre>{(a-x)^6000}</pre> 0 ATSets_wrongentries. ATSets_missingentries. These entries should not be elements of your set. \\[\\left \\{{\\left(x-a\\right)}^{6000} \\right \\}\\] The following are missing from your set. \\[\\left \\{{\\left(a-x\\right)}^{6000} \\right \\}\\]"},{"location":"en/Authoring/Answer_Tests/Results/SigFigsStrict/","title":"SigFigsStrict: Answer test results","text":"<p>This page exposes the results of running answer tests on STACK test cases.  This page is automatically generated from the STACK unit tests and is designed to show question authors what answer tests actually do.  This includes cases where answer tests currentl fail, which gives a negative expected mark.  Comments and further test cases are very welcome.</p> SigFigsStrict Test?Student responseTeacher answerOptMarkAnswer note Basic tests SigFigsStrict <pre>3.141</pre> <pre>null</pre> -1 STACKERROR_OPTION. TEST_FAILED The answer test failed to execute correctly: please alert your teacher. Missing option when executing the test.  SigFigsStrict <pre>3.141</pre> <pre>null</pre> <pre>x^2</pre> -1 STACKERROR_OPTION. SigFigsStrict <pre>3.141</pre> <pre>null</pre> <pre>-2</pre> -1 STACKERROR_OPTION. SigFigsStrict <pre>3.141</pre> <pre>null</pre> <pre>0</pre> -1 STACKERROR_OPTION. SigFigsStrict <pre>0.0010</pre> <pre>null</pre> <pre>1</pre> 0 SigFigsStrict <pre>0.0010</pre> <pre>null</pre> <pre>2</pre> 1 SigFigsStrict <pre>0.0010</pre> <pre>null</pre> <pre>3</pre> 0 SigFigsStrict <pre>0.00100</pre> <pre>null</pre> <pre>2</pre> 0 SigFigsStrict <pre>0.00100</pre> <pre>null</pre> <pre>3</pre> 1 SigFigsStrict <pre>0.00100</pre> <pre>null</pre> <pre>4</pre> 0 SigFigsStrict <pre>0.001</pre> <pre>null</pre> <pre>1</pre> 1 SigFigsStrict <pre>0.001</pre> <pre>null</pre> <pre>2</pre> 0 SigFigsStrict <pre>100</pre> <pre>null</pre> <pre>1</pre> 1 SigFigsStrict <pre>100</pre> <pre>null</pre> <pre>2</pre> 0 ATSigFigsStrict_WithinRange. SigFigsStrict <pre>100</pre> <pre>null</pre> <pre>3</pre> 0 ATSigFigsStrict_WithinRange. SigFigsStrict <pre>100</pre> <pre>null</pre> <pre>4</pre> 0 SigFigsStrict <pre>100.</pre> <pre>null</pre> <pre>1</pre> 0 SigFigsStrict <pre>100.</pre> <pre>null</pre> <pre>2</pre> 0 SigFigsStrict <pre>100.</pre> <pre>null</pre> <pre>3</pre> 1 SigFigsStrict <pre>100.</pre> <pre>null</pre> <pre>4</pre> 0 SigFigsStrict <pre>123.</pre> <pre>null</pre> <pre>1</pre> 0 SigFigsStrict <pre>123.</pre> <pre>null</pre> <pre>2</pre> 0 SigFigsStrict <pre>123.</pre> <pre>null</pre> <pre>3</pre> 1 SigFigsStrict <pre>123.</pre> <pre>null</pre> <pre>4</pre> 0 SigFigsStrict <pre>1.00e2</pre> <pre>null</pre> <pre>1</pre> 0 SigFigsStrict <pre>1.00e2</pre> <pre>null</pre> <pre>2</pre> 0 SigFigsStrict <pre>1.00e2</pre> <pre>null</pre> <pre>3</pre> 1 SigFigsStrict <pre>1.00e2</pre> <pre>null</pre> <pre>4</pre> 0 SigFigsStrict <pre>10.0</pre> <pre>null</pre> <pre>2</pre> 0 SigFigsStrict <pre>10.0</pre> <pre>null</pre> <pre>3</pre> 1 SigFigsStrict <pre>10.0</pre> <pre>null</pre> <pre>4</pre> 0 SigFigsStrict <pre>0</pre> <pre>null</pre> <pre>1</pre> 1 SigFigsStrict <pre>0</pre> <pre>null</pre> <pre>2</pre> 0 SigFigsStrict <pre>0.0</pre> <pre>null</pre> <pre>1</pre> 1 SigFigsStrict <pre>0.0</pre> <pre>null</pre> <pre>2</pre> 0 SigFigsStrict <pre>.0</pre> <pre>null</pre> <pre>1</pre> 1 SigFigsStrict <pre>.0</pre> <pre>null</pre> <pre>2</pre> 0 SigFigsStrict <pre>.001030</pre> <pre>null</pre> <pre>4</pre> 1 SigFigsStrict <pre>0.00</pre> <pre>null</pre> <pre>1</pre> 0 SigFigsStrict <pre>0.00</pre> <pre>null</pre> <pre>2</pre> 1 SigFigsStrict <pre>0.00</pre> <pre>null</pre> <pre>3</pre> 0 SigFigsStrict <pre>25.00e1</pre> <pre>null</pre> <pre>1</pre> 0 SigFigsStrict <pre>25.00e1</pre> <pre>null</pre> <pre>3</pre> 0 SigFigsStrict <pre>25.00e1</pre> <pre>null</pre> <pre>4</pre> 1 SigFigsStrict <pre>25.00e1</pre> <pre>null</pre> <pre>5</pre> 0 SigFigsStrict <pre>15.1</pre> <pre>15.1</pre> <pre>3</pre> 1 SigFigsStrict <pre>15.10</pre> <pre>15.1</pre> <pre>3</pre> 0 SigFigsStrict <pre>15.100</pre> <pre>15.1</pre> <pre>3</pre> 0 Units are ignored SigFigsStrict <pre>9.81*m/s^2</pre> <pre>null</pre> <pre>3</pre> 1"},{"location":"en/Authoring/Answer_Tests/Results/SingleFrac/","title":"SingleFrac: Answer test results","text":"<p>This page exposes the results of running answer tests on STACK test cases.  This page is automatically generated from the STACK unit tests and is designed to show question authors what answer tests actually do.  This includes cases where answer tests currentl fail, which gives a negative expected mark.  Comments and further test cases are very welcome.</p> SingleFrac Test?Student responseTeacher answerOptMarkAnswer note SingleFrac <pre>1/0</pre> <pre>1/n</pre> -1 ATSingleFrac_STACKERROR_SAns. SingleFrac <pre>0</pre> <pre>1/0</pre> -1 ATSingleFrac_STACKERROR_TAns. SingleFrac <pre>x=3</pre> <pre>2</pre> 0 ATSingleFrac_SA_not_expression. Your answer should be an expression, not an equation, inequality, list, set or matrix. SingleFrac <pre>3</pre> <pre>3</pre> 1 SingleFrac <pre>3</pre> <pre>2</pre> 0 ATSingleFrac_ret_exp. Your answer is not algebraically equivalent to the correct answer. You must have done something wrong. SingleFrac <pre>1/m</pre> <pre>1/n</pre> 0 ATSingleFrac_true. ATSingleFrac_ret_exp.  Your answer is not algebraically equivalent to the correct answer. You must have done something wrong. SingleFrac <pre>1/n</pre> <pre>1/n</pre> 1 ATSingleFrac_true. SingleFrac <pre>a+1/2</pre> <pre>(2*a+1)/2</pre> 0 ATSingleFrac_part. Your answer needs to be a single fraction of the form \\( {a}\\over{b} \\). SingleFrac <pre>a+1/2</pre> <pre>(2*a+1)/2</pre> 0 ATSingleFrac_part. Your answer needs to be a single fraction of the form \\( {a}\\over{b} \\). SingleFrac <pre>4/(x^2+2*x-24)+2/(x^2+4*x-12)</pre> <pre>(6*x-16)/(x^3-28*x+48)</pre> 0 ATSingleFrac_part. Your answer needs to be a single fraction of the form \\( {a}\\over{b} \\). 2 subtly different answers for the same question SingleFrac <pre>2*(1/n)</pre> <pre>2/n</pre> 0 ATSingleFrac_part. Your answer needs to be a single fraction of the form \\( {a}\\over{b} \\). SingleFrac <pre>2/n</pre> <pre>2/n</pre> 1 ATSingleFrac_true. Simple Mistakes SingleFrac <pre>2/(n+1)</pre> <pre>1/(n+1)</pre> 0 ATSingleFrac_true. ATSingleFrac_ret_exp.  Your answer is not algebraically equivalent to the correct answer. You must have done something wrong. SingleFrac <pre>(2*n+1)/(n+2)</pre> <pre>1/n</pre> 0 ATSingleFrac_true. ATSingleFrac_ret_exp.  Your answer is not algebraically equivalent to the correct answer. You must have done something wrong. SingleFrac <pre>(2*n)/(n*(n+2))</pre> <pre>(2*n)/(n*(n+3))</pre> 0 ATSingleFrac_true. ATSingleFrac_ret_exp.  Your answer is not algebraically equivalent to the correct answer. You must have done something wrong. SingleFrac <pre>(x-1)/(x^2-1)</pre> <pre>1/(x+1)</pre> 1 ATSingleFrac_true. Fractions within fractions SingleFrac <pre>(1/2)/(3/4)</pre> <pre>2/3</pre> 0 ATSingleFrac_div. Your answer contains fractions within fractions. You need to clear these and write your answer as a single fraction. SingleFrac <pre>(x-2)/4/(2/x^2)</pre> <pre>(x-2)*x^2/8</pre> 0 ATSingleFrac_div. Your answer contains fractions within fractions. You need to clear these and write your answer as a single fraction. SingleFrac <pre>1/(1-1/x)</pre> <pre>x/(x-1)</pre> 0 ATSingleFrac_div. Your answer contains fractions within fractions. You need to clear these and write your answer as a single fraction. SingleFrac <pre>(1+1/a)/a</pre> <pre>(1+a)/a^2</pre> 0 ATSingleFrac_div. Your answer contains fractions within fractions. You need to clear these and write your answer as a single fraction. SingleFrac <pre>a/(1+1/a)</pre> <pre>a^2/(1+a)</pre> 0 ATSingleFrac_div. Your answer contains fractions within fractions. You need to clear these and write your answer as a single fraction. SingleFrac <pre>(1+2*b/a)/c</pre> <pre>(a+2*b)/(a*c)</pre> 0 ATSingleFrac_div. Your answer contains fractions within fractions. You need to clear these and write your answer as a single fraction. SingleFrac <pre>c/(1+2*b/a)</pre> <pre>a*c/(a+2*b)</pre> 0 ATSingleFrac_div. Your answer contains fractions within fractions. You need to clear these and write your answer as a single fraction. SingleFrac <pre>a*c/(a+2*b)</pre> <pre>a*c/(a+2*b)</pre> 1 ATSingleFrac_true. Negative cases SingleFrac <pre>-1/2</pre> <pre>-1/2</pre> 1 ATSingleFrac_true. SingleFrac <pre>-1/2</pre> <pre>-1/3</pre> 0 ATSingleFrac_true. ATSingleFrac_ret_exp.  Your answer is not algebraically equivalent to the correct answer. You must have done something wrong. SingleFrac <pre>-(1/2)</pre> <pre>-1/2</pre> 1 ATSingleFrac_true. SingleFrac <pre>-a/b</pre> <pre>-a/b</pre> 1 ATSingleFrac_true. SingleFrac <pre>(-a)/b</pre> <pre>-a/b</pre> 1 ATSingleFrac_true. SingleFrac <pre>a/(-b)</pre> <pre>-a/b</pre> 1 ATSingleFrac_true. SingleFrac <pre>-(a/b)</pre> <pre>-a/b</pre> 1 ATSingleFrac_true. SingleFrac <pre>-(1/(n-1))</pre> <pre>1/(1-n)</pre> 1 ATSingleFrac_true. SingleFrac <pre>a/(-1-1/a)</pre> <pre>-a^2/(1+a)</pre> 0 ATSingleFrac_div. Your answer contains fractions within fractions. You need to clear these and write your answer as a single fraction. Surds in answers SingleFrac <pre>((sqrt(5))^3 +6)/15</pre> <pre>((sqrt(5))^3 +6)/15</pre> 1 ATSingleFrac_true. SingleFrac <pre>1/(1-sqrt(2))</pre> <pre>1/(1-sqrt(2))</pre> 1 ATSingleFrac_true. SingleFrac <pre>((sqrt(5))^3+6)/15</pre> <pre>((sqrt(5))^3+6)/15</pre> 1 ATSingleFrac_true. SingleFrac <pre>(5^(3/2)+6)/15</pre> <pre>((sqrt(5))^3+6)/15</pre> 1 ATSingleFrac_true."},{"location":"en/Authoring/Answer_Tests/Results/String/","title":"String: Answer test results","text":"<p>This page exposes the results of running answer tests on STACK test cases.  This page is automatically generated from the STACK unit tests and is designed to show question authors what answer tests actually do.  This includes cases where answer tests currentl fail, which gives a negative expected mark.  Comments and further test cases are very welcome.</p> String Test?Student responseTeacher answerOptMarkAnswer note String <pre>\"Hello\"</pre> <pre>\"hello\"</pre> 0 String <pre>\"hello\"</pre> <pre>\"hello\"</pre> 1 String <pre>\"hello\"</pre> <pre>\"heloo\"</pre> 0 String <pre>\"With spaces\"</pre> <pre>\"With spaces\"</pre> 1 String <pre>\"Without spaces\"</pre> <pre>\"Withoutspaces\"</pre> 0 Whitespace not trimmed off inside strings String <pre>\" Hello \"</pre> <pre>\"Hello\"</pre> 0 Whitespace is trimmed off around atoms String <pre> Hello </pre> <pre>Hello</pre> 1 This test works on expressions as well as strings String <pre>sin(x^2)</pre> <pre>\"sin(x^2)\"</pre> 1 String <pre>pi^2/6</pre> <pre>\"pi^2/6\"</pre> 1 String <pre>pi^2/6</pre> <pre>\"%pi^2/6\"</pre> 0"},{"location":"en/Authoring/Answer_Tests/Results/StringSloppy/","title":"StringSloppy: Answer test results","text":"<p>This page exposes the results of running answer tests on STACK test cases.  This page is automatically generated from the STACK unit tests and is designed to show question authors what answer tests actually do.  This includes cases where answer tests currentl fail, which gives a negative expected mark.  Comments and further test cases are very welcome.</p> StringSloppy Test?Student responseTeacher answerOptMarkAnswer note StringSloppy <pre>\"hello\"</pre> <pre>\"hello\"</pre> 1 StringSloppy <pre>\"hello\"</pre> <pre>\"heloo\"</pre> 0 StringSloppy <pre>\"hel lo\"</pre> <pre>\"hello\"</pre> 1 StringSloppy <pre>\"hel lo\"</pre> <pre>\"Hel*lo\"</pre> 0 StringSloppy <pre>\" hel   lo    \"</pre> <pre>\"hello\"</pre> 1"},{"location":"en/Authoring/Answer_Tests/Results/SubstEquiv/","title":"SubstEquiv: Answer test results","text":"<p>This page exposes the results of running answer tests on STACK test cases.  This page is automatically generated from the STACK unit tests and is designed to show question authors what answer tests actually do.  This includes cases where answer tests currentl fail, which gives a negative expected mark.  Comments and further test cases are very welcome.</p> SubstEquiv Test?Student responseTeacher answerOptMarkAnswer note SubstEquiv <pre>1/0</pre> <pre>x^2-2*x+1</pre> -1 ATSubstEquiv_STACKERROR_SAns. TEST_FAILED The answer test failed to execute correctly: please alert your teacher. Division by zero. SubstEquiv <pre>x^2</pre> <pre>x^2-2*x+1</pre> <pre>[1/0]</pre> -1 ATSubstEquiv_STACKERROR_Opt. TEST_FAILED The answer test failed to execute correctly: please alert your teacher. Division by zero. SubstEquiv <pre>x^2</pre> <pre>x^2-2*x+1</pre> <pre>x</pre> -1 ATSubstEquiv_Opt_List. The option to this answer test must be a list. This is an error. Please contact your teacher. SubstEquiv <pre>x^2+1</pre> <pre>x^2+1</pre> 1 SubstEquiv <pre>x^2+1</pre> <pre>x^3+1</pre> 0 SubstEquiv <pre>x^2+1</pre> <pre>x^3+1</pre> 0 SubstEquiv <pre>X^2+1</pre> <pre>x^2+1</pre> 1 ATSubstEquiv_Subst [X = x]. Your answer would be correct if you used the following substitution of variables. \\[\\left[ X=x \\right] \\] SubstEquiv <pre>x^2+y</pre> <pre>a^2+b</pre> 1 ATSubstEquiv_Subst [x = a,y = b]. Your answer would be correct if you used the following substitution of variables. \\[\\left[ x=a , y=b \\right] \\] SubstEquiv <pre>x^2+y/z</pre> <pre>a^2+c/b</pre> 1 ATSubstEquiv_Subst [x = a,y = c,z = b]. Your answer would be correct if you used the following substitution of variables. \\[\\left[ x=a , y=c , z=b \\right] \\] SubstEquiv <pre>y=x^2</pre> <pre>a^2=b</pre> 1 ATSubstEquiv_Subst [x = a,y = b]. Your answer would be correct if you used the following substitution of variables. \\[\\left[ x=a , y=b \\right] \\] SubstEquiv <pre>{x=1,y=2}</pre> <pre>{x=2,y=1}</pre> 1 ATSubstEquiv_Subst [x = y,y = x]. Your answer would be correct if you used the following substitution of variables. \\[\\left[ x=y , y=x \\right] \\] Where a variable is also a function name. SubstEquiv <pre>cos(a*x)/(x*(ln(x)))</pre> <pre>cos(a*y)/(y*(ln(y)))</pre> 1 ATSubstEquiv_Subst [a = a,x = y]. Your answer would be correct if you used the following substitution of variables. \\[\\left[ a=a , x=y \\right] \\] SubstEquiv <pre>cos(a*x)/(x*(ln(x)))</pre> <pre>cos(x*a)/(a*(ln(a)))</pre> 1 ATSubstEquiv_Subst [a = x,x = a]. Your answer would be correct if you used the following substitution of variables. \\[\\left[ a=x , x=a \\right] \\] SubstEquiv <pre>cos(a*x)/(x*(ln(x)))</pre> <pre>cos(a*x)/(x(ln(x)))</pre> 0 SubstEquiv <pre>cos(a*x)/(x*(ln(x)))</pre> <pre>cos(a*y)/(y(ln(y)))</pre> 0 SubstEquiv <pre>x+1&gt;y</pre> <pre>y+1&gt;x</pre> 1 ATSubstEquiv_Subst [x = y,y = x]. Your answer would be correct if you used the following substitution of variables. \\[\\left[ x=y , y=x \\right] \\] SubstEquiv <pre>x+1&gt;y</pre> <pre>x&lt;y+1</pre> 1 ATSubstEquiv_Subst [x = y,y = x]. Your answer would be correct if you used the following substitution of variables. \\[\\left[ x=y , y=x \\right] \\] Matrices SubstEquiv <pre>matrix([1,A^2+A+1],[2,0])</pre> <pre>matrix([1,x^2+x+1],[2,0])</pre> 1 ATSubstEquiv_Subst [A = x]. Your answer would be correct if you used the following substitution of variables. \\[\\left[ A=x \\right] \\] SubstEquiv <pre>matrix([B,A^2+A+1],[2,C])</pre> <pre>matrix([y,x^2+x+1],[2,z])</pre> 1 ATSubstEquiv_Subst [A = x,B = y,C = z]. Your answer would be correct if you used the following substitution of variables. \\[\\left[ A=x , B=y , C=z \\right] \\] SubstEquiv <pre>matrix([B,A^2+A+1],[2,C])</pre> <pre>matrix([y,x^2+x+1],[2,x])</pre> 0 ATMatrix_wrongentries. The entries underlined in red below are those that are incorrect. \\[ \\left[\\begin{array}{cc} {\\color{red}{\\underline{B}}} &amp; {\\color{red}{\\underline{A^2+A+1}}} \\\\ 2 &amp; {\\color{red}{\\underline{C}}} \\end{array}\\right]\\] Lists SubstEquiv <pre>[x^2+1,x^2]</pre> <pre>[A^2+1,A^2]</pre> 1 ATSubstEquiv_Subst [x = A]. Your answer would be correct if you used the following substitution of variables. \\[\\left[ x=A \\right] \\] SubstEquiv <pre>[x^2-1,x^2]</pre> <pre>[A^2+1,A^2]</pre> 0 (ATList_wrongentries 1, 2). The entries underlined in red below are those that are incorrect. \\[\\left[ {\\color{red}{\\underline{x^2-1}}} , {\\color{red}{\\underline{x ^2}}} \\right] \\] SubstEquiv <pre>[A,B,C]</pre> <pre>[B,C,A]</pre> 1 ATSubstEquiv_Subst [A = B,B = C,C = A]. Your answer would be correct if you used the following substitution of variables. \\[\\left[ A=B , B=C , C=A \\right] \\] SubstEquiv <pre>[A,B,C]</pre> <pre>[B,B,A]</pre> 0 (ATList_wrongentries 1, 3). The entries underlined in red below are those that are incorrect. \\[\\left[ {\\color{red}{\\underline{A}}} , B , {\\color{red}{\\underline{C }}} \\right] \\] SubstEquiv <pre>[1,[A,B],C]</pre> <pre>[1,[a,b],C]</pre> 1 ATSubstEquiv_Subst [A = a,B = b,C = C]. Your answer would be correct if you used the following substitution of variables. \\[\\left[ A=a , B=b , C=C \\right] \\] Sets SubstEquiv <pre>{x^2+1,x^2}</pre> <pre>{A^2+1,A^2}</pre> 1 ATSubstEquiv_Subst [x = A]. Your answer would be correct if you used the following substitution of variables. \\[\\left[ x=A \\right] \\] SubstEquiv <pre>{x^2-1,x^2}</pre> <pre>{A^2+1,A^2}</pre> 0 ATSet_wrongentries. The following entries are incorrect, although they may appear in a simplified form from that which you actually entered. \\[\\left \\{x^2-1 , x^2 \\right \\}\\] SubstEquiv <pre>{A+1,B^2,C}</pre> <pre>{B,C+1,A^2}</pre> 1 ATSubstEquiv_Subst [A = C,B = A,C = B]. Your answer would be correct if you used the following substitution of variables. \\[\\left[ A=C , B=A , C=B \\right] \\] SubstEquiv <pre>{1,{A,B},C}</pre> <pre>{1,{a,b},C}</pre> 1 ATSubstEquiv_Subst [A = a,B = b,C = C]. Your answer would be correct if you used the following substitution of variables. \\[\\left[ A=a , B=b , C=C \\right] \\] SubstEquiv <pre>y=A+B</pre> <pre>x=a+b</pre> <pre>[x]</pre> 0 ATEquation_default SubstEquiv <pre>y=A+B</pre> <pre>x=a+b</pre> <pre>[z]</pre> 1 ATSubstEquiv_Subst [A = a,B = b,y = x]. Your answer would be correct if you used the following substitution of variables. \\[\\left[ A=a , B=b , y=x \\right] \\] SubstEquiv <pre>A*cos(t)+B*sin(t)</pre> <pre>P*cos(t)+Q*sin(t)</pre> 1 ATSubstEquiv_Subst [A = P,B = Q,t = t]. Your answer would be correct if you used the following substitution of variables. \\[\\left[ A=P , B=Q , t=t \\right] \\] SubstEquiv <pre>A*cos(t)+B*sin(t)</pre> <pre>P*cos(x)+Q*sin(x)</pre> 1 ATSubstEquiv_Subst [A = P,B = Q,t = x]. Your answer would be correct if you used the following substitution of variables. \\[\\left[ A=P , B=Q , t=x \\right] \\] Fix some variables. SubstEquiv <pre>A*cos(x)+B*sin(x)</pre> <pre>P*cos(x)+Q*sin(x)</pre> <pre>[x]</pre> 1 ATSubstEquiv_Subst [A = P,B = Q]. Your answer would be correct if you used the following substitution of variables. \\[\\left[ A=P , B=Q \\right] \\] SubstEquiv <pre>A*cos(t)+B*sin(t)</pre> <pre>P*cos(x)+Q*sin(x)</pre> <pre>[x]</pre> 0 SubstEquiv <pre>A*cos(t)+B*sin(t)</pre> <pre>P*cos(x)+Q*sin(x)</pre> <pre>[t]</pre> 0 SubstEquiv <pre>A*cos(t)+B*sin(t)</pre> <pre>P*cos(x)+Q*sin(x)</pre> <pre>[z]</pre> 1 ATSubstEquiv_Subst [A = P,B = Q,t = x]. Your answer would be correct if you used the following substitution of variables. \\[\\left[ A=P , B=Q , t=x \\right] \\] SubstEquiv <pre>A*cos(t)*e^x+B*sin(t)*e^x+C*si\nn(2*x)+D*cos(2*x)</pre> <pre>P*cos(t)*e^x+Q*sin(t)*e^x+R*si\nn(2*x)+S*cos(2*x)</pre> <pre>[x,t]</pre> 1 ATSubstEquiv_Subst [A = P,B = Q,C = R,D = S]. Your answer would be correct if you used the following substitution of variables. \\[\\left[ A=P , B=Q , C=R , D=S \\right] \\] SubstEquiv <pre>sqrt(2*g*y)</pre> <pre>sqrt(2*g*x)</pre> 1 ATSubstEquiv_Subst [g = g,y = x]. Your answer would be correct if you used the following substitution of variables. \\[\\left[ g=g , y=x \\right] \\] SubstEquiv <pre>sqrt(2*g*y)</pre> <pre>sqrt(2*g*x)</pre> <pre>[g]</pre> 1 ATSubstEquiv_Subst [y = x]. Your answer would be correct if you used the following substitution of variables. \\[\\left[ y=x \\right] \\] SubstEquiv <pre>C1*%e^x*sin(4*x)+C2*%e^x*cos(4\n*x)+C4*x*%e^-x+C3*%e^-x</pre> <pre>e^(x)*A*cos(4*x)+B*e^(x)*sin(4\n*x)+C*e^(-x)+D*x*e^(-x)</pre> <pre>[x]</pre> 1 ATSubstEquiv_Subst [C1 = B,C2 = A,C3 = C,C4 = D]. Your answer would be correct if you used the following substitution of variables. \\[\\left[ C_{1}=B , C_{2}=A , C_{3}=C , C_{4}=D \\right] \\] SubstEquiv <pre>C1*%e^x*sin(4*x)+C2*%e^x*cos(4\n*x)+C4*x*%e^-x+C3*%e^-x</pre> <pre>C4*x*e^(-x)+e^(x)*C1*cos(4*x)+\nC2*e^(x)*sin(4*x)+C3*e^(-x)</pre> <pre>[x]</pre> 1 ATSubstEquiv_Subst [C1 = C2,C2 = C1,C3 = C3,C4 = C4]. Your answer would be correct if you used the following substitution of variables. \\[\\left[ C_{1}=C_{2} , C_{2}=C_{1} , C_{3}=C_{3} , C_{4}=C_{4} \\right] \\] SubstEquiv <pre>C1*%e^x*sin(4*x)+C2*%e^x*cos(4\n*x)+C4*x*%e^-x+C3*%e^-x</pre> <pre>A*x*e^(-x)+e^(x)*B*cos(4*x)+C*\ne^(x)*sin(4*x)+D*e^(-x)</pre> <pre>[x]</pre> 1 ATSubstEquiv_Subst [C1 = C,C2 = B,C3 = D,C4 = A]. Your answer would be correct if you used the following substitution of variables. \\[\\left[ C_{1}=C , C_{2}=B , C_{3}=D , C_{4}=A \\right] \\] SubstEquiv <pre>C1*%e^x*sin(4*x)+C2*%e^x*cos(4\n*x)+C4*x*%e^-x+C3*%e^-x</pre> <pre>e^(x)*C1*cos(4*x)+C2*e^(x)*sin\n(4*x)+C3*e^(-x)+C4*x*e^(-x)</pre> <pre>[x]</pre> 1 ATSubstEquiv_Subst [C1 = C2,C2 = C1,C3 = C3,C4 = C4]. Your answer would be correct if you used the following substitution of variables. \\[\\left[ C_{1}=C_{2} , C_{2}=C_{1} , C_{3}=C_{3} , C_{4}=C_{4} \\right] \\]"},{"location":"en/Authoring/Answer_Tests/Results/SysEquiv/","title":"SysEquiv: Answer test results","text":"<p>This page exposes the results of running answer tests on STACK test cases.  This page is automatically generated from the STACK unit tests and is designed to show question authors what answer tests actually do.  This includes cases where answer tests currentl fail, which gives a negative expected mark.  Comments and further test cases are very welcome.</p> SysEquiv Test?Student responseTeacher answerOptMarkAnswer note Basic tests SysEquiv <pre>1/0</pre> <pre>[(x-1)*(x+1)=0]</pre> -1 ATSysEquiv_STACKERROR_SAns. TEST_FAILED The answer test failed to execute correctly: please alert your teacher. Division by zero. SysEquiv <pre>[(x-1)*(x+1)=0]</pre> <pre>1/0</pre> -1 ATSysEquiv_STACKERROR_TAns. TEST_FAILED The answer test failed to execute correctly: please alert your teacher. Division by zero. SysEquiv <pre>1</pre> <pre>[(x-1)*(x+1)=0]</pre> 0 ATSysEquiv_SA_not_list. Your answer should be a list, but it is not! SysEquiv <pre>[(x-1)*(x+1)=0]</pre> <pre>1</pre> 0 ATSysEquiv_SB_not_list. The teacher's answer is not a list. Please contact your teacher. SysEquiv <pre>[1]</pre> <pre>[90=v*t,90=(v+5)*(t-1/4)]</pre> 0 ATSysEquiv_SA_not_eq_list. Your answer should be a list of equations, but it is not! SysEquiv <pre>[(x-1)*(x+1)=0]</pre> <pre>[1]</pre> 0 ATSysEquiv_SB_not_eq_list. The teacher's answer is not a list of equations, but should be. SysEquiv <pre>[x^2]</pre> <pre>[(x-1)*(x+1)=0]</pre> 0 ATSysEquiv_SA_not_eq_list. Your answer should be a list of equations, but it is not! SysEquiv <pre>[90=v*t^t,90=(v+5)*(t-1/4)]</pre> <pre>[90=v*t,90=(v+5)*(t-1/4)]</pre> 0 ATSysEquiv_SA_not_poly_eq_list. One or more of your equations is not a polynomial! SysEquiv <pre>[90=v*t,90=(v+5)*(t-1/4)]</pre> <pre>[90=v*t^t,90=(v+5)*(t-1/4)]</pre> 0 ATSysEquiv_SB_not_poly_eq_list. The Teacher's answer should be a list of polynomial equations, but is not. Please contact your teacher. Tests of equivalence SysEquiv <pre>[x^2=1]</pre> <pre>[(x-1)*(x+1)=0]</pre> 1 SysEquiv <pre>[x^2+y^2=4,y=x]</pre> <pre>[y=x,y^2=2]</pre> 1 SysEquiv <pre>[x^2+y^2=2,y=x]</pre> <pre>[y=x,y^2=2]</pre> 0 ATSysEquiv_SA_system_overdetermined. The entries underlined in red below are those that are incorrect. \\[\\left[ {\\color{red}{\\underline{y^2+x^2=2}}} , y=x \\right] \\] SysEquiv <pre>[x=1]</pre> <pre>[(x-1)*(x+1)=0,(x-1)*(x-3)=0]</pre> 1 ATSysEquiv_SA_Completely_solved. SysEquiv <pre>[3*a+b-c=2, a-b+2*c=5,b+c=5]</pre> <pre>[a=1,b=2,c=3]</pre> 1 SysEquiv <pre>[a=1,b=2,c=3]</pre> <pre>[3*a+b-c=2, a-b+2*c=5,b+c=5]</pre> 1 ATSysEquiv_SA_Completely_solved. SysEquiv <pre>[x^2=1]</pre> <pre>[(x-1)*(x+1)*(x-2)=0]</pre> 0 ATSysEquiv_SA_system_overdetermined. The entries underlined in red below are those that are incorrect. \\[\\left[ {\\color{red}{\\underline{x^2=1}}} \\right] \\] SysEquiv <pre>[x=1,y=-1]</pre> <pre>[(x-1)*(y+1)=0]</pre> 0 ATSysEquiv_SA_Not_completely_solved. SysEquiv <pre>[x=1]</pre> <pre>[(x-1)*(x+1)=0]</pre> 0 ATSysEquiv_SA_Not_completely_solved. SysEquiv <pre>[x=1]</pre> <pre>[(x-1)*(x+1)*y=0]</pre> 0 ATSysEquiv_SA_Not_completely_solved. SysEquiv <pre>[90=v*t,90=(v+5)*(t-1/4)]</pre> <pre>[90=v*t,90=(v+5)*(t-1/4)]</pre> 1 SysEquiv <pre>[90=v*t,90=(v+5)*(t*x-1/4)]</pre> <pre>[90=v*t,90=(v+5)*(t-1/4)]</pre> 0 ATSysEquiv_SA_extra_variables. Your answer includes too many variables! SysEquiv <pre>[90=v*t,90=(v+5)*(t-1/4)]</pre> <pre>[90=v*t,90=(v+5)*(t*x-1/4)]</pre> 0 ATSysEquiv_SA_missing_variables. Your answer is missing one or more variables! SysEquiv <pre>[90=v*t]</pre> <pre>[90=v*t,90=(v+5)*(t-1/4)]</pre> 0 ATSysEquiv_SA_system_underdetermined. The equations in your system appear to be correct, but you need others besides. SysEquiv <pre>[90=v*t,90=(v+5)*(t-1/4),90=(v\n+6)*(t-1/5)]</pre> <pre>[90=v*t,90=(v+5)*(t-1/4)]</pre> 0 ATSysEquiv_SA_system_overdetermined. The entries underlined in red below are those that are incorrect. \\[\\left[ 90=t\\cdot v , 90=\\left(t-\\frac{1}{4}\\right)\\cdot \\left(v+5 \\right) , {\\color{red}{\\underline{90=\\left(t-\\frac{1}{5}\\right) \\cdot \\left(v+6\\right)}}} \\right] \\] SysEquiv <pre>[90=v*t,90=(v+5)*(t-1/4),90=(v\n+6)*(t-1/5),90=(v+7)*(t-1/4),9\n0=(v+8)*(t-1/3)]</pre> <pre>[90=v*t,90=(v+5)*(t-1/4)]</pre> 0 ATSysEquiv_SA_system_overdetermined. The entries underlined in red below are those that are incorrect. \\[\\left[ 90=t\\cdot v , 90=\\left(t-\\frac{1}{4}\\right)\\cdot \\left(v+5 \\right) , {\\color{red}{\\underline{90=\\left(t-\\frac{1}{5}\\right) \\cdot \\left(v+6\\right)}}} , {\\color{red}{\\underline{90=\\left(t- \\frac{1}{4}\\right)\\cdot \\left(v+7\\right)}}} , {\\color{red} {\\underline{90=\\left(t-\\frac{1}{3}\\right)\\cdot \\left(v+8\\right)}}} \\right] \\] Wrong variables SysEquiv <pre>[b^2=a,a=9]</pre> <pre>[x^2=y,y=9]</pre> 0 ATSysEquiv_SA_wrong_variables. Your answer uses the wrong variables! SysEquiv <pre>[x^2=4]</pre> <pre>[x^2=4,y=9]</pre> 0 ATSysEquiv_SA_missing_variables. Your answer is missing one or more variables! SysEquiv <pre>[d=90,d=v*t,d=(v+5)*(t-1/4)]</pre> <pre>[90=v*t,90=(v+5)*(t-1/4)]</pre> 0 ATSysEquiv_SA_extra_variables. Your answer includes too many variables! SysEquiv <pre>stack_eval_assignments([d=90,d\n=v*t,d=(v+5)*(t-1/4)])</pre> <pre>[90=v*t,90=(v+5)*(t-1/4)]</pre> 1"},{"location":"en/Authoring/Answer_Tests/Results/Units/","title":"Units: Answer test results","text":"<p>This page exposes the results of running answer tests on STACK test cases.  This page is automatically generated from the STACK unit tests and is designed to show question authors what answer tests actually do.  This includes cases where answer tests currentl fail, which gives a negative expected mark.  Comments and further test cases are very welcome.</p> Units Test?Student responseTeacher answerOptMarkAnswer note Units <pre>1/0</pre> <pre>1</pre> <pre>2</pre> -1 ATUnits_STACKERROR_SAns. TEST_FAILED The answer test failed to execute correctly: please alert your teacher. Division by zero. Units <pre>1</pre> <pre>1/0</pre> <pre>2</pre> -1 ATUnits_STACKERROR_TAns. TEST_FAILED The answer test failed to execute correctly: please alert your teacher. Division by zero. Units <pre>1</pre> <pre>1</pre> <pre>1/0</pre> -1 ATUnits_STACKERROR_Opt. TEST_FAILED The answer test failed to execute correctly: please alert your teacher. Division by zero. Units <pre>x-1)^2</pre> <pre>(x-1)^2</pre> <pre>2</pre> -1 ATUnitsTEST_FAILED-Empty SA. The answer test failed to execute correctly: please alert your teacher. Attempted to execute an answer test with an empty student answer, probably a CAS validation problem when authoring the question. Units <pre>12.3*m*s^(-1)</pre> <pre>3*m</pre> <pre>[3,x]</pre> -1 ATNumSigFigs_STACKERROR_not_integer. The answer test failed to execute correctly: please alert your teacher. Units <pre>3*m*s^(-1)</pre> <pre>3*m</pre> <pre>[1,2,3]</pre> -1 ATNumSigFigs_STACKERROR_list_wrong_length. The answer test failed to execute correctly: please alert your teacher. Units <pre>12.3*m*s^(-1)</pre> <pre>{12.3*m*s^(-1)}</pre> <pre>3</pre> -1 ATUnits_TA_not_expression. The answer test failed to execute correctly: please alert your teacher. Units <pre>x=12.3*m*s^(-1)</pre> <pre>12.3*m*s^(-1)</pre> <pre>3</pre> 0 ATUnits_SA_not_expression. Your answer needs to be a number together with units. Do not use sets, lists, equations or matrices. Missing units Units <pre>12.3</pre> <pre>12.3*m</pre> <pre>3</pre> 0 ATUnits_SA_no_units. Your answer must have units. Units <pre>12</pre> <pre>12.3*m</pre> <pre>3</pre> 0 ATUnits_SA_no_units. Your answer must have units. Units <pre>1/2</pre> <pre>12.3*m</pre> <pre>3</pre> 0 ATUnits_SA_no_units. Your answer must have units. Units <pre>e^(1/2)</pre> <pre>12.3*m</pre> <pre>3</pre> 0 ATUnits_SA_no_units. Your answer must have units. Units <pre>9.81*m</pre> <pre>12.3</pre> <pre>3</pre> -1 ATUnits_SB_no_units. The answer test failed to execute correctly: please alert your teacher. Only units Units <pre>m/s</pre> <pre>12.3*m/s</pre> <pre>3</pre> 0 ATUnits_SA_only_units. Your answer needs to be a number together with units. Your answer only has units. Units <pre>m</pre> <pre>12.3*m/s</pre> <pre>3</pre> 0 ATUnits_SA_only_units. Your answer needs to be a number together with units. Your answer only has units. Bad units Units <pre>9.81+m/s</pre> <pre>9.81*m/s</pre> <pre>3</pre> 0 ATUnits_SA_bad_units. Your answer must have units, and you must use multiplication to attach the units to a value, e.g. <code>3.2*m/s</code>. Basic tests Units <pre>12.3*m/s</pre> <pre>12.3*m/s</pre> <pre>3</pre> 1 ATUnits_units_match. Units <pre>12.4*m/s</pre> <pre>12.3*m/s</pre> <pre>3</pre> 0 ATNumSigFigs_Inaccurate. ATUnits_units_match. The accuracy of your answer is not correct. Either you have not rounded correctly, or you have rounded an intermediate answer which propagates an error. Units <pre>12.4*m/s</pre> <pre>12.3*m/s</pre> <pre>[3,2]</pre> 1 ATUnits_units_match. Units <pre>12.45*m/s</pre> <pre>12.3*m/s</pre> <pre>[3,2]</pre> 0 ATNumSigFigs_WrongDigits. ATUnits_units_match. Your answer contains the wrong number of significant digits. Units <pre>13.45*m/s</pre> <pre>12.3*m/s</pre> <pre>[3,2]</pre> 0 ATNumSigFigs_WrongDigits. ATNumSigFigs_Inaccurate. ATUnits_units_match. Your answer contains the wrong number of significant digits. The accuracy of your answer is not correct. Either you have not rounded correctly, or you have rounded an intermediate answer which propagates an error. Units <pre>7.54E-5*(s*M)^-1</pre> <pre>5.625E-5*s^-1</pre> <pre>[3,2]</pre> 0 ATNumSigFigs_VeryInaccurate. ATUnits_incompatible_units. Your units are incompatible with those used by the teacher. Units <pre>7.54E-5*(s*M)^-1</pre> <pre>stackunits(5.625E-5,1/s)</pre> <pre>[3,2]</pre> 0 ATNumSigFigs_VeryInaccurate. ATUnits_incompatible_units. Your units are incompatible with those used by the teacher. Units <pre>12*m/s</pre> <pre>12.3*m/s</pre> <pre>3</pre> 0 ATNumSigFigs_WrongDigits. ATNumSigFigs_Inaccurate. ATUnits_units_match. Your answer contains the wrong number of significant digits. The accuracy of your answer is not correct. Either you have not rounded correctly, or you have rounded an intermediate answer which propagates an error. Units <pre>-9.81*m/s^2</pre> <pre>-9.81*m/s^2</pre> <pre>3</pre> 1 ATUnits_units_match. Units <pre>-9.82*m/s^2</pre> <pre>-9.815*m/s^2</pre> <pre>3</pre> 1 ATUnits_units_match. Units <pre>-9.81*m/s^2</pre> <pre>-9.815*m/s^2</pre> <pre>3</pre> 0 ATNumSigFigs_Inaccurate. ATUnits_units_match. The accuracy of your answer is not correct. Either you have not rounded correctly, or you have rounded an intermediate answer which propagates an error. Units <pre>-9.81*m*s^(-2)</pre> <pre>-9.81*m/s^2</pre> <pre>3</pre> 1 ATUnits_units_match. Units <pre>-9.82*m/s^2</pre> <pre>-9.81*m/s^2</pre> <pre>3</pre> 0 ATNumSigFigs_Inaccurate. ATUnits_units_match. The accuracy of your answer is not correct. Either you have not rounded correctly, or you have rounded an intermediate answer which propagates an error. Units <pre>-9.81*m*s^(-2)</pre> <pre>-9.81*m/s^2</pre> <pre>3</pre> 1 ATUnits_units_match. Units <pre>-9.81*m/s/s</pre> <pre>-9.81*m/s^2</pre> <pre>3</pre> 1 ATUnits_units_match. Units <pre>-9.81*m/s</pre> <pre>-9.81*m/s^2</pre> <pre>3</pre> 0 ATUnits_incompatible_units. ATUnits_correct_numerical. Your units are incompatible with those used by the teacher. Please check your units carefully. Units <pre>-9.81*m/s</pre> <pre>-9.81*m/s^2</pre> <pre>3</pre> 0 ATUnits_incompatible_units. ATUnits_correct_numerical. Your units are incompatible with those used by the teacher. Please check your units carefully. Units <pre>(-9.81)*m/s^2</pre> <pre>-9.81*m/s^2</pre> <pre>3</pre> 1 ATUnits_units_match. Units <pre>520*amu</pre> <pre>520*amu</pre> <pre>3</pre> 1 ATNumSigFigs_WithinRange. ATUnits_units_match. Units <pre>520*amu</pre> <pre>521*amu</pre> <pre>3</pre> 0 ATNumSigFigs_WithinRange. ATNumSigFigs_Inaccurate. ATUnits_units_match. The accuracy of your answer is not correct. Either you have not rounded correctly, or you have rounded an intermediate answer which propagates an error. Missing units Units <pre>(-9.81)</pre> <pre>-9.81*m/s^2</pre> <pre>3</pre> 0 ATUnits_SA_no_units. Your answer must have units. Units <pre>9.81*m/s</pre> <pre>-9.81*m/s^2</pre> <pre>3</pre> 0 ATNumSigFigs_WrongSign. ATUnits_incompatible_units. Your answer has the wrong algebraic sign. Your units are incompatible with those used by the teacher. Units <pre>8.81*m/s</pre> <pre>-9.81*m/s^2</pre> <pre>3</pre> 0 ATNumSigFigs_WrongSign. ATNumSigFigs_VeryInaccurate. ATUnits_incompatible_units. Your answer has the wrong algebraic sign. Your units are incompatible with those used by the teacher. Units <pre>8.1*m/s</pre> <pre>-9.81*m/s^2</pre> <pre>3</pre> 0 ATNumSigFigs_WrongDigits. ATNumSigFigs_WrongSign. ATNumSigFigs_VeryInaccurate. ATUnits_incompatible_units. Your answer contains the wrong number of significant digits. Your answer has the wrong algebraic sign. Your units are incompatible with those used by the teacher. Units <pre>m/4</pre> <pre>0.25*m</pre> <pre>3</pre> 0 ATNumSigFigs_WrongDigits. ATUnits_units_match. Your answer contains the wrong number of significant digits. Student is too exact Units <pre>pi*s</pre> <pre>3.14*s</pre> <pre>3</pre> 0 ATNumSigFigs_WrongDigits. ATUnits_units_match. Your answer contains the wrong number of significant digits. Units <pre>sqrt(2)*m</pre> <pre>1.41*m</pre> <pre>3</pre> 0 ATNumSigFigs_WrongDigits. ATUnits_units_match. Your answer contains the wrong number of significant digits. Different units Units <pre>25*g</pre> <pre>0.025*kg</pre> <pre>2</pre> 1 ATUnits_compatible_units kg. Units <pre>26*g</pre> <pre>0.025*kg</pre> <pre>2</pre> 0 ATNumSigFigs_Inaccurate. ATUnits_compatible_units kg. The accuracy of your answer is not correct. Either you have not rounded correctly, or you have rounded an intermediate answer which propagates an error. Units <pre>100*g</pre> <pre>10*kg</pre> <pre>2</pre> 0 ATNumSigFigs_WithinRange. ATNumSigFigs_VeryInaccurate. ATUnits_compatible_units kg. Units <pre>0.025*g</pre> <pre>0.025*kg</pre> <pre>2</pre> 0 ATUnits_compatible_units kg. ATUnits_correct_numerical. Please check your units carefully. Units <pre>1000*m</pre> <pre>1*km</pre> <pre>2</pre> 1 ATNumSigFigs_WithinRange. ATUnits_compatible_units m. Units <pre>1*Mg/10^6</pre> <pre>1*N*s^2/(km)</pre> <pre>1</pre> 1 ATUnits_compatible_units kg. Units <pre>1*Mg/10^6</pre> <pre>1*kN*ns/(mm*Hz)</pre> <pre>1</pre> 1 ATUnits_compatible_units kg. Units <pre>3.14*Mg/10^6</pre> <pre>%pi*kN*ns/(mm*Hz)</pre> <pre>3</pre> 1 ATUnits_compatible_units kg. Units <pre>3.141*Mg/10^6</pre> <pre>%pi*kN*ns/(mm*Hz)</pre> <pre>3</pre> 0 ATNumSigFigs_WrongDigits. ATUnits_compatible_units kg. Your answer contains the wrong number of significant digits. Units <pre>4.141*Mg/10^6</pre> <pre>%pi*kN*ns/(mm*Hz)</pre> <pre>3</pre> 0 ATNumSigFigs_WrongDigits. ATNumSigFigs_VeryInaccurate. ATUnits_compatible_units kg. Your answer contains the wrong number of significant digits. Units <pre>400*cc</pre> <pre>0.4*l</pre> <pre>2</pre> 1 ATNumSigFigs_WithinRange. ATUnits_compatible_units m^3. Units <pre>400*cm^3</pre> <pre>0.4*l</pre> <pre>2</pre> 1 ATNumSigFigs_WithinRange. ATUnits_compatible_units m^3. Units <pre>400*ml</pre> <pre>0.4*l</pre> <pre>2</pre> 1 ATNumSigFigs_WithinRange. ATUnits_compatible_units m^3. Units <pre>18*kJ</pre> <pre>18000.0*J</pre> <pre>2</pre> 1 ATUnits_compatible_units (kg*m^2)/s^2. Units <pre>18.1*kJ</pre> <pre>18000.0*J</pre> <pre>2</pre> 0 ATNumSigFigs_WrongDigits. ATUnits_compatible_units (kg*m^2)/s^2. Your answer contains the wrong number of significant digits. Units <pre>120*kWh</pre> <pre>0.12*MWh</pre> <pre>2</pre> 1 ATUnits_compatible_units (kg*m^2)/s^2. Units <pre>2.0*hh</pre> <pre>720000*s</pre> <pre>2</pre> 1 ATUnits_compatible_units s. Units <pre>723*kVA</pre> <pre>0.723*MVA</pre> <pre>3</pre> 1 ATUnits_compatible_units VA. Edge case Units <pre>0*m/s</pre> <pre>0*m/s</pre> <pre>1</pre> 1 ATUnits_units_match. Units <pre>0.0*m/s</pre> <pre>0*m/s</pre> <pre>1</pre> 1 ATUnits_units_match. Units <pre>0*m/s</pre> <pre>0.0*m/s</pre> <pre>1</pre> 1 ATUnits_units_match. Units <pre>0.00*m/s</pre> <pre>0.0*m/s</pre> <pre>2</pre> 1 ATUnits_units_match. Units <pre>0.0*km/s</pre> <pre>0.0*m/s</pre> <pre>1</pre> 1 ATUnits_compatible_units m/s. Units <pre>0.0*m</pre> <pre>0.0*m/s</pre> <pre>1</pre> 0 ATUnits_incompatible_units. ATUnits_correct_numerical. Your units are incompatible with those used by the teacher. Please check your units carefully. Units <pre>0.0</pre> <pre>0.0*m/s</pre> <pre>1</pre> 0 ATUnits_SA_no_units. Your answer must have units. Units <pre>0.200*dpt</pre> <pre>0.200/m</pre> <pre>3</pre> 1 ATUnits_compatible_units 1/m. Imperial Units <pre>7*in</pre> <pre>7*in</pre> <pre>1</pre> 1 ATUnits_units_match. Units <pre>6*in</pre> <pre>0.5*ft</pre> <pre>1</pre> 1 ATUnits_compatible_units in. Units <pre>2640*ft</pre> <pre>0.5*mi</pre> <pre>4</pre> 1 ATNumSigFigs_WithinRange. ATUnits_compatible_units in. Units <pre>2650*ft</pre> <pre>0.5*mi</pre> <pre>4</pre> 0 ATNumSigFigs_WithinRange. ATNumSigFigs_VeryInaccurate. ATUnits_compatible_units in. TO-DO Units ! <pre>142.8*C</pre> <pre>415.9*K</pre> <pre>4</pre> -3 ATNumSigFigs_VeryInaccurate. ATUnits_incompatible_units. Your units are incompatible with those used by the teacher. Units ! <pre>520*mamu</pre> <pre>520*mamu</pre> <pre>3</pre> -3 ATUnits_SB_no_units. The answer test failed to execute correctly: please alert your teacher. Units <pre>-9.82*m/s^2</pre> <pre>stackunits(-9.815,m/s^2)</pre> <pre>3</pre> 1 ATUnits_units_match. Units <pre>-9.81*m/s^2</pre> <pre>stackunits(-9.815,m/s^2)</pre> <pre>3</pre> 0 ATNumSigFigs_Inaccurate. ATUnits_units_match. The accuracy of your answer is not correct. Either you have not rounded correctly, or you have rounded an intermediate answer which propagates an error. Units <pre>-9.82*m/s^2</pre> <pre>stackunits(displaydp(-9.815,3)\n,m/s^2)</pre> <pre>3</pre> 1 ATUnits_units_match. Units <pre>-9.82*m/s^2</pre> <pre>stackunits(displaysf(-9.815,4)\n,m/s^2)</pre> <pre>3</pre> 1 ATUnits_units_match."},{"location":"en/Authoring/Answer_Tests/Results/UnitsAbsolute/","title":"UnitsAbsolute: Answer test results","text":"<p>This page exposes the results of running answer tests on STACK test cases.  This page is automatically generated from the STACK unit tests and is designed to show question authors what answer tests actually do.  This includes cases where answer tests currentl fail, which gives a negative expected mark.  Comments and further test cases are very welcome.</p> UnitsAbsolute Test?Student responseTeacher answerOptMarkAnswer note UnitsAbsolute <pre>-123000*J</pre> <pre>-123*kJ</pre> <pre>5*J</pre> 0 ATUnits_SO_wrong_units. The units specified for the numerical tolerance must match the units used for the teacher's answer. This is an internal error with the test. Please ask your teacher about this. UnitsAbsolute <pre>12.3*m/s</pre> <pre>12.3*m/s</pre> <pre>0.01</pre> 1 ATUnits_units_match. UnitsAbsolute <pre>12*m/s</pre> <pre>12.3*m/s</pre> <pre>0.01</pre> 0 ATUnits_units_match. UnitsAbsolute <pre>1.1*Mg/10^6</pre> <pre>1.2*kN*ns/(mm*Hz)</pre> <pre>0.15</pre> 1 ATUnits_compatible_units kg. The following illustrates that we convert to base units to compare. UnitsAbsolute <pre>1.1*Mg/10^6</pre> <pre>1.2*kN*ns/(mm*Hz)</pre> <pre>0.1</pre> 1 ATUnits_compatible_units kg. UnitsAbsolute <pre>1.1*Mg/10^6</pre> <pre>1.2*kN*ns/(mm*Hz)</pre> <pre>0.09</pre> 0 ATUnits_compatible_units kg. Units in the options UnitsAbsolute <pre>-123000*J</pre> <pre>-123*kJ</pre> <pre>5*kJ</pre> 1 ATUnits_compatible_units (kg*m^2)/s^2. UnitsAbsolute <pre>-123006*J</pre> <pre>-123*kJ</pre> <pre>5*kJ</pre> 1 ATUnits_compatible_units (kg*m^2)/s^2. UnitsAbsolute <pre>-123006*J</pre> <pre>stackunits(-123,kJ)</pre> <pre>5*kJ</pre> 1 ATUnits_compatible_units (kg*m^2)/s^2. UnitsAbsolute <pre>-129006*J</pre> <pre>-123*kJ</pre> <pre>5*kJ</pre> 0 ATUnits_compatible_units (kg*m^2)/s^2. UnitsAbsolute <pre>1.1*Mg/10^6</pre> <pre>1.2*kN*ns/(mm*Hz)</pre> <pre>0.1*kN*ns/(mm*H\nz)</pre> 1 ATUnits_compatible_units kg. UnitsAbsolute <pre>1.1*Mg/10^6</pre> <pre>1.2*kN*ns/(mm*Hz)</pre> <pre>0.09*kN*ns/(mm*\nHz)</pre> 0 ATUnits_compatible_units kg. Edge case UnitsAbsolute <pre>0*m/s</pre> <pre>0*m/s</pre> <pre>0.01</pre> 1 ATUnits_units_match. UnitsAbsolute <pre>0.0*m/s</pre> <pre>0*m/s</pre> <pre>0.01</pre> 1 ATUnits_units_match. UnitsAbsolute <pre>0*m/s</pre> <pre>0.0*m/s</pre> <pre>0.01</pre> 1 ATUnits_units_match. UnitsAbsolute <pre>0.0*m/s</pre> <pre>0.0*m/s</pre> <pre>0.01</pre> 1 ATUnits_units_match. UnitsAbsolute <pre>0.0*km/s</pre> <pre>0.0*m/s</pre> <pre>0.01</pre> 1 ATUnits_compatible_units m/s. UnitsAbsolute <pre>0.0*m</pre> <pre>0.0*m/s</pre> <pre>0.01</pre> 0 ATUnits_incompatible_units. ATUnits_correct_numerical. Your units are incompatible with those used by the teacher. Please check your units carefully. UnitsAbsolute <pre>0.0</pre> <pre>0.0*m/s</pre> <pre>0.01</pre> 0 ATUnits_SA_no_units. Your answer must have units. UnitsAbsolute <pre>1.0*m/s</pre> <pre>m/s</pre> <pre>0.01</pre> 1 ATUnits_units_match. UnitsAbsolute <pre>15/pi*kN/mm^2</pre> <pre>15/pi*kN/mm^2</pre> <pre>0.01</pre> 1 ATUnits_units_match. UnitsAbsolute <pre>(15*kN)/(pi*mm^2)</pre> <pre>(15*kN)/(pi*mm^2)</pre> <pre>0.01</pre> 1 ATUnits_units_match. UnitsAbsolute <pre>(15/pi)*(kN/mm^2)</pre> <pre>(15/pi)*(kN/mm^2)</pre> <pre>0.01</pre> 1 ATUnits_units_match. UnitsAbsolute <pre>(600*N)/(%pi*mm^2)</pre> <pre>(600*N)/(%pi*mm^2)</pre> <pre>0.01</pre> 1 ATUnits_units_match. UnitsAbsolute <pre>(600/pi)*kN/m^2</pre> <pre>(600/pi)*kN/m^2</pre> <pre>0.01</pre> 1 ATUnits_units_match. UnitsAbsolute <pre>(600/pi)*kN/mm^2</pre> <pre>(600/pi)*kN/mm^2</pre> <pre>0.01</pre> 1 ATUnits_units_match."},{"location":"en/Authoring/Answer_Tests/Results/UnitsRelative/","title":"UnitsRelative: Answer test results","text":"<p>This page exposes the results of running answer tests on STACK test cases.  This page is automatically generated from the STACK unit tests and is designed to show question authors what answer tests actually do.  This includes cases where answer tests currentl fail, which gives a negative expected mark.  Comments and further test cases are very welcome.</p> UnitsRelative Test?Student responseTeacher answerOptMarkAnswer note UnitsRelative <pre>12.3*m/s</pre> <pre>12.3*m/s</pre> <pre>0.01</pre> 1 ATUnits_units_match. UnitsRelative <pre>12*m/s</pre> <pre>12.3*m/s</pre> <pre>0.01</pre> 0 ATUnits_units_match. UnitsRelative <pre>1.1*Mg/10^6</pre> <pre>1.2*kN*ns/(mm*Hz)</pre> <pre>0.15</pre> 1 ATUnits_compatible_units kg. UnitsRelative <pre>1.1*Mg/10^6</pre> <pre>1.2*kN*ns/(mm*Hz)</pre> <pre>0.05</pre> 0 ATUnits_compatible_units kg. Edge case UnitsRelative <pre>0*m/s</pre> <pre>0*m/s</pre> <pre>0.01</pre> 1 ATUnits_units_match. UnitsRelative <pre>0.0*m/s</pre> <pre>0*m/s</pre> <pre>0.01</pre> 1 ATUnits_units_match. UnitsRelative <pre>0*m/s</pre> <pre>0.0*m/s</pre> <pre>0.01</pre> 1 ATUnits_units_match. UnitsRelative <pre>0.0*m/s</pre> <pre>0.0*m/s</pre> <pre>0.01</pre> 1 ATUnits_units_match. UnitsRelative <pre>0.0*km/s</pre> <pre>0.0*m/s</pre> <pre>0.01</pre> 1 ATUnits_compatible_units m/s. UnitsRelative <pre>0.0*m</pre> <pre>0.0*m/s</pre> <pre>0.01</pre> 0 ATUnits_incompatible_units. ATUnits_correct_numerical. Your units are incompatible with those used by the teacher. Please check your units carefully. UnitsRelative <pre>0.0</pre> <pre>0.0*m/s</pre> <pre>0.01</pre> 0 ATUnits_SA_no_units. Your answer must have units. UnitsRelative <pre>0.0*kVA</pre> <pre>0.0*kVA</pre> <pre>0.002</pre> 1 ATUnits_units_match."},{"location":"en/Authoring/Answer_Tests/Results/UnitsStrict/","title":"UnitsStrict: Answer test results","text":"<p>This page exposes the results of running answer tests on STACK test cases.  This page is automatically generated from the STACK unit tests and is designed to show question authors what answer tests actually do.  This includes cases where answer tests currentl fail, which gives a negative expected mark.  Comments and further test cases are very welcome.</p> UnitsStrict Test?Student responseTeacher answerOptMarkAnswer note Differences from the Units test only UnitsStrict <pre>25*g</pre> <pre>0.025*kg</pre> <pre>2</pre> 0 ATUnits_compatible_units kg. UnitsStrict <pre>1*Mg/10^6</pre> <pre>1*N*s^2/(km)</pre> <pre>1</pre> 0 ATUnits_compatible_units kg. UnitsStrict <pre>1*Mg/10^6</pre> <pre>1*kN*ns/(mm*Hz)</pre> <pre>1</pre> 0 ATUnits_compatible_units kg. UnitsStrict <pre>3.14*Mg/10^6</pre> <pre>%pi*kN*ns/(mm*Hz)</pre> <pre>3</pre> 0 ATUnits_compatible_units kg. UnitsStrict <pre>400*cc</pre> <pre>0.4*l</pre> <pre>2</pre> 0 ATNumSigFigs_WithinRange. ATUnits_compatible_units m^3. UnitsStrict <pre>400*cm^3</pre> <pre>0.4*l</pre> <pre>2</pre> 0 ATNumSigFigs_WithinRange. ATUnits_compatible_units m^3. UnitsStrict <pre>400*ml</pre> <pre>0.4*l</pre> <pre>2</pre> 0 ATNumSigFigs_WithinRange. ATUnits_compatible_units m^3. UnitsStrict <pre>400*mL</pre> <pre>0.4*l</pre> <pre>2</pre> 0 ATNumSigFigs_WithinRange. ATUnits_compatible_units m^3. UnitsStrict <pre>142.8*C</pre> <pre>415.9*K</pre> <pre>4</pre> 0 ATNumSigFigs_VeryInaccurate. ATUnits_incompatible_units. We are not *that* strict! UnitsStrict <pre>-9.81*m/s/s</pre> <pre>-9.81*m/s^2</pre> <pre>3</pre> 1 ATUnits_units_match. Edge case UnitsStrict <pre>0*m/s</pre> <pre>0*m/s</pre> <pre>1</pre> 1 ATUnits_units_match. UnitsStrict <pre>0.0*m/s</pre> <pre>0*m/s</pre> <pre>1</pre> 1 ATUnits_units_match. UnitsStrict <pre>0*m/s</pre> <pre>0.0*m/s</pre> <pre>1</pre> 1 ATUnits_units_match. UnitsStrict <pre>0.0*m/s</pre> <pre>0.0*m/s</pre> <pre>1</pre> 1 ATUnits_units_match. UnitsStrict <pre>0.0*km/s</pre> <pre>0.0*m/s</pre> <pre>1</pre> 0 ATUnits_compatible_units m/s. UnitsStrict <pre>0.0*m</pre> <pre>0.0*m/s</pre> <pre>1</pre> 0 ATUnits_incompatible_units. ATUnits_correct_numerical. UnitsStrict <pre>0.0</pre> <pre>0.0*m/s</pre> <pre>1</pre> 0 ATUnits_SA_no_units. Your answer must have units. UnitsStrict <pre>2.33e-15*kg</pre> <pre>2.33e-15*kg</pre> <pre>[3,2]</pre> 1 ATUnits_units_match. UnitsStrict <pre>7.03e-3*ng</pre> <pre>7.03e-3*ng</pre> <pre>[3,2]</pre> 1 ATUnits_units_match. UnitsStrict <pre>2.35e-6*ug</pre> <pre>2.35e-6*ug</pre> <pre>[3,2]</pre> 1 ATUnits_units_match. UnitsStrict <pre>9.83e-10*cg</pre> <pre>9.83e-10*cg</pre> <pre>[3,2]</pre> 1 ATUnits_units_match. UnitsStrict <pre>9.73e-21*Gg</pre> <pre>9.73e-21*Gg</pre> <pre>[3,2]</pre> 1 ATUnits_units_match. UnitsStrict <pre>7.19e-15*kg</pre> <pre>7.19e-15*kg</pre> <pre>[3,2]</pre> 1 ATUnits_units_match. UnitsStrict <pre>8.12e-12*g</pre> <pre>8.12e-12*g</pre> <pre>[3,2]</pre> 1 ATUnits_units_match. UnitsStrict <pre>9.34e-12*g</pre> <pre>9.34e-12*g</pre> <pre>[3,2]</pre> 1 ATUnits_units_match. UnitsStrict <pre>1.07e-21*Gg</pre> <pre>1.07e-21*Gg</pre> <pre>[3,2]</pre> 1 ATUnits_units_match. UnitsStrict <pre>1.91e-10*cg</pre> <pre>1.91e-10*cg</pre> <pre>[3,2]</pre> 1 ATUnits_units_match. UnitsStrict <pre>5.67e-18*Mg</pre> <pre>5.67e-18*Mg</pre> <pre>[3,2]</pre> 1 ATUnits_units_match. UnitsStrict <pre>2.04e-9*mg</pre> <pre>2.04e-9*mg</pre> <pre>[3,2]</pre> 1 ATUnits_units_match. UnitsStrict <pre>6.75e-6*ug</pre> <pre>6.75e-6*ug</pre> <pre>[3,2]</pre> 1 ATUnits_units_match. UnitsStrict <pre>6.58e-6*ug</pre> <pre>6.58e-6*ug</pre> <pre>[3,2]</pre> 1 ATUnits_units_match. UnitsStrict <pre>3.58e-9*mg</pre> <pre>3.58e-9*mg</pre> <pre>[3,2]</pre> 1 ATUnits_units_match. UnitsStrict <pre>9.99e-15*kg</pre> <pre>9.99e-15*kg</pre> <pre>[3,2]</pre> 1 ATUnits_units_match. UnitsStrict <pre>9.8e-9*mg</pre> <pre>9.8e-9*mg</pre> <pre>[3,2]</pre> 0 ATNumSigFigs_WrongDigits. ATUnits_units_match. Your answer contains the wrong number of significant digits. UnitsStrict <pre>9.80e-9*mg</pre> <pre>9.8e-9*mg</pre> <pre>[3,2]</pre> 1 ATUnits_units_match. UnitsStrict <pre>9.83e-9*mg</pre> <pre>9.8e-9*mg</pre> <pre>[3,2]</pre> 1 ATUnits_units_match. UnitsStrict <pre>9.78e-9*mg</pre> <pre>9.8e-9*mg</pre> <pre>[3,2]</pre> 1 ATUnits_units_match. UnitsStrict <pre>36*Kj/mol</pre> <pre>36*Kj/mol</pre> <pre>2</pre> 1 ATUnits_units_match. UnitsStrict <pre>-36*Kj/mol</pre> <pre>-36*Kj/mol</pre> <pre>2</pre> 1 ATUnits_units_match. UnitsStrict <pre>(-36)*Kj/mol</pre> <pre>-36*Kj/mol</pre> <pre>2</pre> 1 ATUnits_units_match. UnitsStrict <pre>(-36*Kj)/mol</pre> <pre>-36*Kj/mol</pre> <pre>2</pre> 1 ATUnits_units_match. UnitsStrict <pre>-(36*Kj)/mol</pre> <pre>-36*Kj/mol</pre> <pre>2</pre> 1 ATUnits_units_match. UnitsStrict <pre>-(36.2*Kj)/mol</pre> <pre>-36.3*Kj/mol</pre> <pre>2</pre> 0 ATNumSigFigs_WrongDigits. ATUnits_units_match. Your answer contains the wrong number of significant digits. UnitsStrict <pre>3.58e-9*mg</pre> <pre>displaydp(3.58e-9,2)*mg</pre> <pre>[3,2]</pre> 1 ATUnits_units_match. UnitsStrict <pre>3.58e-9*mg</pre> <pre>displaysf(3.58e-9,3)*mg</pre> <pre>[3,2]</pre> 1 ATUnits_units_match. UnitsStrict <pre>-9.82*m/s^2</pre> <pre>stackunits(displaydp(-9.815,3)\n,m/s^2)</pre> <pre>3</pre> 1 ATUnits_units_match. UnitsStrict <pre>-9.82*m/s^2</pre> <pre>stackunits(displaysf(-9.815,4)\n,m/s^2)</pre> <pre>3</pre> 1 ATUnits_units_match."},{"location":"en/Authoring/Answer_Tests/Results/UnitsStrictAbsolute/","title":"UnitsStrictAbsolute: Answer test results","text":"<p>This page exposes the results of running answer tests on STACK test cases.  This page is automatically generated from the STACK unit tests and is designed to show question authors what answer tests actually do.  This includes cases where answer tests currentl fail, which gives a negative expected mark.  Comments and further test cases are very welcome.</p> UnitsStrictAbsolute Test?Student responseTeacher answerOptMarkAnswer note UnitsStrictAbsolute <pre>2301.0*mm</pre> <pre>2300.0*mm</pre> <pre>10.0</pre> 1 ATUnits_units_match. UnitsStrictAbsolute <pre>2321.0*mm</pre> <pre>2300.0*mm</pre> <pre>10.0</pre> 0 ATUnits_units_match. UnitsStrictAbsolute <pre>2.301*m</pre> <pre>2300.0*mm</pre> <pre>10.0</pre> 0 ATUnits_compatible_units m. UnitsStrictAbsolute <pre>2.321*m</pre> <pre>2300.0*mm</pre> <pre>10.0</pre> 0 ATUnits_compatible_units m. UnitsStrictAbsolute <pre>2.301*kg</pre> <pre>2300.0*mm</pre> <pre>10.0</pre> 0 ATUnits_incompatible_units."},{"location":"en/Authoring/Answer_Tests/Results/UnitsStrictRelative/","title":"UnitsStrictRelative: Answer test results","text":"<p>This page exposes the results of running answer tests on STACK test cases.  This page is automatically generated from the STACK unit tests and is designed to show question authors what answer tests actually do.  This includes cases where answer tests currentl fail, which gives a negative expected mark.  Comments and further test cases are very welcome.</p> UnitsStrictRelative Test?Student responseTeacher answerOptMarkAnswer note UnitsStrictRelative <pre>12.3*m/s</pre> <pre>12.3*m/s</pre> <pre>0.01</pre> 1 ATUnits_units_match. UnitsStrictRelative <pre>12.3*m/s</pre> <pre>stackunits(12.3,m/s)</pre> <pre>0.01</pre> 1 ATUnits_units_match. UnitsStrictRelative <pre>12.3*m/s</pre> <pre>stackunits(displaydp(12.3,1),m\n/s)</pre> <pre>0.01</pre> 1 ATUnits_units_match. UnitsStrictRelative <pre>12*m/s</pre> <pre>12.3*m/s</pre> <pre>0.01</pre> 0 ATUnits_units_match. UnitsStrictRelative <pre>1.1*Mg/10^6</pre> <pre>1.2*kN*ns/(mm*Hz)</pre> <pre>0.15</pre> 0 ATUnits_compatible_units kg. UnitsStrictRelative <pre>1.1*Mg/10^6</pre> <pre>1.2*kN*ns/(mm*Hz)</pre> <pre>0.05</pre> 0 ATUnits_compatible_units kg. Edge case UnitsStrictRelative <pre>0*m/s</pre> <pre>0*m/s</pre> <pre>0.01</pre> 1 ATUnits_units_match. UnitsStrictRelative <pre>0.0*m/s</pre> <pre>0*m/s</pre> <pre>0.01</pre> 1 ATUnits_units_match. UnitsStrictRelative <pre>0*m/s</pre> <pre>0.0*m/s</pre> <pre>0.01</pre> 1 ATUnits_units_match. UnitsStrictRelative <pre>0.0*m/s</pre> <pre>0.0*m/s</pre> <pre>0.01</pre> 1 ATUnits_units_match. UnitsStrictRelative <pre>0.0*km/s</pre> <pre>0.0*m/s</pre> <pre>0.01</pre> 0 ATUnits_compatible_units m/s. UnitsStrictRelative <pre>0.0*m</pre> <pre>0.0*m/s</pre> <pre>0.01</pre> 0 ATUnits_incompatible_units. ATUnits_correct_numerical. UnitsStrictRelative <pre>0.0</pre> <pre>0.0*m/s</pre> <pre>0.01</pre> 0 ATUnits_SA_no_units. Your answer must have units. UnitsStrictRelative <pre>0*J</pre> <pre>0.0*J</pre> <pre>0.01</pre> 1 ATUnits_units_match."},{"location":"en/Authoring/Answer_Tests/Results/Validator/","title":"Validator: Answer test results","text":"<p>This page exposes the results of running answer tests on STACK test cases.  This page is automatically generated from the STACK unit tests and is designed to show question authors what answer tests actually do.  This includes cases where answer tests currentl fail, which gives a negative expected mark.  Comments and further test cases are very welcome.</p> Validator Test?Student responseTeacher answerOptMarkAnswer note Validator <pre>1/0</pre> <pre>0</pre> <pre>validate_nofunc\ntions</pre> -1 ATValidator_STACKERROR_SAns. TEST_FAILED The answer test failed to execute correctly: please alert your teacher. Division by zero. Validator <pre>x</pre> <pre>0</pre> <pre>1/0</pre> -1 ATValidator_STACKERROR_Opt. TEST_FAILED The answer test failed to execute correctly: please alert your teacher. Division by zero. Validator <pre>x</pre> <pre>null</pre> <pre>op</pre> -1 ATValidator_STACKERROR_ev. TEST_FAILED The validator threw an error when evaluated. This is an error in the test, please contact your teacher. Validator <pre>x^2+sin(1)</pre> <pre>null</pre> <pre>[validate_nofun\nctions]</pre> 0 ATValidator_not_fun. The validator failed to evaluate. Did you give the correct validator function name? This is an error in the test, please contact your teacher. Validator <pre>f(x)</pre> <pre>null</pre> <pre>validate_nodef</pre> 0 ATValidator_not_fun. The validator failed to evaluate. Did you give the correct validator function name? This is an error in the test, please contact your teacher. Validator <pre>x</pre> <pre>null</pre> <pre>sin</pre> 0 ATValidator_not_fun. The validator failed to evaluate. Did you give the correct validator function name? This is an error in the test, please contact your teacher. Validator <pre>[1,2,3]</pre> <pre>null</pre> <pre>first</pre> 0 ATValidator_res_not_string. The result of your validator must be a string, but is not. This is an error in the test, please contact your teacher. Validator <pre>x^2+sin(1)</pre> <pre>null</pre> <pre>validate_nofunc\ntions</pre> 1 Validator <pre>f(x)</pre> <pre>null</pre> <pre>validate_nofunc\ntions</pre> 0 User-defined functions are not permitted, however \\(f\\) appears to be used as a function."},{"location":"en/Authoring/Inputs/","title":"Inputs","text":"<p>Inputs are the points at which the student interacts with the question and enter their answer.</p> <p>The default (and prototype) is an HTML input box into which a student is expected to type an algebraic expression.</p> <ul> <li>Only the question text may have inputs.</li> <li>Inputs are not required. Hence it is possible for the teacher to make a statement which asks for no response from the student, i.e. a rhetorical question.</li> <li>A question may have as many inputs as needed.</li> <li>Inputs can be positioned anywhere within the question text. MathJax does not currently support the inclusion of inputs within equations.</li> <li>Typically inputs return a Maxima expression.  This might be just the student's answer (in the case of an algebraic input).  MCQ inputs also return a valid Maxima expression.</li> <li>Some inputs return JSON.</li> <li>In a multi-part question avoid having inputs which differ only by case sensitivity.  E.g. do not have <code>[[input:a]]</code> and <code>[[input:A]]</code> in the same question.  (Some database defaults have case insensitive unique keys (!) and in that case this will cause a database error.  See the installation instructions).</li> </ul> <p>The position of an input in the question text is denoted by</p> <pre><code>[[input:ans1]]\n</code></pre> <p>Here <code>ans1</code> is the name of a Maxima variable to which the student's answer is to be assigned. This must only be letters followed (optionally) by numbers, as in this example. No special characters are permitted. The input name cannot be more than 18 characters long.</p> <p>Feedback as to the syntactic validity of a response is positioned using a corresponding tag</p> <pre><code>[[validation:ans1]]\n</code></pre> <p>This tag must be included even if validation is suppressed with an option (see below) and is automatically generated after the input if it does not exist.</p> <p>We expose the exact behaviour of the validation by giving registered users access to STACK's test suite validation of student's answers.  This can be found on a live server at <code>https://stack-demo.maths.ed.ac.uk/demo/question/type/stack/adminui/studentinputs.php</code></p> <p>Each input may have a number of options and this is potentially complex area with a large range of possibilities.</p> <p>The basic idea is to reject things as \"invalid\" to stop students being penalized on a technicality.  This might be requiring an equation, or making floating-point numbers within an expression forbidden.</p>"},{"location":"en/Authoring/Inputs/#Answer_Key","title":"Student's Answer Key","text":"<p>Every input must have a unique answer key.  This is set in the Question text using the following tag, where <code>ans1</code> is the variable name to which the student's answer is assigned.</p> <pre><code>[[input:ans1]]\n</code></pre> <p>Internally you can refer to the student's answer using the variable name <code>ans1</code> in the potential response tree, feedback variables and feedback text. The worked solution (general feedback) may not depend on the inputs.</p>"},{"location":"en/Authoring/Inputs/#model_answer","title":"Model answer","text":"<p>This field is compulsory. Every input must have an answer, although this answer is not necessarily the unique correct answer, or even \"correct\"!  This value be displayed to the student as the correct answer.  We recommend you use a question variable for this field so it can be used in the other parts of the question, e.g. the potential response trees.</p>"},{"location":"en/Authoring/Inputs/#input-type","title":"Input type","text":"<p>Currently STACK supports the following kinds of inputs.  These have a variety of options, as explained below.</p> <ol> <li>Algebraic The default: a form box into which a student is expected to type an algebraic expression.</li> <li>Numerical This input type requires the student to type in a number of some kind.  Any expression with a variable will be rejected as invalid.  See the specific documentation for more information:  Numerical input.</li> <li>Scientific units The support for scientific units includes an input type which enables teachers to check units as valid/invalid. See the separate documentation for units.</li> <li>Matrix This provides a grid for students to type in their answer.</li> <li>Variable size matrix This provides a textarea. Students type in expressions and spaces separate items in rows.</li> <li>True/False Simple drop down. A Boolean value is assigned to the variable name.</li> <li>Single charater A single letter can be entered.  This is useful for creating multiple-choice questions, but is not used regularly.</li> <li>String/Notes Resulting in text-strings being sent to Maxima, or stored. Text-based inputs.</li> <li>Multi-line input, either the equivalence reasoning input or the textarea input. </li> </ol> <p>Some of the special blocks provide interactions which can be linked to inputs.  These include</p> <ol> <li>JSXGraph diagrams.  See JSON entry in Text-based inputs.</li> <li>GeoGebra diagrams..</li> <li>Drag and drop problems. See drag and drop for examples.</li> </ol>"},{"location":"en/Authoring/Inputs/#truefalse-inputs","title":"True/False inputs","text":"<p>If the teacher's correct answer should leave this blank (e.g. not answered at all) then use the tag <code>EMPTYANSWER</code>. (There are some edge cases where only some inputs are used in the correct answer to a question, so not answering is correct here).  If you use the extra option <code>allowempty</code> then empty answers are considered valid, and the value of this input is <code>EMPTYANSWER</code>.</p>"},{"location":"en/Authoring/Inputs/#input-options","title":"Input Options","text":""},{"location":"en/Authoring/Inputs/#Box_Size","title":"Input Box Size","text":"<p>The width of the input box.</p>"},{"location":"en/Authoring/Inputs/#Syntax_Hint","title":"Syntax Hint","text":"<p>A syntax hint allows the teacher to give the student a pro-forma in the input box. The syntax hint will appear in the answer box whenever this is left blank by the student.</p> <p>This is a castext field (as of Feb 2025), just like the question text itself. The result of evaluating this castext does not need to be valid, e.g. it can include '?' characters.</p> <p>Rather than having to type</p> <pre><code>matrix([1,2],[3,4])\n</code></pre> <p>the teacher may want to provide an answer box which already contains the string</p> <pre><code>matrix([?,?],[?,?])\n</code></pre> <p>instead. The student then need only to edit this, to replace ?s with their values. This helps reduce syntax error problems with more difficult syntax issues. The <code>?</code> may also be used to give partial credit. Of course it could also be used for general expressions such as:</p> <pre><code>x^2+?*x+1\n</code></pre> <p>Notes: </p> <ol> <li>If you make use of castext, you are likely to want to use <code>{#...#}</code> which returns the Maxima version, not the LaTeX generated by <code>{@...@}</code>.  Indeed if you return LaTeX you will have inline mathematics delimiters <code>\\(...\\)</code> inside the input field, and MathJax does not render this (by design!).</li> <li>If you make use of the question variables to define a string, e.g. <code>s1:\"mx+c\";</code>, then <code>{#s1#}</code> will return the Maxima version, i.e. <code>\"mx+c\"</code> (with the double quotes) as a Maxima string.  However, <code>{@s1@}</code> return just the contents of the string (<code>mx+c</code>), following the normal castext rules that display of pure strings gives the contents of the string, without quotes and not the LaTeX inside an <code>\\mbox{}</code> environment.</li> <li>If you put localisation, e.g. <code>[[lang]]</code> blocks, inside the castext then these will be evaluated.  If you want to define  strings in the question variables, then use the <code>castext()</code> command in Maxima.</li> <li>The format of the syntax hint castext is hard-wired to be plain text text.  Do not put formatting in this field.</li> <li>The syntax hint is, by design, supposed to be simple and short!</li> <li>Support for a castext syntax hint is provided for algebraic, notes, numerical, string, textarea, units.  JSXGraph and Parsons expect the syntax hint to be structured JSON.</li> <li>Inputs not giving support for a syntax hint include:</li> <li>All MCQ inputs: Boolean, checkbox, dropdown and radio.</li> <li>GeoGebra</li> <li>Matrix and varmatrix inputs expect the syntax hint to be a correctly formatted matrix, in Maxima syntax.  E.g. if most of your matrix is zeros you can pre-fill these with a syntax hint <code>{#zeromatrix(10,10)#}</code> etc.   The size can be determined by a random variable.  You cannot currently put <code>castext</code> functions within matrix entries.</li> <li>Singlechar</li> <li>Textarea and equiv inputs initially process the syntax hint as castext.  This is then assumed to be a Maxima list and re-processed as a Maxima expression. If valid, STACK removes \"noun\" operators, e.g. <code>nounand</code> will be converted to <code>and</code> before the syntax hint is displayed.  Therefore, you can add in a syntax hint of the form <code>[2x+x=?]</code>.  This is a list, but the contents are not valid Maxima and so are just displayed.</li> <li>The database limits syntax hints to 256 characters.  If you need to author a question with a longer hint, define a variable in the question variables and use this.  E.g. define a string <code>sh:\"Very long syntax hint....\"</code> and use <code>{@sh@}</code> as the hint.  The size restriction affects DB storage of the question, not internal operation.</li> </ol>"},{"location":"en/Authoring/Inputs/#Forbidden_Words","title":"Forbidden words","text":"<p>This is a comma-separated list of text strings which are forbidden in a student's answer.  If one of these strings is present then the student's attempt will be considered invalid, and no penalties will be given. This is an unsophisticated string match.</p> <p>Note, any question variable names used in the question variables are automatically forbidden (otherwise the student could potentially use the variable name you have defined, which might be the correct answer).  If you want to allow question variables, you must explicitly use the allowed words field, see below.</p> <p>Note that the string <code>*</code> is literally taken as <code>*</code> and is not a wild card.  Teachers may ask a student to calculate <code>2*3</code> and hence need to forbid multiplication in an answer.</p> <p>If you wish to forbid commas, then escape it with a backslash.</p> <p>There are groups of common keywords which you can forbid simply as</p> <ul> <li><code>[[BASIC-ALGEBRA]]</code> common algebraic operations such as <code>simplify</code>, <code>factor</code>, <code>expand</code>, <code>solve</code>, etc.</li> <li><code>[[BASIC-TRIG]]</code> names of all the trig and hyperbolic trig functions and their inverses, e.g.  <code>sin</code>, <code>asin</code>, <code>sinh</code>, <code>asinh</code>, etc.</li> <li><code>[[BASIC-CALCULUS]]</code> common calculus operations such as <code>int</code>, <code>diff</code>, <code>taylor</code>, etc.</li> <li><code>[[BASIC-MATRIX]]</code> common matrix operations such as <code>transpose</code>, <code>invert</code>, <code>charpoly</code>, etc.</li> </ul> <p>These list are hard-wired into the code.</p> <p>If you have suggestions for more lists, or additional operations which should be added to the existing lists, please contact the developers.</p>"},{"location":"en/Authoring/Inputs/#Allowed_Words","title":"Allowed words","text":"<p>By default, arbitrary function or variable names of more than two characters in length are not permitted.  This is a comma-separated list of function or variable names which are permitted in a student's answer.</p> <p>Note the allowed words permit the teacher to override some (but not all) of the strings which are considered to be invalid by default for student input.  For example, <code>Sin</code> (capital \"S\") has specific feedback.  If you need this in a question you have to allow it here.  Similarly <code>In</code> (\"India November\") is mistakenly used by students for the natural logarithm rather than <code>ln</code> (\"Lima November\").  Hence by default this triggers specific feedback.  You can allow <code>In</code> here.</p>"},{"location":"en/Authoring/Inputs/#Forbid_Floats","title":"Forbid Floats","text":"<p>If set to <code>yes</code>, then any answer of the student containing a floating-point number will be rejected as invalid.  Students sometimes use floating-point numbers when they should use fractions.  This option prevents problems with approximations being used.</p> <p>The typical problem is that students type in an expression such as <code>0.5x^2+0.33</code> then they mean to type in <code>1/2*x^2+1/3</code>. Mathematically,  exactly.  Indeed, any real number with a terminating decimal can be written exactly as a floating point number.  However, with <code>0.33</code> we cannot be sure if the student meant to type in \\frac{1}{3}, \\frac{33}{100} or something else.</p> <p>In pure mathematics, when the teacher typically wants an exact answer, the most reliable option is to forbid floating point numbers with instant validation.  Students get immediate feedback, and are unlikely to be penalised on a technicality. From experience we strongly recommend validation to forbid floats in this situation, rather than trying to decide if a student's particular float is exact (as is <code>0.5</code>).</p> <p>STACK can, of course, establish that two numbers <code>a</code> and <code>b</code> are identical, in the sense that if <code>b</code> is a rational number with a terminating decimal then <code>a</code> is equivalent to <code>b</code> regardless of whether <code>a</code> is written as a float or not.  If <code>b</code> is a rational number without a terminating decimals (when primes other than 2 or 5 appear in the denominator of <code>b</code>) and <code>a</code> is a float then they are considered different since <code>a</code> is necessarily terminating.  (We have no notation to indicate a recurring float as input.) This means that, when establishing if a float is exact rational, looking at a number <code>a</code> in isolatation is insufficient. We have to match up <code>a</code> with a corresponding <code>b</code> to decide if <code>a</code> is potentially a terminating decimal equivalent to <code>b</code>.</p> <p>In order to match up corresponding parts of two expressions (e.g. the student's answer with the teacher's answer) to decide whether the use by a stuent of a float is exact, we need to start making assumptions about the form of the student's answer.  This creates fragility, e.g. if a student types in <code>x^2+2/3*x+1+0.5*x</code> then without simplification we have two terms with <code>x</code>.  With simpliciation, Maxima rewrites this as <code>x^2+1.166666666666667*x+1</code>, whereas the exact value is  <code>x^2+7/6*x+1</code>.  We have no commands to return <code>2/3+0.5</code> (unsimplified) as the coefficient (note Maxima's <code>coeff</code> command essentially requires <code>simp:true</code> to work correctly).</p> <p>Please note that some mathematicians use floats to denote a real numbwer with significant figures.  For example <code>0.33</code> is taken to be some real number 0.325 \\leq x \\le 0335.  For this situation it is not, of course, appopritate to equate 0.5 with \\frac{1}{2} as the two notations are conciously chosen for different purposes.</p>"},{"location":"en/Authoring/Inputs/#Require_lowest_terms","title":"Require lowest terms","text":"<p>When this option is set to <code>yes</code>, any coefficients or other rational numbers in an expression, must be written in lowest terms.  Otherwise the answer is rejected as \"invalid\". This enables the teacher to reject answers, and not consider them further.  Note that at most one number can have a minus sign and two unary minus signs are considered to be something which should be cancelled.</p>"},{"location":"en/Authoring/Inputs/#Check_Type","title":"Check Students answer's type","text":"<p>If this option is set to <code>yes</code> then unless the student's expression is the same Maxima as the teacher's correct answer, then the attempt will be rejected as invalid.</p> <p>Type checking here is very simple, basically checking the student's answer is an equation, inequality, list, set, matrix to match that of the teacher.  The intention is not to be completely comprehensive, but to avoid obvious type mismatch.  E.g. this is very useful for ensuring the student has typed in an \"equation\", such as y=mx+c and not an expression such as mx+c.  Remember, you can't compare an expression with an equation!</p> <p>Another useful way of avoiding this problem is to put a LaTeX string such as y= just before the input.  E.g.</p> <pre><code>\\(y=\\)[[input:ans1]].\n</code></pre>"},{"location":"en/Authoring/Inputs/#Student_must_verify","title":"Student must verify","text":"<p>Specifies whether the student's input is presented back to them before scoring as part of a two-step validation process. Typically the student's mathematical expression is displayed in traditional form. This is useful for complex algebraic expressions but not needed for constrained input like <code>yes</code>/<code>no</code>.</p> <p>Experience strongly supports the use of this two-step verification process. Errors will always be displayed and expressions with errors rejected as invalid. Potential response trees will not execute with invalid input.</p> <p>The next option controls how the validation feedback is displayed. Note, it is not possible to require a two-step validation but not show some validation feedback.</p>"},{"location":"en/Authoring/Inputs/#Show_validation","title":"Show validation","text":"<p>Feedback to students is in two forms.</p> <ul> <li>feedback tied to inputs, in particular if the answer is invalid.</li> <li>feedback tied to each potential response tree.</li> </ul> <p>Setting this option displays any feedback from this input, including echoing back their expression in traditional two-dimensional notation.  Generally, feedback and verification are used in conjunction.  Errors will always be displayed.  In addition to simply displaying the student's expression, the teacher can display the list of variables which occurs in the expression.  From experience, this is helpful in letting students understand the idea of variable and to spot case insensitivity or wrong variable problems.</p> <p>The \"compact\" version removes most of the styling.  This is needed when the answer is part of a table.</p>"},{"location":"en/Authoring/Inputs/#input-tips-and-tricks","title":"Input tips and tricks","text":"<p>It is often sensible to use a prefix just in front of the form box.  For example</p> <pre><code>\\(f(x)=\\) [[input:ans1]].\n</code></pre> <p>This avoids all kinds of problems with students also trying to enter the prefix themselves. You could also specify units afterwards, but you might also want the student to type these in!</p> <p>In Maxima the input <code>(a,b,c)</code> is a programmatic block element (see Maxima's manual for <code>block</code>). Hence we cannot use this directly for the input of coordinates.  Instead, have the students type in an unnamed function like</p> <pre><code>P(x,y)\n</code></pre> <p>This technique can be used to enter a set of points</p> <pre><code>{A(1,2), B(2,3)}\n</code></pre> <p>as an answer.  The <code>op</code> command can be used to filter out a particular point, and the <code>args</code> command becomes a list of coordinates.</p>"},{"location":"en/Authoring/Inputs/#adding-new-input-types","title":"Adding new input types","text":"<p>Adding new inputs, or options for existing inputs, is a job for the developers. The only essential requirement is that the result is a valid CAS expression, which includes of course a string data type, or a list.</p>"},{"location":"en/Authoring/Inputs/Input_options/","title":"Input options","text":"<p>This is reference documentation for the input options.</p>"},{"location":"en/Authoring/Inputs/Input_options/#options-summary-table","title":"Options summary table","text":"<p>This table lists all options, and which inputs use/respect them.  The <code>.</code> means the option is ignored.</p> Options Alg Num Units Matrix Check Radio Drop T/F TextArea Equiv String Notes Box size Y Y Y Y . . . . Y Y Y Y Strict Syn Y (1) (1) Y . . . . Y Y . . Insert stars Y Y Y Y . . . . Y Y . . Syntax hint Y Y Y Y . . . . Y Y Y Y Hint att Y Y Y Y . . . . Y Y Y Y Forbidden words Y Y Y Y . . . . Y Y . . Allowed words Y Y Y Y . . . . Y Y . . Forbid float Y Y Y Y . . . . Y Y . . Lowest terms Y Y Y Y . . . . Y Y . . Check type Y Y Y Y . . . . . . . . Must verify Y Y Y Y Y Y Y Y Y Y Y . Show validation Y Y Y Y Y Y Y Y Y Y Y . Extra options: <code>rationalize</code> Y Y . . . . . . . . . . min/max sf/dp . Y Y . . . . . . . . . <code>floatnum</code> . Y . . . . . . . . . . <code>intnum</code> . Y . . . . . . . . . . <code>rationalnum</code> . Y . . . . . . . . . . <code>consolidatesubscripts</code> Y . Y Y . . . . . . . . <code>negpow</code> . . Y . . . . . . . . . <code>simp</code> Y Y Y Y . . . . Y . . . <code>align</code> Y Y Y . . . . . . . . . <code>nounits</code> Y Y Y Y Y Y Y . . Y . . <code>checkvars</code> Y . . Y . . . . . Y . . <code>validator</code> Y Y Y Y . . . . . . Y . <code>feedback</code> Y . Y Y . . . . . . . . <p>For documentation about the various options not documented on this page look at the pages for the specific inputs in which each option is used.</p> <p>Notes:</p> <ol> <li>The numerical and units input type ignore the strict syntax option and always assume strict syntax is \"true\". Otherwise patterns for scientific numbers such as <code>2.23e4</code> will have multiplication characters inserted.</li> </ol>"},{"location":"en/Authoring/Inputs/Input_options/#extra_option_hideanswer","title":"Extra option: hideanswer","text":"<p>Users are increasingly using inputs to store state, which makes no sense for a user to see.  For example, when using JSXGraph or GeoGebra users transfer the configuration of the diagram into an input via JavaScript.  In many situations, it makes no sense for the student to see anything about this input.  The validation can be switched off with the regular \"show validation\" option, the input box itself can be hidden with JavaScript/CSS.  Putting <code>hideanswer</code> in the extra options stops displaying the \"teacher's answer\", e.g. at the end of the process.</p> <p>All input types should support this extra option.</p> <p>Do not use this option in questions in place of the normal quiz settings.</p>"},{"location":"en/Authoring/Inputs/Input_options/#extra-option-allowempty","title":"Extra option: allowempty","text":"<p>Normally a blank, i.e. empty, answer has a special status and are not considered \"valid\".  Hence, a PRT relying on an input left blank will not be traversed.  Answers consisting only of whitespace are also considered as empty.  The extra option <code>allowempty</code> allows the input to be empty.  Internally it is essential that the variable name of the input, (e.g. <code>ans1</code>) is really assigned a specific value.</p> <ul> <li>Most inputs, including the algebraic input, an empty answer will be replaced by the Maxima atom <code>EMPTYANSWER</code>.  The teacher will need to deal with <code>EMPTYANSWER</code> tags in the PRT.</li> <li>String inputs will return the empty string <code>\"\"</code> as an empty answer (to avoid a type-mismatch).</li> <li>Textarea inputs will return <code>[EMPTYANSWER]</code> to make sure the answer is always a list (to avoid a type-mismatch).</li> <li>Matrix inputs will return the correct size matrix filled with <code>null</code> atoms, e.g. <code>matrix([null,null],[null,null])</code>.</li> <li>Checkbox inputs will return <code>[]</code> to make sure the answer is always a list (to avoid a type-mismatch).</li> </ul> <p>We strongly recommend (with many years of experience) that teachers do not use this option without very careful thought!</p> <p>For example, if you don't want to give away how many answers you expect, then ask the student to provide a set of answers.  Another option is to use the \"TextArea\" input type.  Each line of the TextArea is validated separately, and the resulting mathematical expression is a list.  The student is therefore free to choose how many expressions to type in, as the circumstances require, without a pre-defined number of input boxes.  By design, it is better to use these methods than trying to combine separate inputs, some of which are empty, in the PRT later.</p> <p>Our experience strongly suggests this option should only be used for edge cases, and not for routine use.</p> <p>If you use this option when students navigate away from a page the system will \"validate\" the inputs, and hence any empty boxes will be considered an active empty choice by the student and will be assessed.  If you use this option there is no way to distinguish between an active empty answer choice, and a student who deletes their answer.  (The same problem occurs with radio buttons....)</p> <p>There are (unfortunately) some edge cases where it is useful to permit the execution of a PRT without all the inputs containing significant content.</p> <p>Assume you have three inputs <code>ans1</code>, <code>ans2</code>, <code>ans3</code> contributing to a PRT, all of which have the <code>allowempty</code> option set because you don't want to tell the student which might be empty.  Assume the correct answer has at least one entry non-empty.  Then, make the first node of the PRT check</p> <pre><code>ATAlgEquiv({ans1,ans2,ans3},{EMPTYANSWER})\n</code></pre> <p>This checks if all inputs are empty, so if true set the score and the penalty to be zero and stop.  This prevents the student accruing a penalty if they navigate away with all the boxes empty, but the PRT will still execute an \"attempt\".</p> <p>If a teacher has three inputs <code>ans1</code>, <code>ans2</code>, <code>ans3</code>, then they can define a set in the feedback variables as follows</p> <pre><code>sa:setdifference({ans1,ans2,ans3},{EMPTYANSWER})\n</code></pre> <p>The variable <code>sa</code> will be a set containing the non-empty answers (if any).</p> <p>The teacher can use the <code>EMPTYANSWER</code> tag as a \"correct answer\".</p>"},{"location":"en/Authoring/Inputs/Input_options/#extra-option-simp","title":"Extra option: simp","text":"<p>Actually simplify the student's answer during the validation process.  This will allow students to type in something like</p> <pre><code>makelist(k^2,k,1,8)\n</code></pre> <p>If teacher's want this kind of thing, then a syntax hint is probably in order as well.</p> <p>You may need to <code>ev(ans1,simp)</code> explicitly in any potential response tree.</p> <p>It makes no sense to simplify the equivalence reasoning input type, so this has been omitted.</p> <p>Note, STACK does it's best to preserve the number of significant figures in a student's answer.  For example, if a student types in <code>0.200*0.00500</code> then it should be displayed at  in validation (depending on the symbol chosen in the question for multiplication).  However, if this extra option is chosen then the calculation will be performed.  If the result is a single floating point number, then the number of decimal places displated will be the maximum number of decimal places entered in a float used by a stuent.  Otherwise Maxima's default way of displaying results used.  In particular, for floats, trailing zeros are removed.  More significant figures may be displayed than entered.</p>"},{"location":"en/Authoring/Inputs/Input_options/#extra-option-align","title":"Extra option: align","text":"<p>Controls if the student's answer is aligned 'left' or 'right' within the input box.</p>"},{"location":"en/Authoring/Inputs/Input_options/#extra-option-nounits","title":"Extra option: nounits","text":"<p>As of STACK 4.3, if units are declared in a question then the whole question will use a units context for parsing inputs.  For example, in a multi-part question you may use a matrix input.  If you do so, and use variable names, then these will be parsed expecting them to be usits.  To prevent this in a particular input, use the <code>nounits</code> option</p>"},{"location":"en/Authoring/Inputs/Input_options/#extra-option-consolidatesubscripts","title":"Extra option: consolidatesubscripts","text":"<p>As of STACK 4.3.10, there is an option to \"consolidate subscripts\".</p> <p>There is a subtle (and perhaps confusing) difference between atoms in Maxima.  The strings <code>a1</code> and <code>a_1</code> are both atoms in Maxima, and are different.  Hence, the atoms <code>a1</code> and <code>a_1</code> are not considered to be algebraically equivalent. To avoid penalising students on a technicality, if you include the extra option <code>consolidatesubscripts</code> or <code>consolidatesubscripts:true</code> then students' input will be converted to the form without the underscore.</p> <ol> <li>In students' input <code>M_1</code> is converted to <code>M1</code>.</li> <li>Teachers are expected to use the correct pattern <code>M1</code> in the correct answer and in PRTs.</li> <li>We only filter a very limited pattern, namely <code>^[a-zA-Z]+_[0-9]+$</code> which is an atom starting with one or more letters, then an underscore <code>_</code> then one or more digits.  This is the only pattern currently replaced.  Specifically double subscripts or non-numeric subscripts are ignored.</li> </ol> <p>(If you have genuine use for more patterns please contact the developers with examples!)</p> <p>More information on subscripts is given in the atoms and subscripts section of the more general Maxima documentation.</p>"},{"location":"en/Authoring/Inputs/Input_options/#extra-option-checkvars","title":"Extra option: checkvars","text":"<p>As of STACK 4.4.0, there is an option to check, or allow comparison between, variables which occur in the student's answer and the teacher's answer.</p> <p>This option takes the form of <code>checkvars:n</code>, where <code>n</code> is an integer. Omitting this option is equivalent to setting <code>n=0</code>.</p> <p>The binary bits are used to set this options.</p> <ol> <li>If the 1st binary bit of <code>n</code> is 1 (i.e. <code>n</code> is odd) then we flag up spurious variables.</li> <li>If the 2nd binary bit of <code>n</code> is 1 then we flag up missing variables.</li> </ol> <p>So, to check both set <code>checkvars:3</code>.</p> <p>The numerical argument provides potential for future-proofing features (e.g. case sensitivity).</p>"},{"location":"en/Authoring/Inputs/Input_options/#extra-option-validatorfeedback","title":"Extra option: validator/feedback","text":"<p>This allows an input to add additional bespoke validation, based on a function defined by the question author.  For example, you can define a function which checks if the student's answer is a list of exactly three floating point numbers.  See the validator documentation for more details.</p> <p>Writing bespoke validators is an advanced feature, but offers two significant benefits.</p> <ol> <li>Students are less likely to be penalised on a technicality, especially in high-stakes situations;</li> <li>Potential response tree authoring becomes much easier and more reliable because the validation acts as a \"guard clause\" only allowing correctly structured information through to the PRT.  This means type-checking need not be done in the PRT before assessment.</li> <li>The extra option <code>validator</code> is designed to allow you to choose extra expressions to be invalid.  The extra option <code>feedback</code> will simply print an additional message to students in the validation feedback.</li> </ol>"},{"location":"en/Authoring/Inputs/Input_options/#extra-option-monospace","title":"Extra option: monospace","text":"<p>This option is available for algebraic, numerical, units and varmatrix inputs. It controls if the student's answer is displayed using monospace font. <code>monospace</code> and <code>monospace:true</code> will force the input to use monospace. <code>monospace:false</code> will force proportional font.</p> <p>If <code>monospace</code> is not specified, then the CURRENT system default for the given input type will be used when the question is displayed. </p>"},{"location":"en/Authoring/Inputs/Input_options/#future-extra-options","title":"Future extra options","text":"<p>In the future we are likely to add additional functionality via the extra options fields.  This is because the form-based support becomes ever more complex, intimidating and difficult to navigate.</p>"},{"location":"en/Authoring/Inputs/Input_syntax/","title":"Input syntax","text":"<p>The whole point of STACK is to have the student enter an algebraic expression.  These input options related to choices for input syntax.</p>"},{"location":"en/Authoring/Inputs/Input_syntax/#Insert_Stars","title":"Insert Stars","text":"<p>Insert Stars affect the way STACK treats the validation of CAS strings.</p> <p>There are the following options.</p> <ul> <li>Don't insert stars:  This does not insert <code>*</code> characters automatically.  If there are any pattern identified the result will be an invalid expression.  Note, students can type in unknown functions such as <code>x(t+1)</code> and this will be valid.  If you need to forbid this use a bespoke validator.</li> <li>Insert <code>*</code>s for implied multiplication.  If any patterns are identified as needing <code>*</code>s as a pattern like <code>)(</code> then they will automatically be inserted into the expression quietly.</li> <li>Insert <code>*</code>s assuming single character variable names.  In many situations we know that a student will only have single character variable names.  Identify variables in the student's answer made up of more than one character then replace these with the product of the letters.</li> <li>Insert <code>*</code>s assuming no user-functions. If there is no function with name <code>x</code>, a pattern like <code>x(t+1)</code> will interpreted as <code>x*(t+1)</code>. Note, the student's formula is interpreted and variables identified, so  will not end up as <code>s*i*n*(a*x)</code> but as <code>sin(a*x)</code>.</li> </ul> <p>It is also possible to select multiple options at the same time. The following options are currently available:</p> <ul> <li>Don't insert stars</li> <li>Insert stars for implied multiplication only</li> <li>Insert stars assuming single-character variable names</li> <li>Insert stars for spaces only</li> <li>Insert stars for implied multiplication and for spaces</li> <li>Insert stars assuming single-character variable names, implied multiplication and for spaces</li> <li>Insert stars for implied multiplication, for spaces, and for no user-functions.</li> <li>Insert stars for implied multiplication, for spaces, no user-functions and assuming single-character variable names.</li> </ul> <p>Clearly all the possible combinations give 2^n options.  Hence, we only provide a few options.  If you are willing to insert stars for unknown functions such as <code>x(t+1)</code> (forbid unknown functions) then you would also insert stars for simpler concepts such as <code>2x</code>.</p> <p>If a space is taken for multiplication what should we do with \\sin\\ x?  Currently this is transformed to \\sin \\times x and then rejected as invalid as you can't multiply the function name by its argument.  Use these latter options with caution: in the long run students are likely to need to use a strict syntax with machines, and letting them use spaces now might be a disservice.</p> <p>It is often very important to have some on-screen representation of multiplication, e.g. as a dot, so the student can see at the validation that <code>xe^x</code> is interpreted</p> <ol> <li>as  (x\\cdot e)^x if we assume single character variable names, and</li> <li>as  xe^x if we just \"Insert <code>*</code>s for implied multiplication\".  The absence of the dot here is key.</li> </ol>"},{"location":"en/Authoring/Inputs/Matrix_input/","title":"Matrix inputs","text":"<p>STACK provides three ways to let students input a matrix:</p> <ol> <li>The matrix input is a fixed grid, one box for each element.</li> <li>The matrix of variable size input is a textarea into which students type in their answer.</li> <li>Students can type in the maxima <code>matrix</code> command into another input, e.g. the default algebraic input.</li> </ol>"},{"location":"en/Authoring/Inputs/Matrix_input/#matrix-input","title":"Matrix input","text":"<p>The size of the matrix is inferred from the model answer. STACK then adds an appropriate grid of boxes (of size Box Size) for the student to fill in. This is easier than having students type in Maxima's <code>matrix</code> command, but does give the game away about the size of the required matrix.</p> <p>The student may not fill in part of a matrix.  If they do so, the remaining entries will be completed with <code>?</code> characters which render the attempt invalid. STACK cannot cope with empty boxes here.</p> <p>We cannot use the <code>EMPTYANSWER</code> tag for the teacher's answer with the matrix input, because the size of the matrix is inferred from the model answer.  If a teacher really wants a correct answer to be a completely empty input then they must use a correctly formatted matrix with <code>null</code> values</p> <pre><code>ta:transpose(matrix([null,null,null]));\n</code></pre> <p>The shape of the parentheses surrounding the brackets is taken from the question level options, except matrix inputs cannont display curly brackets <code>{</code>.  (If you can create CSS to do this, please contact the developers!)</p>"},{"location":"en/Authoring/Inputs/Matrix_input/#matrix-of-variable-size-input","title":"Matrix of variable size input","text":"<p>The matrix of variable size input is a textarea into which students type in their answer.</p> <p>Students must separate their matrix elements by spaces, and newline characters.</p> <p>Input box size is used to determine the starting width of the input.</p>"},{"location":"en/Authoring/Inputs/Multiline_input/","title":"Multiline input","text":"<p>Two input types allow students to enter multipule lines.  Each line must be a valid algebraic expression.  The result in Maxima is a list of expressions, one for each line.</p> <p>The syntax hint is initially processed as castext.  This is then assumed to be a Maxima list and re-processed as a Maxima expression. If valid, STACK removes \"noun\" operators, e.g. <code>nounand</code> will be converted to <code>and</code> before the syntax hint is displayed.  Therefore, you can add in a syntax hint of the form <code>[2x+x=?]</code>.  This is unchanged by castext processing.  It is a list, but the contents are not valid Maxima and so are just displayed.</p>"},{"location":"en/Authoring/Inputs/Multiline_input/#text-area","title":"Text area","text":"<p>This input allows the user to type in multiple lines, where each line must be a valid algebraic expression.  STACK passes the result to Maxima as a list. Note, the teacher's answer and any syntax hint must be a list, of valid Maxima exprssions!  If you just pass in an expression strange behaviour may result.</p> <p>If the <code>allowempty</code> tag is used the student's answer will be <code>[EMPTYANSWER]</code> to ensure the type of the student's answer is always a list.</p>"},{"location":"en/Authoring/Inputs/Multiline_input/#equivalence-reasoning-input","title":"Equivalence reasoning input","text":"<p>The purpose of this input type is to enable students to work line by line and reason by equivalence. See the specific documentation for more information:  Equivalence reasoning. Note, the teacher's answer and any syntax hint must be a list!  If you just pass in an expression strange behaviour may result.</p> <p>If the <code>allowempty</code> tag is used the student's answer will be <code>[EMPTYANSWER]</code> to ensure the type of the student's answer is always a list.</p>"},{"location":"en/Authoring/Inputs/Multiple_choice_input/","title":"Multiple choice inputs","text":"<p>The whole point of STACK is not to use multiple-choice questions, but instead to have the student enter an algebraic expression!  That said there are occasions where it is very useful, if not necessary, to use multiple-choice questions in their various forms.  STACK's use of a CAS is then very helpful to generate random variants of multiple-choice questions based on the mathematical values.</p> <p>This can also be one input in a multi-part randomly generated question. E.g. you might say \"which method do you need to integrate ?\" and give students the choice of (i) trig functions first, (ii) parts, (iii) substitution, (iv) replace with complex exponentials.  (Yes, this is a joke: all these methods can be made to work here!)  Another algebraic input can then be used for the answer.</p> <p>If you are new to STACK please note that in STACK MCQs are not the place to start learning how to author questions.  Please look at the authoring quick-start guide.</p> <p>Please read the section on inputs first.</p> <p>STACK provides a number of multiple choice input types including: * Checkbox (students select one or more options from a displayed list) * Radio (students select one option from a list) * Drop down list (a drop-down menu box is added to the question text, from which students select a single option)</p> <p>Multiple choice input types return a CAS object which is then assessed by the potential response tree.  For this reason, these inputs do not provide \"feedback\" fields for each possible answer, as does the Moodle multiple choice input type.</p> <ul> <li>Checkbox inputs return a list of the CAS objects selected;</li> <li>Dropdown inputs and radio inputs return a single expression, which is the CAS object selected.</li> </ul> <p>The goal of these input types is to provide modest facilities for MCQ.  An early design decision was to restrict each of the possible answers to be a CAS expression.  In particular, we decided NOT to make each possible answer CASText.  Adopting CASText would have provided more flexibility but would have significantly increased the complexity of the internal code. If these features are extensively used we will consider a different input type.</p> <p>Example questions are in the stack library under <code>Features\\MCQ_....</code>.</p> <p>It is possible to include plots within MCQ.</p>"},{"location":"en/Authoring/Inputs/Multiple_choice_input/#model-answer","title":"Model answer","text":"<p>This input type uses the \"model answer\" both to input the teacher's answer and the other options. In this respect, this input type is unique, and the \"model answer\" field does not contain just the teacher's model answer.  Constructing a correctly formed model answer is complex, and so this input type should be considered \"advanced\".  New users are advised to gain confidence writing questions with algebraic inputs first, and gain experience in using Maxima lists.</p> <p>The \"model answer\" must be supplied in a particular form as a list of lists <code>[[value, correct(, display)], ... ]</code>.</p> <ul> <li><code>value</code> is the value of the teacher's answer.</li> <li><code>correct</code> must be either <code>true</code> or <code>false</code>.  If it is not <code>true</code> then it will be considered to be <code>false</code>!</li> <li>(optional) <code>display</code> is another CAS expression to be displayed in place of <code>value</code>.  This can be a string value here, but it will be passed through the CAS if you choose the LaTeX display option below.  <code>display</code> is only used in constructing the question.  STACK will take <code>value</code> as the student's answer internally, regardless of what is set here.</li> </ul> <p>For example</p> <pre><code> ta:[[diff(p,x),true],[p,false],[int(p,x),false]]\n</code></pre> <p>At least one of the choices must be considered <code>correct</code>.  However, the <code>true</code> and <code>false</code> values are only used to construct the \"teacher's correct answer\".   You must still use a potential response tree to assess the student's answer as normal.</p> <p>Note the <code>value</code> expression must be constructed with noun functions where a noun alternative exists.  E.g. use <code>%union()</code> (the noun form) not <code>union()</code>.  STACK has to match up what the student selects, and this is an expression they might well type into an algebraic input.  In this situation functions in students' expressions are turned to noun forms.  Hence the teacher must also use noun forms in setting up the MCQ input options.</p> <p>STACK provides some helper functions</p> <ol> <li><code>mcq_correct(ta)</code> takes the \"model answer\" list and returns a list of values for which <code>correct</code> is true.</li> <li><code>mcq_incorrect(ta)</code> takes the \"model answer\" list and returns a list of values for which <code>correct</code> is false.</li> </ol> <p>Note, that the optional <code>display</code> field is only used when constructing the choices seen by the student when displaying the question.  The student's answer will be the <code>value</code>, and this value is normally displayed to the student using the validation feedback, i.e. \"Your last answer was interpreted as...\". A fundamental design principal of STACK is that the student's answer should be a mathematical expression, and this input type is no exception.</p> <p>In situations where there is a significant difference between the optional <code>display</code> and the <code>value</code> which would be confusing, the only current option is to turn off validation feedback.  After all, this should not be needed anyway with this input type.  In the example above when a student is asked to choose the right method the <code>value</code> could be an integer and the display is some kind of string.</p> <p>An example which includes the <code>display</code> option is</p> <pre><code>tacp:[[A, false, \"A. Direct proof\"],  [B, false, \"B. Definition-chasing\"], [C, false, \"C. If and only if\"], [D, false, \"D. Exhaustive cases\"], [E, false, \"E. Induction\"], [F, false, \"F. Contrapositive\"], [G, true, \"G. Contradiction\"]];\n</code></pre> <p>Note in this example the <code>value</code> of the student's answer will be a letter which is literally a Maxima variable name.  In this situation you can't really randomize the letters used easily.  (Not impossible with some cunning code, but a lot of work....)</p> <p>When using checkbox or radio input types, the <code>display</code> value can include LaTeX code. (See below for including mathematics in a drop down input type.) Any <code>\\</code> in the LaTeX code needs to be escaped to <code>\\\\</code>. For example a model answer might be</p> <pre><code> tacp:[[0, true, \"\\\\( \\\\sin(x) \\\\)\"], [1, false, \"\\\\( \\\\cos(x) \\\\)\"], [2, false, \"\\\\( e^x \\\\)\"]]\n</code></pre> <p>If you choose to use an integer, and randomly shuffle the answers then the validation feedback would be confusing, since an integer (which might be shuffled) has no correspondence to the choices selected.  This behaviour is a design decision and not a bug! It may change in the future if there is sufficient demand, but it requires a significant change in STACK's internals to have parallel \"real answer\" and \"indicated answer\". Such a change might have other unintended and confusing consequences.</p> <p>Normally we don't permit duplicate values in the values of the teacher's answer.  If the input type receives duplicate values STACK will throw an error.  This probably arises from poor randomization.  However it may be needed.  If duplicate entries are permitted use the display option to create unique value keys with the same display. This behaviour is a design decision may change in the future.</p> <p>When STACK displays the \"teacher's answer\", e.g. after a quiz is due, this will be constructed from the <code>display</code> fields corresponding to those elements for which <code>correct</code> is <code>true</code>.  I.e. the \"teacher's answer\" will be a list of things which the student could actually select.  Whether the student is able to select more than one, or if more than one is actually included, is not checked.  The teacher must indicate at least one choice as <code>true</code>.</p> <p>If you need \"none of these\" you must include this as an explicit option, and not rely on the student not checking any boxes in the checkbox type.  Indeed, it would be impossible to distinguish the active selection of \"none of these\" from a passive failure to respond to the question.</p>"},{"location":"en/Authoring/Inputs/Multiple_choice_input/#model-answer-nouns","title":"Model answer: nouns","text":"<p>If one of the responses is x=1 \\text{ or } x=2 then use <code>nounor</code> which is commutative and associative.  Do not use <code>or</code> which always simplifies its arguments.  In this example <code>x=1 or x=2</code> evaluates to <code>false</code>.</p> <p>Functions <code>diff</code> and <code>int</code> will evaluate, so you don't have displayed calculus operation.  If one of the responses is a displayed derivative or integral then construct your answer with Maxima's inert forms <code>'diff</code> and <code>'int</code>.</p>"},{"location":"en/Authoring/Inputs/Multiple_choice_input/#model-answer-mathematics-display-in-dropdowns","title":"Model answer: mathematics display in dropdowns","text":"<p>HTML dropdowns cannot display LaTeX within the options.  This is a restriction of HTML/MathJax (not of STACK).  You can use HTML-entities within a string field.  For example</p> <pre><code>ta1:[[0,false,\"n/a\"],[1,true,\"&amp;ge;\"],[2,false,\"&amp;le;\"],[3,false,\"=\"],[4,false,\"?\"]];\n</code></pre> <p>Note here that an integer will returned internally.</p> <p>Similarly, you can include logical symbols. For example</p> <pre><code>ta1:[[0, false, \"&amp;#8658;\"], [1, true, \"&amp;#8656;\"], [2, false, \"&amp;#8660;\"]];\n</code></pre> <p>will give a choice, e.g. a dropdown, from \u21d2, \u21d0 and \u21d4 and an integer will returned internally.</p> <pre><code>ta1:[[0, false, \"&amp;#8704;\"], [1, true, \"&amp;#8707;\"]];\n</code></pre> <p>will give a choice, e.g. a dropdown, from \u2200 and \u2203.</p> <pre><code>ta1:[[0, true, \"c &amp;#8712;\"], [1, false, \"c &amp;#8713;\"]];\n</code></pre> <p>will give a choice, e.g. a dropdown, from \"c \u2208\" and \"c \u2209\".</p> <pre><code>ta1:[[N, false, \"&amp;#8469;\"], [Z, true, \"&amp;#8484;\"], [Q, false, \"&amp;#8474;\"], [R, false, \"&amp;#8477;\"], [C, false, \"&amp;#8450;\"]];\n</code></pre> <p>will give a choice between sets of numbers \u2115, \u2124, \u211a, \u211d, and \u2102.</p>"},{"location":"en/Authoring/Inputs/Multiple_choice_input/#example-degree-of-a-polynomial","title":"Example: degree of a polynomial","text":"<p>Here is an example where the teacher would like the student to state the degree of a polynomial using the adjectives, rather than a number.</p> <pre><code>pol:sum(rand_with_prohib(-9,9,[0])*x^k,k,0,1+rand(5));\ndeg:hipow(pol,x);\n/* Use strings, and not keywords. */\nl1:[\"constant\", \"linear\", \"quadratic\", \"cubic\", \"quartic\", \"quintic\"];\n/* Create a matching list of true/false values as to whether each option is correct. */\na1:maplist(lambda([ex], is(ex=deg)), makelist(k,k,0,length(l1)));\n/* Basic answer list for MCQ in the correct format. This returns the string to the PRT. */\nta1:zip_with(\"[\",l1,a1);\n/* Since lists index at one, you need this for the correct answer! */\ntac:l1[deg+1];\n/* Returns the degree as the student's answer, not the word. */\nta2:maplist(flatten, zip_with(\"[\",makelist(k,k,0,length(l1)), zip_with(\"[\",a1,l1)));\n/* Feedback can turn this into a word using indexing, e.g. l1[ans1+1] in the PRT. */\n</code></pre> <p>Either <code>ta1</code> or <code>ta2</code> can be used with the MCQ inputs, in this case dropdown probably makes most sense and checkbox least sense!  With the <code>ta2</code> option you probably want to hide the validation feedback.</p>"},{"location":"en/Authoring/Inputs/Multiple_choice_input/#internals","title":"Internals","text":"<p>The dropdown and radio inputs return the <code>value</code>, but the checkbox type returns the student's answer as Maxima <code>list</code>, even if they have only chosen one option.</p> <p>The function <code>mcq_correct</code> returns a list, so for dropdown and radio you might need to take the <code>first</code> element when using this function to extract values from the list of teacher's answers.</p> <p>If, when authoring a question, you switch from radio/dropdown to checkboxes or back, you will probably break a PRT because of mismatched types.</p> <p>For the select and radio types the first option on the list will always be \"Not answered\".  This enables a student to retract an answer and return a \"blank\" response.</p> <p>For the checkbox type there is a fundamental ambiguity between a blank response and actively not selecting any of the provided choices, which indicates \"none of the others\".  Internally STACK has a number of \"states\" for a student's answer, including <code>blank</code>, <code>valid</code>, <code>invalid</code>, <code>score</code> etc.  A student who has not answered will be considered <code>blank</code>, which is different from invalid.  Potential response trees which rely on this input type will not activate until the state is <code>score</code>.</p> <p>To enable a student to indicate \"none of the others\", the teacher must add this as an explicit option in all MCQ types.  If you add an option \"none of the others\" then it will return the <code>value</code> of that selection: you could give this the value of <code>null</code>, for example, which is a Maxima atom.  We did not add support for a special internal \"none of the others\" because the teacher still needs to indicate whether this is the true or false answer to the question.  To support randomisation, this needs to be done as an option in the teacher's answer list.</p> <p>The radio and dropdown types always add a \"not answered\" option as the first option.  This allows a student to retract their choice, otherwise they will be unable to \"uncheck\" a radio button, which will be stored, validated and possibly assessed (to their potential detriment).  If you want to remove this then use the extra option <code>nonotanswered</code>, but keep in mind the possible effect when using the penalty scheme.</p> <p>If one of the items in the teacher's answer list is is the special variable name <code>notanswered</code>, and then default message <code>(Clear my choice)</code> will be replaced by the <code>display</code> value.  If no <code>display</code> value is given (and it is optional) then the original message will remain.  <code>notanswered</code> will not appear in the list of valid choices for a user and <code>value</code> for this input is ingored.</p>"},{"location":"en/Authoring/Inputs/Multiple_choice_input/#extra-options","title":"Extra options","text":"<p>These input types make use of the \"Extra options\" field of the input type to pass in options.  These options are not case sensitive. This must be a comma-separated list of values as follows.</p> <p>The way the items are displayed can be controlled by the following options.</p> <ul> <li><code>LaTeX</code> The default option is to use LaTeX to display the options, using an inline maths environment <code>\\(...\\)</code>.  This is probably better for radio and checkboxes.  It sometimes works in dropdowns, but not always and we need to test this in a wider variety of browsers.</li> <li><code>LaTeXdisplay</code> use LaTeX to display the options, using the display maths environment <code>\\[...\\]</code>.</li> <li><code>LaTeXinline</code> use LaTeX to display the options, using the inline maths environment <code>\\(...\\)</code>.</li> <li><code>LaTeXdisplaystyle</code> use LaTeX to display the options, using the inline maths environment and the displaystyle option <code>\\(\\displaystyle...\\)</code>.</li> <li><code>casstring</code> does not use the LaTeX value, but just prints the casstring value in <code>&lt;code&gt;...&lt;/code&gt;</code> tags.</li> <li><code>nonotanswered</code> removes the ``Not answered'' option from radio and dropdown.  This is not recommended as it means a student has no opportunity to \"uncheck\" a radio button once selected.  They may wish not to answer, rather than save an incorrect answer.</li> <li><code>allowempty</code> is supported by MCQ inputs.</li> </ul>"},{"location":"en/Authoring/Inputs/Multiple_choice_input/#randomly-shuffling-the-options","title":"Randomly shuffling the options","text":"<p>To randomly shuffle the options create the list in the question variables and use the Maxima command <code>random_permutation</code> in the question variables.</p> <p>For example, the question variables might look like the following.</p> <pre><code>/* Create a list of potential answers. */\np:sin(2*x);\nta:[[diff(p,x),true],[p,false],[int(p,x),false],[cos(2*x)+c,false]];\n/* The actual correct answer.    */\ntac:diff(p,x)\n/* Randomly shuffle the list \"ta\". */\nta:random_permutation(ta);\n/* Add in a \"None of these\" to the end of the list.  The Maxima value is the atom null. */\ntao:[null, false, \"None of these\"];\nta:append(ta,[tao]);\n</code></pre> <p>These commands ensure (1) the substantive options are in a random order, and (2) that the <code>None of these</code> always comes at the end of the list. Note, the value for the <code>None of these</code> is the CAS atom <code>null</code>. In Maxima <code>null</code> has no special significance but it is a useful atom to use in this situation.</p> <p>As the Question Note, you might like to consider just taking the first item from each list, for example:</p> <pre><code>{@maplist(first,ta)@}.  The correct answer is {@tac@}.\n</code></pre> <p>This note stores both the correct answer and the order shown to the student without the clutter of the <code>true/false</code> values or the optional display strings. Remember, random variants of a question are considered to be the same if and only if the question note is the same, so the random order must be part of the question note if you shuffle the options.</p>"},{"location":"en/Authoring/Inputs/Multiple_choice_input/#constructing-mcq-arrays-in-maxima","title":"Constructing MCQ arrays in Maxima","text":"<p>It is not easy to construct MCQ arrays in Maxima.  This section contains some tips for creating them, using Maxima's <code>lambda</code> command. Below is an example of a correctly constructed teacher's answer.</p> <pre><code>ta:[[x^2-1,true],[x^2+1,false],[(x-1)*(x+1),true],[(x-i)*(x+i),false]]\n</code></pre> <p>To create a list of correct answers you could use the function <code>mcq_correct(ta)</code>.  This essentially consists of the following code.</p> <pre><code>maplist(first, sublist(ta, lambda([ex], second(ex))));\n</code></pre> <p>The function <code>sublist</code> \"filters\" out those entries of <code>ta</code> for which the second element of the list is true. We then \"map\" first onto these entries to pull out the value. It is relatively simple to modify this code to extract the incorrect entries, the displayed forms of the correct entries etc.</p> <p>To go in the other direction, the first list <code>ta1</code> is considered \"correct\" and the second <code>ta2</code> is considered incorrect.</p> <pre><code>ta1:[x^2-1,(x-1)*(x+1)];\nta1:maplist(lambda([ex],[ex, true]), ta1);\nta2:[x^2+1,(x-i)*(x+i)];\nta2:maplist(lambda([ex],[ex, false]), ta2);\nta:append(ta1,ta2);\n/* If you want to shuffle the responses then use the next line. */\nta:random_permutation(ta);\n</code></pre> <p>Also, you can use STACK's <code>rand_selection(L, n)</code> to select n different elements from the list L. Say you have the following list of wrong answers and you want to take only 3 out of 5.</p> <pre><code>ta2:[x^2,w^2,w^6,z^4,2*z^4];\nta2:rand_selection(ta2, 3);\n/* Then, as before. */\nta2:maplist(lambda([ex],[ex, false]), ta2);\n</code></pre> <p>Another way to create an MCQ answer list is to have Maxima decide which of the answers are true. For example, in this question the student has to choose which of the answers are integers.</p> <pre><code>L:[1,4/2,3.0,2.7,1/4,%pi,10028];\n/* Map the appropriate predicate to the list to create the true/false list. */\nA:maplist(integerp,L);\n/* Note the use of zip_with together with the list constructing function \"[\". */\nta:zip_with(\"[\",L,A);\n/* If you want to shuffle the responses then use the next line. */\nta:random_permutation(ta);\n</code></pre>"},{"location":"en/Authoring/Inputs/Multiple_choice_input/#mcq-helper-functions","title":"MCQ helper functions","text":"<p>STACK has helper functions to create MCQ arrays in Maxima.</p> <pre><code>[ta, variant] = multiselqn(corbase, numcor, wrongbase, numwrong)\n</code></pre> <p>This function takes two lists <code>corbase</code> and <code>wrongbase</code> and two integers <code>numcor</code> and <code>numwrong</code>. It randomly selects <code>numcor</code> from <code>corbase</code>, and <code>numwrong</code> from <code>wrongbase</code> and then creates the MCQ list <code>ta</code> with these selections, and an answernote <code>variant</code>.</p> <p>The function returns a list with two arguments. The first argument of the list is the MCQ array, the second is just the list of answers which is useful for the answer note. Note, this function does use <code>random_permutation</code> internally to randomly order the random selections.</p> <p>For example, the following generates random expressions for an MCQ calculus question.  Note the use of <code>ev(...)</code> later to evaluate the derivative.</p> <pre><code>trg:rand([sin(p), cos(p)]);\ndtrg:diff(trg, p);\nwrongbase:[a*trg, 2*a*x*trg, -2*a*x*trg, ev(dtrg, p=2*a*x), 2*a*x*ev(dtrg, p=2*a*x)];\np:a*x^2+b;\nwrongbase:ev(wrongbase); /* Now we have a value for p, the extra evaluation will use it. */\nans:diff(ev(trg), x);\nmultisel:multiselqn([ans], 1, wrongbase, 3);\nta:multisel[1];\nvariant:multisel[2];\n</code></pre> <p>In the above example there is only one correct answer, so we just select <code>1</code> from <code>[ans]</code>. This is fine, and we then choose three randomly generated wrong answers.</p> <p>This returns (for example) the values</p> <pre><code>ta = [[-2*a*x*cos(a*x^2+b),false],[-sin(2*a*x),false],[a*cos(a*x^2+b),false],[-2*a*x*sin(a*x^2+b),true]];\nvariant = [-2*a*x*cos(a*x^2+b),-sin(2*a*x),a*cos(a*x^2+b),-2*a*x*sin(a*x^2+b)];\n</code></pre> <p>The following function does a similar job when we have MCQ display strings.</p> <pre><code>[ta, variant] = multiselqndisplay(corbase, numcor, wrongbase, numwrong)\n</code></pre> <p>For example, here the return values could be</p> <pre><code>ta = [[3,false,2*a*x*sin(a*x^2+b)],[2,false,a*sin(a*x^2+b)],[5,false,cos(2*a*x)],[1,true,2*a*x*cos(a*x^2+b)]]\nvariant = [3,2,5,1]\n</code></pre> <p>The function <code>multiselqndisplay</code> automatically assigns numbers 1,\\cdots, k to the <code>corbase</code> entries, and then k+1,\\cdots, n to the <code>wrongbase</code> entries so that the numbers returned by the input type uniquely map to the entries in the two lists regardless of which random variant is generated.  These numbers are useful internally, but not for students.</p> <p>The function <code>multiselqnalpha</code> automatically selects the appropriate number of correct and incorrect entries, permutes the list and then assigns strings <code>\"(a)\"</code>, <code>\"(b)\"</code>, <code>\"(c)\"</code> etc. in the correct order. The student's answer will thus be a list of strings (somewhat subverting the whole purpose of STACK in returning a genuine mathematical expression, but this has its place...).</p> <pre><code>[ta, variant] = multiselqnalpha(corbase, numcor, wrongbase, numwrong, [dispstyle])\n</code></pre> <p>For example, here the return values (with inline maths) could be</p> <pre><code>ta = [[\"(a)\",false,\"&lt;b&gt;(a)&lt;/b&gt; \\\\(-2\\\\,a\\\\,x\\\\,\\\\sin \\\\left( a\\\\,x^2+b \\\\right)\\\\)\"],[\"(b)\",true,\"&lt;b&gt;(b)&lt;/b&gt; \\\\(2\\\\,a\\\\,x\\\\,\\\\cos \\\\left( a\\\\,x^2+b \\\\right)\\\\)\"],[\"(c)\",false,\"&lt;b&gt;(c)&lt;/b&gt; \\\\(\\\\cos \\\\left( 2\\\\,a\\\\,x \\\\right)\\\\)\"],[\"(d)\",false,\"&lt;b&gt;(d)&lt;/b&gt; \\\\(2\\\\,a\\\\,x\\\\,\\\\cos \\\\left( 2\\\\,a\\\\,x \\\\right)\\\\)\"]]\nvariant = [-2*a*x*sin(a*x^2+b),2*a*x*cos(a*x^2+b),cos(2*a*x),2*a*x*cos(2*a*x)]\n</code></pre> <p>Notes</p> <ol> <li>The fifth optional argument to <code>multiselqnalpha</code> controls the display style of the LaTeX.  Use <code>\"i\"</code> (a string containing <code>i</code>) for inline, <code>\"d\"</code> for displayed and <code>\"id\"</code> for inline \"displaystyle\" (which is the default).</li> <li>Note that the \"student's\" answer will now be a string such as <code>\"(a)\"</code>.  When you construct the PRT you will not need to check against these strings, not the original CAS expressions.</li> <li>The <code>variant</code> retains the CAS statements, in order.</li> <li>Do not use <code>multiselqnalpha</code> in conjunction with the <code>shuffle</code> option.  There is no need as the selection are permuted, and it messes up the order of the choices for the student.</li> </ol>"},{"location":"en/Authoring/Inputs/Multiple_choice_input/#dealing-with-strings-in-mcq","title":"Dealing with strings in MCQ","text":"<p>A likely situation is that a teacher wants to include a language string as one of the options for a student's answer in a multiple-choice question.</p> <p>Recall: A fundamental design principal of STACK is that the student's answer should be a mathematical expression which can be manipulated by the CAS as a valid expression. Students are very limited in the keywords they are permitted to use in an input type. It is very likely that strings will contain keywords forbidden in student expressions.</p> <p>One option to overcome this is to do something like this as one option in the teacher's response:</p> <pre><code>[C, false, \"(C) None of the other options\"]\n</code></pre> <p>The optional display part of this input is displayed to the student.  Their answer is the (valid) CAS atom <code>C</code> which the PRT will deal with appropriately.</p> <p>To construct appropriate arrays use the <code>multiselqnalpha</code> function.</p> <p>The quotation marks will be removed from strings, and the strings will not be wrapped <code>&lt;code&gt;...&lt;/code&gt;</code> tags or LaTeX mathematics environments.</p> <p>Question authors should consider using the Moodle MCQ question type in addition to these facilities for purely text-based answers.</p> <p>You must protect characters within strings.  E.g. in</p> <pre><code>[A, true, \"A. There exists \\\\(M\\\\) such that \\\\( |a_n| &amp;lt; M \\\\).\"]\n</code></pre> <p>We have protected the backslash, and the inequality.</p> <p>The language strings are not CAStext, they are simply raw strings.  It is possible to construct strings which include variable values using the <code>stack_disp</code> function.</p> <pre><code>[oc(-inf,a), false, sconcat(\"The half interval: \", stack_disp(oc(-inf,a),\"i\"))]\n</code></pre> <p>The argument <code>\"i\"</code> here displays the expression \"inline\", other options are <code>\"\"</code> (you are responsible for maths environments), <code>\"d\"</code> (displayed), and <code>\"di\"</code> (inline but using displaystyle).  If you construct strings in this way the display of any equations will not respect the display options in the particular input since variables are typically defined in the question variables and the input options are not available at that point in the code base.</p> <p>For checkbox and radio inputs you could add modest HTML style to your strings.  E.g.</p> <pre><code>ta:[[A, false, \"(A) This is &lt;b&gt;bold&lt;/b&gt;\"], [B, true, \"(B) this is &lt;em&gt;emphasis&lt;/em&gt;\"]];\n</code></pre> <p>Dropdown lists are created with the HTML <code>&lt;select&gt;</code> and <code>&lt;option&gt;</code> elements.  There is no support for HTML (or LaTeX) within dropdown lists.  You can use HTML-entities within a string field: see the separate documentation on this. </p>"},{"location":"en/Authoring/Inputs/Multiple_choice_input/#castextlabels","title":"Inline CASText as MCQ labels","text":"<p>Since 4.4 it has been possible to write more complex labels using inline CASText. Inline CASText is basically a static string value wrapped in special function call and how one would use it is as follows:</p> <pre><code>/* The old way of constructing a string: */\n[oc(-inf,a), false, sconcat(\"The half interval: \", stack_disp(oc(-inf,a),\"i\"))]\n/* Same using a inline CASText */\n[oc(-inf,a), false, castext(\"The half interval: {@oc(-inf,a)@}\")]\n</code></pre> <p>You may write normal CASText syntax inside that string and it should behave exactly like it does in question-text or PRT feedback etc.. The only limitation at this time is that the list that includes these labels must be defined in the question-variables, you may not write inline CASText directly to the model answer field of the input. The <code>castext()</code>-function is not a real CAS-function it is converted to more complex logic at compile time and therefore it must receive a static string as its argument.</p> <p>The most obvious use case for inline CASText is to provide localisation inside MCQ labels in situations where the mlang2-filter is not an option:</p> <pre><code>[true, true, castext(\"[[lang code='en']]Yes[[/lang]][[lang code='fi']]Kyll\u00e4[[/lang]]\")]\n</code></pre>"},{"location":"en/Authoring/Inputs/Multiple_choice_input/#partial-marking-for-mcqs","title":"Partial Marking for MCQs","text":"<p>Due to the wide variety of partially correct options in a typical MCQ, the usual method of creating a node in a PRT for each partially correct option and then traversing the tree is both brittle and unwieldy. To get around this, you can use the fact that the Score in a PRT can be defined by a Maxima value between 0 and 1 to dynamically generate the score.</p> <p>The following example (written in the feedback variables of a PRT with student solution called <code>ans1</code> and the MCQ called <code>MCQ</code>) checks if the student has checked any incorrect solutions, and if they have assigns them 0. If they haven't, it assigns them the fraction they got correct:</p> <pre><code> incorrectInputs : sublist(ans1, lambda([x], member(x, mcq_incorrect(MCQ))));\n mark : if emptyp(incorrectInputs) then length(ans1) / length(mcq_correct(MCQ)) else 0;\n</code></pre> <p>In this example, the output value <code>mark</code> can be placed into the Score of the false route in the MCQ PRT to get the desired marking.</p>"},{"location":"en/Authoring/Inputs/Multiple_choice_input/#writing-question-tests","title":"Writing question tests","text":"<p>Quality control of questions is important.  See the notes on testing questions.</p> <p>When entering test cases the question author must type in the CAS expression they expect to be the <code>value</code> of the student's answer (NOT the optional <code>display</code> field!).  For example, if the teacher's answer (to a checkbox) question is the following.</p> <pre><code> ta:[[x^2-1,true],[x^2+1,false],[(x-1)*(x+1),true],[(x-i)*(x+i),false]]\n</code></pre> <p>Then the following test case contains all the \"true\" answers.</p> <pre><code> [x^2-1,(x-1)*(x+1)]\n</code></pre> <p>There is currently minimal checking that the string entered by the teacher corresponds to a valid choice in the input type.  If your test case returns a blank result this is probably the problem.</p>"},{"location":"en/Authoring/Inputs/Multiple_choice_plots/","title":"Dealing with plots in MCQ","text":"<p>It is possible to use plots as the options in a STACK MCQ, either Maxima-generated plots or external images.</p> <p>By design, the value of an MCQ selection are limited to legitimate CAS objects. The <code>plot</code> command returns a string which is the URL of the dynamically generated image on the server. The \"value\" of this can't be assessed by the potential response trees. For this reason you must use the display option with plots and must only put the plot command in the display option.</p> <p>For example, to create a correct answer consisting of three plots consider the following in the question variables.</p> <pre><code>p1:plot(x,[x,-2,2],[y,-3,3])\np2:plot(x^2,[x,-2,2],[y,-3,3])\np3:plot(x^3,[x,-2,2],[y,-3,3])\nta:[[1,true,p1],[2,false,p2],[3,false,p3]]\n</code></pre> <p>The actual CAS value of the answer returned will be the respective integer selected (radio or dropdown) or list of integers (checkbox).  The PRT can then be used to check the value of the integer (or list) as normal.</p> <p>For this reason you will probably want to switch off the validation feedback ``your last answer was...\".</p>"},{"location":"en/Authoring/Inputs/Multiple_choice_plots/#dealing-with-external-images-in-mcq","title":"Dealing with external images in MCQ","text":"<p>It is also possible to embed the URL of an externally hosted image as the \"display\" field of an MCQ. The string is not checked, and is also passed through the CAS. This feature is fragile to being rejected as an invalid CAS object, and so is not recommended.  (This could also be improved...)</p> <p>For example, the question variables could be something like</p> <pre><code>i1:\"&lt;img src='http://www.maths.ed.ac.uk/~csangwin/Pics/z1.jpg' /&gt;\"\ni2:\"&lt;img src='http://www.maths.ed.ac.uk/~csangwin/Pics/z2.jpg' /&gt;\"\ni3:\"&lt;img src='http://www.maths.ed.ac.uk/~csangwin/Pics/z3.jpg' /&gt;\"\nta:[[1,true,i1],[2,false,i2],[3,false,i3]]\n</code></pre>"},{"location":"en/Authoring/Inputs/Numerical_input/","title":"Numerical input","text":"<p>This is reference documentation for the numerical input type.</p> <p>This input type requires the student to type in a number of some kind.</p> <ul> <li>Any expression with a variable will be rejected as invalid.</li> </ul> <p>While variable names are forbidden, by default function names are not forbidden.  <code>sin(pi/2)</code> represents a number.  If you actually want the student to type in <code>1</code> you need to forbid <code>sin</code> in the normal way using the forbidden words.</p> <p>This input type will preserve trailing zeros in a student's answer.  For example, <code>0.00100</code> will keep the two trailing zeros. By default Maxima removes these, and these will also be removed in the algebraic input.</p> <p>Note, some things (like forbid floats) can be applied to any numbers in an algebraic input, other tests (require n decimal places) cannot and can only be applied to a single number in this input type.</p>"},{"location":"en/Authoring/Inputs/Numerical_input/#options","title":"Options","text":"<p>The \"Extra options\" field on the input must be a comma separated list of the following tags.  Note, these options may not depend on the question variables.</p> <p><code>floatnum</code>:  requires the student's answer to be a floating-point number, as judged by Maxima's <code>floatnump</code> predicate.  E.g. to use this and other Boolean options type <code>floatnum:true</code> etc. as a comma separated list in the extra options field.</p> <p><code>intnum</code>:  requires the student's answer to be an explicit integer.  E.g. <code>6</code> is valid, but <code>2*3</code>, <code>12/2</code> etc. are invalid.</p> <p><code>rationalnum</code>:  requires the student's answer to be a rational number (i.e. a fraction), as judged by STACK's <code>rational_numberp</code> predicate.  Integers are excluded here!</p> <p><code>rationalized</code>:  requires the denominator of any fractions in the student's answer to be free of surds and , as judged by STACK's <code>rationalized</code> function.</p> <p><code>mindp:n</code>: requires the student to type in <code>n</code> or more decimal places.</p> <p><code>maxdp:n</code>: requires the student to type in at most <code>n</code> decimal places.</p> <p><code>minsf:n</code>: requires the student to type in <code>n</code> or more significant figures.</p> <p><code>maxsf:n</code>: requires the student to type in at most <code>n</code> significant figures.</p> <p>You cannot specify both decimal places and significant figures (even if they are min for one and max for the other).</p> <p>If <code>mindp=maxdp=n</code> or <code>minsf=maxsf=n</code> then a student will be told to type in exactly <code>n</code> places/figures.</p> <p>Note, where there is ambiguity in the number of significant figures (e.g. does 100 have 1 or 3 significant figures?) then the student will be given the benefit of the doubt.</p>"},{"location":"en/Authoring/Inputs/Text_input/","title":"Text-based inputs in STACK","text":"<p>Sometimes it is necessary for students to type in text, rather than an interpreted mathematical expression.</p> <p>Some of the dynamic question blocks, e.g. the Parsons block, create a JSON object.  The only way to store state in STACK is via an input, and so a text-based input is used to store this state.</p>"},{"location":"en/Authoring/Inputs/Text_input/#string-input","title":"String input","text":"<p>This is a normal input into which students may type whatever they choose.  It is always converted into a Maxima string internally. Notes</p> <ol> <li>There is no way whatsoever to parse the student's string into a Maxima expression.  If you accept a string, then it will always remain a string! You can't later check for algebraic equivalence. The only tests available will be simple string matches, etc.</li> <li>An empty answer will be blank unless you use the <code>allowempty</code> option in which case the answer will be interpreted as an empty string, i.e. <code>\"\"</code> rather than <code>EMPTYANSWER</code> as would be the case with other inputs.</li> <li>STACK does some sanitation on students' input within strings to stop students typing in HTML code.  For example, you may find that a string <code>\"a&lt;b\"</code> actually ends up in Maxima with the less-than sign inside the string changed into an html entity <code>&amp;lt;</code>, so your string inside Maxima becomes <code>\"a&amp;lt;b\"</code>.  In cases where string matches unexpectedly fail, look at the testing page to see what is actually being compared within the PRT and re-build the teacher's answer to match.</li> </ol>"},{"location":"en/Authoring/Inputs/Text_input/#json-input","title":"JSON input","text":"<p>The JSXGraph, GeoGebra and Parsons blocks return a JSON object.  When linking to a STACK input we recommend using the dedicated JSON/Geogebra/Parsons inputs rather than the string input.  String inputs will continue to work (maintaining legacy JSXGraph questions), but using the JSON input for inputs linked to JSXGraph logically indicates the expected type of string.</p> <p>This input gives the teacher a JSON pretty print view of the JSON object for debugging.</p>"},{"location":"en/Authoring/Inputs/Text_input/#notes-input","title":"Notes input","text":"<p>This input is a text area into which students may type whatever they choose.  It can be used to gather their notes or \"working\".  However, this input is always considered as \"invalid\", so that any potential response tree which relies on this input will never get evaluated!</p> <p>This input type can be used for</p> <ol> <li>surveys;</li> <li>answers which are not automatically marked, contributing to semi-automatic marking.</li> </ol> <p>The notes input has a special extra option <code>manualgraded</code>, and the default option value is <code>manualgraded:false</code>.  If you specify <code>manualgraded:true</code> then the whole STACK question will require manual grading!</p> <p>Note, for consistency with other inputs the teacher must still supply an answer, e.g. the empty string <code>\"\"</code>.  This answer is not used.</p>"},{"location":"en/Authoring/Inputs/Text_input/#parsons-input","title":"Parsons input","text":"<p>A special Parsons input, is available to store the JSON object generated by the Parsons block.</p>"},{"location":"en/Authoring/Question_blocks/","title":"Question blocks","text":""},{"location":"en/Authoring/Question_blocks/#introduction","title":"Introduction","text":"<p>Question blocks add flexibility to STACK questions by adding functional structures to the CASText.  These are new from v4.0 onwards.</p> <p>For example, you can add in a conditional statement to selectively include materials in the version of the CASText depending on values of variables. This is useful in randomly generated contexts, especially within model solutions and randomly generated diagrams/charts.</p> <p>For maximum flexibility, blocks can be nested and conditionally evaluated. A body of CASText is then repeatedly processed until all blocks have been interpreted into CASText. This is a core part of CASText and so applied to all appropriate parts of the question.</p> <p>Information on some blocks are contained in a question available from the STACK question library in the <code>doc-examples\\authoring</code> directory.  </p> <p>Note:  The parameters to blocks in the question body may NOT depend on the student's answers. This means that you cannot reveal an input block based on student input, well not just by using an <code>[[if/]]</code>-block. For this purpose you can use dynamic blocks like the hint block or the adapt block. </p>"},{"location":"en/Authoring/Question_blocks/#block-groups","title":"Block groups","text":"<p>Question blocks are divided into three broad groups.</p> <ol> <li>Static blocks, which are active when a question version is created.</li> <li>Lang</li> <li>Comment</li> <li>Todo</li> <li>Debug</li> <li>Format</li> <li>Textdownload</li> <li>Include</li> <li>QUID</li> <li>Template</li> <li>Hints/fact sheets</li> <li>Entity escape</li> <li>Conditional blocks, for looping and branching and programatic structures.</li> <li>Define</li> <li>If</li> <li>Foreach</li> <li>Dynamic blocks, which manage features like Javascript and JSXGraph components.</li> <li>Reveal</li> <li>Hint</li> <li>Adapt</li> <li>JSXGraph</li> <li>JSString</li> <li>Geogebra</li> <li>Parsons</li> <li>JavaScript</li> <li>System blocks, which are not realy intended for end-users.</li> <li>Iframe blocks, which allow creation of sandboxed iframes that can be included in the output.</li> <li>Iframe</li> <li>Style</li> <li>Script</li> </ol>"},{"location":"en/Authoring/Question_blocks/#general-syntax","title":"General syntax","text":"<p>The syntax is quite similar to XML but preserving the style <code>[[ ... ]]</code> used in the inputs and potential response tree declarations.</p> <pre><code>[[ block_type param1=\"value1\" param2='value2' ... paramN=\"valueN\" ]]\nSome content.\n[[/ block_type ]]\n</code></pre> <p>This syntax avoids issues with the rich text editors used in Moodle but it is still recommended to use the plain text editor to avoid excess line changes and white space generated by the WYSIWYG editors.</p> <p>Notes</p> <ol> <li>In closing a block you must use <code>[[/ \"blockname\"]]</code> where <code>\"blockname\"</code> must be used, and it must match the previous opening block.  </li> <li>White space is tolerated in block definitions and after the <code>/</code> in the closing block, but is not necessary.</li> <li>The parameters have the following syntax:  <code>param1=\"value1\"</code>.  Blocks define what are valid identifiers and parameters.  The identifiers must not be in quotes (and so cannot contain spaces).  The parameters must be in quotes, and either <code>param1=\"value1\"</code> or <code>param1='value1'</code> is accepted.</li> <li>Typically <code>param1</code> will be a valid Maxima identifier, e.g. a variable name and the value would be a valid Maxima expression.</li> <li>The parameter value must be surrounded by quotes, and both <code>\"value\"</code> and <code>'value'</code> are accepted.</li> </ol>"},{"location":"en/Authoring/Question_blocks/#empty-blocks","title":"Empty blocks","text":"<p>Some blocks do not have content.  For example, the <code>[[ define x='1' /]]</code> block does not include content. The following is correct syntax:</p> <pre><code>[[ define x='1']][[/ define]]\n</code></pre> <p>But we think the following is much more direct, and clean.</p> <pre><code>[[ define x='1' /]]\n</code></pre> <p>There are other kinds of <code>[[ emptyblocks /]]</code>, which are useful in certain cases and developers of new blocks might like to consider this as a possibility.</p> <p>While the define block does not generate any visible content, empty blocks may be used to generate output. For example <code>[[ debug /]]</code> does generate output.</p>"},{"location":"en/Authoring/Question_blocks/Conditional_blocks/","title":"Conditional blocks","text":""},{"location":"en/Authoring/Question_blocks/Conditional_blocks/#conditional-blocks","title":"Conditional blocks","text":""},{"location":"en/Authoring/Question_blocks/Conditional_blocks/#if-blocks","title":"If blocks","text":"<p>The common if statement is written as:</p> <pre><code>[[ if test=\"some_CAS_expression_evaluating_to_true_or_false\" ]]\nThe expression seems to be true.\n[[/ if ]]\n</code></pre> <p>The if block requires a parameter called <code>test</code> and the value must be a Maxima expression which evaluates to <code>true</code> or <code>false</code>.</p> <p>The if block uses a special syntax expansion that provides it a way to handle else cases. For example,</p> <pre><code>[[ if test='oddp(rand(5))' ]]\nThis is an odd block!\n[[ else ]]\nThis is an even block!\n[[/ if]]\n</code></pre> <p>There is an else if type of structure using elif (Python coders won the syntax selection vote),</p> <pre><code>[[ if test='oddp(var)' ]]\nThis is an odd block!\n[[ elif test='is(var=0)' ]]\nIt might be even but it is also zero.\n[[ else ]]\nThis is an even block!\n[[/ if]]\n</code></pre> <p>Note that you may have to evaluate your expression explicitly.  Maxima does not always evaluate predicates to <code>true</code> or <code>false</code>.  For example, you might expect <code>p&lt;1</code> in the following to evaluate to <code>true</code>.</p> <pre><code>[[ define p=\"0\" /]] \\(p\\) is now {@p@}.\n[[ if test=\"p&lt;1\"]]\n\\(p\\) is less than 1.\n[[ else ]]\n\\(p\\) is not less than 1.\n[[/ if ]]\n</code></pre> <p>However, it remains unevaluated. The true branch is therefore not satisfied. Since 4.4 the behaviour of this block matches normal if-else behaviour in Maxima, you may still meet this problem if you happen to turn simplification off.</p> <p>To address this explicitly evaluate your expressions as predicates.</p> <pre><code>[[ if test=\"is(p&lt;1)\"]]\n</code></pre> <p>Teachers can also use evaluation with simplification and predicates as follows:</p> <pre><code>[[ if test=\"ev(p&lt;1,simp,pred)\"]]\n</code></pre> <p>It is the responsibility of the question author to ensure that every test in an if block evaluates to <code>true</code> or <code>false</code>.</p>"},{"location":"en/Authoring/Question_blocks/Conditional_blocks/#foreach-loop","title":"Foreach loop","text":"<p>Foreach blocks iterate over lists or sets and repeat their content redefining variables for each repetition.</p> <pre><code>[[ foreach x=\"[1,2,3]\" ]]{#x#} [[/ foreach ]]\n</code></pre> <p>You may have multiple variables and they will be iterated over in sync and the variables may also come from Maxima. Should one of the lists or set be shorter/smaller the iteration will stop when the first one ends.</p> <pre><code>[[ foreach x=\"[1,2,3]\" y=\"makelist(x^2,x,4)\" ]] ({#x#},{#y#}) [[/ foreach ]]\n</code></pre> <p>Because the foreach block needs to evaluate the lists/sets before it can do the iteration, using foreach blocks will require one additional CAS evaluation for each nested level of foreach blocks. This has not applied since 4.4. no additional cost is related to this block and it is recommended that any repetition that can be removed is removed using this block.</p>"},{"location":"en/Authoring/Question_blocks/Conditional_blocks/#define-block","title":"Define block","text":"<p>The define block is a core component of the foreach block, but it may also be used elsewhere. Its function is to change the value of a CAS variable in the middle of CASText. For example:</p> <pre><code>[[ define x='1' /]] {#x#}, [[ define x='x+1' /]] {#x#}, [[ define x='x+1' /]] {#x#}\n</code></pre> <p>should print \"1, 2, 3\". You may define multiple variables in the same block and the order of define operations is from left to right so \"[[ define a='1' b='a+1' c='a+b' /]] {#a#}, {#b#}, {#c#}\" should generate the same output.</p> <p>Note, the use of define provides an alternative to using the question variables.  Variables here are defined on the fly.  However, we do not recommend this is done routinely.</p> <ol> <li>the readability of the code will suffer.</li> <li>question variables are available elsewhere in the question, but <code>define</code> blocks are only available in that CASText.  This feature can also be used to your advantage.</li> </ol>"},{"location":"en/Authoring/Question_blocks/Conditional_blocks/#implodesimplode","title":"Implode/simplode","text":"<p>If we want to display a sum with an unknown number of terms, functions like \"implode\" (<code>simplode</code> in Maxima) are essential. E.g. <code>simplode([\"a\", \"b\", \"c\"], \" + \")</code> gives '\"a + b + c\"' on the Maxima command line.</p> <p>The foreach block can be combined with a define block to create an \"implode\".</p> <p>Let <code>L1:[a,b,c]</code> be the terms you want to add, then</p> <pre><code>\\[\n[[define _first='true'/]]\n[[foreach ex='L1']]\n[[if test='not _first']] + [[else]][[define _first='false'/]][[/if]]\n{@ex@}\n[[/foreach]]\n\\]\n</code></pre> <p>The term <code>{@ex@}</code> can, of course, be replaced by more complex expressions where we don't simply have a list of terms to add together.</p> <p>Note, that this approach is working at the level of display.  If you have unary minus in play, e.g. <code>L1:[a,-b,c]</code> then you will end up with output like <code>\\[ {a} + {-b} + {c} \\]</code>.  To process unary minus you should construct a mathematical object without simplification and let STACK's display routines decide when <code>a+(-b)</code> should be displayed as <code>a-b</code>.</p>"},{"location":"en/Authoring/Question_blocks/Dynamic_blocks/","title":"Dynamic blocks","text":"<p>Dynamic blocks deal with dynamic content such as Javascript and JSXGraphs.  Many of the dynamic blocks are designed for use with specialist tools.</p>"},{"location":"en/Authoring/Question_blocks/Dynamic_blocks/#reveal-block","title":"Reveal block","text":"<p>This block allows sections of text to be shown or hidden based on the value of an input.</p> <pre><code>[[reveal input=\"ans1\" value=\"true\"]]\nText shown when the value of input `ans1` is `true`.\n[[/reveal]]\n</code></pre> <p>The block will only do singular direct string match, and so use of this block is most likely to be useful when combined with true/false or other multiple choice input types.  An example question using this feature is provided in the sample questions.</p> <p>There is currently no \"else\" clause available with this block.</p> <p>An example question is available by importing <code>Doc-Examples\\Authoring-Docs\\Question-blocks\\Reveal_block_example.xml</code>.</p> <p>*Note the contents of all reveal blocks are within the page.  Some may be visible and some hidden, controlled by JavaScript.  Therefore, a student can inspect the page and see all blocks.  While this doesn't matter too much in formative settings, be aware of the possibility of revealing useful information in online exam settings.</p>"},{"location":"en/Authoring/Question_blocks/Dynamic_blocks/#interaction-with-mcq-input-types","title":"Interaction with MCQ input types","text":"<p>The reveal block can be used in conjunction with MCQ input types to provide an input, e.g. algebraic, for \"other\".  Here is a very minimal example.  Put the following in the question variables.</p> <pre><code>ta1:[[a,false],[b,false],[c,false],[d,false],[X,true,\"Other\"]];\nta2:x^2;\n</code></pre> <p>Use the following question text.</p> <pre><code>[[input:ans1]] [[validation:ans1]]\n[[reveal input=\"ans1\" value=\"5\"]] [[input:ans2]] [[validation:ans2]] [[/reveal]]\n</code></pre> <ol> <li>Create input <code>ans1</code> as a radio input, with teacher's answer <code>ta1</code>.  Don't require or show validation.</li> <li>Create input <code>ans2</code> as an algebraic input, with teacher's answer <code>ta2</code>.  Use the extra option <code>allowempty</code>.</li> <li>In the PRT the first node should check <code>ans1=X</code> and, if so check that <code>ans2=ta2</code>.</li> </ol> <p>Notice that the reveal block has the condition <code>value=\"5\"</code>, not <code>value=\"X\"</code>.  This is because the reveal block executes client-side, using javascript, and the values of the options are simply numbered, and mapped back to Maxima values server-side.</p>"},{"location":"en/Authoring/Question_blocks/Dynamic_blocks/#hint-block","title":"Hint block","text":"<p>This block allows sections of text to be shown or hidden with a press of an additional button.</p> <pre><code>[[hint title=\"button text\"]]\nText shown when the button is pressed.\n[[/hint]]\n</code></pre> <p>Notes</p> <ol> <li>hint blocks can be nested.</li> <li>the content of the hint is styled within a <code>stack-hint-content</code> div tag.</li> </ol>"},{"location":"en/Authoring/Question_blocks/Dynamic_blocks/#adapt-block","title":"Adapt block","text":"<p>The Adapt Block allows you to show or hide sections of text either by clicking a button (created with the <code>adaptbutton</code> block) or automatically (controlled by the <code>adaptauto</code> block). This functionality works anywhere you can use CASText, including in feedback nodes.</p> <p>Each Adapt Block requires a unique ID. You can reference this ID in an <code>adaptbutton</code> or <code>adaptauto</code> block using the attributes <code>show_ids</code> and <code>hide_ids</code>.</p> <p>*Note the contents of all adapt blocks are within the page.  Some may be visible and some hidden, controlled by JavaScript.  Therefore, a student can inspect the page and see all blocks.  While this doesn't matter too much in formative settings, be aware of the possibility of revealing useful information in online exam settings.</p> <p>An example question is available by importing <code>Doc-Examples\\Authoring-Docs\\Question-blocks\\Adapt_button_block.xml</code>.</p>"},{"location":"en/Authoring/Question_blocks/Dynamic_blocks/#adaptbutton","title":"Adaptbutton","text":"<p>With the <code>adaptbutton</code> block you can control the visibility of <code>adapt</code> blocks with a press of a button. The button needs a <code>title</code> attribute. Note: Using Language blocks within titles is not yet supported. When a user clicks the button, the system shows and hides <code>adapt</code> blocks corresponding to the <code>show_ids</code> and <code>hide_ids</code> attributes and saves this action in an input you can set with the <code>save_state</code> attribute. You can control multiple adapt blocks by separating IDs with semicolons, e.g. <code>hide_ids='1;2;3'</code>.</p> <pre><code>[[adapt id='1']]\nThis text will be shown until the adaptbutton has been clicked. When it is clicked, the value of the input 'ans1' is set to 'true'.\n[[adaptbutton title='Click me' hide_ids='1' save_state='ans1' show_ids='3;4'/]]\n[[/adapt]]\n[[adapt id='2' hidden='true']]\nThis text is hidden if you did not press the adaptbutton.\n[[/adapt]]\n</code></pre> <p>The Adaptbutton block has no contents within the block, so you may use the form <code>[[adaptbutton ... /]]</code> rather than <code>[[adaptbutton ... ]][/adaptbutton]]</code>.</p>"},{"location":"en/Authoring/Question_blocks/Dynamic_blocks/#adaptauto","title":"Adaptauto","text":"<p>The <code>adaptauto</code> block automatically shows or hides <code>adapt</code> blocks when the <code>adaptauto</code> block is reached and the whole page finishes loading.</p> <pre><code>[[adapt id='1']]\nThe text will be displayed until adaptauto is loaded.\n[[/adapt]]\n[[adapt id='2' hidden='true']]\nThis text is hidden until adaptauto is loaded. Can be used as feedback.\n[[/adapt]]\n&lt;!-- Should be placed in a true/false feedback node --&gt;\n[[adaptauto show_ids='2' hide_ids='1'/]]\n</code></pre> <p>Like the <code>adaptbutton</code> block, the <code>adaptauto</code> block can control multiple adapt blocks by separating IDs with semicolons, e.g. <code>hide_ids='1;2;3'</code>.</p> <p>Like the <code>adaptbutton</code> block, the <code>adaptauto</code> block has no contents within the block.</p> <p>The <code>adaptauto</code> block also accepts an optional <code>delay</code> parameter that specifies a time delay in milliseconds before showing or hiding the adapt blocks. The value must be a whole number (integer). This allows for timed presentation of content.</p> <p>Example with delay:</p> <pre><code>[[adaptauto show_ids='2' hide_ids='1' delay='3000'/]]\n</code></pre> <p>This will show adapt block with ID '2' and hide adapt block with ID '1' after a 3 second delay.</p> <p>An example question is available by importing <code>Doc-Examples\\Authoring-Docs\\Question-blocks\\Adapt_delay_block.xml</code>.</p>"},{"location":"en/Authoring/Question_blocks/Dynamic_blocks/#jsxgraph-block","title":"JSXGraph block","text":"<p>STACK supports inclusion of dynamic graphs using JSXGraph: http://jsxgraph.uni-bayreuth.de/wiki/. The key feature of this block is the ability to bind elements of the graph to inputs of the question. See the specific documentation on including JSXGraph elements.</p> <pre><code>[[jsxgraph]]\n  // boundingbox:[left, top, right, bottom]\n  var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-3, 2, 3, -2], axis: true, showCopyright: false});\n  var f = board.jc.snippet('sin(1/x)', true, 'x', true);\n  board.create('functiongraph', [f,-3,3]);\n[[/jsxgraph]]\n</code></pre>"},{"location":"en/Authoring/Question_blocks/Dynamic_blocks/#jsstring-block","title":"JSString block","text":"<p>The <code>[[jsstring]]</code> block makes it simpler to produce JavaScript string values out of CASText content. This may be useful for example when generating labels in JSXGraph. The block takes its content and evaluates it as normal CASText and then escapes it as JavaScript string literal.</p> <pre><code>var label = [[jsstring]]{@f(x)=sqrt(x)@}[[/jsstring]];\n/* Would generate, without the need to manually escape things. */\nvar label = \"\\\\({f\\\\left(x\\\\right)=\\\\sqrt{x}}\\\\)\";\n</code></pre> <p>Note, this block is not designed to output Maxima expressions in JS format. For example, this block will not convert <code>x^2</code> into <code>x**2</code>.</p>"},{"location":"en/Authoring/Question_blocks/Dynamic_blocks/#geogebra-block","title":"GeoGebra block","text":"<p>STACK supports inclusion of dynamic graphics using GeoGebra: https://geogebra.org both as static visuals and as a STACK input.  This block is documented fully on the GeoGebra page.</p>"},{"location":"en/Authoring/Question_blocks/Dynamic_blocks/#parsons-block","title":"Parsons block","text":"<p>Drag and drop problems can be created using the Parsons block.  For example this allows users (e.g. students) to assemble pre-written text into a correct order.  This block can be linked with an input to create a Parsons problem or as matching problems, such as grid and grouping.</p>"},{"location":"en/Authoring/Question_blocks/Dynamic_blocks/#javascript-block","title":"JavaScript block","text":"<p>This block creates a hidden <code>[[iframe]]</code>-block with the STACK-JS library already imported inside a <code>&lt;script type=\"module\"&gt;</code>-container. The block also supports the same input referencing attributes as the <code>[[jsxgraph]]</code>-block, you can also do input referencing through STACK-JS if that better suits your needs.</p> <pre><code>[[javascript input-ref-ans1=\"ans1ref\"]]\nlet input = document.getElementById(ans1ref);\ninput.addEventListener(\"change\", () =&gt; {\n  if (input.value == 'foo') {\n    stack_js.switch_content('[[quid id=\"messagebox\"/]]', input.value + \"bar\");\n    stack_js.toggle_visibility('[[quid id=\"messagebox\"/]]', true);\n  } else {\n    stack_js.toggle_visibility('[[quid id=\"messagebox\"/]]', false);\n  }\n});\n[[/javascript]]\n</code></pre>"},{"location":"en/Authoring/Question_blocks/Fact_sheets/","title":"Fact sheets","text":"Hints  <p>STACK contains a \"formula sheet\" of useful fragments which a teacher may wish to include in a consistent way.  This is achieved through the \"hints\" system.</p> <p>Hints can be included in any CASText.</p> <p>To include a hint, use the syntax</p> <pre><code>[[facts:tag]]\n</code></pre> <p>The \"tag\" is chosen from the list below.  Note, these hints are basic HTML strings and are stored in the language files.</p>  All supported fact sheets"},{"location":"en/Authoring/Question_blocks/Fact_sheets/#the-greek-alphabet","title":"The Greek Alphabet","text":"<p><code>[[facts:greek_alphabet]]</code></p> Upper case lower case name \\(A\\) \\(\\alpha\\) alpha \\(B\\) \\(\\beta\\) beta \\(\\Gamma\\) \\(\\gamma\\) gamma \\(\\Delta\\) \\(\\delta\\) delta \\(E\\) \\(\\epsilon\\) epsilon \\(Z\\) \\(\\zeta\\) zeta \\(H\\) \\(\\eta\\) eta \\(\\Theta\\) \\(\\theta\\) theta \\(K\\) \\(\\kappa\\) kappa \\(M\\) \\(\\mu\\) mu \\(N\\) \\( u\\) nu \\(\\Xi\\) \\(\\xi\\) xi \\(O\\) \\(o\\) omicron \\(\\Pi\\) \\(\\pi\\) pi \\(I\\) \\(\\iota\\) iota \\(P\\) \\(\\rho\\) rho \\(\\Sigma\\) \\(\\sigma\\) sigma \\(\\Lambda\\) \\(\\lambda\\) lambda \\(T\\) \\(\\tau\\) tau \\(\\Upsilon\\) \\(\\upsilon\\) upsilon \\(\\Phi\\) \\(\\phi\\) phi \\(X\\) \\(\\chi\\) chi \\(\\Psi\\) \\(\\psi\\) psi \\(\\Omega\\) \\(\\omega\\) omega"},{"location":"en/Authoring/Question_blocks/Fact_sheets/#inequalities","title":"Inequalities","text":"<p><code>[[facts:alg_inequalities]]</code></p> <p>  a &lt; b \\hbox{ means } a \\hbox{ is less than } b. a\\geq b \\hbox{ means } a \\hbox{ is greater than or equal to } b. a\\leq b \\hbox{ means } a \\hbox{ is less than or equal to } b. </p>"},{"location":"en/Authoring/Question_blocks/Fact_sheets/#the-laws-of-indices","title":"The Laws of Indices","text":"<p><code>[[facts:alg_indices]]</code></p> <p>The following laws govern index manipulation: a^ma^n = a^{m+n} \\frac{a^m}{a^n} = a^{m-n} (a^m)^n = a^{mn} a^0 = 1 a^{-m} = \\frac{1}{a^m} a^{\\frac{1}{n}} = \\sqrt[n]{a} a^{\\frac{m}{n}} = \\left(\\sqrt[n]{a}\\right)^m </p>"},{"location":"en/Authoring/Question_blocks/Fact_sheets/#the-laws-of-logarithms","title":"The Laws of Logarithms","text":"<p><code>[[facts:alg_logarithms]]</code></p> <p>For any base c&gt;0 with c \\neq 1: \\log_c(a) = b \\text{, means } a = c^b \\log_c(a) + \\log_c(b) = \\log_c(ab) \\log_c(a) - \\log_c(b) = \\log_c\\left(\\frac{a}{b}\\right) n\\log_c(a) = \\log_c\\left(a^n\\right) \\log_c(1) = 0 \\log_c(c) = 1 The formula for a change of base is: \\log_a(x) = \\frac{\\log_b(x)}{\\log_b(a)} Logarithms to base e, denoted \\log_e or alternatively \\ln are called natural logarithms.  The letter e represents the exponential constant which is approximately 2.718.</p>"},{"location":"en/Authoring/Question_blocks/Fact_sheets/#the-quadratic-formula","title":"The Quadratic Formula","text":"<p><code>[[facts:alg_quadratic_formula]]</code></p> <p>If we have a quadratic equation of the form: ax^2 + bx + c = 0, then the solution(s) to that equation given by the quadratic formula are: x = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}. </p>"},{"location":"en/Authoring/Question_blocks/Fact_sheets/#partial-fractions","title":"Partial Fractions","text":"<p><code>[[facts:alg_partial_fractions]]</code></p> <p>Fractions {\\frac{P(x)}{Q(x)}} when P and Q are polynomials with the degree of P less than the degree of Q are called proper algebraic fractions. To re-write this as partial fractions write Q(x) in factored form,</p> <ul> <li>a linear factor \\(ax+b\\) in the denominator produces a partial fraction of the form \\[{\\frac{A}{ax+b}}.\\]</li> <li>a repeated linear factors \\((ax+b)^2\\) in the denominator produce partial fractions of the form \\[{A\\over ax+b}+{B\\over (ax+b)^2}.\\]</li> <li>a quadratic factor \\(ax^2+bx+c\\) in the denominator produces a partial fraction of the form \\[{Ax+B\\over ax^2+bx+c}\\]</li> <li>Improper fractions require an additional term which is a polynomial of degree \\(n-d\\) where \\(n\\) is the degree of the numerator (i.e. \\(P(x)\\)) and \\(d\\) is the degree of the denominator (i.e. \\(Q(x)\\)).</li> </ul>"},{"location":"en/Authoring/Question_blocks/Fact_sheets/#degrees-and-radians","title":"Degrees and Radians","text":"<p><code>[[facts:trig_degrees_radians]]</code></p> <p>  360^\\circ= 2\\pi \\hbox{ radians},\\quad 1^\\circ={2\\pi\\over 360}={\\pi\\over 180}\\hbox{ radians}   1 \\hbox{ radian} = {180\\over \\pi} \\hbox{ degrees} \\approx 57.3^\\circ  </p>"},{"location":"en/Authoring/Question_blocks/Fact_sheets/#standard-trigonometric-values","title":"Standard Trigonometric Values","text":"<p><code>[[facts:trig_standard_values]]</code></p> <p> \\sin(45^\\circ)={1\\over \\sqrt{2}}, \\qquad \\cos(45^\\circ) = {1\\over \\sqrt{2}},\\qquad \\tan( 45^\\circ)=1   \\sin (30^\\circ)={1\\over 2}, \\qquad \\cos (30^\\circ)={\\sqrt{3}\\over 2},\\qquad \\tan (30^\\circ)={1\\over \\sqrt{3}}   \\sin (60^\\circ)={\\sqrt{3}\\over 2}, \\qquad \\cos (60^\\circ)={1\\over 2},\\qquad \\tan (60^\\circ)={ \\sqrt{3}}  </p>"},{"location":"en/Authoring/Question_blocks/Fact_sheets/#standard-trigonometric-identities","title":"Standard Trigonometric Identities","text":"<p><code>[[facts:trig_standard_identities]]</code></p> <p> \\sin(a\\pm b)\\ = \\  \\sin(a)\\cos(b)\\ \\pm\\  \\cos(a)\\sin(b) \\cos(a\\ \\pm\\ b)\\ = \\  \\cos(a)\\cos(b)\\ \\mp \\sin(a)\\sin(b) \\tan (a\\ \\pm\\ b)\\ = \\  {\\tan (a)\\ \\pm\\ \\tan (b)\\over1\\ \\mp\\ \\tan (a)\\tan (b)}  2\\sin(a)\\cos(b)\\ = \\  \\sin(a+b)\\ +\\ \\sin(a-b)  2\\cos(a)\\cos(b)\\ = \\  \\cos(a-b)\\ +\\ \\cos(a+b)  2\\sin(a)\\sin(b) \\ = \\  \\cos(a-b)\\ -\\ \\cos(a+b)  \\sin^2(a)+\\cos^2(a)\\ = \\  1  1+{\\rm cot}^2(a)\\ = \\  {\\rm cosec}^2(a),\\quad \\tan^2(a) +1 \\ = \\  \\sec^2(a)  \\cos(2a)\\ = \\  \\cos^2(a)-\\sin^2(a)\\ = \\  2\\cos^2(a)-1\\ = \\  1-2\\sin^2(a)  \\sin(2a)\\ = \\  2\\sin(a)\\cos(a)  \\sin^2(a) \\ = \\  {1-\\cos (2a)\\over 2}, \\qquad \\cos^2(a)\\ = \\  {1+\\cos(2a)\\over 2} </p>"},{"location":"en/Authoring/Question_blocks/Fact_sheets/#hyperbolic-functions","title":"Hyperbolic Functions","text":"<p><code>[[facts:hyp_functions]]</code></p> <p>Hyperbolic functions have similar properties to trigonometric functions but can be represented in exponential form as follows:   \\cosh(x)      = \\frac{e^x+e^{-x}}{2}, \\qquad \\sinh(x)=\\frac{e^x-e^{-x}}{2}   \\tanh(x)      = \\frac{\\sinh(x)}{\\cosh(x)} = \\frac{{e^x-e^{-x}}}{e^x+e^{-x}}   {\\rm sech}(x) ={1\\over \\cosh(x)}={2\\over {\\rm e}^x+{\\rm e}^{-x}}, \\qquad  {\\rm cosech}(x)= {1\\over \\sinh(x)}={2\\over {\\rm e}^x-{\\rm e}^{-x}}   {\\rm coth}(x) ={\\cosh(x)\\over \\sinh(x)} = {1\\over {\\rm tanh}(x)} ={{\\rm e}^x+{\\rm e}^{-x}\\over {\\rm e}^x-{\\rm e}^{-x}} </p>"},{"location":"en/Authoring/Question_blocks/Fact_sheets/#hyperbolic-identities","title":"Hyperbolic Identities","text":"<p><code>[[facts:hyp_identities]]</code></p> <p>The similarity between the way hyperbolic and trigonometric functions behave is apparent when observing some basic hyperbolic identities:   {\\rm e}^x=\\cosh(x)+\\sinh(x), \\quad {\\rm e}^{-x}=\\cosh(x)-\\sinh(x) \\cosh^2(x) -\\sinh^2(x) = 1 1-{\\rm tanh}^2(x)={\\rm sech}^2(x) {\\rm coth}^2(x)-1={\\rm cosech}^2(x) \\sinh(x\\pm y)=\\sinh(x)\\ \\cosh(y)\\ \\pm\\ \\cosh(x)\\ \\sinh(y) \\cosh(x\\pm y)=\\cosh(x)\\ \\cosh(y)\\ \\pm\\ \\sinh(x)\\ \\sinh(y) \\sinh(2x)=2\\,\\sinh(x)\\cosh(x) \\cosh(2x)=\\cosh^2(x)+\\sinh^2(x) \\cosh^2(x)={\\cosh(2x)+1\\over 2} \\sinh^2(x)={\\cosh(2x)-1\\over 2} </p>"},{"location":"en/Authoring/Question_blocks/Fact_sheets/#inverse-hyperbolic-functions","title":"Inverse Hyperbolic Functions","text":"<p><code>[[facts:hyp_inverse_functions]]</code></p> <p> \\cosh^{-1}(x)=\\ln\\left(x+\\sqrt{x^2-1}\\right) \\quad \\text{ for } x\\geq 1 \\sinh^{-1}(x)=\\ln\\left(x+\\sqrt{x^2+1}\\right) \\tanh^{-1}(x) = \\frac{1}{2}\\ln\\left({1+x\\over 1-x}\\right) \\quad \\text{ for } -1&lt; x &lt; 1 </p>"},{"location":"en/Authoring/Question_blocks/Fact_sheets/#standard-derivatives","title":"Standard Derivatives","text":"<p><code>[[facts:calc_diff_standard_derivatives]]</code></p> <p>The following table displays the derivatives of some standard functions.  It is useful to learn these standard derivatives as they are used frequently in calculus.</p> \\(f(x)\\) \\(f'(x)\\) \\(k\\), constant \\(0\\) \\(x^n\\), any constant \\(n\\) \\(nx^{n-1}\\) \\(e^x\\) \\(e^x\\) \\(\\ln(x)=\\log_{\\rm e}(x)\\) \\(\\frac{1}{x}\\) \\(\\sin(x)\\) \\(\\cos(x)\\) \\(\\cos(x)\\) \\(-\\sin(x)\\) \\(\\tan(x) = \\frac{\\sin(x)}{\\cos(x)}\\) \\(\\sec^2(x)\\) \\(cosec(x)=\\frac{1}{\\sin(x)}\\) \\(-cosec(x)\\cot(x)\\) \\(\\sec(x)=\\frac{1}{\\cos(x)}\\) \\(\\sec(x)\\tan(x)\\) \\(\\cot(x)=\\frac{\\cos(x)}{\\sin(x)}\\) \\(-cosec^2(x)\\) \\(\\cosh(x)\\) \\(\\sinh(x)\\) \\(\\sinh(x)\\) \\(\\cosh(x)\\) \\(\\tanh(x)\\) \\(sech^2(x)\\) \\(sech(x)\\) \\(-sech(x)\\tanh(x)\\) \\(cosech(x)\\) \\(-cosech(x)\\coth(x)\\) \\(coth(x)\\) \\(-cosech^2(x)\\) <p> \\[ \\frac{\\mathrm{d}}{\\mathrm{d}x}\\left(\\sin^{-1}(x)\\right) =  \\frac{1}{\\sqrt{1-x^2}}\\]  \\[ \\frac{\\mathrm{d}}{\\mathrm{d}x}\\left(\\cos^{-1}(x)\\right) =  \\frac{-1}{\\sqrt{1-x^2}}\\]  \\[ \\frac{\\mathrm{d}}{\\mathrm{d}x}\\left(\\tan^{-1}(x)\\right) =  \\frac{1}{1+x^2}\\]  \\[ \\frac{\\mathrm{d}}{\\mathrm{d}x}\\left(\\cosh^{-1}(x)\\right) =  \\frac{1}{\\sqrt{x^2-1}}\\]  \\[ \\frac{\\mathrm{d}}{\\mathrm{d}x}\\left(\\sinh^{-1}(x)\\right) =  \\frac{1}{\\sqrt{x^2+1}}\\]  \\[ \\frac{\\mathrm{d}}{\\mathrm{d}x}\\left(\\tanh^{-1}(x)\\right) =  \\frac{1}{1-x^2}\\]</p>"},{"location":"en/Authoring/Question_blocks/Fact_sheets/#the-linearity-rule-for-differentiation","title":"The Linearity Rule for Differentiation","text":"<p><code>[[facts:calc_diff_linearity_rule]]</code></p> <p> {\\mathrm{d}\\,\\over \\mathrm{d}x}\\big(af(x)+bg(x)\\big)=a{\\mathrm{d}f(x)\\over \\mathrm{d}x}+b{\\mathrm{d}g(x)\\over \\mathrm{d}x}\\quad a,b {\\rm\\  constant.} </p>"},{"location":"en/Authoring/Question_blocks/Fact_sheets/#the-product-rule","title":"The Product Rule","text":"<p><code>[[facts:calc_product_rule]]</code></p> <p>The following rule allows one to differentiate functions which are multiplied together.  Assume that we wish to differentiate f(x)g(x) with respect to x.  \\frac{\\mathrm{d}}{\\mathrm{d}{x}} \\big(f(x)g(x)\\big) = f(x) \\cdot \\frac{\\mathrm{d} g(x)}{\\mathrm{d}{x}}  + g(x)\\cdot \\frac{\\mathrm{d} f(x)}{\\mathrm{d}{x}}, or, using alternative notation,  (f(x)g(x))' = f'(x)g(x)+f(x)g'(x).  </p>"},{"location":"en/Authoring/Question_blocks/Fact_sheets/#the-quotient-rule","title":"The Quotient Rule","text":"<p><code>[[facts:calc_quotient_rule]]</code></p> <p>The quotient rule for differentiation states that for any two differentiable functions f(x) and g(x),  \\frac{\\mathrm{d}}{\\mathrm{d}x}\\left(\\frac{f(x)}{g(x)}\\right)=\\frac{g(x)\\cdot\\frac{\\mathrm{d}f(x)}{\\mathrm{d}x}\\ \\ - \\ \\ f(x)\\cdot \\frac{\\mathrm{d}g(x)}{\\mathrm{d}x}}{g(x)^2}.  </p>"},{"location":"en/Authoring/Question_blocks/Fact_sheets/#the-chain-rule","title":"The Chain Rule","text":"<p><code>[[facts:calc_chain_rule]]</code></p> <p>The following rule allows one to find the derivative of a composition of two functions. Assume we have a function f(g(x)), then defining u=g(x), the derivative with respect to x is given by: \\frac{\\mathrm{d}f(g(x))}{\\mathrm{d}x} = \\frac{\\mathrm{d}g(x)}{\\mathrm{d}x}\\cdot\\frac{\\mathrm{d}f(u)}{\\mathrm{d}u}. Alternatively, we can write: \\frac{\\mathrm{d}f(x)}{\\mathrm{d}x} = f'(g(x))\\cdot g'(x). </p>"},{"location":"en/Authoring/Question_blocks/Fact_sheets/#calculus-rules","title":"Calculus rules","text":"<p><code>[[facts:calc_rules]]</code></p> <p>The Product RuleThe following rule allows one to differentiate functions which are multiplied together.  Assume that we wish to differentiate f(x)g(x) with respect to x.  \\frac{\\mathrm{d}}{\\mathrm{d}{x}} \\big(f(x)g(x)\\big) = f(x) \\cdot \\frac{\\mathrm{d} g(x)}{\\mathrm{d}{x}}  + g(x)\\cdot \\frac{\\mathrm{d} f(x)}{\\mathrm{d}{x}}, or, using alternative notation,  (f(x)g(x))' = f'(x)g(x)+f(x)g'(x).  The Quotient RuleThe quotient rule for differentiation states that for any two differentiable functions f(x) and g(x), \\frac{\\mathrm{d}}{\\mathrm{d}x}\\left(\\frac{f(x)}{g(x)}\\right)=\\frac{g(x)\\cdot\\frac{\\mathrm{d}f(x)}{\\mathrm{d}x}\\ \\ - \\ \\ f(x)\\cdot \\frac{\\mathrm{d}g(x)}{\\mathrm{d}x}}{g(x)^2}.  The Chain RuleThe following rule allows one to find the derivative of a composition of two functions. Assume we have a function f(g(x)), then defining u=g(x), the derivative with respect to x is given by: \\frac{\\mathrm{d}f(g(x))}{\\mathrm{d}x} = \\frac{\\mathrm{d}g(x)}{\\mathrm{d}x}\\cdot\\frac{\\mathrm{d}f(u)}{\\mathrm{d}u}. Alternatively, we can write: \\frac{\\mathrm{d}f(x)}{\\mathrm{d}x} = f'(g(x))\\cdot g'(x). </p>"},{"location":"en/Authoring/Question_blocks/Fact_sheets/#standard-integrals","title":"Standard Integrals","text":"<p><code>[[facts:calc_int_standard_integrals]]</code></p> <p>\\[\\int k\\ \\mathrm{d}x = kx +c, \\text{ where } k \\text{ is constant.}\\] \\[\\int x^n\\ \\mathrm{d}x  = \\frac{x^{n+1}}{n+1}+c, \\quad (n\\ne -1)\\] \\[\\int x^{-1}\\ \\mathrm{d}x = \\int {\\frac{1}{x}}\\ \\mathrm{d}x = \\ln(|x|)+c = \\ln(k|x|)\\]</p> \\(f(x)\\) \\(\\int f(x)\\ \\mathrm{d}x\\) \\(e^x\\) \\(e^x+c\\) \\(\\cos(x)\\) \\(\\sin(x)+c\\) \\(\\sin(x)\\) \\(-\\cos(x)+c\\) \\(\\tan(x)\\) \\(\\ln(\\sec(x))+c\\) \\(-\\frac{\\pi}{2} &lt; x &lt; \\frac{\\pi}{2}\\) \\(\\sec x\\) \\(\\ln (\\sec(x)+\\tan(x))+c\\) \\( -{\\pi\\over 2}&lt; x &lt; {\\frac{\\pi}{2}}\\) \\(\\text{cosec}(x)\\) \\(\\ln (\\text{cose}c(x)-\\cot(x))+c\\quad\\) \\(0 &lt; x &lt; \\pi\\) cot(\\x\\) \\(\\ln(\\sin(x))+c\\) \\(0&lt; x&lt; \\pi\\) \\(\\cosh(x)\\) \\(\\sinh(x)+c\\) \\(\\sinh(x)\\) \\(\\cosh(x) + c\\) \\(\\tanh(x)\\) \\(\\ln(\\cosh(x))+c\\) \\(\\text{coth}(x)\\) \\(\\ln(\\sinh(x))+c \\) \\(x&gt;0\\) \\({1\\over x^2+a^2}\\) \\({1\\over a}\\tan^{-1}{x\\over a}+c\\) \\(a&gt;0\\) \\({1\\over x^2-a^2}\\) \\({1\\over 2a}\\ln{x-a\\over x+a}+c\\) \\(x &gt; a &gt;0\\) \\({1\\over a^2-x^2}\\) \\({1\\over 2a}\\ln{a+x\\over a-x}+c\\) \\(a &gt; x &gt;0\\) \\(\\frac{1}{\\sqrt{x^2+a^2}}\\) \\(\\sinh^{-1}\\left(\\frac{x}{a}\\right) + c\\) \\(a&gt;0\\) \\({1\\over \\sqrt{x^2-a^2}}\\) \\(\\cosh^{-1}\\left(\\frac{x}{a}\\right) + c\\) \\(x\\geq a &gt; 0\\) \\({1\\over \\sqrt{x^2+k}}\\) \\(\\ln (x+\\sqrt{x^2+k})+c\\) \\({1\\over \\sqrt{a^2-x^2}}\\) \\(\\sin^{-1}\\left(\\frac{x}{a}\\right)+c\\) \\(-a\\leq x\\leq a\\)"},{"location":"en/Authoring/Question_blocks/Fact_sheets/#the-linearity-rule-for-integration","title":"The Linearity Rule for Integration","text":"<p><code>[[facts:calc_int_linearity_rule]]</code></p> <p> \\int \\left(af(x)+bg(x)\\right)\\mathrm{d}x = a\\int\\!\\!f(x)\\,\\mathrm{d}x \\,+\\,b\\int \\!\\!g(x)\\,\\mathrm{d}x, \\quad (a,b \\, \\, {\\rm constant.})  </p>"},{"location":"en/Authoring/Question_blocks/Fact_sheets/#integration-by-substitution","title":"Integration by Substitution","text":"<p><code>[[facts:calc_int_methods_substitution]]</code></p> <p>  \\int f(u){\\mathrm{d}u\\over \\mathrm{d}x}\\mathrm{d}x=\\int f(u)\\mathrm{d}u \\quad\\hbox{and}\\quad \\int_a^bf(u){\\mathrm{d}u\\over \\mathrm{d}x}\\,{\\rm d}x = \\int_{u(a)}^{u(b)}f(u)\\mathrm{d}u.  </p>"},{"location":"en/Authoring/Question_blocks/Fact_sheets/#integration-by-parts","title":"Integration by Parts","text":"<p><code>[[facts:calc_int_methods_parts]]</code></p> <p>  \\int_a^b u{\\mathrm{d}v\\over \\mathrm{d}x}\\mathrm{d}x=\\left[uv\\right]_a^b- \\int_a^b{\\mathrm{d}u\\over \\mathrm{d}x}v\\,\\mathrm{d}x or alternatively: \\int_a^bf(x)g(x)\\,\\mathrm{d}x=\\left[f(x)\\,\\int g(x)\\mathrm{d}x\\right]_a^b -\\int_a^b{\\mathrm{d}f\\over {\\rm d}x}\\left\\{\\int g(x)\\mathrm{d}x\\right\\}\\mathrm{d}x. </p>"},{"location":"en/Authoring/Question_blocks/Fact_sheets/#integration-by-parts_1","title":"Integration by Parts","text":"<p><code>[[facts:calc_int_methods_parts_indefinite]]</code></p> <p>  \\int u{\\mathrm{d}v\\over \\mathrm{d}x}\\mathrm{d}x=uv- \\int{\\mathrm{d}u\\over \\mathrm{d}x}v\\,\\mathrm{d}x or alternatively: \\int f(x)g(x)\\,\\mathrm{d}x=f(x)\\,\\int g(x)\\mathrm{d}x -\\int {\\mathrm{d}f\\over \\mathrm{d}x}\\left\\{\\int g(x)\\mathrm{d}x\\right\\}\\mathrm{d}x. </p>"},{"location":"en/Authoring/Question_blocks/Iframe_blocks/","title":"Iframe blocks","text":"<p>The iframe block is the basis for most dynamic blocks, with it one can construct a sandboxed iframe container within the question text and define freely what it contains. One can load almost anything into that iframe assuming no firewalls are blocking the traffic and the content is being served with sutiable CORS headers. The sandbox logic makes sure that even if the content loaded would turn out to be evil it cannot directly access the surrounding parts of the VLE.</p>"},{"location":"en/Authoring/Question_blocks/Iframe_blocks/#iframe-block","title":"Iframe block","text":"<p>The <code>[[iframe]]</code> block will simply create a visible iframe with the default size of 500px x 400px, the size and aspect-ratio settings can be tuned with the same attributes as <code>[[jsxgraph]]</code> blocks. The frame can also be made hidden by setting the <code>hidden</code>-attribute. Scrolling can be disabled by setting <code>scrolling='false'</code>. Finally, one can set a <code>title</code> attribute should it be necessary, e.g., to identify the correct sandbox during debugging, there is a default title with running numbering.</p> <p>The contents of the block will be directly outputted into the body of the generated document, with the exception of <code>[[style]]</code> and <code>[[script]]</code> blocks. Those will be mapped to the head of the generated document.</p> <p>The generated document will contain the following things in addition to whatever you add to it:   * The <code>lang</code> attribute of the <code>&lt;html&gt;</code> element will match the VLE reported language.   * There is a <code>&lt;script&gt;</code> element defining a <code>const FRAME_ID</code> which STACK-JS would use for targetted communication.</p> <p>Minimal usage of this block is as follows:</p> <pre><code>[[iframe]]\n&lt;h1 style=\"color:red;\"&gt;Red text in a box&lt;/h1&gt;\n[[/iframe]]\n</code></pre> <p>Note that that box will not follow any style rules the surrounding VLE might have. Also note that the contents of the box might not be as accessible as things outside the box.</p> <p>You may not place an <code>[[iframe]]</code> inside an <code>[[iframe]]</code>. Well you may but it won't work. This applies to all members of the family, so no <code>[[jsxgraph]]</code> or <code>[[adapt]]</code> inside eachother or other <code>[[iframes]]</code>.</p>"},{"location":"en/Authoring/Question_blocks/Iframe_blocks/#style-block","title":"Style block","text":"<p>The <code>[[style]]</code> block only functions inside blocks of the <code>[[iframe]]</code> family (e.g., you could use it inside <code>[[jsxgraph]]</code>). Regardles on where inside the block it is it will generate its output as an element in the head of the generated document. You can either use it as equivalent of <code>&lt;style&gt;</code> by writing the contents of such an element inside the block. Or as <code>&lt;link rel=\"stylesheet\" href=\"...\"/&gt;</code> if you define the <code>href</code> attribute. You may also affect the values of <code>media</code>, <code>blocking</code>, <code>title</code>, <code>nonce</code>, <code>type</code>, and <code>crossorigin</code> attributes by setting them.</p> <pre><code>[[iframe]]\n[[style]] h1 {color:red;} [[/style]]\n&lt;h1&gt;Red text in a box&lt;/h1&gt;\n[[style href=\"address of some remote stylesheet\"/]]\n[[/iframe]]\n</code></pre>"},{"location":"en/Authoring/Question_blocks/Iframe_blocks/#script-block","title":"Script block","text":"<p>The <code>[[script]]</code> block only functions inside blocks of the <code>[[iframe]]</code> family (e.g., you could use it inside <code>[[jsxgraph]]</code>). Regardles on where inside the block it is it will generate its output as a script-element in the head of the generated document. You may set <code>type</code>, <code>blocking</code>, <code>src</code>, <code>integrity</code>, <code>nonce</code>, and <code>async</code> attributes to tune the same ones in the generated element. And naturally you may include contents as you wish.</p> <p>Do note that should you only want to do some JavaScripting with STACK-JS, you do not need to setup an <code>[[iframe]]</code> with <code>[[script]]</code> inside it yourself. You can use the <code>[[javascript]]</code> block which will automatically build a hidden iframe and load <code>stack_js</code>, it will also allow one to setup <code>input-refs</code> in the style of <code>[[jsxgraph]]</code>. In that block, the content will go directly into a <code>&lt;script type=\"module\"&gt;</code> element.</p>"},{"location":"en/Authoring/Question_blocks/Iframe_blocks/#somewhat-complicated-example","title":"Somewhat complicated example","text":"<p>A problem with <code>[[iframes]]</code> is that they are not really part of the normal document flow and can thus pose problems for accessibility. However, due to security reasons they are necessary. Do note that <code>[[iframes]]</code> do not need to be visible and it is possible to transfer static content to and from them. In this example, we apply syntax highlighting to a block of code that is already visible on the VLE side and then return the modified but still static content on top of the original. The hidden iframe should not cause accessibility issues and if the scripting happens to not run the original content will still stay visible.</p> <pre><code>&lt;div id=\"[[quid id='code'/]]\"&gt;\n&lt;pre&gt;&lt;code class=\"language-c\"&gt;[[entityescape]]\n# include &lt;stdint.h&gt; // uint32_t\n\nfloat Q_rsqrt(float number)\n{\n  union {\n    float    f;\n    uint32_t i;\n  } conv = { .f = number };\n  conv.i  = 0x5f3759df - (conv.i &gt;&gt; 1);\n  conv.f *= 1.5F - (number * 0.5F * conv.f * conv.f);\n  return conv.f;\n}\n[[/entityescape]]&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;\n[[javascript]]\n[[comment]]Use style and script blocks to load in highlight.js, crossorigin=\"anonymous\" for style transfer.[[/comment]]\n[[style href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.11.1/styles/srcery.min.css\" crossorigin=\"anonymous\"/]]\n[[script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.11.1/highlight.min.js\"/]]\n\n[[comment]]Then load the stackcssutils library, to do some tricks.[[/comment]]\nimport {stack_css_utils} from '[[cors src=\"stackcssutils.min.js\"/]]';\n\n[[comment]]Load the content from the VLE side, store it in the iframe and then highlight it then map it back.[[/comment]]\nstack_js.get_content(\"[[quid id='code'/]]\").then((content) =&gt; {\n    /* Create an element to put this in. */\n    const holder = document.createElement(\"div\");\n    holder.innerHTML = content;\n    document.body.appendChild(holder);\n\n    /* Apply highlighting. */\n    hljs.highlightAll();\n\n    /* Inline the new styles. */\n    stack_css_utils.inline();\n\n    /* Transfer the styled thign back. */\n    stack_js.switch_content(\"[[quid id='code'/]]\", holder.innerHTML);\n});\n[[/javascript]]\n</code></pre> <p>In that example, we use <code>[[quid/]]</code> to produce a question level unique identifier, <code>[[entityescape]]</code> to avoid having to escape certain chars on our own, <code>[[javascript]]</code> to setup an <code>[[iframe]]</code> with certain handy features, e.g, <code>stack_js</code> already present. Then we use <code>[[style]]</code> and <code>[[script]]</code> to load some external libaries into that <code>[[iframe]]</code>, and <code>[[cors]]</code> to also load some local libraries. Finally, using <code>stack_js</code> we read the code from the VLE side and then push it back. Between reading and writing we usel highlight.js to syntax highlight the code and <code>stack_css_utils</code> to inline the styles applied so that we can transfer the content without the stylesheets.</p> <p>This example is possibly overly convoluted, one does not need to transfer code and style around, it can simply exist inside an iframe. But should one want to maximise accessibility and fail safe if the script logic fails the example shows one way of doing so.</p>"},{"location":"en/Authoring/Question_blocks/Static_blocks/","title":"Static blocks","text":"<p>Static blocks are mostly used when a random version is created, rather than relating to managing dynamic content such as Javascript.</p>"},{"location":"en/Authoring/Question_blocks/Static_blocks/#lang-block","title":"Lang block","text":"<p>A new feature in 4.4 is a STACK specific localisation mechanism that allows one to output differing text based on the language the student has chosen in their VLE.</p> <pre><code>[[lang code='fi']]...Text in Finnish...[[/lang]]\n</code></pre> <p>Read more about this in the languages documentation.</p>"},{"location":"en/Authoring/Question_blocks/Static_blocks/#comment-blocks","title":"Comment blocks","text":"<p>Comment blocks allow you to put content into a CASText field which will not be seen by students.</p> <pre><code>[[comment]] Place comments here which will not appear to students. [[/comment]]\n</code></pre> <p>Before 4.4 the contents of the block needed to be syntactically correct CASText. That is no longer the case and you can much more easily use this block to comment our unfinished stuff.</p>"},{"location":"en/Authoring/Question_blocks/Static_blocks/#todo-blocks","title":"Todo blocks","text":"<p>\"todo\" blocks allow you to put items into a main question CASText field (not feedback in the PRTs) which indicate future work needed.  This will not be seen by students.</p> <pre><code>[[todo]] Place requests to collaborators here. This will not appear to students. [[/todo]]\n</code></pre> <p>Any question with a todo will flag an error in the bulk tester.  This will not throw an error in the editing form.</p> <p>The <code>[[todo]]</code> can contain optional <code>tags</code> e.g.</p> <pre><code>[[todo tags=\"tag1,tag2,...\"]]Please fix ...[[/todo]]\n</code></pre> <p>The use of this tag is documented under workflow.</p> <p>You can access a page listing all questions with <code>[[todo]]</code> blocks which you can edit, in every course on which you are a teacher, by accessing the STACK question dashboard, or from the page <code>question/type/stack/adminui/index.php</code> on your local server.</p> <p>The todo block is similar to the comments block.  A different block is provided to facilitate searching for questions with specific \"todo\" items remaining.  The contents must be valid castext (unlike the comments block which can be anything) because in the future we may extend the functionality to display todo items in a teacher preview.  If you need to include invalid content either use the comment block, or escape block inside the todo, e.g.</p> <pre><code>[[todo]][[escape]]...[[/escape]][[/todo]]\n</code></pre> <p>The contents of this block are replaced by the static</p> <pre><code>&lt;!--- stack_todo ---&gt;\n</code></pre> <p>to stop these being read by a user (student), and to provide a searchable tag in instantiated text which is not visible in regular html.</p>"},{"location":"en/Authoring/Question_blocks/Static_blocks/#the-debug-block","title":"The debug block","text":"<p>The special \"debug\" block allows question authors to see all the values of variables created during a session in a table.  Do not leave this block in a live question!</p> <pre><code>[[ debug /]]\n</code></pre>"},{"location":"en/Authoring/Question_blocks/Static_blocks/#format-blocks","title":"Format blocks","text":"<p>In general CASText is assumed to be written in the format (Markdown, raw HTML, Moodle auto-format) that Moodle defines and which can be selected in the editor if one uses the plain text area editor. However, there are cases where one might need to mix formats within the CASText itself, one of those cases is the inclusion of content written in another format. In these cases one can wrap the differing part in blocks that declare the format to use for that portion. The blocks used for this are named <code>[[moodleformat]]</code>, <code>[[markdownformat]]</code>, and <code>[[htmlformat]]</code>. In the end all CASText evaluates down to HTML, even if it were written in Markdown-format it will be rendered down to HTML.</p>"},{"location":"en/Authoring/Question_blocks/Static_blocks/#textdownload-block","title":"Textdownload block","text":"<p>STACK can construct a text-file using CASText and provide a link to it for download. This is obviously a way for serving out randomised data to the student. Do note that you can generate whatever you want as the content of that file, one could even generate a LaTeX template with question specific values for the student to fill things in. Read more about serving data out.</p>"},{"location":"en/Authoring/Question_blocks/Static_blocks/#include-block","title":"Include block","text":"<p>A new feature in 4.4 is the ability to include content from an URL. The include block allows one to do that. However, it is not a recommended tool for novices and all users choosing to use it should consider what it means for the future maintenance and shareability of your questions. See the specific documentation on include logic.</p>"},{"location":"en/Authoring/Question_blocks/Static_blocks/#quid-question-unique-identifier-block","title":"QUID (question unique identifier) block","text":"<p>When scripting things one often needs to give elements identifiers and those identifiers tend to be hard-coded. This may prove to be problematic when code gets copied from question to question and one ends up with multiple questions using the same identifier on the same page. To avoid this issue we have the <code>[[quid id=\"...\"/]]</code> block, which will prepend a question usage level unique prefix to the identifier it has been given and outputs the result, thus allowing one to safely write content like this:</p> <pre><code>&lt;div id=\"[[quid id='target'/]]\"&gt;...&lt;/div&gt;\n[[javascript]]\n    stack_js.switch_content(\"[[quid id='target'/]]\", \"new content\");\n[[/javascript]]\n</code></pre> <p>You may think you will always remember to change your identifiers for all questions, but why worry about that when you can use this and keep the identifiers visible to you sensible, at the same time you eliminate the whole issue. Do note that if you write overly sensible identifier and include code from others that do that, you may still see collisions inside your own question, so maybe add your own prefixes as well... Don't just call something \"target\" and expect that there would not be other \"targets\" in play.</p>"},{"location":"en/Authoring/Question_blocks/Static_blocks/#template-block","title":"Template block","text":"<p>Since 4.4.2 it has been possible to use templates to handle repetitive content or to override content deeper in libraries. Templates are essentially a way for handling repetition when <code>[[foreach]]</code> does not easily work or when inline CASText based function solutions are inconvenient. While inline CASText is often better it might not work as well as overridable templates when working with libraries.</p> <p>The template block has two parameters, the first being a name which should be a valid name for a function and the second being the mode parameter that controls the blocks behaviour and is of use especially for library builders. There are three different ways for using this block:</p> <ol> <li>To define a templates value for a given name one simply wraps that value in this block with that name. <code>[[template name=\"foobar\"]]Whatever is {@whatever@}[[/template]]</code>. This will not output anything and can also be done in inline CASText either in the question-variables to effect the whole question or in feedback-variables to effect PRTs.</li> <li>To output that template, one simply uses the empty block form <code>[[template name=\"foobar\"/]]</code> which will output whatever has been defined as that templates value or a warning about the template not been defined. One can add a mode parameter <code>mode=\"ignore missing\"</code> to not see that warning. Typically, one will use the <code>[[define/]]</code> block to change the values used within the template.</li> <li>For library makers the most common operation mode is the <code>mode=\"default\"</code> where the contents of the block are used if no overriding definition can be found. The default value will not define a default template and this intentional, if a template is to be shared then it needs to be defined at a global level where it always gets evaluated while default templates tend to be sensible to use even in conditionally evaluated contexts. Basically, if your library has any CASText that could benefit from being overridden you simply give it a name and wrap it with <code>[[template name=\"libarary_xyz\" mode=\"default\"]]...[[/template]]</code> and then maybe document somewhere that this name has this default where these injectable variables have these roles so that people may replace the wording and structure and still use the same values.</li> </ol> <p>Note in the background templates are just functions with CASText values. You can do the same with inline CASText and more importantly building your own functions allows you to use arguments for them and thus makes repetition with varying parameters simpler. For templates no arguments exist, for them the values come from the context where they get placed in, and must therefore be controlled though other means.</p>"},{"location":"en/Authoring/Question_blocks/Static_blocks/#entity-escape-block","title":"Entity escape block","text":"<p>Sometimes one needs to author content that uses characters that are sensitive in HTML syntax. If one wraps that content in this block those characters will be automatically converted to HTML-entities during output. Can be very useful when including sample blocks of code, that includes certain operators. <code>[[entityescape]] code with some less than chars [[/entityescape]]</code>.</p>"},{"location":"en/Authoring/Question_blocks/System_blocks/","title":"System question blocks","text":""},{"location":"en/Authoring/Question_blocks/System_blocks/#commonstring-block","title":"Commonstring block","text":"<p>In some circumstances one might see the <code>[[commonstring/]]</code> block. While it might not be one that an author would use it might appear when working with built-in labels and their localisations. What it does is that it gets a <code>key</code> as a parameter and fetches the matching localised string from STACK's language packs and replaces the block with it. It also provides means for injecting named parameters into those templates with varying simplification and presentation options.</p> <p>For example</p> <pre><code>[[commonstring key=\"pluginname_help\"/]]\n</code></pre> <p>will display the string <code>pluginname_help</code> from the language pack, which in English is currently \"STACK is an assessment system for mathematics.\"</p>"},{"location":"en/Authoring/Question_blocks/System_blocks/#blocks-that-exist-but-should-not-be-used","title":"Blocks that exist but should not be used","text":"<p>There are other blocks that have roles inside the system and that transfer information required for the operation of the system. If you look at the code these are often called \"specialblocks\". You can rest assured that there are no realistic use cases for them, even in advanced authoring proceses. Practically, none of these blocks ever exist in written out CASText and are only added in as virtual objects during processing. However, if you ever look at the commands going into the CAS you might see these block names going in and coming out.</p> <p>For example, <code>[[pfs]]</code> is a special block that gets generated by internal logic when we see plugin files (if you place an image into the WYSIWYG editor) in the text, it works as a marker for those files context so that we can combine text from multiple contexts together and still keep track of the origins when the final product gets rendered.</p> <p>There are blocks that handle the placeholders for inputs, validation, and feedback. Some others deal with translations between forms and postprocessing special types of content. </p>"},{"location":"en/CAS/","title":"Maxima and computer algebra use in STACK","text":"<p>STACK uses the computer algebra system (CAS) Maxima.  This section of the documentation deals with Maxima-specific functions, including core Maxima and functions defined by STACK.</p>"},{"location":"en/CAS/#reference","title":"Maxima in STACK","text":"<ul> <li>Predicate functions, which are useful to test expressions.</li> <li>Numbers, including floating point and complex numbers.</li> <li>Simplification can be switched on and off in Maxima.</li> <li>Inequalities.</li> <li>Matrices and vectors.</li> <li>Statistics.</li> <li>Randomly generated objects.</li> <li>Maxima plot2d.</li> <li>Buggy rules implements rules which are not always valid!</li> </ul>"},{"location":"en/CAS/#working-offline","title":"Working offline","text":"<p>We recommend you download and use the graphical desktop interface WxMaxima for working offline, on your desktop.</p> <ul> <li>Setting up a STACK-Maxima sandbox for testing code on the desktop.</li> </ul>"},{"location":"en/CAS/Buggy_rules/","title":"Buggy rules","text":"<p>In order to establish that the student has done something particular but wrong, it is useful for us to be able to apply wrong or buggy rules to expressions.  A typical example would be to expand out powers in the wrong way, e.g.</p> <p> </p>"},{"location":"en/CAS/Buggy_rules/#powers-obey-linearity","title":"Powers obey linearity","text":"<p><code>buggy_pow(ex)</code> Implements the buggy linearity rule for exponentiation, i.e.</p> <p> (a+b)^n \\rightarrow a^n+b^n. </p> <p>This is  useful if we want to compare a student's answer to the result  of having done something wrong.</p>"},{"location":"en/CAS/Buggy_rules/#naive-addition-of-fractions","title":"Naive addition of fractions","text":"<p><code>mediant(ex1,ex2)</code> calculates the mediant of two rational expressions. The mediant of two fractions</p> <p>  \\text{mediant}\\left(\\frac{p_1}{q_1} , \\frac{p_2}{q_2}\\right) := \\frac{p_1+p_2}{q_1+q_2}. </p> <p>Note that both <code>denom</code> and <code>num</code> work on non-rational expressions, assuming the expression to be \"over one\" by implication.  Hence <code>mediant</code> will also assume the denominator is also one in such cases.</p> <p>This is not always a buggy rule. It is used, for example, in connection with Farey sequences, but it is included here as in assessment this function is useful for checking a common mistake when adding fractions.</p> <p>There is scope for further examples of such rules.</p>"},{"location":"en/CAS/Buggy_rules/#see-also","title":"See also","text":"<p>Maxima reference topics</p>"},{"location":"en/CAS/Complex_numbers/","title":"Complex Numbers in STACK","text":"<p>Complex numbers, especially the display of complex numbers, is a surprisingly subtle issue.   This is because there is some genuine ambiguity in whether  is a single object or the sum of two parts.  In mathematics we use this ambiguity to our advantage, but in online assessment we need to be more precise.  There are also issues of unary minus, e.g. not displaying 1 + (-2)\\mathrm{i}. Similarly we typically do not display numbers like 0+1\\mathrm{i}, unless of course we want to at which point we need the option to do so!</p> <p>The general rules when displaying a complex number in Cartesian form \"a+\\mathrm{i}\\, b\" are</p> <ol> <li>the real part should always appear to the left of the imaginary part;</li> <li> i (or whatever symbol is being used for the imaginary unit) should appear on the right of its coefficient if and only if the coefficient is a numerical value. By numerical value, we mean something like 2\\sqrt{2}\\pi but not things like  a \\pi , even if  a  is a constant.</li> </ol> <p>Some examples:</p> <ul> <li><code>3+2*%i</code> should display as 3+2\\,\\mathrm{i}.</li> <li><code>3-%i</code> should display as 3-\\mathrm{i}.</li> <li><code>-a+b*%i</code> should display as -a+\\mathrm{i}\\,b.</li> <li><code>-b*%i</code> should display as -\\mathrm{i}\\,b (not normally as 0-\\mathrm{i}\\,b).</li> </ul> <p>STACK provides two functions, one which simplifies and one which does not.</p> <ol> <li><code>display_complex(ex)</code> takes an expression <code>ex</code> and tries to display this as a complex number obeying the above rules.  In particular, this function makes use of Maxima's <code>realpart</code> and <code>imagpart</code> function to split up <code>ex</code> into real and imaginary parts.  To do this it must assume <code>simp:true</code>, and so the real and imaginary part will be simplified.  For example, <code>display_complex(1+2*%i/sqrt(2))</code> is displayed as 1+\\sqrt{2}\\,\\mathrm{i}.  If you really want 1+\\frac{2}{\\sqrt{2}}\\,\\mathrm{i} then you will need to use the non-simplifying alternative below.  This function respects normal conventions, e.g. when <code>realpart</code> returns zero this function will not print 0+2\\,\\mathrm{i}, it just prints 2\\,\\mathrm{i}, etc.</li> <li><code>disp_complex(a, b)</code> assumes <code>a</code> is the real part and <code>b</code> is the imaginary part (no checking is done).  This function (mostly) does not simplify its arguments.  So <code>disp_complex(0, 2)</code> will appear as 0+2\\,\\mathrm{i}; <code>disp_complex(2/4, 1)</code> will appear as \\frac{2}{4}+1\\,\\mathrm{i}; and <code>disp_complex(2, 2/sqrt(2))</code> will appear as 2+\\frac{2}{\\sqrt{2}}\\,\\mathrm{i}.  Use the atom <code>null</code> if you do not want to print a zero for the real part, or print one times the imaginary part.  <code>disp_complex(null, 2)</code> will appear as 2\\,\\mathrm{i} and <code>disp_complex(null, null)</code> will appear as just \\mathrm{i}.  Think of <code>null</code> as a non-printable unit (additive or multiplicative).</li> </ol> <p>There is one exception.  In order to pull out a unary minus to the front, <code>disp_complex(a, b)</code> will simplify <code>b</code> if <code>b</code> is not a number and it contains a unary minus.  So, for example <code>disp_complex(a, (-b^2)/b)</code> is displayed a-\\mathrm{i}\\,b.  (We might be able to fix this but this edge case requires disproportionate effort: ask the developers if this is essential).</p> <p>You cannot use these functions to display complex numbers in this form \\frac{\\mathrm{i}}{2}, both these function will always display as \\frac{1}{2}\\,\\mathrm{i}.</p> <p>Display respects the multiplication sign used elsewhere within expressions, so that you may have \\frac{2\\cdot \\pi}{3}\\,\\mathrm{i} rather than \\frac{2\\, \\pi}{3}\\,\\mathrm{i}.</p> <p>Note that the function <code>display_complex(ex)</code> returns the inert form <code>disp_complex(a, b)</code>.  The expression <code>disp_complex(a, b)</code> is an \"inert form\", which is only used to fine-tune the display.  This function is not actually defined and so Maxima always returns it unevaluated.  To remove the inert form from an expression, which is needed to manipulate this further, use <code>remove_disp_complex</code>, e.g., with the following.</p> <pre><code>p1:disp_complex(a, b);\np2:ev(p1, disp_complex=remove_disp_complex);\n</code></pre> <p>(Because <code>null</code> has two different meanings within an expression it isn't sufficient to just define <code>disp_complex(ex1, ex2) := ex1+ex2*%i</code>.)</p> <p>There are occasions when you will need to explicitly add brackets to the displayed form of a complex number, e.g. to emphasise it is a single entity.  To add brackets there is a further \"inert form\" <code>disp_parens</code> which does nothing but add parentheses when the expression is displayed with the <code>tex()</code> function.  For example,</p> <pre><code>p1:disp_parens(display_complex(1+%i))*x^2+disp_parens(display_complex(1-%i));\n</code></pre> <p>will display as \\left( 1+\\mathrm{i} \\right)\\cdot x^2+\\left( 1-\\mathrm{i} \\right).  To remove these inert forms evaluate</p> <pre><code>p2:ev(p1, disp_complex=remove_disp_complex, disp_parens=lambda([ex],ex));\n</code></pre> <p>You must remove inert forms before expressions are evaluated by the potential response tree, for example in the feedback variables.  For example, <code>disp_complex(a, b)</code> is not algebraically equivalent to <code>a+b*%i</code>.</p>"},{"location":"en/CAS/Complex_numbers/#polar-and-exponential-form","title":"Polar and Exponential form","text":"<p>A complex number written as r e^{i\\theta} is in exponential form or polar form.  The Maxima function <code>polarform</code> re-writes a complex number in this form, however with <code>simp:false</code> it does not simplify the expressions for the modulus r or argument \\theta (in STACK). Attempting to re-simplify the expression only returns the number to Cartesian form!</p> <p>As a minimal example, try the following.</p> <pre><code>simp:false;\np1:polarform(1+%i);\np2:ev(polarform(1+%i), simp);\np3:ev(p2, simp);\n</code></pre> <p>First we have <code>p1</code> is   \\left(\\left(1\\right)^2 + \\left(1\\right)^2\\right)^{{{1}\\over{2}}}\\,e^{i\\,{\\rm atan2}\\left(1 , 1\\right)} . Of course, we really need some simplification of the r and the \\theta values.</p> <p>Notice the difference between <code>p2</code>: \\sqrt{2}\\,e^{{{i\\,\\pi}\\over{4}}}, and <code>p3</code>: \\sqrt{2}\\,\\left({{i}\\over{\\sqrt{2}}}+{{1}\\over{\\sqrt{2}}}\\right) (which of course is not even 1+i either!).</p> <p>The problem is that in this case <code>ev( ... , simp)</code> is not idempotent, (i.e.  \\text{simplify}(\\text{simplify}(ex)) \\neq \\text{simplify}(ex)  in all cases) and the PHP-maxima connection inevitably passes an expression to and from Maxima multiple times.  If <code>simp:true</code> then we get multiple simplifications, in this example back to <code>p3</code>.</p> <p>Instead, use <code>polarform_simp</code> to rewrite the expression in polar form, and do some basic simplification of r and \\theta.</p> <pre><code>simp:false;\np1:polarform_simp(1+%i);\n</code></pre> <p>returns <code>p1</code> as \\sqrt{2}\\,e^{\\frac{i\\,\\pi}{4}}.</p> <p>Here are some design choices.</p> <ol> <li>Positive numbers are returned as real numbers, not as r e^{i \\times 0}.  E.g. <code>polarform_simp(3)</code> is 3.</li> <li>If r=1 then this is not displayed. E.g. <code>polarform_simp(1/sqrt(2)*(-1+%i))</code> is e^{\\frac{3\\,i\\,\\pi}{4}}.</li> </ol> <p>If question level simplification is on, then the value will probably get re-simplified to Cartesian form.</p> <p>The predicate <code>complex_exponentialp(ex)</code> determines if ex is written in complex exponential form, r e^{i\\theta} . Note this test is strict</p> <ol> <li>we must have r\\geq 0;</li> <li>we must have -\\pi &lt; \\theta \\leq \\pi.</li> <li>we expect negative real numbers to be written as r e^{i\\pi}.</li> </ol> <p>This predicate needs <code>simp:false</code>.  In particular do not test using the <code>ATAlgEquiv</code> test, which always simplifies its arguments.  Instead test with <code>ATCasEqual(complex_exponentialp(ans1),true)</code> to avoid automatic simplification of <code>ans1</code> back to Cartesian form before applying the predicate!</p> <p>An example question is given in the stack library under <code>Topics\\Complex_cube_roots.xml</code>.</p>"},{"location":"en/CAS/Equations/","title":"Asking students to solve equations","text":"<p>It is quite common to ask students to solve an algebraic equation.  The student's answer may be a list (or set) of numbers.  We need to check that this list is</p> <ol> <li>Correct: every element of the list satisfies the equation.</li> <li>Complete: every solution of the equation is in the list.</li> </ol> <p>The best way to do (1) is not to check algebraic equivalence with the list/set of correct answers!  Instead, substitute the student's answer into the equation and see if it works.</p> <p>We proceed by example.  Imagine the teacher has asked the student to solve <code>p=0</code> in the equation defined in the following \"question variables\".</p> <pre><code>p:2*x^2+11*x-5/4;\nta:solve(p,x);\n/* Solve gives a list of equations, we want a set of numbers. */\nta:setify(maplist(rhs,ta));\n</code></pre> <p>For solutions we are not interested in order, but we need multiplicity.  Therefore a \"bag\" is what we need logically.  However, Maxima only has sets and lists.</p> <p>If the student enters a set or list, the AlgEquiv answer test can be used to compare sets and lists, but it does so element-wise.  We need to do something different.</p> <p>In the feedback variables we create a new list called \"listans\" as follows, assuming the student's answer is assigned to <code>ans1</code>.</p> <pre><code>/* Need a *LIST* from this point on, so we have a definite order. */\nsans:listify(ans1);\n/* Substitute into the equation. */\nlistans:maplist(lambda([ex],ev(p,x=ex)), listify(ans1));\n</code></pre> <p>The values of <code>listans</code> are what we get when we substitute in each of the students' answers into the equation.   We could also simplify this, but it isn't strictly necessary.</p> <pre><code>/* \"Simplify\" the result (not strictly necessary). */\nlistans:maplist(fullratsimp, listans);\n</code></pre> <p>Now we have a list of numbers.  We need to compare this with something, but the student's list may have a different number of entries than of the teacher's solution!</p> <pre><code>/* Generate something to compare this list with. */\nzl:makelist(0,length(listans));\n</code></pre> <p>In the potential response tree, compare <code>listans</code> with <code>zl</code> using the AlgEquiv answer test and the <code>quiet=yes</code> option to suppress all feedback.</p> <p>Next, assume we want to work out which answers in the student's list are wrong.</p> <pre><code>/* To decide which answers in a list are equivalent. */\n/* Pick out the wrong answers. */\nwe:sublist(sans, lambda([ex], not(algebraic_equivalence(ev(p,x=ex),0))));\n</code></pre> <p>To use this, we could put the following in the <code>false</code> branch feedback of the first node.</p> <pre><code>The following answers you entered do not satisfy the equation\n\\[ {@we@}. \\]\n</code></pre> <p>The above test only makes sure that everything typed in by the student satisfies the equation.  In particular, the empty set <code>{}</code> will pass this test!  So, we now need to separately check that the student has all the solutions to the equation. To establish this you can check that the length of the teacher's answer is greater than the length of the student's. This can be done with the following test (i.e. the \"greater than\" test).</p> <pre><code>ATGT(length(ta), length(fullratsimp(sans)))\n</code></pre> <p>If this test is true, then the student has missed some solutions.</p> <p>The point really here is that we are not seeking equivalence with a particular set of numbers, rather we are establishing correctness (all things identified by the student are solutions) and completeness (all the solutions are identified by the student) as separate mathematical properties.</p>"},{"location":"en/CAS/Equations/#randomly-generated-variables","title":"Randomly generated variables","text":"<p>In the above example, we may have created a randomly generated variable.  E.g.</p> <pre><code>v:rand([x,y,z,t]);\np:a*v^2+b*v+c;\n</code></pre> <p>In this case, to make the substitution you need to put in an extra evaluation.</p> <pre><code>listans:maplist(lambda([ex],ev(p,ev(v=ex))), listify(ans1));\n</code></pre>"},{"location":"en/CAS/Equations/#repeated-roots","title":"Repeated roots!","text":"<p>If the teacher asks a student to enter the answer as a set, then by default STACK does not remove duplicates because validation, etc.  is done with <code>simp:false</code>.  If you want the student to enter repeated roots you must set <code>Auto-simplify</code> to <code>no</code> in the PRT to avoid losing solutions from the student.  You can then check that each answer satisfies the equation and the student has the correct number of answers using</p> <pre><code>length(ans1)\n</code></pre> <p>being equivalent to the correct number using <code>EqualComAss</code> to avoid simplification. Note, that if you \"simplify\" <code>ans1</code> you are likely to lose answers as sets automatically lose duplicates.</p> <p>Alternatively, you may want to simplify the student's answer to make sure they have the right number of different solutions.  This is a separate test.</p> <pre><code>length(fullratsimp(ans1))\n</code></pre> <p>Exact circumstances of the question will dictate what to do, and whether the teacher expects students to enter duplicate roots the right number of times.</p>"},{"location":"en/CAS/Equations/#displaying-equations-with-the-latex-aligned-environment","title":"Displaying equations with the LaTeX <code>aligned</code> environment.","text":"<p>STACK supports the <code>\\begin{aligned} ... \\end{aligned}</code> environment, which can be used to line up equations on the equal sign.  This is an inert function which displays its arguments.</p> <p>For example, in CASText try <code>{@aligned([x^2+2,stackeq(3)],[x^3,stackeq(4)])@}</code></p> <p>In question variables try </p> <pre><code>/* Either definition of eq1 below works. */\neq1:x^2+2=3 nounand x^3=4;\neq1:[x^2+2=3, x^3=4];\neq2:apply(aligned, map(lambda([ex], [lhs(ex),stackeq(rhs(ex))]), args(eq1)));\n</code></pre> <p>and then display <code>{@eq2@}</code> as normal.</p> <p>STACK also supports an inert function <code>lrparens</code> which allows fine control over the <code>\\left</code> and <code>\\right</code> brackets in LaTeX output.  E.g.</p> <pre><code>eq2:lrparens(\".\", ex, \"\\\\}\");\n</code></pre> <p>will simply wrap the LaTeX output of <code>ex</code> with <code>\\left.</code> and <code>right\\}</code>.  The first and third argumets of lrparens must be strings, and they much correspond to legitimate bracket types in LaTeX.  Note, as normal the curly braces need to be protected.</p>"},{"location":"en/CAS/Geometry/","title":"Geometry related Maxima functions","text":"<p>STACK adds a number of geometry related functions to maxima to help teachers establish mathematical properties, particularly when using the Geogebra input.</p> <p>These functions are defined in <code>stack/maxima/geometry.mac</code>.</p> <p>Note that unless already defined in Maxima, function names should match function names in Geogebra</p>"},{"location":"en/CAS/Geometry/#length","title":"<code>Length</code>","text":"<p><code>Length(v)</code> returns the Euclidean length of the vector (represented as a list) from the origin to the point.</p>"},{"location":"en/CAS/Geometry/#distance","title":"<code>Distance</code>","text":"<p><code>Distance(A, B)</code> returns the Euclidean distance between points represented as lists.  Works in any dimension.</p>"},{"location":"en/CAS/Geometry/#angle","title":"<code>Angle</code>","text":"<p><code>Angle(A, B, C)</code> returns the angle between three points , B, C.  The function returns radians. Note angles are given between -\\pi and \\pi (not between 0 and 2\\pi).</p>"},{"location":"en/CAS/Greek_letters/","title":"The Greek Alphabet","text":"<p>Greek letters are transliterated using their English names.  I.e.</p> <pre><code>[alpha,beta,gamma,delta,epsilon,zeta,eta,theta,iota,kappa,lambda,mu,nu,xi,omicron,pi,rho,sigma,tau,upsilon,phi,chi,psi,omega]\n</code></pre> <p>Upper case Greek letters have an upper-case English first letter.  I.e.</p> <pre><code>[Alpha,Beta,Gamma,Delta,Epsilon,Zeta,Eta,Theta,Iota,Kappa,Lambda,Mu,Nu,Xi,Omicron,Pi,Rho,Sigma,Tau,Upsilon,Phi,Chi,Psi,Omega]\n</code></pre> <p>Many of the Greek letters already have a meaning in Maxima.</p> <ul> <li><code>beta</code>:  The beta function is defined as .</li> <li><code>gamma</code>:  The gamma function.</li> <li><code>delta</code>: This is the Dirac Delta function (only defined in Laplace).</li> <li><code>zeta</code>: This is the Riemann zeta function.</li> <li><code>lambda</code>: Defines and returns a lambda expression, i.e. an unnamed function.</li> <li><code>psi</code>: The derivative of 'log (gamma ())' of order '+1', which has a strange syntax <code>psi[n](x)</code>.  It is also defined in the tensor package. <p>Note that by default, <code>psi</code> requires arguments and any attempt to use this variable name without arguments will result in an error.  For this reason we delete this function in STACK, and <code>psi</code> becomes an unnamed variable.</p> <p>The following are given a specific value by STACK.</p> <ul> <li><code>pi</code> is defined to be the numeric constant which is the ratio of the diameter to the circumference of a circle.  In Maxima this is normally <code>%pi</code>, but STACK also defines the letter <code>pi</code> to have this value.</li> <li>In Maxima the numeric constant which represents the so-called golden mean, (1 + \\sqrt{5})/2 is <code>%phi</code>.</li> </ul>"},{"location":"en/CAS/Greek_letters/#undefine-maxima-defaults","title":"\"Undefine\" Maxima defaults","text":"<p>It is currently not possible to \"undefine\" function names and return them to variables.</p>"},{"location":"en/CAS/Inequalities/","title":"Inequalities","text":"<p>The non-strict inequalities  and \\leq are created as infix operators with the respective syntax</p> <pre><code>&gt;=,  &lt;=\n</code></pre> <p>Maxima allows single inequalities, such as x-1&gt;y, and also support for inequalities connected by logical operators, e.g.  x&gt;1 \\text{ and } x&lt;=5.</p> <p>You can test if two inequalities are the same using the algebraic equivalence test, see the comments on this below.  </p> <p>Chained inequalities, for example 1\\leq x \\leq2\\text{,} are not permitted.  They must be joined by logical connectives, e.g. \"x&gt;1 and x&lt;7\".  As <code>and</code> and <code>or</code> are converted to <code>nounand</code> and <code>nounor</code> in student answers, you may need to use these forms in the teacher's answer as well. For more information, see Propositional Logic.</p> <p>From version 3.6, support for inequalities in Maxima (particularly single variable real inequalities) was substantially improved.</p>"},{"location":"en/CAS/Inequalities/#functions-to-support-inequalities","title":"Functions to support inequalities","text":"<ul> <li><code>ineqprepare(ex)</code></li> </ul> <p>This function ensures an inequality is written in the form <code>ex&gt;0</code> or <code>ex&gt;=0</code> where <code>ex</code> is always simplified.  This is designed for use with the algebraic equivalence answer test in mind.</p> <ul> <li><code>ineqorder(ex)</code></li> </ul> <p>This function takes an expression, applies <code>ineqprepare()</code>, and then orders the parts.  For example,</p> <pre><code> ineqorder(x&gt;1 and x&lt;5);\n</code></pre> <p>returns</p> <pre><code>  5-x &gt; 0 and x-1 &gt; 0\n</code></pre> <p>It also removes duplicate inequalities.  Operating at this syntactic level will enable a relatively strict form of equivalence to be established, simply manipulating the form of the inequalities.  It will respect commutativity and associativity and <code>and</code> and <code>or</code>, and will also apply <code>not</code> to chains of inequalities.</p> <p>If the algebraic equivalence test detects inequalities, or systems of inequalities, then this function is automatically applied.</p> <ul> <li><code>make_less_ineq(ex)</code></li> </ul> <p>Reverses the order of any inequalities so that we have <code>A&lt;B</code> or <code>A&lt;=B</code>.  It does no other transformations.  This is useful because when testing equality up to commutativity and associativity we don't perform this transformation.  We need to put all inequalities a particular way around.  See the EqualComAss test examples for usage.</p>"},{"location":"en/CAS/Inequalities/#see-also","title":"See also","text":"<p>Maxima reference topics</p>"},{"location":"en/CAS/Matrix/","title":"Matrices and vectors in STACK","text":"<p>This page documents the use of matrices in STACK.  There is a topics page for setting linear algebra STACK questions.</p>"},{"location":"en/CAS/Matrix/#matrices","title":"Matrices","text":"<p>The operator <code>.</code> represents noncommutative multiplication and scalar product. The star <code>A*B</code> gives element-wise multiplication.</p> <p>Maxima functions <code>addrow</code> and <code>addcol</code> appends rows/columns onto the matrix.</p> <p>Maxima functions perform row operations</p> <pre><code>rowswap(m,i,j)\nrowadd(m,i,j,k)\n</code></pre> <p>Where <code>m[i]: m[i] + k * m[j]</code>.</p> <pre><code>rowmul(m,i,k)\n</code></pre> <p>Where <code>m[i]: k * m[i]</code>.</p> <p>STACK provides a function to compute reduced row echelon form</p> <pre><code>rref(m)\n</code></pre>"},{"location":"en/CAS/Matrix/#assigning-individual-elements","title":"Assigning individual elements","text":"<p>To assign values to individual elements, use the simple syntax such as the following.</p> <pre><code>m:matrix([1,1],[1,2])\nm[1,2]:3\n</code></pre> <p>Note also Maxima's <code>setelmx</code> function:</p> <pre><code>setelmx (&lt;x&gt;, &lt;i&gt;, &lt;j&gt;, &lt;M&gt;)\n</code></pre> <p>Assigns <code>&lt;x&gt;</code> to the <code>(&lt;i&gt;, &lt;j&gt;)</code>'th element of the matrix <code>&lt;M&gt;</code>, and returns the altered matrix. <code>&lt;M&gt; [&lt;i&gt;, &lt;j&gt;]: &lt;x&gt;</code> has the same effect, but returns <code>&lt;x&gt;</code> instead of <code>&lt;M&gt;</code>.</p>"},{"location":"en/CAS/Matrix/#Showing-working","title":"Showing working","text":"<p>It is quite common to want to show part of a matrix calculation \"un-evaluated\".  For example, the following is typical.</p> <p> </p> <p>This is achieved, by having a question in which simplification is off, and we define the question variables as follows.</p> <pre><code>A:matrix([1,2],[4,5]);\nB:matrix([1,-1],[1,2]);\nC:zip_with_matrix(A,B);\nD:ev(C,simp);\n</code></pre> <p>Notice the use of <code>zip_with_matrix</code> which is not a core Maxima function, but is defined by STACK. The above equation is then generated by the CASText</p> <pre><code>\\[ {@A@}+{@B@}={@C@}={@D@}.\\]\n</code></pre> <p>A similar procedure is needed for showing working when multiplying matrices.   Here we need to loop over the matrices, for square matrices we use the following.</p> <pre><code>A:ev(rand(matrix([5,5],[5,5]))+matrix([2,2],[2,2]),simp);\nB:ev(rand(matrix([5,5],[5,5]))+matrix([2,2],[2,2]),simp);\nBT:transpose(B);\nC:zeromatrix (first(matrix_size(A)), second(matrix_size(A)));\nS:for a:1 thru first(matrix_size(A)) do for b:1 thru second(matrix_size(A)) do C[ev(a,simp),ev(b,simp)]:apply(\"+\",zip_with(\"*\",A[ev(a,simp)],BT[ev(b,simp)]));\nD:ev(C,simp);\n</code></pre> <p>Notice we need to simplify the arguments before we take indices of expressions, and the use of <code>zip_with</code>.  This is one problem with <code>simp:false</code>.</p> <p>For non-square matrices we can use this.</p> <pre><code>A:ev(rand(matrix([5,5,5],[5,5,5]))+matrix([2,2,2],[2,2,2]),simp);\nB:transpose(ev(rand(matrix([5,5,5],[5,5,5]))+matrix([2,2,2],[2,2,2]),simp));\nTA:ev(A.B,simp);\nBT:transpose(B);\nC:zeromatrix (first(matrix_size(A)), second(matrix_size(B)));\nS:for a:1 thru first(matrix_size(A)) do for b:1 thru second(matrix_size(B)) do C[ev(a,simp),ev(b,simp)]:apply(\"+\",zip_with(\"*\",A[ev(a,simp)],BT[ev(b,simp)]));\nD:ev(C,simp);\n</code></pre> <p>Now it makes no sense to include the point wise multiplication of elements as a possible wrong answer.</p> <p>There must be a more elegant way to do this!</p>"},{"location":"en/CAS/Matrix/#matrixparens","title":"Display of matrices","text":"<p>You can set the type of parentheses used to surround matrices in a number of ways.  Firstly, the admin user should set the site default in the qtype_stack options page.</p> <p>For an individual question, the teacher can set the variable</p> <pre><code>lmxchar:\"(\";\n</code></pre> <p>in any of the usual places, e.g. in the question variables.</p> <p>To set the display of an individual matrix, <code>m</code> say, in castext you can use</p> <pre><code>{@(lmxchar:\"|\", m)@}\n</code></pre> <p>Since <code>lmxchar</code> is a global setting in Maxima, you will have to set it back when you next display a matrix.  Not ideal, but there we are.</p> <p>Note, STACK only displays matrices with matching parentheses.  If you want something like  f(x) = \\left\\{ \\begin{array}{cc} 1, &amp; x&lt;0 \\\\ 0, &amp; x\\geq 0 \\end{array}\\right. then you will have to display the matrix without parentheses and sort out the mismatching parentheses in the CASText at the level of display.</p> <p>For example, if we have the question variable <code>f:matrix([4*x+4, x&lt;1],[-x^2-4*x-8, x&gt;=1];</code> and the castext <code>\\[ f(x) := \\left\\{ {@(lmxchar:\"\", f)@} \\right. \\]</code> </p> <p>STACK generates  f(x) := \\left\\{ {\\begin{array}{cc} 4\\cdot x+4 &amp; x &lt; 1 \\\\ -x^2-4\\cdot x-8 &amp; x\\geq 1 \\end{array}} \\right.  </p> <p>LaTeX automatically sizes the parentheses and puts in <code>\\right.</code> to represent a matching, but invisible closing parentesis.</p> <p>You can control the alignment of the columns of the matrix using the function <code>stack_matrix_col(m)</code>. This function takes the matrix, and returns the string of characters \"c\", \"l\", or \"r\" to decide how to format the column in the LaTeX representation of the array.  By default, this is centered with \"c\". We need a function to count the number of columns.  This is the default function.</p> <pre><code>stack_matrix_col(ex) := simplode(maplist(lambda([ex], \"c\"), first(args(ex))))$\n</code></pre> <p>To change to right aligned columns, switch <code>\"c\"</code> to <code>\"r\"</code>.  This function takes the whole matrix and therefore potentially gives you full control.</p> <p>For this function to take effect in the whole question, including validation of students' input, place the redefinition before <code>%_stack_preamble_end;</code> in the question variables.</p>"},{"location":"en/CAS/Maxima_background/","title":"Introduction to Maxima for STACK users","text":"<p>A computer algebra system (CAS) is software that allows the manipulation of mathematical expressions in symbolic form. Most commonly, this is to allow the user to perform some computation.  For the purposes of assessment our calculation establishes some relevant properties of the students' answers. These properties include</p> <ul> <li>using a predicate function to find if a single expression has a property.  For example, are any of the numbers floating points?</li> <li>comparing two expressions using an answer test to compare two expressions.  For example, is the student's expression equivalent to the teacher's?</li> </ul> <p>Maxima is also used for randomly generating structured mathematical objects which become parts of a question and plotting graphs of functions.</p> <p>To write more than very simple STACK questions you will need to use some Maxima commands. This documentation does not provide a detailed tutorial on Maxima. A very good introduction is given in Minimal Maxima, which this document assumes you have read.</p> <p>STACK modifies Maxima in a number of ways.</p>"},{"location":"en/CAS/Maxima_background/#Types_of_object","title":"Types of object","text":"<p>Everything in Maxima is either an atom or an expression. Atoms are either an integer number, float, string or a name.  You can use the predicate <code>atom()</code> to decide if its argument is an atom.  Expressions have an operator and a list of arguments. Note that the underscore symbol is not an operator.  Thus <code>a_1</code> is an atom in maxima. Display of subscripts and fine tuning the display is explained in the atoms, subscripts and fine tuning the LaTeX display page.</p> <p>Maxima is a very weakly typed language.  However, in STACK we need the following \"types\" of expression:</p> <ol> <li>equations, i.e. an expression in which the top operation is an equality sign;</li> <li>inequalities, for example ;</li> <li>sets, for example, \\{1,2,3\\};</li> <li>lists, for example, [1,2,3].   In Maxima ordered lists are entered using square brackets, for example as <code>p:[1,1,2,x^2]</code>.     An element is accessed using the syntax <code>p[1]</code>.</li> <li>matrices.  The basic syntax for a matrix is <code>p:matrix([1,2],[3,4])</code>.  Each row is a list. Elements are accessed as <code>p[1,2]</code>, etc.</li> <li>logical expression.  This is a tree of other expressions connected by the logical <code>and</code> and <code>or</code>.  This is useful for expressing solutions to equations, such as <code>x=1 or x=2</code>.  Note, the support for these expressions is unique to STACK.</li> <li>expressions.</li> </ol> <p>Expressions come last, since they are just counted as being not the others! STACK defines predicate functions to test for each of these types.</p>"},{"location":"en/CAS/Maxima_background/#Numbers","title":"Numbers","text":"<p>Numbers are important in assessment, and there is more specific and detailed documentation on how numbers are treated: Numbers in STACK.</p>"},{"location":"en/CAS/Maxima_background/#alias","title":"Alias","text":"<p>STACK defines the following function alias names</p> <pre><code>simplify(ex) := ev(fullratsimp(ex), simp);\nint := integrate\n</code></pre> <p>The absolute value function in Maxima is entered as <code>abs()</code>.  STACK also permits you to enter using <code>|</code> symbols, i.e.<code>|x|</code>.  This is an alias for <code>abs</code>.  Note that <code>abs(x)</code> will be displayed by STACK as |x|.</p> <p>STACK also redefined a small number of functions</p> <ul> <li>The plot command <code>plot2d</code> is not used in STACK questions.  Use <code>plot</code> instead, which is documented on the Maxima plot page.  This ensures your image files are available on the server.</li> <li>The random number command <code>random</code> is not used in STACK questions.  Use the command <code>rand</code> instead.  This ensures pseudorandom numbers are generated and a student gets the same version each time they login.</li> </ul>"},{"location":"en/CAS/Maxima_background/#Parts_of_Maxima_expressions","title":"Parts of Maxima expressions","text":""},{"location":"en/CAS/Maxima_background/#opx-the-top-operator","title":"<code>op(x)</code> - the top operator","text":"<p>It is often very useful to take apart a Maxima expression. To help with this Maxima has a number of commands, including <code>op(ex)</code>, <code>args(ex)</code> and <code>part(ex,n)</code>. Maxima has specific documentation on this.</p> <p>In particular,  <code>op(ex)</code> returns the main operator of the expression <code>ex</code>.  This command has some problems for STACK.</p> <ol> <li>calling <code>op(ex)</code> on an atom (see Maxima's documentation on the predicate <code>atom(ex)</code>) such as numbers or variable names, cause  <code>op(ex)</code> to throw an error.</li> <li><code>op(ex)</code> sometimes returns a string, sometimes not.</li> <li>the unary minus causes problems.  E.g. in <code>-1/(1+x)</code>     the operation is not \"/\", as you might expect, but it is \"-\" instead!</li> </ol> <p>To overcome these problems STACK has a command</p> <pre><code>safe_op(ex)\n</code></pre> <p>This always returns a string.  For an atom this is empty, i.e. <code>\"\"</code>.  It also sorts out some unary minus problems.</p> <p>We also have a function <code>get_safe_ops(ex)</code> which returns a set of \"<code>safe_op</code>s\" in the expression.  Atoms are ignored.</p>"},{"location":"en/CAS/Maxima_background/#get_opsex-all-operators","title":"<code>get_ops(ex)</code> - all operators","text":"<p>This function returns a set of all operators in an expression.  Useful if you want to find if multiplication is used anywhere in an expression.</p>"},{"location":"en/CAS/Maxima_background/#Maxima_commands_defined_by_STACK","title":"Maxima commands defined by STACK","text":"<p>It is very useful when authoring questions to be able to test out Maxima code in the same environment which STACK uses Maxima. That is to say, with the settings and STACK specific functions loaded. To do this see STACK-Maxima sandbox.</p> <p>STACK creates a range of additional functions and restricts those available, many of which are described within this documentation.  See also Predicate functions.</p> Command Description <code>factorlist(ex)</code> Returns a list of factors of <code>ex</code> with or without multiplicities.  Note, the product of these factors may not be the original expression, and may differ by a factor of \\pm 1 due to unary minus extraction and ordering of variables.  For this reason, if you want to decide if <code>f1</code> is a factor of <code>ex</code> then it's better to check <code>remainder(ex,f1)</code> is zero, than membership of the factor list.  E.g. both <code>remainder(a^2-b^2,b-a)</code> and <code>remainder(a^2-b^2,a-b)</code> are zero, but <code>factorlist(a^2-b^2)</code> gives <code>[b-a,b+a]</code> which does not contain <code>a-b</code> as a factor. By default, the list does not contain multiplicities. If the list should contain multiplicities, use factorlist(ex, true). <code>zip_with(f,a,b)</code> This function applies the binary function f to two lists a and b returning a list. <code>zip_with_matrix(f,A,B)</code> This function applies the binary function f to two matrices A and B returning a matrix.  An example is given in adding matrices to show working. <code>coeff_list_nz(ex,v)</code> This function takes an expression <code>ex</code> and returns a list of nonzero coefficients of <code>v</code>. <code>divthru(ex)</code> Takes an algebraic fraction, e.g. (x^4-1)/(x+2) and divides through by the denominator, to leave a polynomial and a proper fraction. Useful in feedback, or steps of a calculation. <code>stack_strip_percent(ex,var)</code> Removes any variable beginning with the <code>%</code> character from <code>ex</code> and replace them with variables from <code>var</code>.  Useful for use with solve, ode2 etc.  Solve and ode2. <code>exdowncase(ex)</code> Takes the expression <code>ex</code> and substitutes all variables for their lower case version (cf <code>sdowncase(ex)</code> in Maxima).  This is very useful if you don't care if a student uses the wrong case, just apply this function to their answer before using an answer test.  Note, of course, that <code>exdowncase(X)-x=0.</code> <code>stack_reset_vars</code> Resets constants, e.g. i, as abstract symbols, see Numbers. <code>safe_op(ex)</code> Returns the operation of the expression as a string.  Atoms return an empty string (rather than throwing an error as does <code>op</code>). <code>comp_square(ex,v)</code> Returns a quadratic <code>ex</code> in the variable <code>v</code> in completed square form. <code>degree(ex,v)</code> Returns the degree of the expanded form of <code>ex</code> in the variable <code>v</code>. See also Maxima's <code>hipow</code> command. <code>unary_minus_sort(ex)</code> Tidies up the way unary minus is represented within expressions when <code>simp:false</code>.  See also simplification."},{"location":"en/CAS/Maxima_background/#assignment","title":"Assignment","text":"<p>In Maxima the assignment of a value to a variable is very unusual.</p> Input Result <code>a:1</code> Assignment of the value 1 to a. <code>a=1</code> An equation, yet to be solved. <code>f(x):=x^2</code> Definition of a function. <p>In STACK simple assignments are of the more conventional form <code>key : value</code>, for example,</p> <pre><code>n : rand(3)+2;\np : (x-1)^n;\n</code></pre> <p>Of course, these assignments can make use of Maxima's functions to manipulate expressions.</p> <pre><code>p : expand( (x-3)*(x-4) );\n</code></pre> <p>Another common task is that of substitution. This can be performed with Maxima's <code>subst</code> command. This is quite useful, for example if we define p  as follows, in the then we can use this in response processing to determine if the student's answer is odd.</p> <pre><code>p : ans1 + subst(-x,x,ans1);\n</code></pre> <p>All sorts of properties can be checked for in this way. For example, interpolates. Another example is a stationary point of f(x) at x=a, which can be checked for using</p> <pre><code>p : subst(a,x,diff(ans1,x));\n</code></pre> <p>Here we have assumed <code>a</code> is some point given to the student, <code>ans1</code> is the answer and that p will be used in the response processing tree.</p> <p>You can use Maxima's looping structures within Question variables. For example</p> <pre><code>n : 1;\nfor a:-3 thru 26 step 7 do n:n+a;\n</code></pre> <p>The result will be n=56. It is also possible to define functions within the question variables for use within a question.</p> <pre><code>f(x) := x^2;\nn : f(4);\n</code></pre>"},{"location":"en/CAS/Maxima_background/#logarithms","title":"Logarithms","text":"<p>STACK loads the contributed Maxima package <code>log10</code>.  This defines logarithms to base 10 automatically. STACK also creates two aliases</p> <ol> <li><code>ln</code> is an alias for \\log, which are natural logarithms</li> <li><code>lg</code> is an alias for \\log_{10}, which are logarithms to base 10.     It is not possible to redefine the command <code>log</code> to be to the base 10.</li> </ol>"},{"location":"en/CAS/Maxima_background/#sets-lists-sequences-n-tuples","title":"Sets, lists, sequences, n-tuples","text":"<p>It is very useful to be able to display expressions such as comma separated lists, and n-tuples  1,2,3,4,\\cdots   (1,2,3,4)  Maxima has in-built functions for lists, which are displayed with square brackets [1,2,3,4], and sets with curly braces  \\{1,2,3,4\\} . Maxima has no default functions for n-tuples or for sequences.</p> <p>STACK provides an inert function <code>sequence</code>.  All this does is display its arguments without brackets. For example <code>sequence(1,2,3,4)</code> is displayed 1,2,3,4. STACK provides convenience functions.</p> <ul> <li><code>sequenceify</code>, creates a sequence from the arguments of the expression.  This turns lists, sets etc. into a sequence.</li> <li><code>sequencep</code> is a predicate to decide if the expression is a sequence.</li> <li>The atom <code>dotdotdot</code> is displayed using the tex <code>\\ldots</code> which looks like \\ldots.  This atom cannot be entered by students.</li> </ul> <p>STACK provides an inert function <code>ntuple</code>.  All this does is display its arguments with round brackets. For example <code>ntuple(1,2,3,4)</code> is displayed (1,2,3,4).</p> <ul> <li><code>ntupleify</code> creates an n-tuple from the arguments of the expression.  This turns lists, sets etc. into an n-tuple.</li> <li><code>ntuplep</code> is a predicate to decide if the expression is an ntuples.</li> </ul> <p>In strict Maxima syntax <code>(a,b,c)</code> is equivalent to <code>block(a,b,c)</code>.  If students type in <code>(a,b,c)</code> using a STACK input it is filtered to <code>ntuple(a,b,c)</code>. Teachers must use the <code>ntuple</code> function explicitly to construct question variables, teacher's answers, test cases and so on. The <code>ntuple</code> is useful for students to type in coordinates.</p> <p>If you want to use these functions, then you can create question variables as follows</p> <pre><code>L1:[a,b,c,d];\nD1:apply(ntuple, L1);\nL2:args(D1);\nD2:sequenceify(L2);\n</code></pre> <p>Then <code>L1</code> is a list and is displayed with square brackets as normal. <code>D1</code> has operator <code>ntuple</code> and so is displayed with round brackets. <code>L2</code> has operator <code>list</code> and is displayed with square brackets.  Lastly, D2 is an <code>sequence</code> and is displayed without brackets.</p> <p>You can, of course, apply these functions directly.</p> <pre><code>T1:ntuple(a,b,c);\nS1:sequence(a,b,c,dotdotdot);\n</code></pre> <p>If you want to use <code>sequence</code> or <code>ntuple</code> in a PRT comparison, you probably want to turn them back into lists. E.g. <code>ntuple(1,2,3)</code> is not algebraically equivalent to <code>[1,2,3]</code>.  To do this use the <code>args</code> function.   We may, in the future, give more active meaning to the data types of <code>sequence</code> and <code>ntuple</code>.</p> <p>Currently, students can enter expressions with \"implied ntuples\" E.g</p> <ul> <li>Student input of <code>(1,2,3)</code> is interpreted as <code>ntuple(1,2,3)</code>.</li> <li>Student input of <code>{(1,2,3),(4,5,6)}</code> is interpreted as <code>{ntuple(1,2,3),ntuple(4,5,6)}</code>.</li> <li>Since no operations are defined on ntuples, students cannot currently enter things like <code>(1,2,3)+s*(1,0,0)</code>.  There is nothing to stop a teacher defining the expression tree <code>ntuple(1,2,3)+s*ntuple(1,0,0)</code>, but the operations <code>+</code> and <code>*</code> are not defined for ntuples and so nothing will happen!  If you want a student to enter the equation of a line/plane they should probably use the matrix syntax for vectors.  (This may change in the future).</li> </ul> <p>Matrices have options to control the display of the braces.  Matrices are displayed without commas.</p> <p>If you are interacting with javascript do not use <code>sequenceify</code>.  If you are interacting with javascript, such ss JSXGraph, then you may want to output a list of values without all the LaTeX and without Maxima's normal bracket symbols. You can use</p> <pre><code>stack_disp_comma_separate([a,b,sin(pi)]);\n</code></pre> <p>This function turns a list into a string representation of its arguments, without braces. Internally, it applies <code>string</code> to the list of values (not TeX!).  However, you might still get things like <code>%pi</code> in the output.</p> <p>You can use this with mathematical input: <code>{@stack_disp_comma_separate([a,b,sin(pi)])@}</code> and you will get the result <code>a, b, sin(%pi/7)</code> (without the string quotes) because when a Maxima variable is a string we strip off the outside quotes and don't typeset this in maths mode.</p>"},{"location":"en/CAS/Maxima_background/#functions","title":"Functions","text":"<p>It is sometimes useful for the teacher to define functions as part of a STACK question.  This can be done in the normal way in Maxima using the notation.</p> <pre><code> f(x):=x^2;\n</code></pre> <p>Using Maxima's <code>define()</code> command is forbidden. An alternative is to define <code>f</code> as an \"unnamed function\" using the <code>lambda</code> command.</p> <pre><code> f:lambda([x],x^2);\n</code></pre> <p>Here we are giving a name to an \"unnamed function\" which seems perverse.  Unnamed functions are extremely useful in many situations.</p> <p>For example, a piecewise function can be defined by either of these two commands</p> <pre><code> f(x):=if (x&lt;0) then 6*x-2 else -2*exp(-3*x);\n f:lambda([x],if (x&lt;0) then 6*x-2 else -2*exp(-3*x));\n</code></pre> <p>You can then plot this using</p> <pre><code>{@plot(f(x),[x,-1,1])@}\n</code></pre>"},{"location":"en/CAS/Maxima_background/#maxima-gotchas","title":"Maxima \"gotcha\"s!","text":"<ul> <li>Maxima does not have a <code>degree</code> command for polynomials.  We define one via the <code>hipow</code> command.</li> <li>Matrix multiplication is the dot, e.g. <code>A.B</code>. The star <code>A*B</code> gives element-wise multiplication.</li> <li>The atoms <code>a1</code> and <code>a_1</code> are not considered to be algebraically equivalent.</li> </ul>"},{"location":"en/CAS/Maxima_background/#further-information-and-links","title":"Further information and links","text":"<ul> <li>Minimal Maxima</li> <li>Maxima on SourceForge</li> </ul>"},{"location":"en/CAS/Maxima_background/#see-also","title":"See also","text":"<p>Maxima reference topics</p>"},{"location":"en/CAS/Maxima_plot/","title":"Embedding Maxima-generated plots via <code>plot()</code>, a wrapper for Maimxa's <code>plot2d()</code>","text":"<p>In STACK, the <code>plot</code> command has been defined to be a wrapper for Maxima's <code>plot2d</code> command.  The wrapper makes sure that an image file is given an appropriate name, file location, and that Maxima returns a URL to the user giving the image.  Not all of the features of <code>plot2d</code> are available through <code>plot</code>.</p> <p>For example,</p> <ol> <li>Try the following in a castext field. <code>{@plot(x^2,[x,-1,1])@}</code>.</li> <li>You can add a second variable to control the range of the y-axes. <code>plot(x^2,[x,-1,1],[y,0,2])</code>.</li> <li>To plot many functions in a single image, we need to define a list of expressions. <code>plot([x^2,sin(x)],[x,-1,1])</code>.</li> <li>A list of functions can be created with Maxima's <code>makelist</code> command <code>(p(k):=x^k,pl:makelist(p(k),k,1,5),plot(pl,[x,-1,1]))</code>.</li> </ol> <p>Notes.</p> <ul> <li>Currently STACK (PHP) calls Maxima, this in turn has <code>gnuplot</code> create a basic SVG image on the server and return a URL.</li> <li>By default plots are surrounded by the <code>&lt;div class=\"stack_plot\"&gt;</code>.  This puts whitespace around a plot, and places the plot in the centre of the screen.  To suppress this <code>div</code> use the option <code>[plottags,false]</code>.</li> <li>The default in Maxima is to include a legend consisting of a <code>string</code> representation of the plot.  In STACK this is turned off by default.  To switch it back on, use the command <code>[legend, true]</code>.  Any other value of the option <code>legend</code> will respect the original command.</li> </ul>"},{"location":"en/CAS/Maxima_plot/#maxima-plot2d-options-supported-by-plot-in-stack","title":"Maxima <code>plot2d()</code> options supported by <code>plot()</code> in STACK","text":"<p>The following <code>plot</code> options are currently supported by STACK.   If you would like to expand the range of options available please contact the developers.</p> <pre><code>[xlabel, ylabel, label, legend, color, style, point_type, nticks, logx, logy, axes, box, plot_realpart, yx_ratio, xtics, ytics, ztic, grid2d, adapt_depth],\n</code></pre>"},{"location":"en/CAS/Maxima_plot/#options-only-available-in-plot","title":"Options only available in <code>plot()</code>","text":""},{"location":"en/CAS/Maxima_plot/#size-of-images","title":"Size of images","text":"<p>To change the size of the image use the Maxima variable <code>size</code>, e.g. <code>plot(x^2,[x,-1,1],[size,250,250])</code>.</p>"},{"location":"en/CAS/Maxima_plot/#image-margin","title":"Image margin","text":"<p>To change the size of the margin around the image use the variable <code>margin</code>, e.g. <code>plot(x^2,[x,-1,1],[margin,5])</code>.</p> <p>The value of this parameter is used to set gnuplot's margin parameters to the same value <code>X</code>.  There is no way to set these individually.</p> <pre><code>set lmargin X\nset rmargin X\nset tmargin X\nset bmargin X\n</code></pre> <p>The margin also contains any axes numbers, labels etc. outside the plot area.   A value of <code>[margin, 0]</code> will therefore crop some of the labels.</p>"},{"location":"en/CAS/Maxima_plot/#alttext","title":"Alternate text for an image (alt tag)","text":"<p>The default alternate text for an image (img alt tag) generated by a plot command such as</p> <pre><code>plot(x^2,[x,-2,2]);\n</code></pre> <p>is \"STACK auto-generated plot of x^2 with parameters [[x,-2,2]]\".  If your question asks students to \"give an algebraic expression which describes this curve\" then you will need to set alternative text which does not include the answer.</p> <p>To set a specific alt tag, pass an equation <code>[alt,\"...\"]</code> as an argument to the plot function.</p> <pre><code>plot(x^2,[x,-2,2],[alt,\"Hello world\"]);\n</code></pre> <p>If you would like an expression as part of this then try</p> <pre><code>p:sin(x);\nplot(p,[x,-2,2],[alt,sconcat(\"Here is \",string(p))]);\n</code></pre>"},{"location":"en/CAS/Maxima_plot/#language-strings","title":"Language strings","text":"<p>Note, you cannot put language strings directly into the alt-text.  E.g. the following will not be translated.</p> <pre><code>{@plot(x^2,[x,-2,2],[alt,\"[[lang code='en,other']]A quadratic curve[[/lang]][[lang code='no']]En kvadratisk kurve[[/lang]]\"])@}\n</code></pre> <p>You can define a castext element in the question variables which does get translated, e.g.</p> <pre><code>altlbls: castext(\"[[lang code='en,other']]A quadratic curve[[/lang]][[lang code='no']]En kvadratisk kurve[[/lang]]\");\n</code></pre> <p>and then use this in the castext:</p> <pre><code>{@plot(x^2,[x,-2,2],[alt,altlbls])@}\n</code></pre> <p>This technique can be put into other language dependent plot variables.  E.g.</p> <pre><code>xlabeltrans: castext(\"[[lang code='en,other']]Independent variable[[/lang]][[lang code='no']]Uavhengig variabel[[/lang]]\");\nylabeltrans: castext(\"[[lang code='en,other']]Dependent variable[[/lang]][[lang code='no']]Avhengig variabel[[/lang]]\");\n</code></pre> <p>Then in the castext <code>{@plot(x*sin(1/x),[x,-1,2],[xlabel,xlabeltrans],[ylabel,ylabeltrans])@}</code></p>"},{"location":"en/CAS/Maxima_plot/#example-plots","title":"Example plots","text":""},{"location":"en/CAS/Maxima_plot/#traditional-axes","title":"Traditional axes","text":"<p>A traditional plot with the axes in the middle can be generated by the following.</p> <pre><code>{@plot([x^2/(1+x^2),2*x/(1+x^2)^2], [x, -2, 2], [y,-2.1,2.1], [box, false], [yx_ratio, 1], [axes, solid], [xtics, -2, 0.5, 2],[ytics, -2, 0.5, 2])@}\n</code></pre>"},{"location":"en/CAS/Maxima_plot/#labels","title":"Labels","text":"<p>The <code>ylabel</code> command rotates its argument through 90 degrees.  If you want a horizontal label on the -axis you will need to use the <code>label</code> command instead.</p> <pre><code>{@plot([x^2/(1+x^2),2*x/(1+x^2)^2], [x, -2, 2], [y,-2.1,2.1], [label,[\"y\",-2.5,0.25]])@}\n</code></pre>"},{"location":"en/CAS/Maxima_plot/#grid","title":"Grid","text":"<p>The grid is controlled by the maxima command <code>grid2d</code>.  Compare the following.</p> <pre><code>{@plot([x^2/(1+x^2),2*x/(1+x^2)^2], [x, -2, 2], [y,-2.1,2.1], grid2d)@}\n{@plot([x^2/(1+x^2),2*x/(1+x^2)^2], [x, -2, 2], [y,-2.1,2.1])@}\n</code></pre>"},{"location":"en/CAS/Maxima_plot/#piecewise-functions","title":"Piecewise functions","text":"<p>A piecewise function can be defined with <code>if</code> statements.</p> <pre><code>x0:2;\nf0:x^3;\nf1:sin(x);\nx0:2\npg1:if x&lt;x0 then f0 else f1;\n</code></pre> <p>With castext</p> <pre><code>{@plot(pg1,[x,(x0-5),(x0+5)],[y,-10,10])@}\n</code></pre> <p>Notice that Maxima draws the discontinuity as a vertical line.</p> <p>For a discontinuous function, use the <code>unit_step</code> and <code>kron_delta</code> functions, e.g.</p> <pre><code>f0:x^3;\nf1:sin(x);\nx0:2;\npg2(x) := f0*unit_step(x0-x) + f1*unit_step(x-x0) + und*kron_delta(x,x0);\n</code></pre> <p>Now use:</p> <pre><code>{@plot(pg2(x), [x,(x0-5),(x0+5)], [y,-10,10], [legend,false])@}\n</code></pre> <p>A further example of a step function:</p> <pre><code>step_fn(x,x0) := unit_step(x-x0-1/2) - unit_step(x-x0+1/2) + und*kron_delta(x,x0+1/2)+ und*kron_delta(x,x0-1/2);\np1:sum(step_fn(x,2*k),k,-3,3);\n</code></pre> <p>which can be used with <code>{@plot(p1,[x,-5,5])@}</code>.</p> <p>For a discontinuous function, with end points, add in discrete plots.</p> <pre><code>C:-5;\nf0:x^3;\nf1:sin(x);\nx0:2;\npg2(x) := f0*unit_step(x0-x) + f1*unit_step(x-x0) + und*kron_delta(x,x0);\n\nps:[style, lines, points, points];\npt:[point_type, circle,bullet,circle];\npc:[color, blue,blue,red];\n</code></pre> <p>Now use:</p> <pre><code>{@plot([pg2(x), [discrete,[[x0,C]]], [discrete,[[x0,limit(pg2(x),x,x0,'minus)],[x0,limit(pg2(x),x,x0,'plus)]]]], [x,(x0-5),(x0+5)], [y,-10,10], ps, pt, pc, [legend,false])@}\n</code></pre>"},{"location":"en/CAS/Maxima_plot/#interaction-with-question-blocks","title":"Interaction with question blocks","text":"<p>It is possible to create multiple plots using the question blocks features.  E.g.</p> <pre><code>[[foreach n=\"[1,2,3,4,5,6,7,8]\"]]\n    {@plot(x^n,[x,-1,1],[size,250,250],[plottags,false])@}\n[[/ foreach]]\n</code></pre> <p>To illustrate how the <code>margin</code> option can be used compare the above with</p> <pre><code>[[foreach n=\"[1,2,3,4,5,6,7,8]\"]]\n    {@plot(x^n,[x,-1,1],[size,250,250],[plottags,false],[margin,1.8])@}\n[[/ foreach]]\n</code></pre>"},{"location":"en/CAS/Maxima_plot/#bode-plots","title":"Bode plots","text":"<p>Maxima has a very basic package for bode diagrams, try <code>load(bode)</code> in a Maxima session.  This is not a supported package, so instead you can create Bode diagrams directly with code such as the following.</p> <pre><code>/* Define two functions to do the plotting */\nbose_gain(f,r):=block([p,w], p:plot(20*log(abs( apply(f,[%i*w]) ))/log(10), [w, r[2],r[3]], [logx]), return(p) );\nbose_phase(f,r):=block([p,w], p:plot(  carg(  apply(f,[%i*w]))*180/%pi, [w, r[2],r[3]], [logx]), return(p) );\n/* Define a transfer function */\nH(s):=100*(1+s)/((s+10)*(s+100));\n\n/* Produce the graphs */\ngain: bose_gain(H,[w,1/1000,1000]);\nphase:bose_phase(H,[w,1/1000,1000]);\n</code></pre>"},{"location":"en/CAS/Maxima_plot/#a-catalogue-of-plots","title":"A catalogue of plots","text":"<p>The following CASText gives representative examples of the plot2d features supported by STACK's plot command.  Cut and paste it into the CASchat script.  Beware that these are likely to cause a timeout on the CAS if you try them all at once.</p> <pre><code>&lt;h3&gt;Basic plot&lt;/h3&gt;\n{@plot(x^2,[x,-2,2])@}\nThe following plot tests the option to explicitly test the alt-text.\n{@plot(x^3,[x,-3,3], [alt,\"What is this function?\"])@}\n&lt;h3&gt;Multiple graphs, clips the \\(y\\) values&lt;/h3&gt;\n{@plot([x^3,exp(x)],[x,-2,2],[y,-4,4])@}\n&lt;h3&gt;With and without a grid&lt;/h3&gt;\n{@plot([x^2/(1+x^2),2*x/(1+x^2)^2], [x, -2, 2], [y,-2.1,2.1], grid2d)@}\n{@plot([x^2/(1+x^2),2*x/(1+x^2)^2], [x, -2, 2], [y,-2.1,2.1])@}\n&lt;h3&gt;Discrete plots&lt;/h3&gt;\nBasic discrete plot.\n{@plot([discrete,[[0,0],[1,1],[0,2]]])@}\nPoints: by default the points are too large!\n{@plot([discrete,[[0,0], [1,1], [1.5,(1.5)^2]]],[x,-2,2],[style, [points]],[point_type, bullet])@}\n{@plot([discrete,[[0,0], [1,1], [1.5,(1.5)^2]]],[x,-2,2],[style, [points, 1]],[point_type, bullet])@}\nNotice the size of the points is controlled by the second argument in the list `[points, 1]`.  This is documented in Maxima under \"Plot option: style\".  A more complicated example is below.\n{@plot([[discrete,[[0,0], [1,1], [1.5,(1.5)^2]]],[discrete,[[0,0.1], [0.75,1], [1.25,1.5]]]],[style, [points, 1, red, 1 ], [points, 1.5, blue, 1]])@}\nCombination of discrete plots with normal plots.\n{@plot([x^2, [discrete,[ [0,0], [1,1], [0,2]]]],[x,-2,2])@}\n{@plot([x^2, [discrete,[ [0,0], [1,1], [1.5,(1.5)^2]]]],[x,-2,2],[style, lines, [points, 1]],[point_type, bullet])@}\n{@plot([[discrete,[[30,7]]], -0.4*x+19],[x,0,60],[y,0,20],[style, points, lines], [color, red, blue],[point_type, asterisk])@}\n{@plot([[discrete,[[10, 0.6], [20, 0.9], [30, 1.1], [40, 1.3], [50, 1.4]]], 2*%pi*sqrt(l/980)], [l,0,50],[style, points, lines], [color, red, blue],[point_type, asterisk])@}\nUsing different point styles.\n{@plot([[discrete, [[10, .6], [20, .9], [30, 1.1],[40, 1.3], [50, 1.4]]],[discrete, [[11, .5], [15, .9], [25, 1.2],[40, 1.3], [50, 1.4]]]],[style, points],[point_type,circle,square],[color,black,green])@}\n&lt;h3&gt;Parametric plots&lt;/h3&gt;\n{@plot([parametric, cos(t), sin(3*t), [t,0,2*%pi]], [nticks, 500])@}\n&lt;h3&gt;Setting non-trivial options: labels on the axes and legend&lt;/h3&gt;\n{@plot([x^2/(1+x^2),diff(x^2/(1+x^2),x)],[x,-1,2],[legend,true])@}\n{@plot(x*sin(1/x),[x,-1,2],[xlabel,\"Independent variable\"],[ylabel,\"Dependent variable\"],[legend,\"This is a plot\"])@}\n&lt;h3&gt;Log scale for y-axis, with red colour&lt;/h3&gt;\n{@plot(exp(3*s),[s, -2, 2],[logy], [color,red])@}\n&lt;h3&gt;Turn off the box, grid and the axes&lt;/h3&gt;\nDefault options\n{@plot([parametric, (exp(cos(t))-2*cos(4*t)-sin(t/12)^5)*sin(t), (exp(cos(t))-2*cos(4*t)-sin(t/12)^5)*cos(t), [t, -8*%pi, 8*%pi]], [nticks, 100])@}\n&lt;tt&gt;[axes, false]&lt;/tt&gt;\n{@plot([parametric, (exp(cos(t))-2*cos(4*t)-sin(t/12)^5)*sin(t), (exp(cos(t))-2*cos(4*t)-sin(t/12)^5)*cos(t), [t, -8*%pi, 8*%pi]], [nticks, 100], [axes,false])@}\n&lt;tt&gt;[box, false]&lt;/tt&gt;\n{@plot([parametric, (exp(cos(t))-2*cos(4*t)-sin(t/12)^5)*sin(t), (exp(cos(t))-2*cos(4*t)-sin(t/12)^5)*cos(t), [t, -8*%pi, 8*%pi]], [nticks, 100], [box,false])@}\n&lt;h3&gt;Putting the axes in the middle&lt;/h3&gt;\n{@plot([x^2/(1+x^2),2*x/(1+x^2)^2], [x, -2, 2], [y,-2.1,2.1], [box, false], [yx_ratio, 1], [axes, solid], [xtics, -2, 0.5, 2],[ytics, -2, 0.5, 2])@}\n&lt;h3&gt;Example with ticks, colour and alt-text&lt;/h3&gt;\n{@plot([6*x,6^x,x^6,x^(1/6)], [x, -2.2, 2.2], [y, -5.2, 5.2], [box, false], [yx_ratio, 1], [axes, solid], [xtics, -5, 1, 5],[ytics, -5, 1, 5], cons(legend, [\"f\", \"F\", \"g\", \"G\"]), [alt, \"Graph Of Multiple Functions\"], [style, [linespoints, 1, 1.5]], [nticks, 5], [color, \"#785EF0\", \"#DC267F\", \"#FE6100\", \"#648FFF\"], [adapt_depth, 0]);@}\n</code></pre>"},{"location":"en/CAS/Numbers/","title":"Numbers in STACK","text":"<p>Separate pages document</p> <ol> <li>numerical answer tests,</li> <li>complex numbers.</li> <li>numerical rounding.</li> </ol>"},{"location":"en/CAS/Numbers/#precise-constants","title":"Precise Constants","text":"<p>In Maxima the special constants are defined to be</p> <pre><code>%i, %e, %pi\n</code></pre> <p>etc.   STACK also uses single letters, e.g.</p> <pre><code>e: %e\npi: %pi\n</code></pre> <p>Optionally, depending on the question settings, you have</p> <pre><code>i: %i\nj: %i\n</code></pre> <p>Sometimes you need to use , or other constants, as an abstract symbol not a number.  The Maxima solution is to use the <code>kill()</code> command, but for security reasons users of STACK are not permitted to use this function. Instead use <code>stack_reset_vars(true)</code> in the question variables.  This resets all the special constants defined by STACK so the symbols can be redefined in an individual STACK question.  (On Maxima 5.42.1 (and possibly others) <code>stack_reset_vars(true)</code> also resets <code>ordergreat</code>, so if you need to use <code>stack_reset_vars(true)</code> it must be the first command in the question variables.  Since this has been fixed in Maxima 5.44.0, it was probably a bug in Maxima.)</p> <p>If you want to change the display of the constant e you need to refer to the <code>%e%</code> value, e.g. <code>texput(%e, \"\\mathrm{e}\");</code>.</p>"},{"location":"en/CAS/Numbers/#modular-arithmetic","title":"Modular arithmetic","text":"<p>The function <code>recursemod(ex, n)</code> recurses over an expression tree, and applies the function <code>mod(?, n)</code> to any numbers as identified by <code>numberp</code>.  This works on any expression, whereas <code>polymod</code> only applies to polynomials.</p>"},{"location":"en/CAS/Numbers/#internal-representation-of-numbers","title":"Internal representation of numbers","text":"<p>Maxima has two data types to represent numbers: integers and floats.  Rational numbers are expressed as a division of two integers not with a dedicated data type, and surds with fractional powers or the <code>sqrt</code> function. The option Surd for Square Root enables the question author to alter the way surds are displayed in STACK.</p> <p>Similarly, complex numbers are not represented as a single object, but as a sum of real and imaginary parts, or via the exponential function. The input and display of complex numbers is difficult, since differences exist between mathematics, physics and engineering about which symbols to use. The option sqrt(-1) is set in each question to sort out meaning and display.</p>"},{"location":"en/CAS/Numbers/#Floats","title":"Floating point numbers","text":"<ul> <li>To convert to a float use Maxima's <code>float(ex)</code> command.</li> <li>To convert a float to an exact representation use <code>rat(x)</code> to rationalise the decimal.</li> </ul> <p>The variable e has been defined as <code>e:exp(1)</code>.  This now potentially conflicts with scientific notation <code>2e3</code> which means <code>2*10^3</code>.</p> <p>If you expect students to use scientific notation for numbers, e.g. <code>3e4</code> (which means 3\\times 10^{4} ), then you may want to use the option for strict syntax.</p> <p>Please read the separate documentation on numerical rounding.</p> <p>We also have mechanisms for keeping track of the number of significant figures. See the documentation on <code>dispsf(ex,n)</code> for detail.</p>"},{"location":"en/CAS/Numbers/#maxima-and-floats-with-trailing-zeros","title":"Maxima and floats with trailing zeros","text":"<p>For its internal representation, Maxima always truncates trailing zeros from a floating point number.  For example, the Maxima expression <code>0.01000</code> will be converted internally to <code>0.01</code>.  Actually this is a byproduct of the process of converting a decimal input to an internal binary float, and back again.  Similarly, when a number is a \"float\" data type, Maxima always prints at least one decimal digit to indicate the number is a float.  For example, the floating point representation of the number ten is 10.0.  This does not indicate significant figures, rather it indicates data type.  In situations where the number of significant figures is crucial this is problematic.</p> <p>Display of numbers in STACK is controlled with LaTeX, and the underlying LISP provides flexible ways to represent numbers.</p> <p>Note, that apart from the units input, all other input types truncate the display of unnecessary trailing zeros in floating point numbers, loosing information about significant figures.  So, when the student's answer is a floating point number, trailing zeros will not be displayed.  If you want to specifically test for significant figures, use the units input type, with the teacher's answer having no units.  The units input type should display the same number of significant figures as typed in by the student.</p>"},{"location":"en/CAS/Numbers/#display-of-numbers-with-latex","title":"Display of numbers with LaTeX","text":"<p>The display of numbers is controlled by Maxima's <code>texnumformat</code> command, which STACK modifies.</p> <p>Stack provides two variables to control the display of integers and floats respectively.  The default values are</p> <pre><code>stackintfmt:\"~d\";\nstackfltfmt:\"~a\";\n</code></pre> <p>These two variables control the output format of integers (identified by the predicate <code>integerp</code>) and floats (identified by the predicate <code>floatnump</code>) respectively.  These variables persist, so you need to define their values each time you expect them to change.</p> <p>These variables must be assigned a string following Maxima's <code>printf</code> format.</p> <p>These variables can be defined in the question variables, for global effect.  They can also be defined inside a Maxima block to control the display on the fly, and for individual expressions.  For example, consider the following CASText.</p> <pre><code>The decimal number {@n:73@} is written in base \\(2\\) as {@(stackintfmt:\"~2r\",n)@}, in base \\(7\\) as {@(stackintfmt:\"~7r\",n)@}, in scientific notation as {@(stackintfmt:\"~e\",n)@} and in rhetoric as {@(stackintfmt:\"~r\",n)@}.\n</code></pre> <p>The result should be \"The decimal number 73 is written in base 2 as 1001001, in base 7 as 133, in scientific notation as 7.3E+1 and in rhetoric as seventy-three.\"</p> <p>To force all floating point numbers to scientific notation use</p> <pre><code>stackfltfmt:\"~e\";\n</code></pre> <p>To force all floating point numbers to decimal floating point numbers use</p> <pre><code>stackfltfmt:\"~f\";\n</code></pre> <p>You can also force all integers to be displayed as floating point decimals or in scientific notation using <code>stackintfmt</code> and the appropriate template.  This function calls the LISP <code>format</code> function, which is complex and more example are available online elsewhere.</p> Template Input TeX Output Description/notes <code>\"~,4f\"</code> <code>0.12349</code> 0.1235 Output four decimal places: floating point. <code>0.12345</code> 0.1234 Note the rounding. <code>0.12</code> 0.1200 <code>\"~,5e\"</code> <code>100.34</code> 1.00340e+2 Output five decimal places: scientific notation. <code>\"~:d\"</code> <code>10000000</code> 10,000,000 Separate decimal groups of three digits with commas. <code>\"~,,\\' ,:d\"</code> <code>10000000</code> 10\\ 000\\ 000 Separate decimal groups of three digits with spaces. <code>~r</code> <code>9</code> \\text{nine} Rhetoric. <code>~:r</code> <code>9</code> \\text{ninth} Ordinal rhetoric. <code>~7r</code> <code>9</code> 12 Base 7. <code>~@r</code> <code>9</code> IX Roman numerals. <code>~:@r</code> <code>9</code> VIIII Old style Roman numerals. <p>There are many other options within the LISP format command. Please note with the rhetoric and Roman numerals that the numbers will be in LaTeX mathematics environments.</p> <p>Note that the <code>@</code> symbol is currently not parsed correctly inside strings within CASText.  That is to say, you cannot currently type <code>{@(stackintfmt:\"~@r\",4)@}</code> into CASText.  This is a known bug.  To avoid this problem, define a variable in the question variables (e.g. <code>roman:\"~@r\";</code>) and use the variable name in the CASText (e.g. <code>{@(stackintfmt:roman,4)@}</code>).</p> <p>Maxima has a separate system for controlling the number of decimal digits used in calculations and when printing the value of computed results.  Trailing zeros will not be printed with the value.  This is controlled by Maxima's <code>fpprec</code> and <code>fpprintprec</code> variables.  The default for STACK is</p> <pre><code>fpprec:20,          /* Work with 20 digits. */\nfpprintprec:12,     /* Print only 12 digits. */\n</code></pre>"},{"location":"en/CAS/Numbers/#changing-the-decimal-separator-eg-using-a-comma-for-separating-decimals","title":"Changing the decimal separator, e.g. using a comma for separating decimals","text":"<p>STACK now supports a mechanism for changing the decimal separator and using a comma for separating decimals.  A question level option can be used to choose <code>,</code> or <code>.</code> as the decimal separator.  For finer control in other parts of the question, just set the variable</p> <pre><code>stackfltsep:\",\";\n</code></pre> <p>The global variables <code>stackfltfmt</code> and <code>stackfltsep</code> should have independent effects.</p> <p>If you use the option for a comma then items in sets, lists and as arguments to functions will no longer be separated by a comma.  To avoid conflicting notation, items will be separated by a semicolon (<code>;</code>).</p> <p>If you separate decimal groups of digits with commas, e.g. if <code>stackfltfmt:\"~:d\"</code>, then these commas are replaced by spaces to avoid ambiguity.  The replacement of commas occurs in integers as well as floats to make sure commas in integers cause no confusion.</p>"},{"location":"en/CAS/Numbers/#stack-numerical-functions-and-predicates","title":"STACK numerical functions and predicates","text":"<p>The following commands which are relevant to manipulation of numbers are defined by STACK.</p> Command Description <code>significantfigures(x,n)</code> Truncate x to n significant figures (does perform rounding). <code>decimalplaces(x,n)</code> Truncate x to n decimal places  (does perform rounding). See below. <code>commonfaclist(l)</code> Returns the highest common factors of a list of numbers. <code>list_expression_numbers(ex)</code> Create a list with all parts for which <code>numberp(ex)=true</code>. <code>coeff_list(ex,v)</code> This function takes an expression ex and returns a list of coefficients of v. <code>coeff_list_nz(ex,v)</code> This function takes an expression ex and returns a list of nonzero coefficients of v. <code>numabsolutep(sa,ta,tol)</code> Is sa within tol of ta? I.e. ( <code>numrelativep(sa,ta,tol)</code> Is sa within tol\\times ta of ta? I.e. ( <code>numrelativep(sa,ta,tol)</code> Is sa within tol\\times ta of ta? I.e. ( <code>numexactp(sa,ta)</code> This function checks if one number equals another, but only when the floating point number is exact.   E.g. if <code>ta=1/4</code> then it has an exact decimal 0.25.  Here the float will be converted to a rational and compared.  However if <code>ta=1/3</code> then this decimal does not terminate, and so floats in <code>sa</code> will not be converted. <p>The following commands generate displayed forms of numbers.  These will not be manipulated further automatically, so you will need to use these at the last moment, e.g. only when generating the teacher's answer etc.</p> Command Description <code>dispdp(x,n)</code> Truncate x to n decimal places and display with trailing digits.  Note, this always prints as a float (or integer), and not in scientific notation. <code>dispsf(x,n)</code> Truncate x to n significant figures and display with trailing digits.  Note, this always prints as a float, and not in scientific notation. <code>displaydp(x,n)</code> An inert internal function to record that x should be displayed to n decimal places with trailing digits.  This function does no rounding. <code>displaysci(x,n,expo)</code> An inert internal function to record that x should be displayed to n decimal places with trailing digits, in scientific notation.  E.g. x\\times 10^{expo}. <code>remove_numerical_inert(ex)</code> Removes the above inert forms from an expression <code>ex</code>. <code>scientific_notation(x,n)</code> Write x in the form m10^e.   Only works reliably with <code>simp:false</code> (e.g. try 9000).  The optional second argument applies <code>displaysci(m,n)</code> to the mantissa to control the display of trailing zeros. Function Predicate <code>simp_numberp(ex)</code> Fixes <code>numberp(ex)</code> for <code>simp:false</code>. <code>simp_integerp(ex)</code> Fixes <code>integerp(ex)</code> for <code>simp:false</code>. <code>simp_floatnump(ex)</code> Fixes <code>floatnump(ex)</code> for <code>simp:false</code>. <code>real_numberp(ex)</code> Determines if ex is a real number.  This includes surds and symbolic numbers such as \\pi. <code>lowesttermsp(ex)</code> Is the rational expression in its lowest terms? <code>anyfloatex(ex)</code> Decides if any floats are in the expression. <code>scientific_notationp(ex)</code> Determines if ex is written in the form a10^n where a is an integer or float, and n is an integer. <p>Please note that these predicate functions need to be used with <code>simp:false</code>.  Some answer tests, including the default algebraic equivalence (<code>ATAlgEquiv</code>) always simplify their arguments.  Instead use a non-simplifying answer test such as <code>EqualComAss</code>.</p>"},{"location":"en/CAS/Numbers/#decimal-places","title":"Decimal places","text":"<p>The functions <code>decimalplaces(x,n)</code> and <code>dispdp(x,n)</code> perform rounding.  See the separate notes on numerical rounding for details.  There are some edge cases.</p> <ul> <li>If <code>x</code> is not a real number (judged by <code>real_numberp</code>) then we return <code>ex</code> (without an error).</li> <li><code>n</code> must be an integer, otherwise we throw an error.</li> <li>If <code>n</code> equals zero, then we round to the nearest integer with Maxima's <code>round</code> command.</li> <li><code>n</code> negative is possible, in which case we round. e.g. <code>decimalplaces(314.15,-2)</code> gives <code>300</code>.</li> <li><code>decimalplaces(x,n)</code> returns an integer if possible.  That is we don't return a float like <code>7.0</code> we return the integer <code>7</code> instead.</li> <li><code>dispdp(x,n)</code> returns an inert form intended to display trailing zeros (if any).  In this case <code>x</code> must be a real number, otherwise we throw an error.</li> </ul>"},{"location":"en/CAS/Numerical_rounding/","title":"Numerical rounding","text":"<p>Internally Maxima represents floats in binary, and so even simple calculations which would be exact in base ten (e.g. adding 0.16 to 0.12) might end up in a recurring decimal float which is not exactly equal to the result you would type in directly.</p> <p>Try <code>452-4.52*10^2</code> in desktop Maxima, which is not zero, therefore <code>ATAlgEquiv(452,4.52*10^2)</code> fails. (Maxima 5.44.0, November 2022).   ends up with recurring 9s when represented as a binary float, so it is not algebraically equivalent to the integer 452.</p> <p>Rounding like this can also occur in calculations, for example</p> <pre><code>p1:0.29;\np2:0.18;\np3:0.35;\nv0:1-(p1+p2+p3);\nv1:0.18;\n</code></pre> <p>Then Maxima returns <code>0.18</code> for <code>v0</code>, (as expected) but <code>v0-v1</code> equals 5.551115123125783\\times 10^{-17} and so <code>ATAlgEquiv(v0,v1)</code> will give false.  Please always use a numerical test when testing floats.</p> <p>As another example, try <code>100.4-80.0;</code> in a desktop Maxima session.</p>"},{"location":"en/CAS/Numerical_rounding/#notes-about-numerical-rounding","title":"Notes about numerical rounding","text":"<p>There are two ways to round numbers ending in a digit 5.</p> <ul> <li>Always round up, so that 0.5\\rightarrow 1, 1.5 \\rightarrow 2, 2.5 \\rightarrow 3 etc.</li> <li>Another common system is to use ``Bankers' Rounding\". Bankers Rounding is an algorithm for rounding quantities to integers, in which numbers which are equidistant from the two nearest integers are rounded to the nearest even integer. 0.5\\rightarrow 0, 1.5 \\rightarrow 2, 2.5 \\rightarrow 2 etc.  The supposed advantage to bankers rounding is that in the limit it is unbiased, and so produces better results with some statistical processes that involve rounding.</li> <li>In experimental work, the number of significant figures requires sometimes depends on the first digits of the number.  For example, if the first digit is a 1 or 2 then we need to take an extra significant figure to ensure the relative error is suitably small.  The maxima string functions can be used to check the first digit of a number until we have bespoke internal functions to make this check.</li> </ul> <p>Maxima's <code>round(ex)</code> command rounds multiples of 1/2 to the nearest even integer, i.e. Maxima implements Bankers' Rounding.  We do not currently have an option to always round up.</p> <p>STACK has defined the function <code>significantfigures(x,n)</code> to conform to convention of rounding up.</p>"},{"location":"en/CAS/Numerical_rounding/#atalgequiv-and-floating-point-numbers","title":"ATAlgEquiv and floating point numbers","text":"<p>We recommend you do not use algebraic equivalence testing for floating point numbers.  Instead use one of the numerical tests.</p> <p>Lists of numbers present issues with numerical rounding as well.  The <code>ATAlgEquiv</code> answer test does work with lists, matrices etc.  However, the numerical tests expect single floating point numbers and do not accept lists etc.</p> <p>If you have lists of numbers one approach is the following in the feedback variables.</p> <pre><code>/* ta is the teacher's answer.\n   ans1 is the student's answer.\n   Create a matrix.\n   */\nS:matrix(LSG1-ans1);\n/* Calculate the matrix norm. */\nN:ev(S.transpose(S),simp);\n/* Now test this is less that 1E-10 with the answer test ATGT(1E-10,N). */\n</code></pre> <p>Other options include finding <code>ev(max(map(abs, S), simp</code> to find the maximum error.</p>"},{"location":"en/CAS/Permutations/","title":"Writing a permutation as a product of disjoint cycles","text":"<p>Let  </p> <p>In pure mathematics we might ask students to write a permutation such as this as a product of disjoint cycles.</p> <p>One way to do this is to expect students to write their answer as a list, including the one-cycles. e.g. the permutation (1)(2 \\: 3) is entered as <code>[[1],[2, 3]]</code>.</p> <p>This list can be turned into a set of lists, so that the order of disjoint cycles is not important.  However, we need to write each cycle in a particular way.  For example, we would want <code>[2, 3, 4]</code> and <code>[3, 4, 2]</code> to be considered as equivalent.</p> <p>One way to do this is to make sure the first element in the list is the minimum element in the list, by cycling through the list.  Essentially, we ensure each cycle is re-written in a definite form.  The following code does this for one cycle.  This function can be used in the question variables.</p> <pre><code>/* Write a cycle with the smallest element at the front.  Gives a definite order. */\nperm_min_first(ex) := block(\n    if length(ex)&lt;2 then return(ex),\n    if is(first(ex)&lt;apply(min, rest(ex))) then return(ex),\n    return(perm_min_first(append(rest(ex), [first(ex)])))\n);\n</code></pre> <p>Assume the student's answer <code>ans1</code> is entered as <code>[[1],[2, 3]]</code>.  In the feeback variables make sure each list in <code>ans1</code> has the smallest element first with the following code.</p> <pre><code>sa1:maplist(perm_min_first, ans1);\n</code></pre> <p>Then compare <code>setify(sa1)</code> with the teacher's answer (which needs to be processed in a similar way) using algebraic equivalence (quiet).</p> <p>This is a good example of where we do not have a specific data type and corresponding methods for equivalence, but the pre-processing of a student's answer will make sure we can establish the relevant equivalence. </p>"},{"location":"en/CAS/Predicate_functions/","title":"Predicate functions","text":"<p>A predicate function takes an expression and returns Boolean values <code>true</code> or <code>false</code>.</p> <p>The convention in Maxima is to end predicate functions with the letter \"p\". Many predicate functions exist already within Maxima.  Some of the more useful to us are listed below.   STACK defines an additional range of predicate functions.  Some are described here, others are in the relevant specific sections of the documentation, such as numbers.</p> <p>Since establishing mathematical properties are all about predicates they are particularly important for STACK.</p> <p>You can use predicate functions directly in the potential response tree by comparing the result with <code>true</code> using the answer test AlgEquiv.</p>"},{"location":"en/CAS/Predicate_functions/#maxima-type-predicate-functions","title":"Maxima type predicate functions","text":"<p>The following are a core part of Maxima, but there are many others.  Notice, predicate functions end in the letter \"p\".</p> Function Predicate <code>floatnump(ex)</code> Determines if  is a float.  But use STACK's <code>float_floatnump(ex)</code> which works with <code>simp:false</code>. <code>numberp(ex)</code> Determines if ex is a number.  NOTE <code>numberp</code> returns <code>false</code> if its argument is a symbol, even if the argument is a symbolic number such as \\sqrt{2}, \\pi or i, or declared to be even, odd, integer, rational, irrational, real, imaginary, or complex.   This function also does not work when <code>simp:false</code>, so see the dedicated page on numbers. <code>setp(ex)</code> Determines if ex is a set. <code>listp(ex)</code> Determines if ex is a list. <code>matrixp(ex)</code> Determines if ex is a matrix. <code>polynomialp(ex,[v])</code> Determines if ex is a polynomial in the list of variables v."},{"location":"en/CAS/Predicate_functions/#stack-type-predicate-functions","title":"STACK type predicate functions","text":"<p>The following type predicates are defined by STACK.</p> Function Predicate <code>variablep(ex)</code> Determines if ex is a variable, that is an atom but not a real number, i or a string. <code>equationp(ex)</code> Determines if ex is an equation. <code>functionp(ex)</code> Determines if ex is a function definition, using the operator <code>:=</code>. <code>inequalityp(ex)</code> Determines if ex is an inequality. <code>expressionp(ex)</code> Determines if ex is not a matrix, list, set, equation, function or inequality. <code>polynomialpsimp(ex)</code> Determines if ex is a polynomial in its own variables. <code>simp_numberp(ex)</code> Determines if ex is a number when <code>simp:false</code>. <code>simp_integerp(ex)</code> Determines if ex is an integer when <code>simp:false</code>. <code>simp_floatnump(ex)</code> Determines if ex is a float when <code>simp:false</code>. <code>real_numberp(ex)</code> Determines if ex is a real number (whether in float form or not). <code>rational_numberp(ex)</code> Determines if ex is written as a fraction.  For a true mathematical rational number use <code>rational_numberp(ex) or simp_integerp(ex)</code> <code>lowesttermsp(ex)</code> Determines if a fraction ex is in lowest terms. <code>complex_exponentialp(ex)</code> Determines if ex is written in complex exponential form, r e^{i\\theta} .  Needs <code>simp:false</code>. <code>imag_numberp(ex)</code> Determines if ex is a purely imaginary number."},{"location":"en/CAS/Predicate_functions/#stack-general-predicates","title":"STACK general predicates","text":"<p>The following are defined by STACK.</p> Function Predicate <code>element_listp(ex,l)</code> <code>true</code> if <code>ex</code> is an element of the list l.  (Sets have <code>elementp</code>, but lists don't) <code>all_listp(p,l)</code> <code>true</code> if all elements of l satisfy the predicate p. <code>any_listp(p,l)</code> <code>true</code> if any elements of l satisfy the predicate p. <code>sublist(l,p)</code> Return a list containing only those elements of the list l for which the predicate p is true <p>(The last of these is core Maxima and is not, strictly speaking, a predicate function)</p>"},{"location":"en/CAS/Predicate_functions/#stack-other-predicate-functions","title":"STACK other predicate functions","text":"Function Predicate <code>expandp(ex)</code> true if ex equals its expanded form. <code>factorp(ex)</code> true if ex equals its factored form.  Note, if you would like to know if an expression is factored you need to use the FacForm answer test.  Prime integers equal their factored form, composite integers do not. <code>continuousp(ex,v,xp)</code> true if ex is continuous with respect to v at xp (unreliable). <code>diffp(ex,v,xp,[n])</code> true if ex is (optionally n times) differentiable with respect to v at xp (unreliable). <p>The last two functions rely on Maxima's <code>limit</code> command and hence are not robust.</p>"},{"location":"en/CAS/Predicate_functions/#establishing-form","title":"Establishing form","text":"<p>A lot of what teachers do is try to establish if a student's answer \"looks right\" that is, in an appropriate form.</p> <p><code>linear_term_p(ex, p)</code> establishes that the expression <code>ex</code> is a simple product of one expression for which the predicate <code>p</code> is true and zero or more real numbers.</p> <p><code>linear_combination_p(ex, p)</code> establishes that the expression <code>ex</code> is a linear combination of terms for which <code>p</code> is true.</p> <p>The teacher can then use this function to build more complex predicates such as the following</p> <pre><code>fouriertermp(ex) := if ((safe_op(ex)=\"cos\" or safe_op(ex)=\"sin\") and linear_term_p(first(args(ex)), variablep)) then true else false$\n</code></pre> <p>This predicate function decides if we have a term of the form \\sin(n\\, v) or \\cos(n\\, v) where n is any product of real numbers (e.g. 3\\pi/2) and v is any variable.  A teacher might prefer to specify a particular variable.</p> <pre><code>fouriertermp(ex) := if ((safe_op(ex)=\"cos\" or safe_op(ex)=\"sin\") and linear_term_p(first(args(ex)), lambda([ex2], ex2=t))) then true else false$\n</code></pre> <p>So, if you want to decide if the student's answer looks like  \\sum_{k=1}{n} a_k\\cos(k\\pi t) + a_k\\cos(k\\pi t)  the combined predicate <code>linear_combination_p(ex, fouriertermp)</code> can be used.</p> <p>Testing for form in this way is probably more reliable that the <code>substequiv</code> answer test which fails to match up expressions like A\\sin(t)+B\\cos(t) with A\\sin(t)-B\\cos(t).  As every, the minus sign is a problem.  However, the following predicate will work.</p> <pre><code>simpletrigp(ex) := if (ex=cos(t) or ex=sin(t)) then true else false$\n</code></pre> <p>and the test <code>linear_combination_p(ex, simpletrigp)</code> will be able to do this.</p>"},{"location":"en/CAS/Predicate_functions/#related-functions","title":"Related functions","text":"<p>This is not, strictly speaking, a predicate function.  It is common to want to ensure that a student's expression is free of things like \\sqrt{2}, a^{1/2} or 1+\\sqrt[3]{2} in the denominator.  This include any complex numbers.</p> <p><code>rationalized(ex)</code> searches across the whole expression <code>ex</code> and looks in the denominators of any fractions.  If the denominators are free of such things the function returns <code>true</code> otherwise the function returns the list of offending expressions.  This design allows efficient feedback of the form ``the denominator in your expression should be free of the following: ...\".</p>"},{"location":"en/CAS/Predicate_functions/#see-also","title":"See also","text":"<p>Maxima reference topics</p>"},{"location":"en/CAS/Random/","title":"Random objects","text":"<p>STACK can generate structured random objects.  STACK provides a Maxima function <code>rand()</code> which can be used in the question and answer variables.</p> <p>STACK creates pseudo-random numbers from a definite seed. This ensures that when a particular student returns they see the same variant of the question. (Note to site maintainers: if you upgrade your Maxima version mid-way through an academic cycle, then there is no gurantee that the random numbers will remain the same.  It is unlikely Maxima will change its random number generation between versions, but if it important to you please check first!)</p> <p>For the purposes of learning and teaching, we do not need an algorithm which is statistically perfect. We are much more interested in simplicity, efficiency and reproducibility across platforms. Hence, we adopt pseudo-random numbers.</p> <p>It is very important to test each random version a student is likely to see and not to leave this to chance.  To pre-generate and test random variants see the separate documentation on deploying random variants.</p> <p>Users may also systematically deploy all variants of a question in a simple manner.</p>"},{"location":"en/CAS/Random/#rand","title":"rand()","text":"<p>STACK provides its own function <code>rand()</code>.</p> <ul> <li><code>rand(n)</code> generates an integer between  and n-1.</li> <li><code>rand(n.0)</code> generates a floating point number between 0 and n.  It is probably more useful to use something like a=float(rand(1000)/1000)   to obtain an accurate number of decimal places.  An alternative is to use the Maxima function <code>round()</code></li> <li><code>rand([a,b,...,z])</code> makes a random selection from a list.</li> <li><code>rand({a,b,...,z})</code> makes a random selection from a set.</li> <li><code>rand(matrix(..))</code> applies rand to each element of the matrix.</li> </ul> <p>STACK provides the following functions for random generation of sets.</p> <ul> <li><code>random_subset(u)</code> returns a random subset of <code>u</code>.</li> <li><code>random_subset_n(u,n)</code> returns a random subset of <code>u</code> with <code>n</code> elements (if possible).</li> <li><code>random_ne_subset(u)</code> returns a non-empty random subset of <code>u</code>.</li> </ul> <p>There are also Maxima's random functions.  For example, to create a random list use <code>random_permutation</code>.</p> <p>It is probably much better not to use conditional statements when creating random objects. For example, if you would like to create a random small prime number, try</p> <pre><code>p : rand([2,3,5,7,11,13,17,19]);\n</code></pre> <p>This might not appear to be the neatest mathematical solution, but it is probably the most reliable.</p>"},{"location":"en/CAS/Random/#rand_with_steplowerupperstep","title":"rand_with_step(lower,upper,step)","text":"<p>Returns a random number from the set <code>{lower, lower+step, lower+2*step, ... , final}</code>. The examples below explain behaviour the best. Examples:</p> <ul> <li><code>rand_with_step(-5,5,1)</code> returns a random number from the set \\{-5,-4,-3,-2,-1,0,1,2,3,4,5\\}.</li> <li><code>rand_with_step(-5,5,2)</code> returns a random number from the set \\{-5,-3,-1,1,3,5\\}.</li> <li><code>rand_with_step(-5,3,3)</code> returns a random number from the set \\{-5,-2,1\\}.</li> </ul> <p>The function <code>rand_range(lower,upper,step)</code> does the same thing.</p>"},{"location":"en/CAS/Random/#rand_with_prohiblowerupperlist","title":"rand_with_prohib(lower,upper,list)","text":"<p>Returns a random integer from the set [lower,upper] such that it cannot be any value in <code>list</code>. This list can include values which are also random variables, for example, generated by <code>rand_with_step</code>. Examples:</p> <ul> <li><code>rand_with_prohib(-5,5,[0])</code> returns a random number from the set \\{-5,-4,-3,-2,-1,1,2,3,4,5\\}.</li> <li><code>rand_with_prohib(-5,5,[-1,0,1,sqrt(pi)])</code> returns a random number from the set \\{-5,-4,-3,-2,2,3,4,5\\}.</li> <li><code>rand_with_prohib(-5,3,[-5/2,a])</code> returns a random number from the set \\{-5,-4,-3,-2,-1,0,1,2,3\\}\\backslash\\{a\\}.</li> </ul> <p>This can be used with matrices, to generate a matrix with non-zero entries for example.  The unnamed function in this example ignores its arguments.</p> <pre><code>matrixmap(lambda([ex],rand_with_prohib(-5,5,[0])),zeromatrix(5,5));\n</code></pre> <p>To create a matrix of a random size you can use Maxima's <code>makelist</code> function, e.g.</p> <pre><code>M1:apply(matrix, makelist(makelist(2^n/3^m, n,1,4), m,1,3));\n</code></pre>"},{"location":"en/CAS/Random/#rand_selectionex-n","title":"rand_selection(ex, n)","text":"<p>Returns a list containing a random selection of <code>n</code> different items from the list/set <code>ex</code>.  If <code>ex</code> contains duplicates, then the result may also contain duplicates.</p>"},{"location":"en/CAS/Random/#rand_selection_with_replacementex-n","title":"rand_selection_with_replacement(ex, n)","text":"<p>Returns a list containing a random selection of <code>n</code> items from the list/set <code>ex</code>.</p>"},{"location":"en/CAS/Random/#generating-random-polynomials","title":"Generating random polynomials","text":"<p>Here is an example which generates a random polynomial, of degree 5, with coefficients between 0 and 6.</p> <pre><code>apply(\"+\",makelist(rand(7)*x^(k-1),k,6));\n</code></pre>"},{"location":"en/CAS/Random/#generating-random-expressions-which-needs-to-be-gathered-and-sorted","title":"Generating random expressions which needs to be \"gathered and sorted\"","text":"<p>It is relatively common to want to be able to generate random expressions which need to be \"gathered and sorted\".  For example in 2y-y+3y+1 we need to collect together the y terms.</p> <pre><code>simp:false;\np:apply(\"+\",makelist(ev(rand_with_prohib(-5,5,[0])*y^rand(2),simp), ev(rand(6)+2,simp)));\np:unary_minus_sort(p);\n</code></pre> <p>Now, the output from the first expression will be a random expression in constants and y variables.   The second line tidies up the unary minus.  For more details of this, see simplification.</p> <pre><code>4*y+5*y+(-2*y)\n4*y+5*y-2*y\n</code></pre>"},{"location":"en/CAS/Random/#random-objects-with-corresponding-information","title":"Random objects with corresponding information","text":"<p>It is often necessary to generate a random object with a number of separate aspects to it.  For example, if you have scientific data and you need to include this in a question.</p> <pre><code>t:rand(5)+3;\nidx:rand(3)+1;  /* Array indexes in Maxima start at 1, rand(n) returns 0,...,n-1.  */\nl1:[\"Mercury\",\"Earth\",\"Mars\"];\nl2:[3.61,9.8,3.75];\np:l1[idx];\nta:t*l2[idx]/(4*%pi^2);\n</code></pre> <p>The question text can then be</p> <pre><code>A pendulum is located on {@p@}. What length should the pendulum have in order to have a period of {@t@}s?\n</code></pre> <p>This indexing with the variable <code>idx</code> is quite robust.  Note that indexes in Maxima start at 1, whereas <code>rand(n)</code> could return zero.</p> <p>Another option is to use <code>rand()</code> on a list of lists, allowing to group the information of an object in a slick way:</p> <pre><code>t:rand(5)+3;\n[p, g] : rand([[\"Mercury\",3.61], [\"Earth\",9.81], [\"Mars\",3.75]]);\nta:t*g/(4*%pi^2);\n</code></pre> <p>Here, <code>rand()</code> will return one random list of the given lists, say <code>[\"Earth\",9.81]</code>. The assignment <code>[p, g] : [\"Earth\",9.81]</code> then works as one would expect, namely just as <code>p : \"Earth\"; g : 9.81;</code> would.</p>"},{"location":"en/CAS/Random/#random-objects-satisfying-a-condition","title":"Random objects satisfying a condition","text":"<p>It is often necessary to create random objects which satisfy constraints.  For example, if you want to randomly generate a \"small\" prime number, just select one from a list.</p> <pre><code>p:rand([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]);\n</code></pre> <p>It is much better to (i) enumerate specific cases or (ii) reverse engineer the question to avoid conditional statements than randomly generate examples and \"hope\" one pops up eventually.  The reason is that the pseudo-random number generator will repeat the process from a seed every time the question is generated!  If you put in loops, this could risk delays and time-outs etc.</p> <p>The following is NOT RECOMMENDED, but enough people have insisted on doing it to document this approach.</p> <p>If you must (and you risk an infinite loop of course....) you can use Maxima's <code>for</code> command.  A simple example is as follows.</p> <pre><code>q:1;\nfor k while not(is(primep(q))) do block(q:rand(98)+1);\n</code></pre>"},{"location":"en/CAS/Random/#structured-random-matrices","title":"Structured random matrices","text":"<p>STACK has a contributed library for creating structured random matrices.  The code is online in the contributed library</p> <p>To use this library you must load it into the question variables.</p> <ul> <li>To use the local copy on your server: <code>stack_include(\"rand_matrix.mac\");</code></li> <li>To use the latest code from github: <code>stack_include_contrib(\"rand_matrix.mac\");</code></li> </ul> <p>See documentation on inclusions for more detail of these functions.</p> <p>Then you can create random matrices, e.g. to generate a 3\\times 3 invertible matrix use <code>{@rand_invertible(3)@}</code>.</p>"},{"location":"en/CAS/Random/#see-also","title":"See also","text":"<p>Maxima reference topics</p>"},{"location":"en/CAS/Real_Intervals/","title":"Real intervals and sets of real numbers","text":"<p>STACK has a simple system for representing and dealing with real intervals and sets of real numbers.</p> <p>Simple real intervals may be represented by the inert functions <code>oo(a,b)</code>, <code>oc(a,b)</code>, <code>co(a,b)</code>, and <code>cc(a,b)</code>.  Here the character <code>o</code> stands for open end point, and <code>c</code> for a closed end point.  So <code>oc(-1,3)</code> is the interval , and is displayed as  (-1,3]  with mismatching brackets in the tradition of UK mathematics.</p> <p>The Maxima function <code>union</code> requires its arguments to be sets, and intervals are not sets.  You must use the <code>%union</code> function (from the package <code>to_poly_solve</code>) to join simple intervals and combine them with discrete sets. E.g. <code>%union(oo(-2,-1),oo(1,2))</code></p> <p>Note that the <code>%union</code> function sorts its arguments (unless you have <code>simp:false</code>), and sort puts simple intervals of the form <code>oo(-inf,a)</code> out of order at the right hand end. So, some sorting functions return lists of intervals, not <code>%union</code> as you might expect, to preserve the order.</p> <p>As arguments, the <code>%union</code> command can take both simple intervals and sets of discrete real numbers, e.g.</p> <pre><code>%union(oo(-inf,0),{1},oo(2,3));\n</code></pre> <p>Similarly, STACK provides <code>%intersection</code> to represent an intersection of intervals (which the package <code>to_poly_solve</code> does not have).</p> <p>Predicate functions</p> <ol> <li><code>intervalp(ex)</code> returns true if <code>ex</code> is a single simple interval.  Does not check <code>ex</code> is variable free, so <code>oo(a,b)</code> is a simple interval.   <code>{}</code>, <code>none</code>, <code>all</code> and singleton sets are not considered \"intervals\" by this predicate, use <code>realsetp</code> instead.  The primary purpose of this predicate is to detect intervals <code>oo</code>, <code>oc</code> etc within code.</li> <li><code>inintervalp(x, I)</code>  returns true if <code>x</code> is an element of <code>I</code> and false otherwise.  <code>x</code> must be a real number.  <code>I</code> must be a set of numbers or a simple interval of the form <code>oo(a,b)</code> etc.</li> <li><code>trivialintervalp(ex)</code> returns true if <code>ex</code> is a trivial interval such as (a,a).</li> <li><code>unionp(ex)</code> is the operator a union?</li> <li><code>intersectionp(ex)</code> is the operator an intersection?</li> <li><code>realsetp(ex)</code> return true if <code>ex</code> represents a definite set of real numbers, e.g. a union of intervals.  All end points and set elements must be real numbers, so <code>oo(a,b)</code> is not a <code>realset</code>.  If you want to permit variables in sets and as endpoints use <code>realset_soft_p</code> instead.</li> <li><code>interval_disjointp(I1, I2)</code> establishes if two simple intervals are disjoint.</li> <li><code>interval_subsetp(S1, S2)</code> is the real set <code>S1</code> contained within the real set <code>S2</code>?</li> <li><code>interval_containsp(I1, S2)</code> is the simple interval <code>I1</code> an explicit sub-interval within the real set <code>S2</code>?  No proper subsets here, but this is useful for checking which intervals a student has.</li> </ol> <p>Basic manipulation of intervals.</p> <ol> <li><code>interval_simple_union(I1, I2)</code> join two simple intervals.</li> <li><code>interval_sort(I)</code> takes a list of intervals and sorts them into ascending order by their left hand ends.  Returns a list.</li> <li><code>interval_connect(S)</code> Given a <code>%union</code> of intervals, checks whether any intervals are connected, and if so, joins them up and returns the ammended union.</li> <li><code>interval_tidy(S)</code>  Given a union of sets, returns the \"canonical form\" of this union.</li> <li><code>interval_intersect(S1, S2)</code> intersect two two simple intervals or two real sets, e.g. <code>%union</code> sets.</li> <li><code>interval_intersect_list(ex)</code> intersect a list of real sets.</li> <li><code>interval_complement(ex)</code> take a <code>%union</code> of intervals and return its complement.</li> <li><code>interval_set_complement(ex)</code> Take a set of real numbers, and return the <code>%union</code> of intervals not containing these numbers.</li> <li><code>interval_count_components(ex)</code> Take a set of real numbers, and return the number of separate connected components in the whole expression.  Simple intervals count as one, and sets count as number number of distinct points in the set.  Trivial intervals, such as the empty set, count for 0.  No simplification is done, so you might need to use <code>interval_tidy(ex)</code> first if you don't want to count just the representation.</li> </ol>"},{"location":"en/CAS/Real_Intervals/#natural-domains-and-real-sets-with-a-variable","title":"Natural domains, and real sets with a variable.","text":"<p>The function <code>natural_domain(ex)</code> returns the natural domain of a function represented by the expression <code>ex</code>, in the form of the inert function <code>realset</code>.  For example <code>natural_domain(1/x)</code> gives</p> <pre><code>realset(x,%union(oo(0,inf),oo(\u2212inf,0)));\n</code></pre> <p>The inert function <code>realset</code> allows a variable to be passed with a set of numbers.  This is mostly for displaying natural domains in a sensible way.  For example, where the complement of the intervals is a discrete set, the <code>realset</code> is displayed as x\\not\\in \\cdots rather than x \\in \\cdots which is normally much easier to read and understand.</p> <pre><code>realset(x,%union(oo(0,inf),oo(-inf,0)));\n</code></pre> <p>is displayed as x \\not\\in\\{0\\}.</p>"},{"location":"en/CAS/Real_Intervals/#validation-of-students-answers","title":"Validation of students' answers","text":"<p>Students must simply type <code>union</code> (not <code>%union</code>) etc.</p> <p>Validation of students' answer has a very loose sense of \"type\".  When we are checking the \"type\" of answer, if the teacher's answer is a \"set\" then the student's answer should also be a \"set\" (see <code>setp</code>).  If the teacher's answer is actually a set in the context where an interval should be considered valid, then the teacher's answer should be the inert function <code>%union</code>, e.g. <code>%union({1,2,3})</code>, to bump the type of the teacher's answer away from set and into <code>realset</code>.</p> <p>Validation does some simple checks, so that mal-formed intervals such as <code>oo(1)</code> and <code>oo(4,3)</code> are rejected as invalid.</p>"},{"location":"en/CAS/Real_Intervals/#assessment-of-students-answers","title":"Assessment of students' answers","text":"<p>The algebraic equivalence answer test will apply <code>interval_tidy</code> as needed and compare the results. Currently the feedback in this situation provided by this answer test is minimal.</p> <p>If the student input is an interval, it is possible to access the upper and lower boundary through the <code>first</code> and <code>last</code> Maxima functions. For example, a PRT node checking whether the boundaries of an interval are correct (but not necessarily the interval type, like <code>co</code> or <code>oo</code>) can be done checking the algebraic equivalence of the student answer <code>[first(ans1), last(ans1)]</code> and the teacher answer <code>[first(ta1), last(ta1)]</code>.</p> <p>Students will sometimes enter a closed interval as <code>[a, b]</code> or an open interval as <code>(a, b)</code>, appealing to common notation. In STACK the answer <code>[a,b]</code> is interpreted as a list however, and it can be convert into <code>cc(a,b)</code> using </p> <pre><code>ans1interval : if listp(ans1) then cc(first(ans1), last(ans1)) else ans1;\n</code></pre> <p>Similary, the answer <code>(a,b)</code> is interpreted as <code>ntuple(a,b)</code>, see Sets, lists, sequences n-tuples. There is no direct predicate function for n-tuples, but this answer can be converted into <code>oo(a,b)</code> using</p> <pre><code>ans1interval : if is(safe_op(ans1) = \"ntuple\") then oo(first(ans1), last(ans1)) else ans1;\n</code></pre>"},{"location":"en/CAS/Rules/","title":"Rules and patterns","text":"<p>Maxima has a system for defining rules and patterns.  For example, in desktop maxima</p> <pre><code>matchdeclare([a],true);\nlet(sin(a)^2, 1-cos(a)^2);\nletsimp(sin(x)^4);\n</code></pre> <p>will give .</p> <p>Support for <code>let</code> was added in v4.8.0 (November 2024), and only partial support is currently available.</p> <p>In particular, Maxima's <code>let</code> function makes use of a special operator <code>-&gt;</code> which is unsupported in the Maxima-PHP connection.  To accommodate this, you must place <code>let</code> commands inside a block which returns it's last element.</p> <p>For example, put the following the question variables will work (but the above example will not):</p> <pre><code>matchdeclare([a],true);\np1:(let(sin(a)^2, 1-cos(a)^2), letsimp(sin(x)^4));\n</code></pre> <p>and <code>{@p1@}</code> in some castext (e.g. the question) will give \\cos^4(x)-2\\,\\cos^2(x)+1.  Typically, Maxima will not perform this simplification.</p>"},{"location":"en/CAS/Rules/#matrix-example","title":"Matrix example","text":"<p>Imagine we want <code>I</code> to represent the identity matrix.</p> <pre><code>orderless(I);\nmatchdeclare([a],true);\n/* Note use of a block to make sure the return value (\"true\" here) can be parsed back into PHP. */\n(let(I*a, a),let(I^2, I),true);\np:letsimp(expand((A+I)^3));\n</code></pre> <p>Then castext such as <code>{@p@}</code> gives {A^3+3\\cdot A^2+3\\cdot A+I}.</p>"},{"location":"en/CAS/STACK-Maxima_sandbox/","title":"STACK - Maxima Sandbox","text":"<p>It is very useful when authoring questions to be able to test out Maxima code on your local machine in the same environment in which STACK uses Maxima on your server. That is to say, to run a desktop version of Maxima with the local settings and STACK specific functions loaded.  You can copy the Maxima code from the question testing page into the sandbox for offline testing and debugging of a question.  This is also used in reporting and analysis of students' responses. To do this you will need to load the libraries of Maxima functions specific to STACK. You may also want to copy some of your local settings from the server to your local machine to ensure an identical setup, but this is not strictly necessary for most purposes.</p> <p>The first step is to install wxMaxima on your local machine (http://maxima.sourceforge.net/).</p>"},{"location":"en/CAS/STACK-Maxima_sandbox/#getting-the-stack-libraries","title":"Getting the STACK libraries","text":"<p>You will need to download the STACK files onto your local machine.  Download all the STACK files from GitHub (git clone or as a .zip).  E.g. try <code>https://github.com/maths/moodle-qtype_stack/archive/master.zip</code></p> <p>The only files you need to run the sandbox are contained within the directory</p> <pre><code>stack/maxima/\n</code></pre> <p>This directory also contains the wxMaxima file <code>sandbox.wmx</code> which is the \"sandbox\" interface file. Your goals are (i) to set Maxima's path so it can find all the files you have downloaded, and (ii) to load the file</p> <pre><code>stack/maxima/stackmaxima.mac\n</code></pre> <p>Copy <code>sandbox.wmx</code> somewhere you can find it later and edit this file to reflect the location of the above file on your local machine.</p> <p>On a Microsoft operating system, if you place the all the files (i.e. clone or unzip the download) into</p> <pre><code>c:/tmp/stackroot\n</code></pre> <p>the <code>sandbox.wmx</code> should work without further adjustment.</p> <p>Otherwise open <code>sandbox.wmx</code> with wxMaxima and follow the further instructions it contains to setup the path for Maxima.  Note, the backslash character <code>\\</code> is a control character so you will need to edit the path to replace the <code>\\</code> with <code>/</code> in wxMaxima. Execute the sandbox file with wxMaxima when you have updated the settings with <code>cell &gt; Evaluate all cells</code>.  If you see something like the following you have set this up correctly (version numbers will vary).</p> <pre><code>[ STACK-Maxima started, library version 2022022300 ]\n</code></pre> <p>You can test this out by using, for example, the <code>rand()</code> function.</p> <pre><code>rand(matrix([5,5],[5,5]));\n</code></pre> <p>to create a pseudo-random matrix.  If <code>rand</code> returns unevaluated, then you have not loaded the libraries correctly.</p> <p>An alternative approach on a Microsoft operating system is to copy the contents of (a working) <code>sandbox.wmx</code> file into a</p> <pre><code>%USERPROFILE%/Maxima/stacklocal.mac\n</code></pre> <p>Using <code>load(\"stacklocal\")</code> in any worksheet will load the STACK environement. On Linux you can copy the file <code>stacklocal.mac</code> to your home directory <code>~/.maxima/</code>.</p>"},{"location":"en/CAS/STACK-Maxima_sandbox/#using-the-answer-tests","title":"Using the answer tests","text":"<p>Please make sure you read the page on answer tests first.</p> <p>Informally, the answer tests have the following syntax</p> <pre><code>[Errors, Result, FeedBack, Note] = AnswerTest(StudentAnswer, TeacherAnswer, Opt)\n</code></pre> <p>actually the results returned in Maxima are</p> <pre><code>[Valid, Result, FeedBack, Note] = AnswerTest(StudentAnswer, TeacherAnswer, Opt)\n</code></pre> <p>Errors are echoed to the console, and are trapped by another mechanism.  The valid field is used to render an attempt invalid, not wrong.</p> <p>To call an answer test directly from Maxima, you need to use the correct function name.   For example, to call the algebraic equivalence (AlgEquiv) answer test you need to use</p> <pre><code>ATAlgEquiv(x^2+2,x*(x+1));\n</code></pre> <p>The values returned are actually in the form</p> <pre><code>[true,false,\"\",\"\"]\n</code></pre> <p>Feedback is returned in the form of a language tag which is translated later. For example,</p> <pre><code>(%i1) ATInt(x^2,x*(x+1),x);\n(%o1) [true,false,\"ATInt_generic. \",\n       \"stack_trans('ATInt_generic' , !quot!\\\\[2\\\\,x+1\\\\]!quot!  , !quot!\\\\(x\\\\)!quot!  , !quot!\\\\[2\\\\,x\\\\]!quot! ); \"]\n</code></pre> <p>If you just want to decide if two expressions are considered to be algebraically equivalent, then use</p> <pre><code>algebraic_equivalence(ex1,ex2);\n</code></pre> <p>This is the function the answer test <code>ATAlgEquiv</code> uses without all the wrapper of a full answer test.</p>"},{"location":"en/CAS/STACK-Maxima_sandbox/#useful-tips","title":"Useful tips","text":"<p>STACK turns off the traditional two-dimensional display, which we can turn back on with the following command.</p> <pre><code>display2d:true;\n</code></pre>"},{"location":"en/CAS/STACK-Maxima_sandbox/#setting-maximas-global-path-microsoft","title":"Setting Maxima's Global Path (Microsoft)","text":"<p>Setting the path in Maxima is a problem on a Microsoft platform.  Maxima does not deal well with spaces in filenames, for example.  The simplest solution is to create a directory</p> <pre><code>C:/maxima\n</code></pre> <p>and add this to Maxima's path.  Place all Maxima files in this directory, so they will then be seen by Maxima. For Maxima 5.43.2, edit, or create, the file</p> <pre><code>C:/Program Files/maxima-5.43.2/share/maxima/5.43.2/share/maxima-init.mac\n</code></pre> <p>ensure it contains the following lines, possibly modified to reflect the directory you have chosen</p> <pre><code>file_search_maxima:append([sconcat(\"C:/maxima/###.{mac,mc}\")],file_search_maxima)$\nfile_search_lisp:append([sconcat(\"C:/maxima/###.{lisp}\")],file_search_lisp)$\n</code></pre> <p>Other versions of Maxima are similar.</p>"},{"location":"en/CAS/STACK-Maxima_sandbox/#using-preconfigured-files-on-linux-and-windows","title":"Using preconfigured files on Linux and Windows","text":"<p>Here you will find some notes to support you to install and use  the  STACK Sandbox in Maxima including the plotting options. The good note is, that Gnuplot is delivered with Maxima on Windows. We can use it. For Linux you will find a file <code>moodle-qtype_stack_master/stack/maxima/stacklocallinux.mac</code> and for Window <code>moodle-qtype_stack_master/stack/maxima/stacklocalwin.mac</code>. Goal is to use the commands <code>load(\"stacklocalwin.mac\")</code> or <code>load(\"stacklocallinux.mac\")</code> in your Maxima worksheets.</p>"},{"location":"en/CAS/STACK-Maxima_sandbox/#preparation","title":"Preparation","text":"<p>The Maxima variable  <code>maxima_userdir</code> returns the user Maxima directory on your Linux or Windows machine. This is used to reduce the installation effort and no admin rights are needed.</p> <p>Unzip the zip-file <code>moodle-qtype_stack-master.zip</code> in your <code>maxima_userdir</code>, so that the code resides in <code>maxima_userdir/moodle-qtype_stack_master/</code>. Create the additional directories:   1. <code>maxima_userdir/moodle-qtype_stack_master/tmp/</code>   2. <code>maxima_userdir/plots/</code>   2. <code>maxima_userdir/tmp/</code></p> <p>On Windows the directories are afterwords   1. <code>%USERPROFILE%\\maxima\\moodle-qtype_stack_master\\</code>   1. <code>%USERPROFILE%\\maxima\\moodle-qtype_stack_master\\tmp\\</code>   1. <code>%USERPROFILE%\\maxima\\plots\\</code>   1. <code>%USERPROFILE%\\maxima\\tmp\\</code></p> <p>On Linux the directories are afterwords   1. <code>~/.maxima/moodle-qtype_stack_master/</code>   1. <code>~/.maxima/moodle-qtype_stack_master/tmp/</code>   1. <code>~/.maxima/plots/</code>   1. <code>~/.maxima/tmp/</code></p> <p>To use the STACK Sandbox in Maxima, just copy the file <code>stacklocalwin.mac</code> or <code>stacklocallinux.mac</code> into your <code>maxima_userdir</code>. Thus it is available for the <code>load</code> command. </p> <p>If git is available on your machine, you got to <code>maxima_userdir</code> in terminal an run the command <code>git pull https://github.com/maths/moodle-qtype_stack/</code> and move <code>moodle-qtype_stack</code> to <code>moodle-qtype_stack-master</code>.</p>"},{"location":"en/CAS/STACK-Maxima_sandbox/#troubleshouting","title":"Troubleshouting","text":"<p>Sometimes one has to adjust the path to the directory where the svg are saved. Please try  <code>IMAGE_DIR:sconcat(maxima_userdir,\"/plots/\")</code> if <code>IMAGE_DIR:sconcat(maxima_userdir,\"/plots\")</code> does not work. (And vice versa).</p>"},{"location":"en/CAS/STACK-Maxima_sandbox/#lets-plot","title":"Lets plot","text":"<p>To show the plots produced by STACK a small loop way is used. STACK stores the plot in an SVG file, which is written to a temporary directory. To show the plots an html file <code>maxima_userdir/plots/test.html</code> is used. To generate the file use  <code>add2HTML(string,fileappend)</code> is used. The code looks like:</p> <pre><code>load(\"stacklocalwin.mac\");\nres:plot(cos(x),[x,0,6]);\nadd2HTML(res,false);\nshowHTML();\n</code></pre> <p>A file <code>testPlot.wxm</code> is in <code>stack/maxima/</code> included.</p> <p>If you are not using Firefox on your Linux, you can adjust your browser in <code>stacklocallinux.mac</code>.</p>"},{"location":"en/CAS/STACK-Maxima_sandbox/#reflecting-the-settings-on-your-server","title":"Reflecting the settings on your server","text":"<p>The healthcheck page (Moodle admin access only) displays the contents of the Maxima configuration file which is written to the sever.  This contains Maxima commands to update the path (which you probably don't want to copy) and also the function <code>STACK_SETUP(ex)</code> which configures your particular version of STACK.  You may want to replace <code>STACK_SETUP(ex)</code> in the sandbox with <code>STACK_SETUP(ex)</code> from the Moodle server. For most users this should not be needed, and is most useful for advanced debugging where significant differences between versions matters.</p> <p>It is more important to match the version of the STACK code you downloaded from github with the version you have on your server.  The STACK documentation page on your server gives the version number of the STACK code at the bottom of the documentation front page.  For example</p> <pre><code>https://stack-demo.maths.ed.ac.uk/demo/question/type/stack/doc/doc.php/\n</code></pre> <p>shows the version of the STACK code the demo site is running. </p> <p><code>{@stackmaximaversion@}</code> and <code>{@MAXIMA_VERSION@}</code> in a question text will return the STACK and Maxima version installed on your LMS. </p>"},{"location":"en/CAS/Simplification/","title":"Simplification &amp; ordering","text":""},{"location":"en/CAS/Simplification/#algebraic-equivalence","title":"Algebraic equivalence","text":"<p>Is ?  Well, it depends!  In particular you can easily derive the contradiction  -1 = (-1)^1 = (-1)^{2\\times \\frac{1}{2}}  and using our rule (a^x)^y \\equiv a^{x\\,y}  = \\left({(-1)^{2}}\\right)^{\\frac{1}{2}} = 1^{\\frac{1}{2}} = 1. To avoid problems like this we therefore have decided that</p> <pre><code>ATAlgEquiv((a^x)^y, a^(x*y)) = [0, \"\"]\n</code></pre> <p>If you are teaching rules of indices to students for the first time this might come as a surprise!  If you would like STACK to implement this rule, then you need to also <code>assume(a&gt;0)</code>.  This can be done in the feedback variables.  This is a design decision and not a bug (and is recorded in the system unit tests)!</p> <p>Note the Maxima function <code>rootscontract</code> which converts products of roots into roots of products.</p> <p>Note that Maxima resists the transformation  (a^b)^c \\rightarrow a^{bc} , which is not always correct.  Instead, and when you know this will be correct, use <code>radcan</code> with <code>radexpand:all</code>.  For example, <code>ev(radcan((a^b)^c),radexpand:all,simp)</code>.</p>"},{"location":"en/CAS/Simplification/#ordering-terms","title":"Ordering terms","text":"<p>Maxima chooses an order in which to write terms in an expression. By default, this will use reverse lexicographical order for simple sums, so that we have b+a instead of a+b. In elementary mathematics this looks a little odd!  One way to overcome this is to use simplification below but another way is to alter the order in which expressions are transformed.</p> <p>To alter the order in STACK you can use the Maxima commands <code>orderless</code> and <code>ordergreat</code>.  To have a+b you can use</p> <pre><code>ordergreat(a,b);\n</code></pre> <p>See Maxima's documentation for more details.</p> <ol> <li>Only one <code>orderless</code> or <code>ordergreat</code> command can be issued in any session.  The last one encountered will be used and the others ignored.</li> <li>No warnings or errors are issued if more than one is encountered.</li> <li>The <code>orderless</code> or <code>ordergreat</code> command is executed first before any other commands.  Therefore the argument names are literal atoms and you cannot use variable names.</li> </ol> <p>As an example of the last point, consider the following in desktop maxima</p> <p>p:a+b;    x:a;    ordergreat(x);    p:a+b;</p> <p>The output of the last line, as expected will be a+b.  However, if you put the above in the question variables then effectively you will have the following.</p> <p>ordergreat(x);    / Other stuff, including setting up error trapping for the execution of commands below. /    p:a+b;    x:a;    p:a+b;</p> <p>The output of the last line, as expected will be b+a.  STACK moves <code>ordergreat</code> to be executed first, and at that point you have no assigned <code>x</code> to be the atom <code>a</code>.</p> <p>This is a limitation, especially in questions where you want to have a randomly generated variable name.</p>"},{"location":"en/CAS/Simplification/#fixing-the-order-of-some-terms-in-sums-and-products","title":"Fixing the order of some terms in sums and products","text":"<p>By default, maxima returns <code>a+b</code> as <code>b+a</code> because <code>b</code> is \"greater\" than <code>a</code>.</p> <p>Sometimes we don't want to change the order in which Maxima displays expressions, but within part of an expression we do want to fix the order in the sum, even with <code>simp:true</code>.</p> <p>One approach is to use the library in the rule-based simplifier and define</p> <pre><code>fix_sum([ex]):=apply(\"nounadd\",ex);\n</code></pre> <p>Here are some test cases (WIP)</p> <pre><code>{@a+b@}, &lt;/br&gt; &lt;/br&gt;\n{@fix_sum(a,b)@}, &lt;/br&gt;\n{@fix_sum(a,b,c)@}, &lt;/br&gt;\n{@fix_sum(a,-b)@}, &lt;/br&gt;\n{@fix_sum(-a,b)@}, &lt;/br&gt;\n{@fix_sum(a,-b,c)@}, &lt;/br&gt;\n{@fix_sum(a,3)@}, &lt;/br&gt;\n{@fix_sum(a,-2,b)@}, &lt;/br&gt;\n{@fix_sum(a,3/2)@}, &lt;/br&gt;\n{@(simp:false,fix_sum(a,-3/2))@}, &lt;/br&gt;\n{@fix_sum(a,b,a+b)@}, &lt;/br&gt;\n{@fix_sum(a,b,fix_sum(a,b))@}&lt;/br&gt;\n{@fix_sum(a,b^fix_sum(a,b))@}&lt;/br&gt;\n&lt;/br&gt;\n\n{@(simp:false,verb_arith(fix_sum(a,-2,b)))@}, &lt;/br&gt;\n{@(simp:false,fix_sum(a,-3/2))@}, &lt;/br&gt;\n</code></pre>"},{"location":"en/CAS/Simplification/#logarithms-to-an-arbitrary-base","title":"Logarithms to an arbitrary base","text":"<p>By default, Maxima does not provide logarithms to an arbitrary base.  To overcome this, STACK provides a function <code>lg</code> for student entry.</p> <ul> <li><code>lg(x)</code> is log of x to the base 10.</li> <li><code>lg(x, a)</code> is log of x to the base a.</li> </ul> <p>STACK provides no simplification rules for these logarithms.  To simplify you must transform back to natural logarithms.</p> <p>For example (with <code>simp:true</code> or <code>simp:false</code>)</p> <pre><code>p:lg(27, 3)\nq:ev(p, lg=logbasesimp)\n</code></pre> <p>results in <code>p=lg(27, 3)</code>, and <code>q=3</code>.</p> <p>The algebraic equivalence function <code>algebraic_equivalence</code>, and so anything upon which it depends, will automatically remove logarithms to other bases. This includes the answer tests as needed.</p>"},{"location":"en/CAS/Simplification/#selective-simplification","title":"Selective simplification","text":"<p>The level of simplification performed by Maxima can be controlled by changing Maxima's global variable <code>simp</code>, e.g.</p> <pre><code>simp:true\n</code></pre> <p>When <code>simp</code> is set to <code>false</code>, no simplification is performed and Maxima is quite happy to deal with an expression such as 1+4 without actually performing the addition. This is most useful for dealing with very elementary expressions, and for showing working.</p> <p>This variable can be set at the question level using the options or for each Potential response tree.</p> <p>When <code>simp</code> is set to <code>false</code>, you can evaluate an expression with simplification turned on by using <code>ev(..., simp)</code>, for example:</p> <pre><code>simp:false;\na:ev(1+1,simp);\n</code></pre> <p>will give a=2.</p>"},{"location":"en/CAS/Simplification/#within-castext-question-text-general-feedback-etc","title":"Within CASText (question text, general feedback, etc.)","text":"<p>Sometimes it is useful to control the level of simplification applied to expressions included within CASText using <code>{@...@}</code>. In particular, to show steps in working, it is often necessary to turn simplification off.</p> <p>To selectively control simplification within CASText (including the general feedback), you can use the following methods:</p> <ol> <li>Set <code>simp:false</code> in the question options, or at the end of your question variables. That way all expressions in the CASText will be unsimplified, but you can use <code>{@ev(...,simp)@}</code> to simplify selectively.</li> <li>Use evaluation flags to control the level of simplification for an individual CAS expression, for example:</li> </ol> <pre><code>{@3/9,simp=false@}\n</code></pre> <ol> <li>Use a define block to set the value of <code>simp</code>, e.g.</li> </ol> <pre><code>[[define simp=\"false\"/]]\n\\({@3/9@} \\neq {@1+1@}\\)\n[[define simp=\"true\"/]]\n\\({@3/9@} \\neq {@1+1@}\\)\n</code></pre> <p>will produce \\frac{3}{9}\\neq1+1 followed by \\frac{1}{3}\\neq2. 4. Switch simplification</p> <pre><code>{@(simp:false,3/9)@}\n</code></pre> <p>This command sets the value of <code>simp</code> for this expression, and all others which follow, much like the define block above.</p>"},{"location":"en/CAS/Simplification/#unary-minus-and-simplification","title":"Unary minus and simplification","text":"<p>There are still some problems with the unary minus, e.g. sometimes we get the display 4+(-3x) when we would actually like to always display as 4-3x. This is a problem with the unary minus function <code>-(x)</code> as compared to binary infix subtraction <code>a-b</code>.</p> <p>To reproduce this problem type in the following into a Maxima session:</p> <pre><code>simp:false;\np:y^3-2*y^2-8*y;\n</code></pre> <p>This displays the polynomial as follows.</p> <pre><code>y^3-2*y^2+(-8)*y\n</code></pre> <p>Notice the first subtraction is fine, but the second one is not.  To understand this, we can view the internal tree structure of the expression by typing in</p> <pre><code>?print(p);\n((MPLUS) ((MEXPT) $Y 3) ((MMINUS) ((MTIMES) 2 ((MEXPT) $Y 2))) ((MTIMES) ((MMINUS) 8) $Y))\n</code></pre> <p>In the structure of this expression the first negative coefficient is <code>-(2*y^2)</code> BUT the second is <code>-(8)*y</code>. This again is a crucial but subtle difference! To address this issue we have a function</p> <pre><code>unary_minus_sort(p);\n</code></pre> <p>which pulls \"-\" out the front in a specific situation: that of a product with a negative number at the front. The result here is the anticipated <code>y^3-2*y^2-8*y</code>.</p> <p>Note that STACK's display functions automatically apply <code>unary_minus_sort(...)</code> to any expression being displayed.</p>"},{"location":"en/CAS/Simplification/#really-insisting-on-printing-the-parentheses","title":"Really insisting on printing the parentheses","text":"<p>Why does STACK (i.e. Maxima) not print out the parentheses?  For example, try the following.</p> <pre><code>simp:false;\np1:(a+b)+c;\ntex(p1);\n</code></pre> <p>The result is a+b+c.  Where have the parentheses gone?  On the other hand <code>p2:a+(b+c)</code> is displayed as a+\\left(b+c\\right).  Why are these displayed differently?  Assuming <code>simp:false</code> and using Maxima's <code>?print</code> command we can see the internal structure.</p> <ul> <li><code>?print(a+b+c)</code> gives <code>((MPLUS) $A $B $C)</code>.  This means we have the flattened (nary) sum of the three variables.  This will always not have brackets.</li> <li><code>?print((a+b)+c)</code> gives <code>((MPLUS) ((MPLUS) $A $B) $C)</code>.  This is not yet flattened to an nary sum, but Maxima's tex routines suppress the parentheses, even with <code>simp:false</code>.  This is part of the problem.</li> <li><code>?print(a+(b+c))</code> gives <code>((MPLUS) $A ((MPLUS) $B $C))</code>.  This is not yet flattened to an nary sum, and in this case it displayed as a+\\left(b+c\\right) by Maxima's TeX function.</li> </ul> <p>Note, this display problem is not a bug.  Experts would interpret a+b+c as (a+b)+c not as a+(b+c).  This is only a problem in teaching when we want to display (arguably not needed) parentheses.  To solve this display problem STACK has an inert <code>disp_parens</code> function.  All this function does is print round brackets (parentheses) around its argument.</p> <p>For example, try the following.</p> <pre><code>simp:false;\np1:disp_parens(a+b)+c;\ntex(p1);\n</code></pre> <p>The result is {\\left( a+b \\right)+c}.</p> <p>Parentheses can also be added to other expressions which, strictly speaking, do not need them. For example <code>int(disp_parens(x-2),x)</code> is displayed as {\\int {\\left( x-2 \\right)}{\\;\\mathrm{d}x}}.</p> <p>It may be necessary to remove the <code>disp_parens</code> from an expression.  STACK provides the function <code>remove_disp_parens(ex)</code> to remove this inert display function.  Actually, this function is remarkably simple.</p> <pre><code>remove_disp_parens(ex) := ev(ex, disp_parens=lambda([ex2], ex2))$\n</code></pre> <p>The function <code>disp_parens</code> has no mathematical definition.  It just changes the TeX output.  The above function re-evaluates the expression, with this function equal to the identity function (<code>lambda([ex2], ex2))</code>).  Giving <code>disp_parens</code> this mathematical definition effectively removes it.</p> <p>Note that the answer tests do not remove the <code>disp_parens</code> function from a teacher's expression.  Hence, <code>a+b+c</code> and <code>`disp_parens(a+b)+c</code> are not algebraically equivalent.  Teachers who use these display functions must remove them before answer tests are applied.  Students cannot use the <code>disp_parens</code> function.  Indeed, currently a student's input of <code>(a+b)+c</code> is displayed as Maxima does without the brackets (yes, this might be considered a bug).</p>"},{"location":"en/CAS/Simplification/#selecting-and-highlighting-part-of-an-expression","title":"Selecting, and highlighting part of an expression","text":"<p>Like <code>disp_parens</code>, STACK provides a function <code>disp_select</code> which highlights part of an expression.  All this function does is colour the argument red and underline it.  For example <code>1+disp_select(x^2+2)</code> is displayed as {1+\\color{red}{\\underline{x^2+2}}}.  Note, the combination of colour and the underline is because it is considered poor practice to use colour alone to convey meaning.</p> <p>STACK provides the function <code>remove_disp_select(ex)</code> to remove this inert display function.  The function <code>remove_disp(ex)</code> removes all inert display functions.</p> <p>When creating feedback it is often useful to select, and highlight, part of an expression.  STACK provides a function <code>select(p1, ex)</code> to do this.  The select function traverses the expression tree for <code>ex</code> and when it encounters a sub-tree for which the predicate <code>p1</code> is true it adds <code>disp_select</code> to the sub-tree and stops traversing any further down that sub-tree.  While nested <code>disp_select</code> are possible (and will display multiple underlines: another reason for having underline) this particular function stops once <code>p1</code> is true.  You will need to build nested display by hand.</p> <p>For example, to select all the integers in an expression you can use the predicate <code>integerp</code> and <code>select(integerp, 1+x+0.5*x^2)</code> gives \\color{red}{\\underline{1}}+x+0.5\\cdot x^{\\color{red}{\\underline{2}}}.</p> <p>It is possible to use any of the existing predicate functions, or to define your own function in the question variables.</p> <p>The function <code>select_apply(f1, ex)</code> traverses the expression and when it encounters the <code>disp_select</code> function it applied the function <code>f1</code> to that sub-tree of the expression.  This allows for selective simplification/modification of highlighted sub-trees.  For example,</p> <pre><code>simp:false;\np1:select(zeroMulp, (1-1)*x^2+0*x+1);\np2:select_apply(simplify, p1);\np3:select_apply(simplify, p1, false);\n</code></pre> <p>generates the following displayed expressions.</p> <ul> <li><code>p1</code> displays as {\\left(1-1\\right)\\cdot x^2+\\color{red}{\\underline{0\\cdot x}}+1}.  We have selected all the parts for which the predicate <code>zeroMulp</code> is true.  This is the predicate which checks if the rule 0 \\times x \\rightarrow 0  is applicable.  While the coefficient of x^2 is equivalent to zero, it is unsimplified and the predicate <code>zeroMulp(1-1)</code> is false. This sub-tree is not selected by this predicate.</li> <li><code>p2</code> displays as {\\left(1-1\\right)\\cdot x^2+0+1}.  The displayed expression is subjected to the function <code>simplify</code>, and the displayed part replaced.  The rest of the expression is unchanged. By default the <code>disp_select</code> is removed and so the result is not coloured and underlined.</li> <li><code>p3</code> displays as {\\left(1-1\\right)\\cdot x^2+\\color{red}{\\underline{0}}+1}.  Notice the third, optional boolean, argument to <code>select_apply</code> in <code>p3</code>.  This argument will decide whether to continue to display the <code>disp_select</code> display or remove it (now the function has been applied).  The default is <code>true</code>, so here the red underline is not removed.</li> </ul>"},{"location":"en/CAS/Simplification/#if-you-really-insist-on-a-kludge","title":"If you really insist on a kludge....","text":"<p>In some situations you may find you really do need to work at the display level, construct a string and display this to the student in Maxima. Please avoid doing this!</p> <pre><code>a:sin(x^2);\nb:1+x^2;\nf:sconcat(\"\\\\frac{\",stack_disp(a,\"\"),\"}{\",stack_disp(b,\"\"),\"}\");\n</code></pre> <p>Then you can put in <code>\\({@f@}\\)</code> into one of the CASText fields. Note, you need to add LaTeX maths delimiters, because when the CAS returns a string the command <code>{@f@}</code> will just display the contents of the string without maths delimiters.</p>"},{"location":"en/CAS/Simplification/#tips-for-manipulating-expressions","title":"Tips for manipulating expressions","text":"<p>How do we do the following in Maxima?  (1-x)^a \\times (x-1) \\rightarrow  -(1-x)^{a+1}. Try</p> <pre><code>q:(1-x)^a*(x-1);\nq:ratsubst(z,1-x,q);\nq:subst(z=1-x ,q);\n</code></pre> <p>How do we do the following in Maxima?  (x-1)(k(x-1))^a \\rightarrow  (x-1)^{a+1}k^a. </p> <pre><code> factor(radcan((x-1)*(k*(x-1))^a))\n</code></pre> <p>Maxima's internal representation of an expression sometimes does not correspond with what you expect -- in that case, <code>dispform</code> may help to bring it into the form you expect. For example, the output of <code>solve</code> in the following code shows the b in the denominator as b^{-1} which gives unnatural-looking output when a value is substituted in -- this is fixed by using <code>dispform</code> and substituting into that variants instead.</p> <pre><code>simp:true;\neqn:b = 1/(6*a+3);\nta1: expand(rhs(solve(eqn,a)[1]));\ndispta1:dispform(ta1);\nsimp:false;\nsubst(2,b,ta1);\nsubst(2,b,dispta1);\n</code></pre>"},{"location":"en/CAS/Simplification/#creating-sequences-and-series","title":"Creating sequences and series","text":"<p>One problem is that <code>makelist</code> needs simplification.  To create sequences/series, try something like the following</p> <pre><code>an:(-1)^n*2^n/n!\nN:8\nS1:ev(makelist(k,k,1,N),simp)\nS2:maplist(lambda([ex],ev(an,n=ex)),S1)\nS3:ev(S2,simp)\nS4apply(\"+\",S3)\n</code></pre> <p>Of course, to print out one line in the worked solution you can also <code>apply(\"+\",S2)</code> as well.</p> <p>To create the binomial coefficients</p> <pre><code>simp:false;\nn:5;\napply(\"+\",map(lambda([ex],binomial(n,ex)*x^ex), ev(makelist(k,k,0,5),simp)));\n</code></pre>"},{"location":"en/CAS/Simplification/#surds","title":"Surds","text":"<p>Imagine you would like the student to expand out  (\\sqrt{5}-2)(\\sqrt{5}+4)=2\\sqrt{5}-3 . There are two tests you probably want to apply to the student's answer.</p> <ol> <li>Algebraic equivalence with the correct answer: use <code>ATAlgEquiv</code>.</li> <li>That the expression is \"expanded\": use <code>ATExpanded</code>.</li> </ol> <p>You probably then want to make sure a student has \"gathered\" like terms.  In particular you'd like to make sure a student has either  2\\sqrt{5}-3 \\text{ or } \\sqrt{20}-3 but not  5+4\\sqrt{2}-2\\sqrt{2}+6. This causes a problem because <code>ATComAss</code> thinks that  2\\sqrt{5}-3 \\neq \\sqrt{20}-3. So you can't use <code>ATComAss</code> here, and guarantee that all random variants will work by testing that we really have 5+4\\sqrt{2} for example.</p> <p>What we really want is for the functions <code>sqrt</code> and <code>+</code> to appear precisely once in the student's answer, or that the answer is a sum of two things.</p> <p>When surds appear in equations and sets we might need to force some kinds of simplification.  For example, when we try to establish that this set (the student's answer)  {\\left \\{x=-\\frac{\\sqrt{19}}{2\\cdot \\sqrt{3}}-\\frac{1}{2} , x=\\frac{\\sqrt{19}}{2\\cdot \\sqrt{3}}-\\frac{1}{2} \\right \\}}  is equivalent to  {\\left \\{x=\\frac{-\\sqrt{57}-3}{6} , x=\\frac{\\sqrt{57}-3}{6} \\right \\}}  </p> <p>If we were dealing with two numbers, then Maxima has no problem in establishing that   \\frac{-\\sqrt{57}-3}{6}-\\frac{\\sqrt{19}}{2\\cdot \\sqrt{3}}-\\frac{1}{2} = 0 On the maxima command line try <code>p:(-3 + sqrt(9 + 48))/6+1/2 - sqrt(1/4 + 4/3);</code> then <code>radcan(p)</code>.  Within the AlgEquiv test <code>radcan</code> is applied automatically to numbers within an expression, and this returns zero.</p> <p>The problem with sets is that we don't have the difference between two numbers.  We're trying to write all numbers in an unambiguous form, and then comepare the representation.  This (subtle) difference is the problem.  Instead of looking at equivalence with zero, we need to contol the form of surds explicitly.</p>"},{"location":"en/CAS/Simplification/#control-of-surds","title":"Control of surds","text":"<p>See also the Maxima documentation on <code>radexpand</code>.  For example</p> <pre><code>radexpand:false$\nsqrt((2*x+10)/10);\nradexpand:true$\nsqrt((2*x+10)/10);\n</code></pre> <p>The first of these does not pull out a numerical denominator.  The second does.</p> <p>Similarly, consider the output from these two examples.</p> <pre><code>p1:(-3 + sqrt(9 + 48))/6;\nradcan(p1);\ntrigrat(p1);\nradcan(trigrat(p1));\n\np2:-1/2 + sqrt(1/4 + 4/3);\nradcan(p2);\ntrigrat(p2);\nradcan(trigrat(p2));\n</code></pre> <p>Why don't we always apply <code>trigrat</code> to expressions?  Without knowing something about the expression, we might \"expand\" out the terms which causes a practical failure of the test due to timeout.  E.g. <code>expand((x+y)^(2^100))</code> is never going to execute.  Similarly, <code>trigrat</code> causes some (trig) expressions to expand, see below.</p>"},{"location":"en/CAS/Simplification/#trig-simplification","title":"Trig simplification","text":"<p>Maxima does have the ability to make assumptions, e.g. to assume that n is an integer and then simplify 3\\cos(n\\pi/2)^2 to  \\frac{3}{2}(1+(-1)^n).  Assume the student's answer is <code>ans1</code> then define the following feedback variables:</p> <pre><code>declare(n,integer);\nsans1:ev(trigrat(ans1),simp);\n</code></pre> <p>The variable <code>sans1</code> can then be used in the PRT.  Just note that <code>trigrat</code> writes powers of trig functions in terms of multiple angles.  This can have an effect of \"expanding\" out an expression.  E.g. <code>trigrat(cos(n)^20)</code> is probably still fine, but <code>trigrat(cos(n)^2000)</code> is probably not!  For this reason <code>trigrat</code> is not part of the default routines to establish equivalence.  Trig simplification, especially when we make assumptions on variables like n, needs to be done on a question by question basis.</p>"},{"location":"en/CAS/Simplification/#boolean-functions","title":"Boolean functions","text":"<p>See the page on propositional logic.</p>"},{"location":"en/CAS/Simplification/#further-examples","title":"Further examples","text":"<p>Some further examples are given elsewhere:</p> <ul> <li>Matrix examples in showing working.</li> <li>An example of a question with <code>simp:false</code> is discussed in authoring quick start 7.</li> <li>Generating random algebraic expressions which need to be \"gathered and sorted\".</li> </ul> <p>Note also that question tests do not simplify test inputs.</p>"},{"location":"en/CAS/Statistics/","title":"Statistics support in STACK.","text":"<p>The following optional packages provide statistics support in Maxima:</p> <pre><code>load(\"stats\");\nload(\"distrib\");\nload(\"descriptive\");\n</code></pre> <p>Please see Maxima's documentation for information on the functions these packages contain.</p> <p>These packages are included by default. The Debian package manager currently has a release of Maxima (as of Nov 2015) without these packages and attempting to load them renders STACK unusable. For this reason, they may have been disabled by your system administrator and your server may not support inclusion of these packages.</p>"},{"location":"en/CAS/Statistics/#package-descriptive","title":"Package: descriptive","text":"<p>Note that the \"descriptive\" package includes a number of functions to plotting graphs, such as boxplots and scatterplot.  These are not supported by STACK.</p>"},{"location":"en/CAS/Statistics/#stack-functions","title":"STACK functions","text":"<p>STACK provides the <code>mode</code> function which returns the modal value in a list.</p>"},{"location":"en/CAS/Strings/","title":"Maxima strings in STACK questions","text":"<p>Strings are a basic data type in Maxima.  The predicate function <code>stringp(ex)</code> determines whether an expression is a string.  The function <code>string(ex)</code> takes a Maxima expression and returns a string representation.  We do not support Maxima's <code>parse_string</code> function.  There is no way to turn a string into a Maxima expression through STACK.  For example, if you use the string input you cannot later parse the student's answer into a Maxima expression.  Therefore, only use the string input if your answer is actually a string.</p> <p>The whole point of STACK is that teachers should seek to establish mathematical properties and the string match tests are provided for completeness (and because they are trivial to implement).  Experienced question authors almost never use the string match tests.  If you find yourself needing to use the string match tests for something mathematical please contact the developers.</p> <p>There are 4 string-related answer tests.</p> <ul> <li>String</li> <li>StringSloppy</li> <li>Levenshtein</li> <li>SRegExp</li> </ul> <p>If your answer is a language string, then please consider using the Damerau-Levenshtein distance rather than a string match.</p>"},{"location":"en/CAS/Strings/#latex-within-maxima-strings","title":"LaTeX within Maxima strings","text":"<p>You have to protect LaTeX backslashes in Maxima strings.  This is tedious, tricky and error prone!</p> <p>For example, you have to define Maxima strings such as \"\\\u200b\\\u200b( f(\u200bn)=\\\u200b\\\u200bsin(n\\\u200b\\\u200bpi) \\\u200b\\\u200b)\"</p> <p>To help with this there is a tool to automatically add in these extra slashes as a one-off process.</p> <p>The adminui tools have a chat page.  You can find the tool under the \"STACK question dashboard\" -&gt; \"Send general feedback to the CAS\".  At the bottom of this page is an option \"Protect slashes within Maxima string variables\".</p> <p>The \"Protect slashes within Maxima string variables\" option will add slashes every time the option is selected, so this is effectively a one-off process.  However, you can write the strings in normal LaTeX and proof-read. Move these to maxima strings, before converting to Maxima strings.</p>"},{"location":"en/CAS/Subscripts/","title":"Subscripts","text":""},{"location":"en/CAS/Subscripts/#atoms-subscripts-and-fine-tuning-the-latex-display","title":"Atoms, subscripts and fine tuning the LaTeX display","text":"<p>Everything in Maxima is either an atom or an expression. Atoms are either an integer number, float, string or a name.  You can use the predicate <code>atom()</code> to decide if its argument is an atom.  Expressions have an operator and a list of arguments. </p> <p>You can change the TeX output for an atom with Maxima's <code>texput</code> command.  E.g. <code>texput(blob, \"\\\\diamond\")</code> will display the atom <code>blob</code> as .  If you place <code>texput</code> commands in the question variables, this affects the display everywhere in the question including the inputs.  E.g. if a student types in <code>blob</code> then the validation feedback should say something like \"your last answer was:  \\diamond \".</p> <p>Note that the underscore symbol is not an operator.  Thus <code>a_1</code> is an atom in maxima. Hence, the atoms <code>a1</code> and <code>a_1</code> are not considered to be algebraically equivalent.   If you would like to consolidate subscripts in students' input see the documentation on the input option <code>consolidatesubscripts</code> in the extra options.  Also note that since the underscore is not an operator, an expression such as <code>(a_b)_c</code> is not valid Maxima syntax, but <code>a_b_c</code> is a valid name for an atom.</p> <p>Display with subscripts is a subtle and potentially confusing issue because subscript notation in mathematics has many different uses.  For example,</p> <ol> <li>Subscripts denote a function of the natural numbers, e.g. when defining terms in a sequence a_1, a_2, a_3.  That is the subscript denotes function application.  a_n = a(n).</li> <li>Subscripts denote differentiation, e.g.  x_t  is the derivative of x  with respect to t.</li> <li>Subscripts denote coordinates in a vector, in  \\vec{v} = (v_1, v_2, \\cdots, v_n)  .</li> </ol> <p>There are many other possible uses for subscripts, especially in other subjects e.g. in physics or actuarial studies.</p> <p>Because Maxima considers subscripted expressions to be atoms, the default TeX output of an atom <code>V_alpha</code> from Maxima is  {\\it V\\_alpha}  (literally <code>{\\it V\\_alpha}</code>) and not  V_{\\alpha}  as a user might expect.  For this reason STACK intercepts and redefines how atoms with the underscore are displayed.  In particular STACK (but not core Maxima) takes an atom <code>A_B</code>, applies the <code>tex()</code> command to <code>A</code> and <code>B</code> separately and concatenates the result using subscripts.  For example, if you define</p> <pre><code>texput(A, \"{\\\\mathcal A}\");\ntexput(B, \"\\\\diamond\");\n</code></pre> <p>then <code>A_B</code> is now displayed as {{{\\mathcal A}}_{\\diamond}}.</p> <p>Below are some examples.</p> Maxima code Maxima's <code>tex()</code> command STACK (if different) STACK plain atoms <code>A_B</code> <code>{\\it A\\_B}</code> {\\it A\\_B} <code>{{A}_{B}}</code>  {{A}_{B}}  <code>A[1]</code> <code>A_{1}</code>  A_{1} <code>A1</code> <code>A_{1}</code>  A_{1}  <code>{\\it A1}</code>  {\\it A1}  <code>A01</code> <code>A_{1}</code>  A_{1}  <code>{\\it A01}</code>  {\\it A01}  <code>A_1</code> <code>A_{1}</code>  A_{1}  <code>A_x1</code> <code>{\\it A\\_x}_{1}</code>  {\\it A\\_x}_{1}  <code>{{A}_{x_{1}}}</code>  {{A}_{x_1}}  <code>{{A}_{{\\it x1}}}</code>  {{A}_{{\\it x1}}}  <code>A_BC</code> <code>{\\it A\\_BC}</code>  {\\it A\\_BC}  <code>{{A}_{{\\it BC}}}</code>  {{A}_{{\\it BC}}}  <code>A_alpha</code> <code>{\\it A\\_alpha}</code>  {\\it A\\_alpha} <code>{{A}_{\\alpha}}</code>  {{A}_{\\alpha}}  <code>alpha_1</code> <code>\\alpha_{1}</code>  \\alpha_{1}  <code>A_B_C</code> <code>{\\it A\\_B\\_C}</code>  {\\it A\\_B\\_C}  <code>{{{A}_{B}}_{C}}</code>  {A_B}_C  <code>x_t(1)</code> <code>{\\it x\\_t}\\left(1\\right)</code>  {\\it x\\_t}\\left(1\\right)  <code>{{\\it x\\_t}\\left(1\\right)}</code>  {{\\it x\\_t}\\left(1\\right)}  <code>A[1,2]</code> <code>A_{1,2}</code>  A_{1,2}  <p>Notes</p> <ol> <li>The maxima atoms <code>A1</code> and <code>A_1</code> are different, and are not algebraically equivalent.  If student input is using both forms, and this causes problems, look at the documentation on <code>consolidatesubscripts</code> in the extra options.</li> <li>in the above examples all the different expressions <code>A1</code>, <code>A_1</code>, <code>A[1]</code> and the atom <code>A01</code>: generate the same tex code <code>A_{1}</code>  A_{1}, and so are indistinguishable at the display level.  If you would like to display <code>A1</code> without subscripts, STACK provides the flag <code>tex_plain_atoms</code>.  If you set <code>tex_plain_atoms:true</code> in your question (probably before the <code>%_stack_preamble_end</code> to make sure this option is available to inputs), then the TeX functions will not split up atoms <code>A1</code> and display this with subscripts.  See examples above.</li> <li>The expression <code>x_t(1)</code> refers to the function <code>x_t</code> which is not an atom, and hence STACK's logic for displaying atoms with underscores does not apply (by design).  If you want to display a function name including a subscript you can explicitly use, e.g. <code>texput(x_t, \"x_t\");</code> to control the display, this is just not done automatically.</li> <li>When we split up atoms for display we have two separate atoms.  E.g. <code>x_h</code> will be split into atoms <code>x</code> and <code>h</code> temporarily and the TeX display of <code>x</code> and <code>h</code> evaluated.  For this reason, student's input will validate the parts of the subscript sparately.  In particular, if <code>h</code> is a question variable and a student types in the atom <code>x_h</code> then since <code>h</code> is forbidden input the student's <code>x_h</code> will be invalid as well.  This might cause problems, but these can be avoided when the teacher uses appropriate variable names.</li> </ol> <p>One situation where this design is not satisfactory is when you want to use both of the atoms <code>F</code> and <code>F_1</code> but with different display. For example <code>F</code> should display as {\\mathcal F} but <code>F_1</code> should display as  F_1 .  Such a situation is not hard to imagine, as it is often considered good style to have things like  F_1 \\in {\\mathcal F}.  The above design always splits up the atom <code>F_1</code> into <code>F</code> and <code>1</code>, so that the atom <code>F_1</code> will display as  {\\mathcal F}_1.  (This is actually what you normally expect, especially with the Greek letter subscripts.)  To avoid this problem the logic which splits up atoms containing an underscore checks the texput properties list. If an entry has been made for a specific atom then STACK's display logic uses the entry, and does not split an atom over the underscore.  In the above example, use the following texput commands.</p> <pre><code>texput(F, \"{\\\\mathcal F}\");\ntexput(F_1, \"{F_1}\");\n</code></pre> <p>With this code <code>F</code> displays as {\\mathcal F}, the atom <code>F_1</code> displays as  F_1 , and every subscript will display with calligraphic, e.g. <code>F_alpha</code> displays as {\\mathcal F}_{\\alpha}.  There is no way to code the reverse logic, i.e. define a special display only for the unique atom <code>F</code>.</p> <p>Note that the scientific units code redefines and then assumes that symbols represent units.  E.g. <code>F</code> is assumed to represent Farad, and all units are typeset in Roman type, e.g.  \\mathrm{F}  rather than the normal  F . This is typically the right thing to do, but it does restrict the number of letters which can be used for variable names in a particular question.  To overcome this problem you will have to redefine some atoms with texput.  For example,</p> <pre><code>stack_unit_si_declare(true);\ntexput(F_a, \"F_a\");\n</code></pre> <p>will display the atom <code>F_a</code> as F_a, i.e. not in Roman.  If you <code>texput(F, \"F\")</code> the symbol <code>F</code> is no longer written in Roman, as you would expect from units.  This may be sensible if Farad could not possibly appear in context, but students might type a range of subscripted atoms involving <code>F</code>.</p> <p>The use of texput is global to a question. There is no way to display a particular atom differently in different places (except perhaps in the feedback variables, which is currently untested: assume texput is global).</p> <p>How would you generate the tex like  A_{1,2} ?  STACK's <code>sequence</code> command (see below) does output its arguments separated by a comma, so <code>sequence(1,2)</code> is displayed as  {1,2} , however the Maxima command <code>A_sequence(1,2)</code> refers to the function <code>A_sequence</code>, (since the underscore is not an operator).  Hence STACK's logic for splitting up atoms containing the underscore does not apply.  (In any case, even if the display logic did split up function names we would still have the issue of binding power to sort out, i.e. do we have the atom with parts <code>A</code> and <code>sequence(1,2)</code> or the function named <code>A</code> and <code>sequence</code>?)  To create an output like  A_{1,2}  you have no option but to work at the level of display.  Teachers can create an inert function which displays using subscripts.</p> <pre><code>texsub(a,b)\n</code></pre> <p>is typeset as {a}_{b} i.e. <code>{a}_{b}</code> in LaTeX.  For example,</p> <ul> <li><code>texsub(A, sequence(1,2))</code> will display as {{A}_{1, 2}},</li> <li>with simplification off, <code>texsub(F,1-2)</code> will be displayed as {F}_{1-2}.</li> </ul> <p>Note that the process of converting <code>theta_07</code> into the intermediate <code>texsub</code> form internally results in the <code>texsub(theta,7)</code> which removes the leading zero.  This is a known issue, for which a work around is to directly use <code>texput(theta_07, \"{{\\\\theta}_{07}}\")</code> or <code>texsub(theta,\"07\")</code>.  The second option does not produce optimal LaTeX, since it uses TeX <code>mbox</code>, e.g. <code>{{\\theta}_{\\text{07}}}</code>.</p>"},{"location":"en/CAS/Validator/","title":"Bespoke validators and feedback","text":"<p>The extra option <code>validator</code> to a particular input allows additional bespoke validation, based on a function defined by the question author.  For example, you could require that the student's answer is a list of exactly three equations.</p> <p>The extra option <code>feedback</code> to a particular input allows additional bespoke feedback, based on a function defined by the question author.  This does not create an invalid input.</p> <p>Please check existing, supported, validation options before defining your own!</p> <p>You cannot overwrite certain non-optional core validation, but all validation that is optional can naturally be turned off and a replacement given through this system. For example, you can use this system to give much more question-specific feedback.  Rather than forbid the variable <code>t</code> with the forbidden words system (non-specific error) you could define something very question specific.</p> <pre><code>validate_contains_t(ex):= if member(t,listofvars(ex)) then \"You can't use t here because the independent variable is x.\" else \"\".\n</code></pre> <p>For example, to check a list has at most three elements define the function named <code>validate_listlength</code> in the question variables, e.g.</p> <pre><code>validate_listlength(ex) := block([l],\n  if not(listp(ex)) then return(castext(\"Your answer must be a list\")),\n  l:length(ex),\n  if l &lt; 3 then return(castext(\"Your list only has {#l#} elements, which is too few.\")),\n  \"\"\n);\n</code></pre> <p>To use this feature put the following in the input extra options.</p> <pre><code>validator:validate_listlength\n</code></pre> <p>Similarly, to just add a feedback message use the following in the input extra options.</p> <pre><code>feedback:my_bespoke_feedback\n</code></pre> <p>Notes:</p> <ol> <li>The validator/feedback must be a pure function of a single variable. There must be no reference to the input name within the validator function definition, indeed you cannot reference an input in the question variables.</li> <li>If the validator function returns a non-empty string, then the student's answer will be considered invalid, and the string displayed to the student as a validation error message as part of the input validation.  Any string returned by the feedback function is displayed to the student, and validity is not changed.</li> <li>If the validator function returns an empty string or <code>true</code> then the student's input is considered to be valid.  The use of an empty string here for valid is designed to encourage teachers to write meaningful error messages to students!</li> <li>The function can reference other question variables, e.g. the teacher's answer.</li> <li>The function is always executed with <code>simp:false</code> regardless of the question settings.</li> <li>The function is called after the built-in validation checks, and only if the expression is already valid otherwise.  So, you cannot replace basic validation (by design).  This means you will/should have an expression which Maxima can evaluate if it gets as far as your validator function.  E.g. no missing <code>*</code> or mismatched brackets.</li> <li>The student still cannot use any of the variable names defined in the question variables.</li> <li>Validators only operate on a single input, and there is no mechanism to validate a combination of inputs at once.</li> <li>The recommended style for naming validator functions is to begin the name with <code>validate_</code> or <code>feedback_</code>.</li> </ol> <p>A single validator function can be re-used on multiple inputs within a single question. If you regularly copy validator functions from question to question please consider contributing this as a function to the core of STACK (see below for details). We expect to collect and support regularly used validators in future.</p> <p>Validator functions basically test for a particular property.  Validator functions can be re-used to create an answer test. See the documentation on <code>ATValidtor</code>.</p>"},{"location":"en/CAS/Validator/#combining-validators","title":"Combining validators","text":"<p>If you wish to test for a number of separate properties then it is probably best to create separate functions for each property and combine them into a single validator.</p> <p>For example, imagine you would like the following:</p> <ol> <li>the answer must be a list;</li> <li>the list has three elements;</li> <li>each element is an equation.</li> </ol> <p>E.g. <code>[x^2=1, y=1, x+z=1]</code> is a valid answer.  <code>[x^2+5, y=1]</code> is invalid (for two reasons).</p> <p>Functions which establish these properties are:</p> <pre><code>/* Define validator functions separately. */\nvalidate_islist(ex) := if listp(ex) then \"\" else \"Your answer must be a list.\";\nvalidate_allequations(ex) := if all_listp(equationp, ex) then \"\" else \"All elements of your answer should be equations.\";\nvalidate_checklen(ex) :=  if ev(is(length(ex)=3),simp) then \"\" else \"Your list must have 3 elements.\";\n/* Combine the validator functions. */\nvalidate_equationlist(ex) := stack_multi_validator(ex, [validate_islist, validate_allequations, validate_checklen]);\n</code></pre> <p>The last line creates a single validator function using the convenience function <code>stack_multi_validator</code> supported by STACK.</p> <p>STACK supports two convenience functions</p> <ol> <li><code>stack_multi_validator</code> executes all the validator functions and concatenates the result.</li> <li><code>stack_seq_validator</code> executes the validator functions in list order until one fails.  This means you can make assumptions in later validators about the form of the expression.</li> </ol> <p>If any validator throws an error then the student's answer is invalid.  E.g. using <code>any_listp</code> on a non-list will throw a Maxima error.</p>"},{"location":"en/CAS/Validator/#supported-validators","title":"Supported validators","text":"<p>The Maxima code is stored in the sourcecode in <code>stack/maxima/validator.mac</code>, e.g. on github.</p>"},{"location":"en/CAS/Validator/#contributing","title":"Contributing validators to the core of STACK","text":"<p>When you regularly find yourself testing for particular properties, and copying code between questions, please consider contributing functions to the STACK core for longer term support.</p> <p>You can post your suggestion on the project's GitHub site or submit code directly as a pull request.</p>"},{"location":"en/CAS/Validator/#improving-validation-feedback-messages","title":"Improving validation feedback messages.","text":"<p>It is possible to include the student's answer, or part of the answer, in the validation feedback. This needs more work, of course.</p> <p>The validator must return a string.  One way to include the studnet's answer in the message is to use <code>sconcat</code>, e.g. as follows</p> <pre><code>sconcat(\"User-defined functions are not permitted in this input. In your answer \", stack_disp(op1, \"i\"), \" appears to be used as a function. \")\n</code></pre> <p>Another option is to use the <code>castext</code> function.  Note, that the castext function has to be used only at the top level.  An example is given in the next section on language support.  You cannot currently return the result of multiple <code>castext</code> calls in a concatinated string.</p> <p>An example of how to construct such a validator is <code>validate_nofunctions</code> in the contributed validators.</p>"},{"location":"en/CAS/Validator/#localisation-and-language-support","title":"Localisation and language support","text":"<p>To localise your validation messages use the castext <code>lang</code> block. For example</p> <pre><code>ta:phi^2-1;\nvalidate_vars(ex) := block(\n    if ev(subsetp(setify(listofvars(ex)),setify(listofvars(ta))), simp) then return(\"\"),\n    castext(\"[[lang code='fi']]Vastauksesi sis\u00e4lt\u00e4\u00e4 v\u00e4\u00e4ri\u00e4 muuttujia.[[/lang]][[lang code='en']]Your answer contains the wrong variables.[[/lang]]\")\n);\n</code></pre> <p>For the supported validator function, all language strings are drawn from the STACK language pack: STACK stores all language strings in the plugin source code, and these are then translated by volunteers using the online AMOS system.</p> <p>Individual language strings can then be referred to using STACK's <code>[[commonstring ... /]]</code> block.  For example, the language pack contains the string</p> <pre><code>$string['Illegal_strings'] = 'Your answer contains \"strings\" these are not allowed here.';\n</code></pre> <p>An example of how to use this in Maxima code is below.</p> <pre><code>validate_listoftwo(ex):=block(\n    if not(listp(ex)) then return(\"Your answer must be a list.\"),\n    if not(is(length(ex)=2)) then return(\"Your list must have two elements.\"),\n    if stringp(second(ex)) then return(castext(\"[[commonstring key='Illegal_strings' /]]\")),\n    true\n);\n</code></pre> <p>In this example</p> <ol> <li><code>[\"Quadratic\",x^2-1]</code> is valid.</li> <li><code>[x^2-1,\"Quadratic\"]</code> is invalid because the second argument here is a string. In this case the error message comes from the common language pack.</li> </ol> <p>Many language examples have variables which need to be injected.  In this example, the variable <code>m0</code> needs to be injected.</p> <pre><code>$string['ValidateVarsSpurious']   = 'These variables are not needed: {$a-&gt;m0}.';\n</code></pre> <p>To inject variables into a language string we define the value of <code>m0</code> in the <code>[[commonstring ... /]]</code> block.</p> <pre><code>validate_spuriousvar(ex):=block([%_tmp,simp],\n    simp:false,\n    %_tmp: listofvars(ex),\n    simp:true,\n    %_tmp: setdifference(setify(%_tmp), {x,y,z}),\n    if cardinality(%_tmp) = 0 then return(\"\"),\n    castext(\"[[commonstring key='ValidateVarsSpurious' m0='listify(%_tmp)'/]]\")\n);\n</code></pre> <p>Note, when injecting a value <code>m0='X'</code> the <code>X</code> must be a Maxima expression, not a displayed string.</p> <ol> <li>to inject the Maxima expression <code>X</code> with <code>{@...@}</code> injection (without wrapping like <code>\\(...\\)</code>) to a named placeholder <code>m0</code> use <code>m0='X'</code>.</li> <li>to inject the Maxima expression <code>X</code> with <code>{#...#}</code> injection, to get raw values, to a named placeholder <code>m0</code> use <code>raw_m0='X'</code>.</li> </ol> <p>For other prefix options see the documentaiton for the commonstring block.</p>"},{"location":"en/CAS/Validator/#further-examples","title":"Further examples","text":"<p>To forbid the underscore character in a student's input.</p> <pre><code>validate_underscore(ex) := if is(sposition(\"_\", string(ex)) = false) then \"\"\n           else \"Underscore characters are not permitted in this input.\";\n</code></pre>"},{"location":"en/CAS/Validator/#sharing-validators-between-questions","title":"Sharing validators between questions","text":"<p>It is common to want to share validators between questions.  It would also be very helpful to contribute commonly used validator functions back to the STACK project.  To include a validator in more than one question you could post your validator function publicly.</p> <ol> <li>Get the validator function working reliably in your question, locally.</li> <li>Add the maxima function to this file, <code>https://github.com/maths/moodle-qtype_stack/blob/master/stack/maxima/contrib/validators.mac</code> or another file, preferably contributing to the STACK project.</li> <li>Add documentation and comprehensive test cases (please!) to let other people know what the validator is intended to do, and to help ensure behaviour remains stable.</li> <li> <p>Include the optional validators within the cas logic with either of the following</p> <p>stack_include(\"https://raw.githubusercontent.com/maths/moodle-qtype_stack/master/stack/maxima/contrib/validators.mac\"); stack_include_contrib(\"validators.mac\");</p> </li> </ol> <p>Note the url <code>https://raw.githubusercontent.com/</code> is used to include the raw content of this file.</p> <p>Including external content always poses a minor additional security risk.  In this case (1) the content is included and then subject to the same checks as if you had typed it yourself, and (2) the developers will take the same care in accepting contributions to the master branch as they do with the existing code base.</p>"},{"location":"en/CAS/Validator/#example-forbid-underscores-in-an-input","title":"Example: forbid underscores in an input","text":"<p>Create a new question.</p> <ol> <li> <p>Add the following to the question variables, which loads contributed validators.</p> <p>stack_include(\"https://raw.githubusercontent.com/maths/moodle-qtype_stack/master/stack/maxima/contrib/validators.mac\");</p> </li> </ol> <p>or add the following to the question variables</p> <pre><code>stack_include_contrib(\"validators.mac\");\n</code></pre> <ol> <li>Use the extra option <code>validator:validate_underscore</code> in the input.</li> </ol>"},{"location":"en/CAS/Validator/#example-forbid-user-defined-functions-and-array-entries","title":"Example: forbid user-defined functions and array entries","text":"<p>As above, include the contributed validators.  Use the extra option <code>validator:validate_nofunctions</code> in the input.</p>"},{"location":"en/CAS/Validator/#validators-and-maxima-timeouts","title":"Validators and Maxima timeouts","text":"<p>Users have reported that in some circumstances, questions using bespoke validators run into seemingly unrelated Maxima timeouts. Examples of this behaviour are discussed in Issue #1211 and on the Zulip Community chat.</p> <p>It seems that this behaviour is related to calculus functions like <code>limit</code> and <code>integrate</code> in the question variables, independent of what the validator does. As a workaround, it often helps to forcefully evaluate such expressions using <code>ev(..., simp)</code>, e.g. try <code>c : ev(int(e^(s*x),x,0,1), simp);</code> instead of <code>c : int(e^(s*x),x,0,1);</code>.</p> <p>Also, Maxima was originally designed as desktop software and it has an \"interactive mode\" somewhat hard-wired into the core code.  Try <code>integrate(x^n,x)</code> in a blank Maxima desktop session for an example.  The interactive mode has it's place, but if a validator uses one of the functions which has an interactive mode, and the student triggers this behaviour, then there will be a timeout.  We have looked at switching this off, but that's not completely possible.  This is another possible source of issues.</p>"},{"location":"en/Developer/","title":"Developers","text":"<p>The Developer documentations give information on STACK development, as well as instructions for developers who want to contribute to STACK.</p> <ul> <li>The development history records past development.</li> <li>The development track gives work planned for the next release.</li> <li>The future plans looks further into the future. </li> </ul>"},{"location":"en/Developer/#contributing-to-stack","title":"Contributing to STACK","text":"<p>There is also information on contributing to the documentation.</p> <p>You could read about Installing language pack and translating STACK.</p>"},{"location":"en/Developer/#advanced-topics","title":"Advanced topics","text":"<p>If you want to track the development of STACK or report bugs then you should visit GitHub.</p> <p>We have separate developer documentation for those wishing to contribute to the plugin codebase.  The developer docs are available on a local sever (but not on stack-assessment.org/)</p>"},{"location":"en/Developer/Development_history/","title":"STACK Development History","text":"<p>For current and future plans, see Development track and Future plans.</p>"},{"location":"en/Developer/Development_history/#version-4110","title":"Version 4.11.0","text":"<p>Released October 2025.</p> <p>Improvements in documentation and minor bug fixes.</p> <ol> <li>Add in sticky footer for editing form.</li> <li>Add in support for chemical data.</li> <li>Update Mathjax version to 3.2.2 to match Moodle 5+.</li> <li>Refactor \"Equiv\" inputs to distinguish much better between \"equation\" reasoning and re-writing of equivalence \"expressions\".  See equivalence reasoning docs.</li> <li>Add in <code>nounadd</code>, <code>nounmul</code> etc. to the parser to provide users access to these functions.</li> <li>Add in new flag <code>tex_plain_atoms</code> to control the display of atoms with subscripts.  Remove testing for changes on Maxima before 5.40.0.</li> <li>Add in the <code>Introductory-Mathematics</code> questions to the STACK library.  The library now has over 1600 STACK questions.</li> </ol>"},{"location":"en/Developer/Development_history/#version-4100","title":"Version 4.10.0","text":"<p>Released July 2025.</p> <ol> <li>Add in a <code>style</code> attribute to the JSXGraph block to load local CSS styles.</li> <li>Add in the <code>json</code> input type.  This better supports JSON for JSXGraph, and better debugging in the existing GeoGebra and Parsons blocks.</li> <li>Allow the bulk tester to add <code>[[todo]]</code> blocks to the question descriptions with the <code>addtags</code> option.</li> </ol>"},{"location":"en/Developer/Development_history/#version-491","title":"Version 4.9.1","text":"<p>Released April 2025.</p> <p>Remove special characters in filenames (which break the .zip download).</p>"},{"location":"en/Developer/Development_history/#version-490","title":"Version 4.9.0","text":"<p>Released March 2025.</p> <ol> <li>Introduce <code>ta</code> as the default teacher's answer in the question variables, and use this in the input and default prt.</li> <li>Support <code>allowempty</code> for dropdown, radio and checkbox inputs.</li> <li>Add in the <code>space</code> option, i.e. <code>make_multsgn(\"space\")</code> in the options.</li> <li>Convert input \"syntax hint\" to castext.</li> <li>Include the <code>rand_matrix.mac</code> contributed library, a collection of matrix randomisation functions for use in linear algebra, with the local STACK source code.  See the random documentation for details.</li> <li>Add in a substantial library for dealing with linear algebra problems.</li> <li>Load Maxima's <code>eigen</code> library.</li> <li>The API now accepts moodle XML fragments, and sets default values for all other fields.  This significantly reduces the overhead in writing and maintaining XML in other external projects.</li> <li>Remove support for the <code>win</code> platform (which hasn't been tested for many years).  See issue #1379.</li> <li>Add in the adapt block and associated dynamic blocks.</li> </ol>"},{"location":"en/Developer/Development_history/#version-485","title":"Version 4.8.5","text":"<p>Released March 2025.</p> <p>Bring forward bug fixes to include in an official release.</p>"},{"location":"en/Developer/Development_history/#version-483","title":"Version 4.8.3","text":"<p>Released January 2025.</p> <p>Bring forward bug fixes to include in an official release.  Update JSXGraph.</p>"},{"location":"en/Developer/Development_history/#version-481","title":"Version 4.8.1","text":"<p>Released November 2024.</p> <p>Rename directories and files in the STACK library to avoid problems with the auto-generated .zip file.</p>"},{"location":"en/Developer/Development_history/#version-480","title":"Version 4.8.0","text":"<p>Released November 2024.</p> <ol> <li>Add in the ability to insert stars for \"unknown functions\" in inputs.  E.g. <code>x(t+1)</code> becomes <code>x*(t+1)</code>.  This only affects \"unknown\" functions, not core functions such as <code>sin(x)</code>.</li> <li>Add in tags to the <code>[[todo]]</code> blocks to help with multi-authoring workflow.</li> <li>Add in a question library page which allows users to load question from the sample question folder on the server.  This gives users ready access to openly released sample materials.</li> <li>Major update of the docs to separate out reference, know how and topics.</li> <li>Better document the sample proofs, and provide a generic Parsons question to make it easier to use them.  See the Proof samples documentation.</li> <li>Allow the feedback variables to stop the execution of the PRT.  This is equivalent to one of the inputs being \"invalid\" or \"blank\".  The PRT does not get executed.  See the discussion in issue #1227.</li> <li>Allow use of Maxima <code>let</code> commands, to generate rules and patterns for bespoke simplification.</li> <li>Provisional support for STACK questions in the Moodle App. STACK questions of all input types now function in the Moodle App while online, complete with input validation. Dropdowns and checkboxes use native elements. This feature should be considered as in beta and under trial while we gather feedback on computability with a wider range of devices, Moodle installations and questions. Existing questions may need work to fit better on a mobile screen. (Be sure to use App version 4.5+ to avoid a Moodle bug with MathJax in non-STACK questions.)</li> <li>Improve Parsons blocks by (i) hashing for keys, and (ii) Add ability to log history of an attempt (for research).</li> <li>Add in a new answer test based on a validator function.</li> </ol>"},{"location":"en/Developer/Development_history/#version-470","title":"Version 4.7.0","text":"<p>Released July 2024.</p> <ol> <li>Fix issue #1160 Allow configuring the MathJax URL</li> <li>Add in stack preamble via <code>%_stack_preamble_end;</code> in the question variables to allow some variables to be available in inputs.  This fixes issue #1207 and issue #1133.</li> <li>Allow Maxima code in keyvals to terminate expressions with a <code>$</code> (as in Maxima) issue #1019.  This will allow better copy/paste to and from desktop maxima.</li> <li>Add in an option to fine-tune the multiplication sign used for scientific units:  <code>multsgnstackunits</code>.  See discussion in issue #1080.</li> <li>Add in the \"Deploy from n to m\" feature to systematically deploy seeds.</li> <li>Restyle response analysis page.</li> </ol>"},{"location":"en/Developer/Development_history/#version-460","title":"Version 4.6.0","text":"<p>Released June 2024.</p> <p>This version will require moodle 4.0+. Moodle 3.x is no longer supported.</p> <ol> <li>Alter list of acceptable expressions.  Unicode super/subscripts now are invalid.  Use 150_replace filter in students' input.</li> <li>Add in the extra input option <code>feedback</code> to run in parallel with validators to give opportunities for bespoke messages.</li> <li>Load the <code>functs</code> Maxima package, i.e. <code>load(\"functs\");</code> to give access to some useful functions.</li> <li>Fix display and simplification of binomial coefficients (issue #931).</li> <li>Add in the <code>CT:...</code> and <code>RAW:...</code> options for test case construction to enable tests of invalid input (e.g. missing stars).</li> <li>STACK now has an API to provide STACK questions as a web service.</li> <li>Improve the display of floats.  Numbers of decimal places are now respected in all parts of expressions, and floats such as <code>1.7E-9</code> are displayed at .   There is a new question option to choose between 1.7 \\times 10^{-9} and 1.7E-9.</li> <li>Add in support for drag and drop matching problems, as grid and grouping.</li> </ol>"},{"location":"en/Developer/Development_history/#version-450-hf2","title":"Version 4.5.0-hf2","text":"<p>Fix critical bug in Javascript. Released January 2024.</p>"},{"location":"en/Developer/Development_history/#version-450","title":"Version 4.5.0","text":"<p>Released December 2023.</p> <p>Please note, this is the last version of STACK which will support Moodle 3.x.</p> <ol> <li>Re-factor the healthcheck scripts, especially to make unicode requirements for maxima more prominent.</li> <li>Shape of brackets surrounding matrix/var matrix input types now matches question level option for matrix parentheses.  (TO-DO: possible option to change shape at the input level?)</li> <li>Allow users to systematically deploy all variants of a question in a simple manner.</li> <li>Tag inputs with 'aria-live' is 'assertive' for better screen reader support.</li> <li>Add an option to support the use of a comma as the decimal separator.</li> <li>Confirm support for PHP 8.2, (fixes issue #986).</li> <li>Add in a GeoGebra block.  Thanks to Tim Lutz for contributing this code as part of the AuthOMath project.</li> <li>Add in an option <code>margin</code> to control margins around STACK-generated plots.</li> <li>Add in better support for proof as Parson's problems.  (First version, but still more to do including syntax hints, and locking after the quiz is closed.)</li> </ol> <p>There are also numerous minor improvements and bug fixes.</p>"},{"location":"en/Developer/Development_history/#version-446","title":"Version 4.4.6","text":"<p>Released October 2023.</p> <p>This is a bug-fix release.</p>"},{"location":"en/Developer/Development_history/#version-445","title":"Version 4.4.5","text":"<p>Released July 2023.</p> <ol> <li>Add in the <code>s_assert</code> function to allow teachers to unit-test individual question variable values.</li> <li>Add in the <code>[[hint]]</code> question block.  Fixes issue #968, thanks to Michael Kallweit.</li> <li>Add in the <code>stack_include_contrib()</code> for easier inclusion of libraries.</li> <li>Add in the <code>[[todo]]</code> question block.</li> <li>Caschat page now saves question variables and general feedback back into the question.  Fixes issue #984.</li> <li>Confirm support for Maxima 5.46.0 and 5.47.0.</li> <li>All inputs now \"allowempty\" and \"hideanswer\" as extra options.  Fixes issue #997.</li> </ol>"},{"location":"en/Developer/Development_history/#version-444","title":"Version 4.4.4","text":"<p>Released June 2023.</p> <p>This is a bug-fix release.</p>"},{"location":"en/Developer/Development_history/#version-443","title":"Version 4.4.3","text":"<p>Released May 2023.</p> <p>Action required Check that all your materials using <code>[[jsxgraph]]</code> continue to work with this version.  See the section on identifying questions using particular blocks in the Maintaining questions section.</p> <ol> <li>Rename testing page as \"STACK question dashboard\" and make it much easier to add a test case based on the teacher's answer.</li> <li>Better cleaning of unicode from students' input strings.</li> <li>Add link to the dependency checker to the plugin page.</li> <li>Add in descriptions to the question (castext), the PRT nodes and the question tests.</li> <li>Add in the input extra option <code>validator</code> to allow user-defined validation functions.</li> <li>Reorganise the answer test documentation.</li> </ol> <p>Major re-working of Javascript in STACK.  Specifically</p> <ol> <li>STACK-JS a VLE agnostic JavaScript system that moves all script execution into sandbox iframes and restricts the things those scripts can do outside that sandbox. Basically, replaces the <code>[[jsxgraph]]</code>-block and provides ways for doing other scripting.</li> <li>Initial implementation of the <code>[[reveal]]</code>-block (#570) using the STACK-JS system.</li> <li>Various related blocks like <code>[[iframe]]</code>, <code>[[javascript]]</code>, <code>[[style]]</code>, <code>[[script]]</code>, and <code>[[cors]]</code></li> <li>This version does not yet forbid all JavaScript outside STACK-JS, but do prepare future updates to do so and start migrating existing scripts into STACK-JS.</li> </ol> <p>These changes are significant and we strongly recommend you test all affected questions.</p>"},{"location":"en/Developer/Development_history/#version-442","title":"Version 4.4.2","text":"<p>Released January 2023.</p> <p>This is mainly a bug fix version.</p> <ol> <li>Add in functionality to display Maxima expressions as trees with CSS using  <code>disptree</code>.</li> <li>Load the <code>diag</code> package for better linear algebra support.</li> <li>Better layout on the question testing page.</li> <li>Question variables and feedback variables are now in monospace.</li> <li>Add in the <code>onum</code> option, i.e. <code>make_multsgn(\"onum\")</code> in the options.</li> </ol>"},{"location":"en/Developer/Development_history/#version-441","title":"Version 4.4.1","text":"<p>Released August 2022.</p> <p>This is mainly a bug fix version.  Version 4.4.0 has a number of major re-writes and also supports Moodle 4.0.</p>"},{"location":"en/Developer/Development_history/#version-440","title":"Version 4.4.0","text":"<p>Released July 2022.</p> <p>Major rewrite of the PRT and CASText systems, focus on performance and limitations of the previous systems.  This release has changed/tightened up some question authoring causing some problems with existing questions.  For this reason we have written dedicated release notes for v4.4.0.</p> <ol> <li>Release documentation under CC-BY-SA.</li> <li>Caching validation.</li> <li>Compiled PRTs, which are now true <code>if</code>-statements in the CAS and issue #150 is now handled.</li> <li>The marks and penalty fields in the PRTs can be numbers, or other variables defined elsewhere in the question.</li> <li>Change behaviour of UnitsAbsolute in response to discussion of issue #448.</li> <li>CASText2 is the new CASText-system and it supports mixed formats and provides new blocks for declaring formats.</li> <li>Markdown is now a supportted format and value injections into it will get correctly escaped. Use triple slashes for math-mode...</li> <li>There are now means of including external code and CASText fragments from an URL.</li> <li>One can now generate text-files for download with a special block in the question-text. CSV:s of student specific random data etc.</li> <li>Inline CASText is now a feature, it will become more relevant in the future input-system. For now you may use it in MCQ labels.</li> <li>A new CASText block <code>[[jsstring]]</code> for generating JavaScript strings to be used in scripting is now available. It should help when one wants to construct complex values.</li> <li>There now exists a built in language localisation system, that allows access to the language setting over at the CAS side. This mixes well with inline castext and allows localisation of MCQ labels.</li> <li>The number of CAS-evaluation sessions has been cut down significantly. Conversely, the amount of things happening in a single CAS-session has grown significantly. This may affect your Maxima load and the size of the CAS-cache. You may need to retune your operation if you have fine tuned it based on those details. This will also affect cache keys and values so tuning caching may also matter if one tunes everything.</li> <li>The security system now does runtime checks and no longer tries to catch evil things through static analysis in advance.</li> <li>Added <code>checkvars</code> option to inputs.</li> <li>Add in support for the Damerau-Levenshtein distance.</li> <li>Add in suppprt for the display of Complex Numbers.</li> <li>Add in basic solving of expressions with the not equals.  E.g. <code>x-1#0</code> is now considered equivalent to <code>x#1</code>.</li> <li>Add in support for Moodle 4.0.</li> </ol>"},{"location":"en/Developer/Development_history/#version-4311","title":"Version 4.3.11","text":"<p>Released June 2022.</p> <ol> <li>This release contains an update of JSXGraph (in advance of the forthcoming 4.4 release) to facilitate immediate materials development.</li> <li>Adopt moodle-ci.</li> </ol>"},{"location":"en/Developer/Development_history/#version-4310","title":"Version 4.3.10","text":"<p>Released December 2021.</p> <ol> <li>Add in filter <code>420_consolidate_subscripts</code> to consolidate students' input with subscripts from <code>M_1</code> to <code>M1</code>.</li> <li>Support variant matching.</li> <li>Add in the option <code>arccos(x)/arcosh(x)</code> for display of trig.  This notation exists becase <code>arcsin</code> gives the arc length on the unit circle for a given y-coordinate. <code>arsinh</code> gives an area enclosed by a hyperbola and two rays from the origin for a given y-coordinate.</li> <li>Allow students to type <code>arccos</code> etc. and treat these as synonyms of the trig functions.</li> <li>Substantially improve the basic question usage report.</li> </ol>"},{"location":"en/Developer/Development_history/#version-439","title":"Version 4.3.9","text":"<p>Released July 2021.</p> <p>Mostly minor bug fixes.</p> <ul> <li>Add in additional cache <code>compiledcache</code> to reduce validation overheads by compiling questions.</li> <li>Improve checking of teacher's code for better security, this requires a new admin setting <code>caspreparse</code> for back compatibility.</li> <li>Add in local.mac for site specific code.</li> <li>Move STACK admin UI scripts to <code>adminui</code>.</li> <li>Add in ATEqualComAssRules</li> <li>Filter student's input so groups are turned into <code>ntuple</code> inert functions.  At last students can type in coordinates as <code>(x,y)</code> as input!</li> <li>Add in warnings of language mismatch in parts of a question.</li> <li>Add in warnings where the answer test needs a raw input but appears to get a calculated value.</li> <li>Expand <code>rand</code> to accept sets and make a random selection from sets.  Add <code>rand_selection_with_replacement</code>.</li> </ul>"},{"location":"en/Developer/Development_history/#version-438","title":"Version 4.3.8","text":"<p>Released December 2020.</p> <ul> <li>Introduce \"context variables\" which propagate throughout a question, enabling <code>texput</code> to operate in inputs as well as general castext.</li> <li>Autoload <code>trigtools</code> to provide better simplification options for trig expressions and fix long-standing bug with <code>trigrat</code>.</li> <li>Make it much easier for colleagues to construct a test case using the \"teacher's answer\" input values as test case inputs.</li> <li>Allow users to modify the <code>notanswered</code> message in dropdown and radio inputs.</li> <li>Move all answer tests to Maxima.</li> <li>Separate out Maxima commands in the install process.</li> </ul>"},{"location":"en/Developer/Development_history/#version-437","title":"Version 4.3.7","text":"<p>Released October 2020.</p> <p>Bug fixes and minor improvements.</p>"},{"location":"en/Developer/Development_history/#version-436","title":"Version 4.3.6","text":"<p>Released October 2020.</p> <p>Bug fixes and minor improvements.</p>"},{"location":"en/Developer/Development_history/#version-435","title":"Version 4.3.5","text":"<ul> <li>Add in the HELM styles.</li> </ul>"},{"location":"en/Developer/Development_history/#version-435_1","title":"Version 4.3.5","text":"<p>Released August 2020.</p> <p>Bug fixes and minor improvements.</p> <ul> <li>Remove all strictSyntax functionality (DB, import/export functions remain).</li> <li>Add in further styles for proof with numbered lists.</li> </ul>"},{"location":"en/Developer/Development_history/#version-434","title":"Version 4.3.4","text":"<p>Released June 2020.</p> <p>Bug fixes and minor improvements to units.</p>"},{"location":"en/Developer/Development_history/#version-433","title":"Version 4.3.3","text":"<p>Released May 2020.</p> <p>Bug fixes and documentation.</p>"},{"location":"en/Developer/Development_history/#version-432","title":"Version 4.3.2","text":"<p>Released May 2020.</p> <ul> <li>Document and support for simple manipulation of real intervals which Maxima does not have a library for.</li> <li>Document and support for simple manipulation of propositional logic based on Maxima's logic package.</li> <li>Document and support for simple manipulation of tables mainly to support easy display of truth tables in logic..</li> <li>Better support for semi-automatic marking.</li> <li>Add in the resizable matrix input type (varmatrix).</li> <li>Fixed bug with javascript on pages with more than one matrix.</li> </ul>"},{"location":"en/Developer/Development_history/#version-431","title":"Version 4.3.1","text":"<p>Released April 2020.  Bug fixes and features which require DB changes.</p> <ul> <li>Add in STACK option \"logicsymbol\" to control how logical symbols are displayed.</li> <li>Add in formative potential response trees.</li> <li>Add in option <code>feedbackstyle</code> to potential response trees.</li> <li>Add in a new answer test AlgEquivNouns.</li> </ul>"},{"location":"en/Developer/Development_history/#version-43","title":"Version 4.3","text":"<p>Released April 2020.  This has been tested successfully during the spring semester, at three insitutions with large groups.  STACK 4.3 is, because of the new parser, slightly slower than previous releases.</p> <p>Version 4.3 requires the PHP package <code>mbstring</code> (which will be required from Moodle 3.9 anyway).  Do not attempt to upgrade without checking you have <code>mbstring</code> on your server.  Navigate to this page on Moodle to confirm.</p> <pre><code>/admin/environment.php\n</code></pre> <p>Version 4.3 represents a major internal re-engineering of STACK, with a new dedicated parser and an updated mechanism for connecting to Maxima.  This is a significant improvement, refactoring some of the oldest code and unblocking progress to a wide range of requested features.</p> <p>There have been a number of changes:</p> <ul> <li>In the forbidden words we now match whole words not substrings.</li> <li>Removed the RegExp answer test.  Added the SRegExp answer test using Maxima's <code>regex_match</code> function.</li> <li>Use of units is now reflected throughout a question.  This reduces the need to declare units in all contexts.</li> <li>Internally, the \"+-\" operator has been replaced with a new infix operation \"#pm#\".  Instead of <code>a+-b</code> teachers now must type <code>a#pm#b</code>.  This change was necessary to deal with differences between versions of Maxima when dealing with expresions.</li> </ul> <p>New features in v4.3:</p> <ul> <li>Add in full parser, to address issue #324.</li> <li>Add in input option 'align'.</li> <li>Add in input option 'nounits'.</li> <li>Add in input option 'compact' to input \"Show the validation\" parameter.</li> <li>Add in a basic question use report page, linked from the question testing page.</li> <li>Add in house styles to help typeset proof.</li> <li>Add cache to help reduce parsing overhead.</li> </ul>"},{"location":"en/Developer/Development_history/#version-423","title":"Version 4.2.3","text":"<p>Released January 2020.  This release is a marker before the release of STACK v4.3.</p>"},{"location":"en/Developer/Development_history/#version-422","title":"Version 4.2.2","text":"<p>Released September 2019.</p> <ul> <li>Removed the Maxima MathML code (which wasn't connected or used).</li> <li>Add in metadata system to the documentation (Thanks to Malthe Sporring for this suggestion).</li> <li>Add in extra option <code>simp</code> to inputs.</li> <li>Add in extra options in the input <code>allowempty</code> and <code>hideanswer</code>.</li> <li>Review and updated documentation (thanks to Malthe Sporring).</li> </ul>"},{"location":"en/Developer/Development_history/#version-421","title":"Version 4.2.1","text":"<p>Released August 2018.</p> <ul> <li>Add in privacy subsystem classes for GDPR compliance.</li> </ul>"},{"location":"en/Developer/Development_history/#version-42","title":"Version 4.2","text":"<p>Released July 2018.</p> <p>Note: newer versions of Maxima require that a variable has been initialised as a list/array before you can assign values to its indices.  For this reason some older questions may stop working when you upgrade to a new version of Maxima.  Please use the bulk test script after each upgrade!  See issue #343.</p> <p>Note: the behaviour of the Maxima <code>addrow</code> function has changed.  Use the bulk test script to identify questions which are affected. Note, once you save a question you will update the version number, and this will prevent questions using <code>addrow</code> from being identified.</p> <ul> <li>Add support for using JSXGraph  <code>http://jsxgraph.org</code> for better support of interactive graphics, and as part of an input type.  See JSXGraph</li> <li>Add in a version number to STACK questions.</li> <li>Update reasoning by equivalence.  This includes the following.</li> <li>Equating coefficients as a step in reasoning by equivalence. E.g.  a x^2+b x+c=r x^2+s x+t \\leftrightarrow a=r \\text{ and } b=s \\text{ and } c=t. See <code>poly_equate_coeffs</code> in assessment.mac</li> <li>Solving simple simultaneous equations.  (Interface)</li> <li>Include simple calculus operations (but constant of integration needs some further thought.)</li> <li>Refactor internal question validation away from Moodle editing, and into the question type.  Add in a \"warning\" system.</li> <li>Add in native multi-language support, to separate out languages in the question text.  This is needed so as not to create spurious validation errors, such as \"input cannot occur twice\".</li> <li>Output results of PRTs in the <code>summarise_response</code> method of <code>question.php</code>.  Gives more information for reporting.</li> <li>Sort out the \"addrow\" problem. (See issue #333).  This is changed to \"rowadd\".</li> <li>Add in check for \"mul\" (see issue #339) and better checking of input options.</li> <li>Refactor equiv_input and MCQ to make use of the new extra options mechanism.</li> <li>Add in support for the Maxima <code>simplex</code> package.</li> <li>Add an answer test to check if decimal separator is in the wrong place (See issue #314).</li> <li>Add an answer test to check sets and provide better feedback.</li> <li>Significant improvements to the bulk testing, returning runtime errors and identifying all questions without tests or worked solutions.</li> <li>Better CSS.  (See issue #380)</li> </ul>"},{"location":"en/Developer/Development_history/#stack-41","title":"STACK 4.1","text":"<p>Released December 2017.</p> <p>Numerous minor bug fixes and improvements.</p> <ul> <li>Add in support for the syntaxHint in the matrix input.</li> <li>On the questiontestrun page, have options to (a) delete all question variants.</li> <li>Add in a <code>size</code> option to set the size of a plot.</li> <li>Add in an answer test which accepts \"at least\" n significant figures. (See issue #313)</li> <li>Add in the \"string\" input type.</li> <li>Add test which checks if there are any rational expressions in the denominator of a fraction.  (Functionality added to LowestTerms test, which looks at the form of rational expressions).</li> <li>Add an option to remove hard-coded \"not answered\" option from Radio input type. (See issue #304)</li> <li>Add in a \"numerical\" input type which requires a student to type in a number.  This has various options, see the docs.</li> <li>Specify numerical precision for validation in numerical and units input types.</li> <li>Refactor the inputs so that extra options can be added more easily, and shared between inputs.</li> </ul>"},{"location":"en/Developer/Development_history/#stack-401","title":"STACK 4.0.1","text":"<p>Released August 2017.</p> <p>This is a bug-fix release, mostly associated with the upgrade process from version 3.X to 4.X.</p> <ul> <li>Fix a bug in the upgrade script.</li> <li>Fix a bug in the testing procedure in the \"question test\" script, and improve the way deployed variants are tested.</li> <li>Make SVG the default image format for pictures created by Maxima.  (Old .png code left in place in this release, but no user option to access this functionality.)</li> </ul>"},{"location":"en/Developer/Development_history/#stack-40","title":"STACK 4.0","text":"<p>Released August 2017.</p> <p>STACK 4.0 represents a major release of STACK and is a non-reversible change, with important differences which break back-compatibility.</p> <p>Note that much of the underlying code in this development have been used at Aalto for many years, with complex questions.  We believe these are battle tested improvements in the functionality.</p> <p>STACK 4.0 includes the block features and other important changes in CASText.</p> <ul> <li>To generate the LaTeX displayed form of a CAS variable in CASText you must use <code>{@...@}</code>.  Note the curly braces which now must be used.  We have an upgrade script for existing questions.</li> <li>To generate the Maxima value of a CAS variable in CASText you can use <code>{#...#}</code>. This is useful when interfacing with other software, or showing examples to students.</li> <li>CASText now supports conditional statements and adaptive blocks. See question blocks.</li> </ul> <p>Other changes.</p> <ul> <li>The question note is no longer limited in size.</li> <li>Mathematics in LaTeX can no longer be supported with <code>$..$</code> or <code>$$..$$</code>.  This usage has been discouraged for many years, and we have a long-standing \"fix\" script to convert from dollars to the forms <code>\\(..\\)</code> and <code>\\[..\\]</code>.</li> <li>Remove the artificial limit on the size of CASText.  We now rely on surrounding limits, like POST requests and database limits.  This may result in ugly errors, but we need larger limits to accommodate interactive elements embedded into text fields.</li> </ul>"},{"location":"en/Developer/Development_history/#stack-36","title":"STACK 3.6","text":"<p>Released July 2017.</p> <p>This release developed the first version of an input to assess line by line \"reasoning by equivalence\" input.  See the documentation on equivalence reasoning.</p> <p>Other new features and enhancements in this release.</p> <ul> <li>Modify the text area input so that each line is validated separately.</li> <li>Add a \"scratch working\" input type in which students can record their thinking etc. alongside the final answer.</li> <li>Support for intervals in STACK, using the Maxima syntax <code>oo(a,b)</code> for an open interval (a,b), <code>cc(a,b)</code> for an open interval [a,b] and <code>oc(a,b)</code>, <code>co(a,b)</code> for the half open intervals.</li> <li>Much better support for solving and dealing with single variable inequalities.</li> </ul>"},{"location":"en/Developer/Development_history/#version-357","title":"Version 3.5.7","text":"<p>Released June 2017.</p> <p>Numerous minor bug fixes and improvements.</p>"},{"location":"en/Developer/Development_history/#version-356","title":"Version 3.5.6","text":"<p>Released December 2016.</p> <p>Numerous minor bug fixes and improvements, particularly with numerical tests and scientific units.</p> <ol> <li>Change the display so that the underscore in atoms is displayed using subscripts.</li> <li>Added support for logarithms to an arbitrary base.</li> <li>Added <code>SigFigsStrict</code> answer test.</li> <li>Better support for floating point numbers, including the preservation and display of trailing zeros in numerical tests.</li> </ol> <p>Note, many of these changes have resulted in stricter rules on the acceptability of strings and stricter validation rules.</p> <p>1 You can no longer have a feedback variable, or a question variable, with a name that is the same as an input. 2. <code>log10</code> function and <code>log_b</code> functions are now handled by STACK, by manipulating the CAS string before it is sent to Maxima. Therefore, if your question previously defined a function with names like that, it will now break. 3. Variable names with a digit in the middle <code>eqn1gen</code> no longer work. (They should never have been used, but used not to break questions.) 4. Previously, unnecessary <code>\\</code> in CAS text were ignored. E.g. if you have a question variable called <code>vangle2</code> then <code>{@\\vangle2@}</code> used to work, it does not any more.</p>"},{"location":"en/Developer/Development_history/#version-355","title":"Version 3.5.5","text":"<p>Released August 2016.</p> <p>Numerous minor bug fixes and improvements, particularly with numerical tests and scientific units.</p> <ol> <li>Expose functionality of <code>printf</code> to better control the display of integers and floats.</li> <li>Expand the \"units\" answer test to allow authors to use other numerical answer tests, see units.</li> <li>Add a mechanism to allow spaces in inputs.  Trial functionality, which might change.</li> <li>Improve the mechanism to create a Maxima image and update the options in one go.</li> <li>Numerous options for units and the display of fractions.</li> <li>Added an xMaxima file to give more direct access to the sandbox.</li> </ol>"},{"location":"en/Developer/Development_history/#version-35","title":"Version 3.5","text":"<p>Numerous minor bug fixes and improvements.</p> <ol> <li>Added an export mechanism for single stack questions through a link on the \"Question tests &amp; deployed variant\" page.</li> <li>Modify the text area input so that each line is validated separately.</li> <li>Support for plot2d \"label\" command.</li> <li>Added support for <code>grid2d</code> for plot in newer versions of Maxima only.</li> <li>Add the <code>NOCONST</code> option to the ATInt answertest.</li> <li>Added support for optional Maxima packages through the config settings.</li> <li>Added the dropdown, radio and checkbox input types.</li> <li>Added basic support for scientific units, including a new input type and science answer tests.</li> </ol>"},{"location":"en/Developer/Development_history/#version-34","title":"Version 3.4","text":"<p>Released September 2015.</p> <p>This contains numerous minor bug fixes and improvements.</p> <ol> <li>Expand the capability of ATInt options to accept the integrand to improve feedback.</li> <li>When validating a student's expression, add the option to show a list of variables alongside the displayed expression.</li> <li>The install process now attempts to auto-generate a Maxima image.</li> <li>Support for the stats package added.</li> <li>Change in the behaviour of the CASEqual answer test.  Now we always assume <code>simp:false</code>.</li> <li>Add support for more AMS mathematics environments, including <code>\\begin{align}...\\end{align}</code>, <code>\\begin{align*}...\\end{align*}</code> etc.</li> <li>STACK tried to automatically write an optimised image for Linux.</li> </ol>"},{"location":"en/Developer/Development_history/#version-33","title":"Version 3.3","text":"<p>Released September 2014.</p> <p>This contains numerous minor bug fixes and improvements.</p> <ol> <li>Added in the Question blocks</li> <li>Changes to validation of casstrings. We now allow syntax such as 3e2 to represent floating point numbers.  The strict syntax settings still flag 3e2 as \"missing stars\".</li> <li>Improvements to catching common syntax errors with trig functions, e.g. sin^-1(x) or cos[x]</li> <li>Refactored the numerical tests.  This means they are now standard Maxima tests, not using PHP.</li> <li>Allow the use of the Maxima orderless and ordergreat in cassessions.  This helps with display, without turning off simplification.</li> <li>Expanding CASText features.</li> <li>Enable a function as an answer type, e.g. improve validation.</li> <li>Refactor answer test unit testing to distinguish \"test fail\" from \"zero\".</li> <li>Reject things like sin*(x) and sin^2(x) as invalid</li> <li>Provide a new option on how parentheses are displayed for matrices</li> <li>Provide an extra syntax checking option to enable stars to be inserted between single characters, e.g. xy -&gt; x*y.</li> <li>Add the input parameter <code>allowwords</code> to enable the teacher to specify some permitted words of more than 2 symbols length.</li> <li>Reinstate the STACK 2 feature called \"Hints\".  This has been done as a \"Fact sheet\" to avoid ambiguity with other Moodle features.  See Fact sheet documentation.  </li> <li>Better install (auto OS detection), healthcheck and testing.</li> <li> <p>When using the Maxima Pool servlet, it is now possible to use any type of HTTP authentication</p> <p>(e.g. basic or digest), and there is a separate configuration option, so that you don't need to put the username and password in the URL.</p> </li> </ol>"},{"location":"en/Developer/Development_history/#version-32","title":"Version 3.2","text":"<p>Released January 2014. This is mainly a bugfix release, and is updated to work with more recent versions of Moodle and Maxima 5.31.3.</p> <p>Changes since 3.1:</p> <ol> <li>Better support for inequalities</li> <li>Better support for reporting, e.g. more consistent tagging of errors, validation notes etc.</li> <li>Support for \"discrete\" and \"parametric\" plots.  Support for plot Alt text.</li> <li>Refactor the Maxima plot command to include \"discrete\" and \"parametric plots\"</li> <li>Refactor the Maxima plot command to include options, e.g., xlabel, ylabel, legend, color, style, point_type.</li> <li>Enable the student's answer to be a function.</li> <li>Minor accessibility improvements to underline all terms generated by Maxima in red, in addition to just using colour.</li> <li>Removal of the \"MaximaPool\" and \"MaximaPool (optimised)\" options for the platform type.  We just now have the \"server\" type.</li> </ol>"},{"location":"en/Developer/Development_history/#version-31","title":"Version 3.1","text":"<p>Released July 2013. This includes all the bugs found and fixed during the first year of use at Birmingham, and the first six months at the OU.</p> <p>Changes since 3.0:</p>"},{"location":"en/Developer/Development_history/#stack-custom-reports","title":"STACK custom reports","text":"<ul> <li>Split up the answer notes to report back for each PRT separately.</li> <li>Introduce \"validation notes\".  This should work at the PHP level, recording reasons for invalidity.  Since we already connect to the CAS, this should also record whether the student's input is equivalent to the teacher's, in what sense, and what form their answer is in.  Maybe too slow?  Useful perhaps for learning analytics.</li> </ul>"},{"location":"en/Developer/Development_history/#expanding-castext-features","title":"Expanding CASText features","text":"<ul> <li>Add in support for strings within CASText.  These are currently supported only when the contents is a valid casstring, which is overly restrictive.</li> </ul>"},{"location":"en/Developer/Development_history/#improvements-to-the-editing-form","title":"Improvements to the editing form","text":"<ol> <li>A way to set defaults for many of the options on the question edit form. There are two ways we could do it. We could make it a system-wide setting, controlled by the admin, just like admins can set defaults for all the quiz settings. Alternatively, we could use user_preferences, so the next time you create a STACK question, it uses the same settings as the previous STACK question you created.</li> <li>Display inputs and PRTs in the order they are mentioned in the question text + specific feedback.</li> <li>Allow an arbitrary PRT node to be the root node, rather than assuming it is the lowest numbered one.</li> <li>Display a graphical representation of each PRT, that can be clicked to jump to that Node on the editing form.</li> <li>When cloning a question with the 'Make copy' button, also clone the question tests.</li> </ol>"},{"location":"en/Developer/Development_history/#other-improvements","title":"Other improvements","text":"<ul> <li>Create a \"tidy question\" script that can be used to rename Inputs, PRTs and/or Nodes everywhere in a question.</li> <li>Add CASText-enabled ALT tags to the automatically generated images. For example, adding a final, optional, string argument to the \"plot\" command that the system uses as the ALT text of the image. That way, we can say the function that the graph is of.</li> <li>New option for how inverse trig functions are displayed.</li> <li>A script to run question tests in bulk.</li> <li>Add a new answer test to deal with decimal places.</li> <li>STACK questions with no inputs, and/or no PRTs now work properly.</li> </ul>"},{"location":"en/Developer/Development_history/#bug-fixes","title":"Bug fixes","text":"<ul> <li>Fix instant validation for text-area inputs.</li> <li>With \"Check the type of the response\" set to \"Yes\", if an expression is given and an equation is entered, the error generated is: \"Your answer is an equation, but the expression to which it is being compared is not. You may have typed something like \"y=2x+1\" when you only needed to type \"2x+1\".\" This might confuse students. They don't know what \" the expression to which it is being compared\" is! Perhaps this warning could be reworded something like: \"You have entered an equation, but an equation is not expected here. You may have typed something like \"y=2x+1\" when you only needed to type \"2x+1\".\" We should have more messages for each type of failed situation....</li> <li>Alt tags in images generated by plots has changed.  The default value now includes a string representation of the function plotted.  See plots for more details.</li> <li>Assorted other accessibility fixes.</li> <li>Standard PRT feedback options are now processed as CAS text.</li> <li>There was a bug where clearing the CAS cache broke images in the question text. Now fixed.</li> </ul>"},{"location":"en/Developer/Development_history/#version-30","title":"Version 3.0","text":"<p>Released January 2013.  This has been tested successfully for two semesters, with groups of up to 250 university students and a variety of topics.</p> <p>Major re-engineering of the code by the Open University, The  University of Birmingham and the University of Helsinki.  Documentation added by Ben Holmes.</p> <p>The most important change is the decision to re-work STACK as a question type for the Moodle quiz.  There is no longer a separate front end for STACK, or (currently) a mechanism to include STACK questions into other websites via a SOAP webservice. This round of development does not plan to introduce major new features, or to make major changes to the core functionality. An explicit aim is that \"old questions will still work\".</p> <p>Key features</p> <ul> <li>Major difference: Integration into the quiz of Moodle 2.3 as a question type.</li> <li>Support for Maxima up to 5.28.0.</li> <li>Documentation moved from the wiki to within the code base.</li> <li>Move from CVS to GIT.</li> </ul>"},{"location":"en/Developer/Development_history/#changes-in-features-between-stack-2-and-stack-3","title":"Changes in features between STACK 2 and STACK 3.","text":"<ul> <li>Key-val pairs, i.e. Question variables and feedback variables, now use Maxima's assignment syntax, e.g. <code>n:5</code> not the oldstyle <code>n=5</code>.  The importer automatically converts old questions to this new style.</li> <li>Interaction elements, now called inputs, are indicated in questions as <code>[[input:ans1]]</code> to match the existing style in Moodle.  Existing questions will be converted when imported.</li> <li>A number of other terminology changes have brought STACK's use into line with Moodle's, e.g. Worked solution has changed to \"general feedback\".</li> <li>Change in the internal name of one answer test <code>Equal_Com_ASS</code> changed to <code>EqualComASS</code>.</li> <li>Feature \"allowed words\" dropped from inputs (i.e. interaction elements).</li> <li>JSMath is no longer under development, and hence we are no longer providing an option for this in STACK.  However, in STACK 2 we modified JSMath to enable inputs within equations.  Display now assumes the use of a Moodle filter and we recommend (and test with) MathJax, which does not currently support this feature.  If it is important for you to use this feature you will need to copy and modify the load.js file from STACK 2 and use JSMath.</li> <li>Worked solution on demand feature has been removed.  This was a hack in STACK 2, and the use of Moodle quiz has made this unnecessary.</li> <li>Some options are no longer needed.  This functionality is now handled by the \"behaviours\", so are unnecessary in STACK 3.</li> <li>The \"Feedback used\".</li> <li>The \"Mark modification\".</li> <li>We have lost some of the nice styling on the editing form, compared to Stack 2.</li> <li>Answer tests no longer return a numerical mark, hence the \"+AT\" option for mark modification method has been dropped.</li> <li>The STACK Maxima function <code>filter</code> has been removed.  It should be replaced by the internal Maxima function <code>sublist</code>.  Note, the order of the arguments is reversed!</li> <li>STACK can now work with either MathJax, the Moodle TeX filter, or the OU's maths rendering filter.</li> <li>The Maxima libraries <code>powers</code> and <code>format</code> have been removed.</li> <li>We now strongly discourage the use of dollar symbols for denoting LaTeX mathematics environments.  See the pages on MathJax for more information on this change.</li> <li>The expressions supplied by the question author as question tests are no longer simplified at all.  See the entry on question tests.</li> </ul>"},{"location":"en/Developer/Development_history/#full-development-log","title":"Full development log","text":""},{"location":"en/Developer/Development_history/#milestone-0","title":"Milestone 0","text":"<ol> <li>Get STACK in Moodle to connect to Maxima, and clean-up CAS code.</li> <li>Moodle-style settings page for STACK's options.</li> <li>Re-implement caschat script in Moodle.</li> <li>Re-implement healthcheck script in Moodle.</li> <li>Make all the answer-tests work in Moodle.</li> <li>Make the answer-tests self-test script work in Moodle.</li> <li>Make all the input elements work in Moodle.</li> <li>Make the input elements self-test script work in Moodle.</li> <li>Add all the docs files within the Moodle question type.</li> <li>Clean up the PRT code, and make it work within Moodle.</li> <li>Code to generate the standard test-n question definitions within Moodle, to help with unit testing.</li> <li>Basic Moodle question type that ties all the components together in a basically working form.</li> </ol>"},{"location":"en/Developer/Development_history/#milestone-1","title":"Milestone 1","text":"<ol> <li>Caching of Maxima results, for performance reasons.</li> <li>Database tables to store all aspects of the question definitions.</li> <li>Question editing form that can handle multi-input and multi-PRT questions, with validation.</li> <li>Re-implement question tests in Moodle.</li> <li>Except that the test input need to be evaluated expressions, not just strings.</li> <li>Get deploying, and a fixed number of variants working in Moodle.</li> <li>Make multi-part STACK questions work exactly right in Adaptive behaviour.</li> <li>Evaluate some PRTs if possible, even if not all inputs have been filled in.</li> <li>Correct computation of penalty for each PRT, and hence overall final grade.</li> <li>Problem with expressions in feedback CAS-text not being simplified.</li> </ol>"},{"location":"en/Developer/Development_history/#milestone-2","title":"Milestone 2","text":"<ol> <li>Make sure that STACK questions work as well as possible in the standard Moodle reports.</li> <li>Implement the Moodle backup/restore code for stack questions.</li> <li>Implement Moodle XML format import and export.</li> <li>Investigate ways of running Maxima on a separate server.</li> <li>Implement random seed control like for varnumeric.</li> </ol> <p>At this point STACK will be \"ready\" for use with students, although not all features will be available.</p>"},{"location":"en/Developer/Development_history/#milestone-3","title":"Milestone 3","text":"<ol> <li>Finish STACK 2 importer: ensure all fields are imported correctly by the question importer.</li> <li>Make STACK respect all Moodle behaviours.</li> <li>Deferred feedback</li> <li>Interactive</li> <li>Deferred feedback with CBM</li> <li>Immediate feedback</li> <li>Immediate feedback with CBM - no unit tests, but if the others work, this one must.</li> <li>Add sample_questions, and update question banks for STACK 3.0.</li> <li>Improve the way questions are deployed.</li> <li>Only deploy new variants.</li> <li>Editing form: a way to remove a given PRT node.</li> <li>Fix bug: penalties and other fields being changed from NULL to 0 when being stored in the database.</li> <li>Add back Matrix input type.</li> <li>In adaptive mode, display the scoring information for each PRT when it has been evaluated.</li> </ol> <p>Once completed we are ready for the Beta release!</p>"},{"location":"en/Developer/Development_history/#beta-testing-period","title":"Beta testing period","text":"<ol> <li>Do lots of testing, report and fix bugs.</li> <li>Eliminate as many TO-DOs from the code as possible.</li> <li>Add back other translations from STACK 2.0, preserving as many of the existing strings as possible. NOTE: the new format of the language strings containing parameters.  In particular, strings {$a[0]} need to be changed to {$a-&gt;m0}, etc.</li> <li>Add back all questions from the diagnostic quiz project as further examples.</li> <li>Deploy many variants at once.</li> </ol>"},{"location":"en/Developer/Development_history/#editing-form","title":"Editing form","text":"<ol> <li>Form validation should reject a PRT where Node x next -&gt; Node x. Actually, it should validate that we have a connected DAG.</li> <li>Add back the help for editing PRT nodes.</li> <li>When validating the editing form, actually evaluate the Maxima code.</li> <li>When validating the editing form, ensure there are no @ and $ in the fields that expect Maxima code.</li> <li>Ensure links from the editing form end up at the STACK docs. This is now work in progress, but relies on http://tracker.moodle.org/browse/MDL-34035 getting accepted into Moodle core. In which case we can use this commit: https://github.com/timhunt/moodle-qtype_stack/compare/helplinks.</li> <li>Hide dropdown input type in the editing form until there is a way to set the list of choices.</li> </ol>"},{"location":"en/Developer/Development_history/#testing-questions","title":"Testing questions","text":"<ol> <li>DOES NOT HAPPEN ANY MORE With a question like test-3, if all the inputs were valid, and then you change the value for some inputs, the corresponding PRTs output the 'Standard feedback for incorrect' when showing the new inputs for the purpose of validation.</li> <li>Images added to prt node true or false feedback do not get displayed. There is a missing call to format_text.</li> <li>A button on the create test-case form, to fill in the expected results to automatically make a passing test-case.</li> <li>Singlechar input should validate that the input is a single char. (There is a TO-DO in the code for this.)</li> <li>Dropdown input should make sure that only allowed values are submitted. (There is a TO-DO in the code for this.)</li> <li>Dropdown input element needs some unit tests. (There is a TO-DO in the code for this.)</li> <li>We need to check for and handle CAS errors in get_prt_result and grade_parts_that_can_be_graded. (There is a TO-DO in the code for this.)</li> <li>Un-comment the throw in the matrix input.</li> <li>Unit tests for adaptive mode score display - and to verify nothing like that appears for other behaviours.</li> <li>Duplicate response detection for PRTs should consider all previous responses.</li> <li>It appears as if the phrase \"This submission attracted a penalty of ...\" isn't working.  It looks like this is the old penalty, not the current.</li> <li>PRT node feedback was briefly not being treated as CAS text.</li> <li>Improve editing UI for test-cases https://github.com/maths/moodle-qtype_stack/issues/15</li> </ol>"},{"location":"en/Developer/Development_history/#optimising-maxima","title":"Optimising Maxima","text":"<ol> <li>Since I have optimized Maxima, I removed write permissions to /moodledata/stack/maximalocal.mac. This makes the healthcheck script unrunnable, and hence I cannot clear the STACK cache.</li> <li>Finish off the system for running Maxima on another server (https://github.com/maths/moodle-qtype_stack/pull/8)</li> </ol>"},{"location":"en/Developer/Development_history/#documentation-system","title":"Documentation system","text":"<ol> <li>fix <code>maintenance.php</code>.</li> </ol>"},{"location":"en/Developer/Development_history/#version-22","title":"Version 2.2","text":"<p>Released: October 2010 session.</p> <ul> <li>Enhanced reporting features.</li> <li>Enhanced question management features in Moodle.  E.g. import multiple questions   from AiM/Maple TA at once, assign multiple questions to Moodle question banks.</li> <li>Slider interaction elements.</li> </ul>"},{"location":"en/Developer/Development_history/#version-21","title":"Version 2.1","text":"<p>Developed by Chris Sangwin and Simon Hammond at the University of Birmingham. Released: Easter 2010 session.</p> <p>Key features</p> <ul> <li>Precision answer test added to allow significant to be checked.</li> <li>Form answer test added to test if an expression is in completed square form.</li> <li>List interaction element expanded to include checkboxes.</li> <li>Move to Maxima's <code>random()</code> function, rather than generate our own pseudo random numbers</li> <li>Conditionals in CASText</li> <li>Support for Maxima 5.20.1</li> <li>New option added: OptWorkedSol.  This allows the teacher to decide whether the tick box to request the worked solution is available.</li> <li>Sample resources included as part of the FETLAR project.</li> </ul>"},{"location":"en/Developer/Development_history/#version-20","title":"Version 2.0","text":"<p>Released, September 2007.  Developed by Jonathan Hart and Chris Sangwin at the University of Birmingham.</p> <p>Key features</p> <ul> <li>Display of mathematics taken care of by JSMath.</li> <li>Integrated into the Moodle quiz using the \"remote question protocol\".  The RQP was designed with STACK, and similar systems, in mind.</li> <li>Variety of interaction elements.</li> <li>Multi-part questions.</li> <li>Cache.</li> <li>Item tests.</li> </ul>"},{"location":"en/Developer/Development_history/#version-10","title":"Version 1.0","text":"<p>Released, 2005.  Developed by Chris Sangwin at the University of Birmingham.</p>"},{"location":"en/Developer/Development_history/#pre-history","title":"Pre-history","text":"<p>STACK is a direct development of the CABLE project which ran at the University of Birmingham. CABLE was a development of the design of the AiM computer aided assessment system.</p>"},{"location":"en/Developer/Development_track/","title":"Development track for STACK","text":"<p>Requests for features and ideas for developing STACK are all recorded in Future plans. The past development history is documented on Development history.</p> <p>We use the github issue tracker to track \"milestones\".</p>"},{"location":"en/Developer/Development_track/#version-4120","title":"Version 4.12.0","text":"<p>Issues with github milestone 4.12.0 include</p> <ol> <li>Fix issue #406</li> <li>Remove all \"cte\" code from Maxima - mostly install.</li> </ol>"},{"location":"en/Developer/Development_track/#future-adapt-block-development-ideas","title":"Future Adapt block development ideas","text":"<ol> <li>Add in a \"counter\" option to the button.  If set to true, then the value of the counter changes from true/false to the number of times the button has been pressed.</li> </ol>"},{"location":"en/Developer/Development_track/#future-equivalence-reasoning-development-track","title":"Future equivalence reasoning development track.","text":"<ol> <li>Allow bespoke validation (actually quite difficult).</li> <li>Specify a variable to solve for.  E.g.  <code>a*x=0</code>, currently needs <code>a=0 or x=0</code>, but when solving for <code>x</code> we have just <code>x=0</code>.</li> </ol>"},{"location":"en/Developer/Development_track/#future-parsons-block-development-track","title":"Future Parson's block development track","text":"<ol> <li>Nested lists (flat list vs. nested/tree) and different proof types -- iff, induction, etc. how do we indicate the different scaffolding for this?</li> <li>Use syntax hint to set up a non-empty starting point.</li> <li>Validate <code>proof_steps</code> for multiple keys having the same tag.</li> <li>Restrict blocks to fixed number of steps.</li> <li>Allow student to select proof style (e.g. iff, contradiction) and pre-structure answer list accordingly</li> <li>Allow some strings in the correct answer to be optional. Allow authors to input a weight for each item and use weighted D-L distance, e.g., weight of 0 indicates that a step is not required, but will not be considered incorrect if included.</li> <li>Making use of third item in other ways? Hover over a proof step to reveal more information (e.g., this could come from the third item in the list and give a hint/definition)</li> <li>Allow students to mark items (e.g. as used or unneeded) or tick used items.</li> <li>Confirmation for delete all?</li> <li>Alternative styling/signalling for clone mode?</li> <li>Check sortable for keyboard accessibility (SM: Not built-in to Sortable currently: https://github.com/SortableJS/Sortable/issues/1951; however, it looks like it is do-able with some work https://robbymacdonell.medium.com/refactoring-a-sortable-list-for-keyboard-accessibility-2176b34a07f4)</li> </ol>"},{"location":"en/Developer/Development_track/#for-inputs-2","title":"For \"inputs 2\"?","text":"<ul> <li>Better CSS, including \"tool tips\".  May need to re-factor JavaScript.  (See issue #380)</li> <li>Add support for matrices with floating point entries, and testing numerical accuracy.</li> <li>Expand support for input validation options to matrices (e.g. floatnum, rationalize etc.)</li> <li>Update MCQ to accept units.</li> <li>Add a base N check to the numeric input.</li> <li>Refactor DB of 'insterStars' and remove stack_input_factory::convert_legacy_insert_stars.  Really use new values throughout.  See Future plans for syntax of answers and STACK</li> </ul>"},{"location":"en/Developer/Development_track/#other","title":"Other","text":"<ul> <li>SBCL on the continuous integration does not seem to have support for unicode.  There are examples in the inputs fixtures and walkthrough adaptive tests.  Search for SBCL.</li> </ul>"},{"location":"en/Developer/Documentation/","title":"STACK User Documentation","text":"<p>User documentation is written in an extended implementation of the markup language MarkDown. This page is intended for people wishing to write, edit and translate the documentation.</p>"},{"location":"en/Developer/Documentation/#purpose-and-structure-of-the-documentation","title":"Purpose and structure of the documentation","text":"<p>Documentation serves a number of purposes.  The main documentation is for teachers writing STACK questions and using STACK questions.</p> <p>Secondary documentation is designed for</p> <ol> <li>Students (e.g. how to type in answers).</li> <li>Installation of the plugin.</li> <li>Developers of the plugin.</li> </ol> <p>The main documentation is arranged as follows.</p> <ul> <li>About the project, community, etc.</li> <li>Quick-start for STACK question authors.</li> <li>Authoring individual questions. Reference of features, e.g. inputs, castext, answert tests.</li> <li>Maxima reference documentation.</li> <li>Specialist tools - quthoring questions linking many features, e.g. JSXGraph, GeoGebra, Drag and drop questions.</li> <li>STACK question administation (not Moodle quiz features), e.g. testing, deploying random variants, reporting, question library.</li> <li>Topics - authoring example questions in different mathematical topics.</li> <li>Moodle-specific features, e.g. setting up a quiz, import/export of moodle questions.</li> <li>Installation of <code>qtype_stack</code> into Moodle.</li> <li>Development of the plugin.</li> <li>Student-focused documentation.</li> </ul>"},{"location":"en/Developer/Documentation/#markdown-language","title":"Markdown language","text":"<ul> <li>The markdown project external site.</li> </ul> <p>Warning: markdown uses whitespace and formatting to give meaning.  The number of spaces at the beginning and the ends of lines convey specific meaning in markdown.  An example is the way code blocks are included, which is useful for including fragments of Maxima code.</p>"},{"location":"en/Developer/Documentation/#stacks-markdown-documentation-system","title":"STACK's markdown documentation system","text":"<p>STACK stores all documentation within language subdirectories.  For example, English is within <code>/doc/en/</code>.</p> <ul> <li>The directory structure forms the structure of the documentation.</li> <li>Files must use the <code>.md</code> extension.</li> <li>Links to files must use the <code>.md</code> extension.</li> <li>File and directory names should be safe for urls and will be used as the document's title.   Spaces can be encoded as underscore <code>_</code>, e.g. Question state caching should be named <code>Question_state_caching.md</code></li> <li>When accessing a directory, the file <code>index.md</code> in that directory will be displayed, hence this file should be created for new directories.   Note <code>index.md</code> will never be displayed in a directory listing, it can be accessed by navigating to the directory itself.</li> <li>Directories may be nested.</li> <li>A directory listing will be appended to the site map when rendered.</li> <li>Metadata about the files is stored in <code>meta_en.json</code>.  Every page should have metadata.</li> </ul>"},{"location":"en/Developer/Documentation/#how-relative-links-work-in-stacks-documentation","title":"How relative links work in STACK's documentation","text":"<p>Note Links in the documentation are relative. You can use the following standard notation, for:</p> <ol> <li>a document in the current directory simply use the filename e.g. <code>[Link to Article](Article.md)</code></li> <li>the current directory use <code>./</code> e.g.</li> <li><code>./Article.md</code> refers to <code>Article</code> in this directory</li> <li><code>./#reference</code> refers to the index of the current directory scrolled to the heading with id <code>reference</code></li> <li>the parent directory use <code>../</code> e.g.</li> <li><code>../</code> refers to the docs homepage (if currently only one tier deep)</li> <li><code>../Category/Article.md</code> refers to <code>Article.md</code> in the <code>Category</code> in the parent directory.</li> </ol>"},{"location":"en/Developer/Documentation/#conventions-in-authoring-pages","title":"Conventions in authoring pages","text":"<p>Markdown does not have categories in the way that MediaWiki does.  Instead, we strongly encourage authors to include a <code># See also</code> section at the end of each STACK documentation page.  This should be part of the markdown page.</p>"},{"location":"en/Developer/Documentation/#adding-images-and-files-to-the-documentation","title":"Adding images and files to the documentation","text":"<p>The directory <code>/doc/content/</code> is for static content which is served by the documentation. If you want to serve content from the docs please place it in this directory.</p> <p>When writing links use direct relative links to</p> <pre><code>$CFG-&gt;wwwroot . \"/question/type/stack/doc/content\";\n</code></pre> <p>E.g. in <code>About/Logo.md</code> use</p> <pre><code>![STACK Logo](../../content/logo.png)\n</code></pre> <p>The text in square brackets is the alt text, which is important for visually impaired users reading the documentation. There are many great guides for writing good alt text.</p>"},{"location":"en/Developer/Documentation/#adding-a-link-to-video-in-the-documentation","title":"Adding a link to video in the documentation","text":"<p>To embed video into the documentation first find the unique video key, <code>VIDEO-KEY</code>, then then modify</p> <pre><code>[![IMAGE ALT TEXT](http://img.youtube.com/vi/VIDEO-KEY/0.jpg)](https://www.youtube.com/watch?v=VIDEO-KEY \"Video title\")\n</code></pre> <p>For example, <code>cpwo-D6EUgA</code>, gives</p> <pre><code>[![IMAGE ALT TEXT](http://img.youtube.com/vi/cpwo-D6EUgA/0.jpg)](https://www.youtube.com/watch?v=cpwo-D6EUgA \"Your First STACK Question\")\n</code></pre> <p>The following rendered markdown:</p> <p></p>"},{"location":"en/Developer/Documentation/#embed-video-in-the-documentation","title":"Embed video in the documentation","text":"<p>Using an iframe such as</p> <pre><code>&lt;iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/cpwo-D6EUgA\" frameborder=\"0\" allowfullscreen&gt;&lt;/iframe&gt;\n</code></pre> <p>Gives</p>"},{"location":"en/Developer/Documentation/#mathematics","title":"Mathematics","text":"<p>For the purpose of rendering mathematical equations, an extended version of PHP Markdown Extra is used.</p> <p>It uses LaTeX style notation <code>\\(</code> and <code>\\[</code> to write inline and display maths respectively. Fortunately GitHub documentation uses the same notation :D. An example:</p> <pre><code>\\[ \\frac{\\int_a^b f(t) \\textrm{d} t }{b - a} \\]\n</code></pre> <p> </p>"},{"location":"en/Developer/Documentation/#Website","title":"Compatibility with the online docs","text":"<p>The STACK docs are made available online on docs.stack-assessment.org. For more information on how this is achieved, see the Website documentation. However this places certain limitations on the sort of elements that can be included in the documentation:</p> <ul> <li>You can only have relative links to files within the <code>doc</code> directory. This means you should not link relatively to, for example, one of the stack .php files. If you want to demonstrate a behaviour of one of STACKs files, it is better to do a direct link to that file on GitHub or on the STACK demo.</li> <li>You cannot use HTML text areas to display LaTeX Math, as that will display poorly. Please use multiline code blocks instead.</li> </ul>"},{"location":"en/Developer/Documentation/#Examples","title":"Examples","text":""},{"location":"en/Developer/Documentation/#paragraphs-and-formatting","title":"Paragraphs and formatting","text":"<p>Paragraphs are made with two new line characters, a single new line will not be rendered:</p> <pre><code>This is in a paragraph,\nso is this\n\nThis is a new paragraph\n\nThis is a **bold** word and this is an *italicised* word.\n</code></pre> <p>This is in a paragraph, so is this</p> <p>This is a new paragraph</p> <p>This is a bold word and this is an italicised word.</p>"},{"location":"en/Developer/Documentation/#headings","title":"Headings","text":"<p>Headings are indicated by the # symbol</p> <pre><code># Huge\n## Quite huge\n### Not so huge\n#### Barely huge\n</code></pre>"},{"location":"en/Developer/Documentation/#huge","title":"Huge","text":""},{"location":"en/Developer/Documentation/#quite-huge","title":"Quite huge","text":""},{"location":"en/Developer/Documentation/#not-so-huge","title":"Not so huge","text":""},{"location":"en/Developer/Documentation/#barely-huge","title":"Barely huge","text":""},{"location":"en/Developer/Documentation/#lists","title":"Lists","text":"<p>Ordered (numbered) and unordered lists are very intuitive, and nesting is easy</p> <pre><code>1. first point\n2. second point, which is so long\n   it needs two lines\n3. third point will demonstrate nesting\n   1. Nested\n   2. Lists\n\n* Unordered lists made my stars\n* You can nest with different styles\n  1. See?\n</code></pre> <ol> <li>first point</li> <li>second point, which is so long    it needs two lines</li> <li>third point will demonstrate nesting</li> <li>Nested</li> <li> <p>Lists</p> </li> <li> <p>Unordered lists made my stars</p> </li> <li>You can nest with different styles</li> <li>See?</li> </ol>"},{"location":"en/Developer/Documentation/#code-monospace","title":"Code (monospace)","text":"<p>Code can be displayed inline using back ticks `content` to display <code>content</code>. Code can be displayed in a block by indenting:</p> <pre><code>    Block style code\n</code></pre> <p>Will display</p> <pre><code>Block style code\n</code></pre>"},{"location":"en/Developer/Documentation/#links","title":"Links","text":"<p>Links are written <code>[text](Documentation.md)</code> to give text.</p> <p>They must end with the <code>.md</code> extension.  External links are easily generated using</p> <pre><code>&lt;http://sesamestreet.com&gt;\n</code></pre> <p>gives http://sesamestreet.com, email address work similarly</p> <pre><code>&lt;count@sesamestreet.com&gt;\n</code></pre> <p>gives count@sesamestreet.com.</p>"},{"location":"en/Developer/Documentation/#other-cool-features","title":"Other cool features","text":"<pre><code>Definition lists\n: Are one of the many cool features available\nThey are useful for\n: Dictionary style entries\n</code></pre> Definition lists Are one of the many cool features available They are useful for Dictionary style entries <p>To force block style code write <code>~~~~</code> above and below, good for after a list when indentation will be interpreted as part of the list</p> <pre><code>~~~~~~~~~~\nLike this\n~~~~~~~~~~\n\n\n\n&gt; When quoting the syntax is like in emails.\n</code></pre> <p>When quoting the syntax is like in emails.</p> <pre><code>Tables       | are also\n------------ | --------\nan extremely | useful\nfeature      | !\n</code></pre> Tables are also an extremely useful feature !"},{"location":"en/Developer/Documentation/#see-also","title":"See also","text":"<ul> <li>MarkDown</li> <li>PHP Markdown Extra</li> <li>PHP Markdown Extra Math</li> </ul>"},{"location":"en/Developer/Future_plans/","title":"Future plans","text":"<p>Note, where the feature is listed as \"(done)\" means we have prototype code in the testing phase.</p>"},{"location":"en/Developer/Future_plans/#features-to-add-later","title":"Features to add later","text":""},{"location":"en/Developer/Future_plans/#units-inputs","title":"Units inputs","text":"<ul> <li>Conversion from Celsius to Kelvin?  What units to choose for degrees Celsius which don't conflict with Coulomb?</li> <li>Support for United States customary units?</li> <li>(Parser can do this) Add an option to validation to require compatible units with the teacher's answer, not just some units.</li> <li>Create a mechanism to distinguish between <code>m/s</code> and <code>m*s^-1</code>, both at validation and answer test levels.</li> <li>Create a mechanism to distinguish between <code>m/s/s</code> and <code>m/s^2</code>, both at validation and answer test levels.</li> <li>Add support for testing for error bounds in units.  E.g. <code>9.81+-0.01m/s^2</code>.  There is already CAS code for this, and the error bounds are an optional 3rd argument to <code>stackunits</code>.  This is currently only used to reject students' answers as invalid.</li> </ul>"},{"location":"en/Developer/Future_plans/#inputs","title":"Inputs","text":"<ul> <li>Add new input types</li> <li>DragMath (actually, probably use JavaScript from NUMBAS instead here, or the MathDox editor).</li> <li>Sliders - do this via JSXGraph.</li> <li>It is very useful to be able to embed input elements in equations, and this was working in STACK 2.0. However is it possible with MathJax or other Moodle maths filters?   This might offer one option:  http://stackoverflow.com/questions/23818478/html-input-field-within-a-mathjax-tex-equation</li> <li>In the MCQ input type: Add choose N (correct) from M feature (used at Aalto).</li> <li>A new MCQ input type with a \"none of these\" option which uses JavaScript to degrade to an algebraic input: https://community.articulate.com/articles/how-to-use-an-other-please-specify-answer-option</li> <li>(Parser can do this) Add an option for \"no functions\" which will always insert stars and transform \"x(\" -&gt; \"x*(\" even when x occurs as both a function and a variable.</li> <li>Make the syntax hint CAS text, to depend on the question variables.</li> </ul>"},{"location":"en/Developer/Future_plans/#improve-the-editing-form","title":"Improve the editing form","text":"<ul> <li>A button to remove a given PRT or input, without having to guess that the way to do it is to delete the placeholders from the question text.</li> <li>A button to add a new PRT or input, without having to guess that the way to do it is to add the placeholders to the question text.</li> <li>A button to save the current definition and continue editing. This would be a Moodle core change. See https://tracker.moodle.org/browse/MDL-33653.</li> <li>Add functionality to add a \"warning\" to the castext class.  Warnings should not prevent execution of the code but will stop editing.</li> </ul>"},{"location":"en/Developer/Future_plans/#other-ideas","title":"Other ideas","text":"<ul> <li>How can we easily allow teachers to set/override this option for imported materials?</li> <li>Document ways of using JSXGraph  <code>http://jsxgraph.org</code> for better support of graphics.</li> <li>Better options for automatically generated plots.  (Aalto use of tikzpicture?)  (Draw package?)</li> <li>3D Graphics.  Can we use: https://threejs.org/</li> <li>Expand support for context variables, so variables and other functions will be considered as context variables as well.  This will expand the utility of <code>texput</code>.</li> <li>Implement \"Banker's rounding\" option which applies over a whole question, and for all answer tests.</li> <li>(Parser can do this) Implement \"CommaError\" checking for CAS strings.  Make comma an option for the decimal separator.</li> <li>(Parser can do this) Implement \"BracketError\" option for inputs.  This allows the student's answer to have only those types of parentheses which occur in the teacher's answer.  Types are <code>(</code>,<code>[</code> and <code>{</code>.  So, if a teacher's answer doesn't have any <code>{</code> then a student's answer with any <code>{</code> or <code>}</code> will be invalid.</li> <li>It would be very useful to have finer control over the validation feedback. For example, if we have a polynomial with answer boxes for the coefficients, then we should be able to echo back \"Your last answer was...\" with the whole polynomial, not just the numbers.</li> <li>Decimal separator, both input and output.</li> <li> <p>Check CAS/maxima literature on -inf=minf.</p> </li> <li> <p>add in support for pdf_binomial, in particular add in these test cases to <code>studentinput_test.php</code>.</p> <pre><code>array('pdf_binomial(n,m,p)', 'php_true', 'pdf_binomial(n,m,p)', 'cas_true', '{{m}\\choose{n}}\\cdot p^{n}\\cdot {\\left(1-p\\right)}^{m-n}', '', \"\"),\narray('pdf_binomial(2,6,0.07)', 'php_true', 'pdf_binomial(6,2,0.07)', 'cas_true', '{{6}\\choose{2}}\\cdot 0.07^{2}\\cdot {\\left(1-0.07\\right)}^{6-2}', '', \"\"),\n</code></pre> </li> <li> <p>(Done in Stateful) Introduce a variable so the maxima code \"knows the attempt number\". [Note to self: check how this changes reporting].  This is now being done with the \"state\" code in the abacus branch.</p> </li> </ul>"},{"location":"en/Developer/Future_plans/#answer-tests","title":"Answer tests","text":"<ul> <li>Answer tests should be like inputs. We should return an answer test object, not a controller object.</li> <li>at-&gt;get_at_mark() really ought to be at-&gt;matches(), since that is how it is used.</li> </ul>"},{"location":"en/Developer/Future_plans/#features-that-might-be-attempted-in-the-future-possible-self-contained-projects","title":"Features that might be attempted in the future - possible self-contained projects","text":"<ul> <li>Read other file formats into STACK.  In particular</li> <li>AIM</li> <li>WeBWorK, including the Open Problem Library:  http://webwork.maa.org/wiki/Open_Problem_Library</li> <li>Maple T.A. (underway: see https://github.com/maths/moodle-qformat_mapleta)</li> <li>WIRIS</li> <li>Possible Maxima packages:</li> <li>Better support for rational expressions, in particular really firm up the PartFrac and SingleFrac functions with better support.</li> <li>When validating the editing form, also evaluate the Maxima code in the PRTs, using the teacher's model answers.</li> </ul>"},{"location":"en/Developer/Future_plans/#reveal-block","title":"\"Reveal block\"","text":"<p>The functionality we want to develop is a block in which the contents is revealed or hidden by JavaScript, depending on the value of a separate input.</p> <pre><code>[[ reveal input=\"ans1\" value=\"true\" ]]\n\nThis will be shown if the value of \"ans1\" is true.\n\n[[ else if value=\"false\" ]]\n\n[[ else ]]\n\nThis will be shown otherwise. (optional)  Perhaps?\n\n[[/ reveal ]]\n</code></pre> <p>This implements a JavaScript listener on input \"ans1\", which reveals or hides the appropriate content.</p> <ol> <li>These blocks can be nested.</li> <li>Inputs can be inside reveal blocks (that is sort of the whole point!).  This works well with the new <code>EMPTYANSWER</code> functionality, allowing an input to expect not to be used in a correct response.</li> <li>What do we do about values of inputs inside the block, when the reveal condition fails and the block is hidden. Is this deleted with warning, or retained? (Option to block?)</li> <li>Only implement for true/false, or MCQ inputs to start with.</li> <li>What do we do about two reveal blocks listening to the same input?</li> <li>On page load, we need the JS to \"do the right thing\", i.e. interrogate each input and hide/reveal the content.</li> </ol> <p>An example question is included as samplequestions/reveal_block_example.xml</p> <p>In this example, we have only revealed the first level, which should be linked to ans1.  If this functionality were available and nested then we would add an MCQ checkbox input within the second reveal block, which is linked to reveal further inputs.</p>"},{"location":"en/Developer/Future_plans/#improvements-to-the-equiv-input-type","title":"Improvements to the \"equiv\" input type","text":"<ul> <li>Improve spacing of comments, e.g. \\intertext{...}?</li> <li>Auto identify what the student has done in a particular step.</li> </ul> <p>Model solutions.</p> <ul> <li>Follow a \"model solution\", and give feedback based on the steps used.  E.g. identify where in the students' solution a student deviates from the model solution.</li> <li>Develop a metric to measure the distance between expressions.  Use this as a measure of \"step size\" when working with expressions.</li> </ul> <p>Add mathematical support in the following order.</p> <ol> <li>Logarithms and simple logarithmic equations.</li> <li>Allow students to create and use functions of their own (currently forbidden).</li> <li> <p>Add a \"Not equals\" operator.  For example:</p> <p>infix(\"&lt;&gt;\"); p:x&lt;&gt;y; texput(\"&lt;&gt;\",\"{\\neq}\", infix); tex(p);</p> </li> </ol>"},{"location":"en/Developer/Future_plans/#stack-custom-reports","title":"STACK custom reports","text":"<p>Basic reports now work.</p> <ul> <li>Really ensure \"attempts\" list those with meaningful histories.  I.e. if possible filter out navigation to and from the page etc.</li> <li>Add better maxima support functions for off-line analysis.</li> </ul>"},{"location":"en/Developer/Future_plans/#suggestions-from-stack-professionals-network-9th-dec-2022","title":"Suggestions from STACK Professionals Network, 9th Dec 2022","text":"<ul> <li>Text based potential response trees (would allow for easier copying of complicated trees, etc).</li> <li>Changes to preset feedback to certain answer tests which might be more appropriate for different audiences. Could a 'simplified' English language pack allow for this (future changes might allow this to be done on a question-by-question basis).</li> <li>Check for potential issues with default correct/incorrect feedback for different languages (defaults can already be set on the server level by a Moodle administrator).</li> <li>Metadata on language for questions.</li> <li>Tools for language integrity (e.g. making it easier to identify what languages are in each question).</li> <li>Making sure Maxima knows the intended language (will allow for Maxima code to choose from the available languages).</li> <li>May want to have further discussions on how scores and penalties are handled (there is already a new feature in the latest version of STACK so that you can include functions in the \"score\" field.</li> <li>DONE: Compile some more detailed release notes for new version containing common issues with questions.</li> <li>MathJax sometimes stops rendering -- this is usually an issue with the html in the question text or something being added to the editor, but sometimes this is an intermittent issue, but this is probably not directly a STACK issue.</li> <li>Accessing Moodle via an LTI connection sometimes prompts students on Macs and old PCs to login with a password (which they don't have) when they click on a quiz. This isn't a direct STACK issue, but it would be a good idea to raise this on Moodle support forums.</li> <li>DONE:  Improve the question tests page (now \"STACK question dashboard\") -- make sure most useful features are highlighted. For example, make it more clear when a specific variant is being considered, and when all variants are being looked at. After an individual variant is undeployed, it still shows test information for this seed on the page, requiring a few extra clicks to switch to a different seed (though that makes it easier to restore that seed if you accidently undeploy it).</li> <li>Forcing editor choice to prevent errors caused by editors which add in html tags (make sure it is clear to users why we do this).</li> <li>Consider prioritising the STACK API? Documentation on this definitely needs to be improved. Volunteers are probably needed to help out on this.</li> <li>We should probably have a discussion for which individual questions are best to promote STACK.</li> </ul> <p>Good to document know-how and communicate this to avoid problems on updates, and to generate new suggestions. New folders can be added in doc/en -- small suggestions can go straight into master, more complete changes should be discussed with the group.</p>"},{"location":"en/Developer/Language_packs/","title":"Translation of the STACK Project","text":""},{"location":"en/Developer/Language_packs/#translation-of-questions","title":"Translation of questions","text":"<p>This page will deal with translations of the STACK interface. Individual question text can also be translated. See this page in the multi-language question authoring section.</p>"},{"location":"en/Developer/Language_packs/#stack-4-is-released-and-being-used-with-the-following-languages","title":"STACK 4 is released and being used with the following languages","text":"<p>STACK is designed to support the straightforward addition of other language packs. If you have translated STACK into other languages - or would be interested in doing so - please let us know.</p> <p>As of May 2023, substantial translations exist for the following languages.</p> <ul> <li>Afrikaans [af]</li> <li>Arabic [ar]</li> <li>Catalan [ca]</li> <li>Chinese (simplified) [zh_cn]</li> <li>Dansk [da]</li> <li>Dutch [nl]</li> <li>Estonian [et]</li> <li>English [en]</li> <li>Finnish [fi]</li> <li>French [fr]</li> <li>Galego [gl]</li> <li>German [de]</li> <li>Greek [el]</li> <li>Hebrew [he]</li> <li>Italian [it]</li> <li>Japanese [ja]</li> <li>Polish [pl]</li> <li>Portuguese - Brazil [pt_br]</li> <li>Romanian [ro]</li> <li>Romanian for workplace [ro_wp]</li> <li>Silesian [szl]</li> <li>Slovak [sk] Slovenian [sl]</li> <li>Spanish (international) [es]</li> <li>Spanish - Mexico [es_mx]</li> <li>Swedish [sv]</li> <li>Swedish - Finland [sv_fi]</li> </ul> <p>Details of some colleagues who translated STACK are given under credits.  If you need these languages please contact the developers for more details of the status of this work.</p>"},{"location":"en/Developer/Language_packs/#installing-a-language-pack","title":"Installing a language pack","text":"<p>To allow users of your server to see interface in a certain language, the language pack has to be installed on your server. In Moodle, to install a language pack on your server, goo to <code>Site adminstration</code>, <code>Language</code>, <code>Language pakcs</code>. Here you can see a list of installed language packs, as well as a list of available languages. This is a list of all translations of Moodle, but note only some of them correspond to translations of STACK as well (see list above). To install a language pack, click on it and click <code>Install selected language pack</code>. </p> <p>Once a language pack is installed, a user can change the preferred language for Moodle and STACK by clicking on their profile, and then going to <code>Preferences</code>, <code>Preferred language</code> and selecting the language.</p>"},{"location":"en/Developer/Language_packs/#how-to-translate-stack","title":"How to translate STACK","text":"<p>STACK is part of Moodle.  Hence, we have used the Moodle translation management system.  </p> <p>Please check if STACK has already been translated into your language.  We are using Moodle's AMOS system to do this.  </p> <p>ALL strings which appear to the user should be found in the single file</p> <p>You need to translate the strings for the Components <code>qtype_stack</code>, <code>qbehaviour_adaptivemultipart</code>, <code>qbehaviour_dfcbmexplicitvaildate</code>, <code>qbehaviour_dfexplicitvaildate</code> and <code>qformat_stack</code>.</p> <p>It is convenient to translate the strings online.  To translate STACK into another language please use Moodle's AMOS system. See Moodle online documentation for specific details.</p> <p>Apologies to those people who have translated STACK through AMOS, but who do not appear in the credits. Please contact Chris Sangwin to add your name.</p>"},{"location":"en/Developer/Language_packs/#finding-language-packs-for-an-api-setup","title":"Finding language packs for an API setup","text":"<ol> <li>Create a new full Moodle server and install the language pack you want.</li> <li>Look on your server in <code>$CFG-&gt;langlocalroot.'/'.$lang;</code></li> <li>Find the file \"qtype_stack.php\".</li> </ol> <p>This contains all the language strings.</p>"},{"location":"en/Developer/Language_packs/#further-reading","title":"Further reading","text":"<p>Applying a language pack will change the language on the Moodle and STACK interface. It will not change question text unless this has been translated by the question author. For information on writing multilingual question text, see the page on multilingual question authoring in authoring section.</p>"},{"location":"en/Developer/Maxima_packages/","title":"Adding support for Maxima packages","text":"<p>Local code, or links to local libraries, can be placed in <code>maxima\\local.mac</code>.</p> <p>Maxima has a very wide range of optional packages.  Some of these write to the server file system, and so we do not permit question authors to load arbitrary packages into Maxima.  Instead the developers maintain a \"whitelist\" of packages.</p> <p>There is currently no support for a question by question loading of packages.  This may be included in the future, subject to demand/need.  Currently there is a site-wide option to load packages.</p> <p>Adding in support for additional Maxima packages needs to be done by a developer on the server.</p> <ol> <li>The list of supported packages is defined <code>stack/cas/installhelper.class.php</code> in the setting</li> </ol> <p><code>public static $maximalibraries = '...';</code></p> <ol> <li>The default settings are defined in </li> </ol> <p><code>qtype_stack | maximalibraries</code></p> <p>It is probably sensible to make the default to load all the available packages, so new installations can see what is supported. </p> <ol> <li>Just because the package is loaded into Maxima does not mean that STACK users will be permitted to use the function names in questions.</li> <li>STACK only allows student users to input a certain restricted list of commands.</li> <li>STACK allows teachers to use a much wider list of commands, and to define functions of their own.  However unless a function has been checked, it is likely the teacher will not be permitted to use this.  We periodically work through all the function names in all maxima packages and add these to the variable <code>security-map.json</code>.</li> </ol> <p>Some notes.</p> <ol> <li>The developers welcome proposals for support of packages.  Mostly we haven't needed them ourselves, and so didn't add them yet!  Where individual functions are needed, it is sometimes better just to always load the package anyway rather than adding it as a site-wide option.  One historic reason for having site-wide options was to ensure back compatibility with older versions of Maxima.</li> <li>Some packages do make Maxima significantly slower to load and run.  We will check this before allowing a particular package.  (This is a good reason to allow question to load packages of course...)</li> <li>Beware of new global variables, changes/side effects in other functions.</li> </ol>"},{"location":"en/Developer/Maxima_packages/#maxima-graph-theory-package","title":"Maxima graph theory package","text":"<p>For use with STACK, Maxima needs to connect to the web server (PHP scripts) and this is actually done by passing text files back and forward.  So every expression to the CAS, and every result back, must have a simple string format.</p> <p>Some of the contributed packages, including the very nice graph theory package, have developed their own internal representation for mathematical objects.  For example,</p> <pre><code>gf_set_data(2,x^4+x+1);\n</code></pre> <p>returns</p> <pre><code>\"Structure [GF-DATA]\"\n</code></pre> <p>As of Nov 2020, the STACK developers have not investigated what a \"Structure [GF-DATA]\" is or how that could be communicated between PHP and Maxima!  By way of contrast a simple polynomial x^4+x+1 has an internal (LISP) tree structure of</p> <pre><code>((MPLUS SIMP) 1 $X ((MEXPT SIMP) $X 4))\n</code></pre> <p>which you can read this as</p> <p>((+) 1 x ((^) x 4)</p> <p>We must have some kind of string like that to communicate and STACK basically uses the Maxima <code>string</code> command to do this.  It is very likely that without re-writing the internals of the graph theory package it is not compatible with the way we connect to Maxima.</p>"},{"location":"en/Developer/Releasing/","title":"STACK release process notes","text":"<p>Note, these notes are designed for developers releasing a new version through the Moodle plugin database.  They are probably not useful for anyone else.</p> <p>Release needs to be done for the whole \"set\".  Do we increment the numbers of all components, e.g. behaviours, or just the qtype_stack?</p> <ul> <li>for key releases, we do them all.</li> <li>for bug fixes just the question type.</li> </ul>"},{"location":"en/Developer/Releasing/#0-code-on-github","title":"0. Code on github","text":"<p>The STACK code is stored on github, e.g. in https://github.com/maths/moodle-qtype_stack. In general the code branches are arranged as follows.</p> <ul> <li>The <code>master</code> branch should always be either (i) an official release, (ii) contain minor but critical bug fixes, or (iii) contain updates to the docs.  The STACK documentation on https://docs.stack-assessment.org/ auto-builds from the master branch, and so it is normal to update the docs between official releases.</li> <li>The <code>dev</code> branch normally contains features which will in the next release.  The <code>dev</code> branch should normally work out of the box, but expect unfinished features and bugs!  </li> <li>Development of new features often takes place in a specific branch named to correspond to an issue in the github issue tracker, normally forked from <code>dev</code>.  E.g. if you raise issue 802 then code related to this can start life in a branch <code>iss802</code>.  If you put <code>#802</code> in the commit message then github will pick this up in the issue discussion.  New features can be merged back into <code>dev</code> before they are completely finished, but please do add documentation, unit tests etc. first and make sure we at least have consensus on the design!</li> </ul> <p>Unless you want to discuss something confidential with the developers, please do raise issues on github!</p>"},{"location":"en/Developer/Releasing/#1-pre-release-checks","title":"1. Pre-release checks","text":""},{"location":"en/Developer/Releasing/#check","title":"Check","text":"<ul> <li>Readme.md</li> <li>Check docs </li> <li>development history and development track <code>history/track</code>.</li> <li>Execute <code>php cli/answertests_docs.php</code> to update the static docs about answertests.</li> <li>Execute <code>doc/maintenance.php</code> to search for broken links etc.</li> <li>Run <code>php cli/stacklibrarycheck.php</code> to check filenames in the stacklibrary do not have special characters, particularly <code>'</code> (which breaks the .zip download in the plugin directory!)</li> <li>Run <code>php cli/unicode_data_process.php</code> to update unicode mappings.</li> <li>Run <code>php cli/ast_test_generator.php</code> to confirm if auto-generated tests have not changed.</li> <li>Run Maxima unit tests of contributed packages by re-defining <code>stacklocation</code> and running <code>s_test_case.mac</code> in the sandbox.  E.g.</li> </ul> <pre><code>    stacklocation:\"/var/www/html/m40/question/type/stack\"$\n    load(\"s_test_case.mac\");\n</code></pre> <ul> <li>Run PHP unit tests.</li> <li>Run code checker.</li> <li>If needed re-build the minified Javascript (e.g. <code>npx grunt --root=question/type/stack</code>).</li> </ul>"},{"location":"en/Developer/Releasing/#check-api","title":"Check API","text":"<ul> <li>Spin up the STACK API in Docker and check it still works with a selection of questions, including download and JSXGraph.</li> <li>Chances are it won't work because even the latest version of goemaxima is out of date.</li> <li>You will need to create a local up-to-date image of goemaxima:</li> <li>Clone the goemaxima repo and create a folder stack/STACKVERSION e.g. <code>stack/2024072400</code> matching the latest STACK version.</li> <li>Copy the stack/maxima folder from STACK into this new folder.</li> <li>Create <code>maximalocal.mac.template</code> as described in <code>Adding_new_version.md</code> in goemaxima docs (or just copy from previous goemaxima version).</li> <li>In <code>buildimage.sh</code> set <code>maximaver</code> and <code>sbclver</code> e.g. <code>maximaver=\"5.45.1\" sbclver=\"2.2.6\"</code>. (<code>maximaver</code> should match <code>maximalocal.mac.template</code>)</li> <li><code>./buildweb.sh</code> (You may need to install <code>go</code> first: <code>sudo snap install go --classic</code>).</li> <li><code>./buildimage.sh 2024072400</code> (If Docker struggles to fetch metadata <code>sudo vi ~/.docker/config.json</code> and change <code>credsStore</code> to <code>credStore</code>).</li> <li>You should have now created a <code>goemaxima:2024072400-dev</code> image locally.</li> <li>Temporarily update STACK API locally:</li> <li>Update maxima image in STACK API to <code>goemaxima:2024072400-dev</code> in <code>docker-compose.dev.yml</code>.</li> <li>Update <code>stackmaximaversion</code> and <code>version</code> in <code>config.php</code> for the API to e.g. 2024072400.</li> <li><code>docker compose -f docker-compose.dev.yml up</code></li> </ul>"},{"location":"en/Developer/Releasing/#version-numbers","title":"Version numbers","text":"<ul> <li>version.php</li> <li>stackmaxima.mac</li> <li>Update version numbers in the API in anticipation of a new Goemaxima image <code>api/config_samples.txt</code></li> <li> <p>Update Goemaxima docker image versions in <code>api/docker/docker-compose.dev.yml</code> and  <code>api/docker/docker-compose.yml</code>    E.g. see <code>https://hub.docker.com/r/mathinstitut/goemaxima</code> for latest versions.</p> </li> <li> <p>Run <code>php cli/getversionstring.php</code> and add output to <code>doc/en/Installation/STACK_versions.md</code>.</p> </li> <li>Change to <code>MATURITY_STABLE</code> in version.php</li> <li>Check both the Moodle versions, and the required number. (https://moodledev.io/general/releases)  Update <code>Installation/index.md</code></li> </ul> <p>Commit all changes to git, e.g. \"Update version number for the 4.6.0 release.\"</p>"},{"location":"en/Developer/Releasing/#2-create-new-tag-with-version-name","title":"2. Create new tag with version name","text":"<p>E.g. \"v4.10.0\".</p> <ul> <li>Push to GitHub.</li> <li>Push tags to GitHub </li> <li>Tortoise git: pulldown from push</li> <li>Linux: <code>git tag -a v4.10.0 -m \"Update version number for the 4.10.0 release.\"</code></li> <li>Linux: <code>git push</code></li> <li>Linux: <code>git push --tags</code></li> </ul>"},{"location":"en/Developer/Releasing/#3-moodle-plugins-database-entry-for-the-plugin","title":"3. Moodle plugins database entry for the plugin","text":"<p>Add a new version to the Moodle plugins database entry for the plugin.</p> <ul> <li> <p>If version number does not appear in the dropdown, then upload it from GitHub.</p> </li> <li> <p>Version information</p> </li> <li>Upload zipfile</li> <li>GitHub</li> <li>Username = maths</li> <li>Choose appropriate plugin</li> <li>Choose tags</li> <li>Choose tag number</li> <li>Rename root directory +</li> <li>Fix README filename +</li> <li>Choose supported Moodle.</li> </ul> <p>Then check updated information on the form.</p> <p>(don't add \"master\" to branch info)</p>"},{"location":"en/Developer/Releasing/#4-releasing-a-new-verion-of-the-api-to-take-advantage-of-the-new-release","title":"4. Releasing a new verion of the API to take advantage of the new release","text":"<p>Prompt to update Geomaxima image.</p>"},{"location":"en/Developer/Releasing_ILIAS/","title":"Releasing new ILIAS version","text":"<p>This page records the steps needed to take <code>qtype_stack</code> (originally designed for Moodle) and create an updated working ILIAS plugin.</p> <ol> <li>All code needed for the ILIAS plugin should be available in the <code>stack</code> directory (from the top level).</li> <li>TO-DO: how to get updated language packs?</li> <li>TOTO: How to map Moodle specific functions (e.g. <code>stack_string</code>) to the ILIAS version?</li> </ol>"},{"location":"en/Developer/STACK-JS/","title":"STACK-JS","text":"<p>Including JavaScript in questions has always been a bit suspicious as it essentially executes with the user's rights in the browser. For this reason it is necessary to somehow separate that scripting from the VLE context. It is also good to separate the scripting from the VLE to ease portability of materials to other VLEs.</p> <p>STACK-JS is a sandbox IFRAME based solution where the potentially dangerous  bits of code exist inside an IFRAME and communicate with the VLE through a limited  set of messages. The idea is to restrict the script from directly seeing the VLE, and restrict interaction with the VLE.</p>"},{"location":"en/Developer/STACK-JS/#basics","title":"Basics","text":"<p>The solution consist of two parts:</p> <ol> <li> <p>The VLE side beachhead script which needs to adapt to the VLE while at     the same time maintain the STACK-JS features. For Moodle this script     is in the <code>amd/src/stackjsvle.js</code> file and it has been designed so     that the VLE-specific parts are separated into functions name <code>vle_</code>     porting this to other VLEs should not be difficult.</p> </li> <li> <p>The IFRAME side script is currently stored at     <code>corsscripts/stackjsiframe.js</code> and provides automated promise-based APIs     for doing basic actions through the messaging system. This script     should never be changed and it should always be the same on all VLEs.     It includes logic for synchronisation that may not be necessary with     the default Moodle implementation, but should still be kept there for     possible other uses.</p> </li> </ol> <p>The VLE side has more control here, as it can decide what it allows and to whom it listens. In general, the IFRAMEs are constructed through the VLE side scripts and those scripts only listen to the IFRAMEs they constructed.</p> <p>The primary security feature of the VLE side is to limit the access to inputs to just those inputs present within questions. The access is also limited to listening for input changes and setting their values so no DOM modification is possible. However, there are messages that allow toggling the visibility and changing the contents of elements by ID, however again the VLE can limit those elements to just those elements within the questions and also apply whatever cleaning (strip all scripts and so on) to any content received.</p>"},{"location":"en/Developer/STACK-JS/#promises-for-the-content","title":"Promises for the content","text":"<p>The content going into those IFRAMEs can be anything and it can do whatever it wants in those IFRAMEs. The STACK-JS logic will promise that no filtering for the content will ever be done. Other than Markdown etc. if requested. No VLE level filters will affect it nor will we tidy it.</p> <p>Content can also rest assured that it is not within the same origin as the VLE and thus cannot leak authorisation or other sensitive details from that side.</p>"},{"location":"en/Developer/STACK-JS/#inconveniences","title":"Inconveniences","text":"<p>As the IFRAME is in its own \"origin\" it cannot load scripts from just any source. And as it is important to be able to load some scripts, especially that <code>stackjsiframe.js</code>, we need a source that is suitable. That source needs to set a particular header, and as we do not want to add extra install requirements for different web-servers we now have a special script that modifies headers at <code>corsscripts/cors.php</code>. We could also serve that script from external source through some CDN, but we probably want to maintain the ability to run the whole system in a closed network so that is why we provide our own header modification script.</p> <p>If one needs to serve anything to those IFRAMEs from the local system one can either drop that thing into that <code>corsscripts/</code> directory or config ones own headers elsewhere. Currently, works with <code>.css</code> and <code>.js</code> files.</p>"},{"location":"en/Developer/STACK-JS/#loading-external-scripts","title":"Loading external scripts","text":"<p>Do note that loading external scripts into the IFRAME is possible as long as the following two conditions are met:</p> <ol> <li>You are not loading from <code>http://</code> sources into <code>https://</code> context.     Things work the other way around but mixing HTTP into HTTPS does not,     as most sane VLEs are going to be running over HTTPS and the IFRAME will     inherit some security assumptions from the surroundings, you should     always write any references to external libraries using <code>https://...</code> urls.</li> <li>The server serving that library has the correct CORS header so that     the script allows itself to be loaded into different origin context.     Basically, public usage CDN:s have this header. But most servers do     not by default serve scripts for others to use. The header is this:     <code>Access-Control-Allow-Origin: *</code>. Do note that the server could also     serve other headers that might affect your ability to load scripts into     sandbox IFRAMEs so if things do not work check those headers.</li> </ol> <p>Do note that use of external resources will always make your materials sensitive to external changes. Therefore, if you do build materials that rely on external libraries do consider self hosting fixed copies of those libraries for your own use.</p>"},{"location":"en/Developer/STACK-JS/#the-general-security-reason","title":"The general security reason","text":"<p>While no attacks using the scripting are currently known, securing this border is necessary in a world where material sharing is more common. If your STACK installation is not new enough to use this security feature then do pay extra attention to materials received from random sources, as they might contain scripting that would execute with your rights. Such execution could, for example:</p> <ol> <li>Exfiltrate information from the system that is likely to house     student details.</li> <li>Modify information in the system, for example, points, quiz settings, or     access rights.</li> <li>Do arbitrary actions \"as you\", e.g., post messages onto course forums.</li> </ol> <p>Do note that similar risks are related to any materials that allow arbitrary scripts to be included either by the student or by whoever authored the material and these types of attacks are always just one spoofed e-mail away.</p> <p>While unlikely, it is worth being careful until STACK has completed the migration to secured JavaScript. The current plan is to first provide means for doing things in a secure way and then forbid insecure methods in a following release. Until that following release, keep your eyes open.</p>"},{"location":"en/Developer/STACK-JS/#minimal-example-for-access-to-an-input","title":"Minimal example for access to an input","text":"<p>Given a STACK question with an input named <code>ans1</code> you can create an IFRAME that executes arbitrary code that can reference that input like this:</p> <pre><code>[[iframe]]\n[[script type=\"module\"]]\nimport {stack_js} from '[[cors src=\"stackjsiframe.js\"/]]';\nvar promiseforaninput = stack_js.request_access_to_input(\"ans1\", true);\npromiseforaninput.then((id) =&gt; {\n   document.getElementById(id).type = 'input';\n});\n[[/script]]\n[[/iframe]]\n</code></pre> <p>The first two lines first open up an <code>[[iframe]]</code> which generates an XHTML document and an IFRAME to contain it, and then we use the <code>[[script]]</code> block to generate a script-tag in that documents head. With the <code>type=\"module\"</code> we make it possible to use the <code>import</code> syntax to bring in libraries and in this case we bring in the <code>stack_js</code> library from an URL provided by the <code>[[cors]]</code> block so that we do not need to write hard coded references to the full URL. Once we have the library, we then ask it for access to the input named <code>ans1</code>, we also add that <code>true</code> to signal the we would want to see <code>input</code> events being synchronised in addition to normal <code>change</code> events, to make this demo more interactive. As the connection process is asynchronous we will receive a promise that will resolve into the identifier of an hidden input that will be constructed inside the IFRAME, in this example we simply make that input visible so that we can try interacting with it directly.</p> <p>If you modify that IFRAME side inputs value through code or other means it will only get synchronised to the VLE side once a <code>change</code> event is emitted, so do dispatch some events if things do not otherwise work.</p> <p>Also if your only purpose is to run JavaScript you might want to hide the IFRAME, you can simply place it inside something that is not being displayed or use <code>hidden=\"true\"</code> as an argument to the <code>[[iframe]]</code>-block. If it needs to be visible, all the dimension options of <code>[[jsxgraph]]</code> also work here. Or you could simply use the <code>[[javascript]]</code>-block, which also imports STACK-JS by default.</p>"},{"location":"en/Developer/Security_map/","title":"Security map","text":""},{"location":"en/Developer/Security_map/#security-map","title":"Security-map","text":"<p>It is important that students do not evaluate expressions such as the following with the CAS :</p> <pre><code>system(\"rm /*\");\n</code></pre> <p>for somewhat obvious reasons!  Hence, we need to restrict the availability of certain functions to users.  STACK \"trusts\" the teacher.  Therefore there are three levels of Maxima functions.</p> <ol> <li>Forbidden.  No string containing anything which might look like this should ever get near the CAS.</li> <li>Teacher.  Teacher's answers cannot contain these, but they are not a security risk.  Usually these have side effects within the Maxima code, e.g. setting a global variable which might cause problems later/elsewhere.</li> <li>Student.  Student's expressions can only contain these.</li> </ol> <p>Since STACK 4.3 the Maxima statement parser infrastructure uses a JSON file describing all identifiers of functions,  variables, constants and operators and features we attach to them. The catalogue is stored in</p> <pre><code>stack/cas/security-map.json\n</code></pre> <p>This JSON file is being updated manually and through the data collected by  the census (see developer docs <code>dev/Census.md</code>) and can be extended freely to track new features as things progress. This documentation section describes what is currently being contained in that map.</p> <p>If a function from a maxima library is not in the security map then it is most likley that we have not reviewed it.  Please contact the developers.</p>"},{"location":"en/Developer/Security_map/#units","title":"Units","text":"<p>Note that the security-map does not define identifiers that are units and  based on the current design you should not declare them there. In  the current form if we are in units mode an overlay will be placed on top  of the security-map and that overlay will declare are identifers that are  units <code>mg</code>, <code>K</code>,... as <code>constant: 's'</code> meaning that they are constants that the student may use in their inputs as long as they are not declared  forbidden through the forbidden words mechanism.</p>"},{"location":"en/Developer/Security_map/#features-currently-tracked","title":"Features currently tracked","text":""},{"location":"en/Developer/Security_map/#security","title":"Security","text":"<p>In security features we typically use values <code>\"s\"</code>, <code>\"t\"</code>, and<code>\"f\"</code>. <code>\"s\"</code>  declares that students may use this identifier in the specified way unless specifically forbidden with the forbidden words mechanism. <code>\"t\"</code> means that  by default only the author may use it but can specially allow it using  the allowed words mechanism. <code>\"f\"</code> means that for whatever reason not even  the author may use it.</p> <p><code>constant</code> is a feature declaring the security level at which a given  identifier is to be considered as a constant and can thus be only red and  never written to. This makes it so that you cannot write <code>%pi:4</code> but can  use <code>%pi</code> otherwise.</p> <p><code>evflag</code> is a feature declaring the security level at which a given  identifier is to be considered as an evaluation flag. Basically, wether  it can be used as a suffix to a statement <code>sqrt(3),numer</code> or as a paramter  to <code>ev(sqrt(3),numer=true)</code> and similar functions.</p> <p><code>function</code> is a feature declaring the security level at which a given  identifier is to be considered as a function name and can thus be called.</p> <p><code>keyword</code> is a feature declaring the security level at which a given  identifier is to be considered as a keyword that can be used one could use  it to declare that students may not use specific types of loops or other flow control features.</p> <p><code>operator</code> is a feature declaring the security level at which a given  operator is usable at. By operator we mean anything from <code>^</code> and <code>and</code>  to various brackets.</p> <p><code>variable</code> is a feature declaring the security level at which a given  identifier is to be considered as a variable and can thus be both written and red.</p> <p>In addition to those we also declare certain identifiers with  <code>globalyforbiddenfunction</code> or <code>globalyforbiddenvariable</code> in the cases where we might want to handle attempts to use them in a more serious manner.</p>"},{"location":"en/Developer/Security_map/#nouns","title":"Nouns","text":"<p>In the old system certain functions and operators were nounified to stop  the CAS from evaluating them and thus allow simpler assessment of  the original input form. For this we define features <code>nounfunction</code> and <code>nounoperator</code> that have the name of the matching nounified identifier. When processing student input functions and operators that have noun  variants are nounified unless specially requested to be kept as is. In  addition to the nounifying one may need to denounify and then we define <code>nounoperatorfor</code> or <code>nounfunctionfor</code> at the noun end.</p>"},{"location":"en/Developer/Security_map/#aliases","title":"Aliases","text":"<p><code>int(foo,x)</code> is equivalent to <code>integrate(foo,x)</code> which leads to issues  when using forbidden words and only forbidding <code>integrate</code> to deal with  this we now declare aliases as features for various identifiers so that  if you forbid one the others are also forbidden. We also use those aliases to map similar statements to use the same alias thus increasing  the likelihood of cache hits. Aliases like nouns are defined by usage  type e.g. <code>aliasfunction</code> feature tells that if some one uses a function  with this name it should be interpreted as a function call with the name  of this feature. <code>aliasvariable</code> does the same for both constants and variables. As it is often necessary to find all the aliases that point to a given identifier we also define features <code>aliasfunctions</code> and  <code>aliasvariables</code> that contain lists of such identifiers. Updating such  lists should be left to tools that make sure they are correct.</p> <p>Aliases often do not match the logical aliases present in the CAS instead they tend to map things so that they point to the version that is  shortest to minimise space usage, e.g. while some might think  <code>int =&gt; integrate</code> here we rather have <code>integrate =&gt; int</code>.</p> <p>The base alias is sent to the CAS.  This enables support for some unicode,  e.g. pi, which does not break the CAS.</p>"},{"location":"en/Developer/Syntax_numbers/","title":"Entry of numbers in STACK","text":"<p>This document discusses entry of numbers into STACK.  This discussion will also be relevant to other online assessment systems and technology more generally.  When we type in a string of symbols into a computer there is a context and assumptions which arise from that context.  For example is <code>e</code> the base of the natural logarithms or is <code>e</code> to be interpreted as part of a floating point number, e.g. <code>6.6263e\u221234</code>? There are two related issues.</p> <ul> <li>Which symbol to use as the decimal separator, '<code>,</code>' or '<code>.</code>'?</li> <li>Support for number bases (other than decimal).</li> </ul> <p>We start by designing the input mechanism for decimal separators.</p>"},{"location":"en/Developer/Syntax_numbers/#standards","title":"Standards","text":"<p>ISO 80000-1:2022 Quantities and units \u2014 Part 1: General gives \"general information and definitions concerning quantities, systems of quantities, units, quantity and unit symbols, and coherent unit systems, especially the International System of Quantities (ISQ).\"  Section 7.2.2 covers the decimal sign: \"The decimal sign is either a comma or a point on the line. The same decimal sign should be used consistently within a document.\"</p> <p>Further, in section 7.2 Numbers:  \"To facilitate the reading of numbers with many digits, these may be separated into groups of three, counting from the decimal sign towards the left and the right. No group shall contain more than three digits. Where such separation into groups of three is used, the groups shall be separated by a small space and not by a point or a comma or by any other means.\"</p> <p>It goes on to say \"The General Conference on Weights and Measures (Fr: Conf\u00e9rence G\u00e9n\u00e9rale des Poids et Mesures) at its meeting in 2003 passed unanimously the following resolution: \"The decimal marker shall be either a point on the line or a comma on the line.\"  In practice, the choice between these alternatives depends on customary use in the language concerned\".</p> <p>The older ISO 6093:1985 Specification for Representation of numerical values in character strings for information interchange also allows for either a comma or point for the decimal separator.</p> <p>These standards to not provide advice on how to separate items, e.g. in lists, and so how to interpret expressions such as <code>{1,2}</code>. There are two options for interpreting <code>{1,2}</code>:</p> <ol> <li>A set containing the single number six fifths, .</li> <li>A set containing the two integers one and two.</li> </ol> <p>There is also a discussion of number styles in the NUMBAS system.</p>"},{"location":"en/Developer/Syntax_numbers/#design-of-syntax-for-decimal-separators","title":"Design of syntax for decimal separators","text":"<p>The only opportunity for ambiguity arises in the use of a comma '<code>,</code>' in an expression, which could be a decimal separator or a list separator.</p> <ol> <li>We assume we are only parsing a single expression.  Hence expressions are not separated by a semicolon '<code>;</code>'.  However, a single expression might contain more than one number, e.g. coefficients in a polynomial, members of a set/list, and arguments to a function (e.g. \\max(a, b) or \\max(a; b)).</li> <li>The symbol '<code>.</code>' must be a decimal separator.</li> <li>The symbol '<code>;</code>' must separate items in a list, set, function, etc.</li> </ol> <p>It is reasonable to expect students to be consistent in their use of the '<code>,</code>' within a particular expression.  This follows the advice in ISO 80000-1:2022. Therefore students cannot use all of '<code>.</code>', '<code>,</code>' and '<code>;</code>' in a single expression without inconsistency.</p> <p>In the current STACK design student input of <code>1,23</code> would be invalid and generate an error: \"A comma in your expression appears in a strange way.\"  Many users will wish to retain this behaviour.  Therefore although this expression is not ambiguous, in a British context it does not follow common usage and could well indicate a misunderstanding about how to type in sets, lists, coordinates functions etc. A similar problem occurs in a continental context where <code>1;23</code> contains an unencapsulated list separation. This expression is not ambiguous and a similar error message such as \"A semicolon in your expression appears in a strange way.\" would be similarly helpful.</p> <p>Examples.</p> Typed expression '<code>.</code>' '<code>,</code>' '<code>;</code>' Ambiguity? Comments <code>123</code> . . . No <code>1.23</code> Y . . No Single decimal number. <code>1,23</code> . Y . No/error Single decimal number or an unencapsulated list. <code>1.2+2,3*x</code> Y Y . Error Inconsistent decimal separators used. <code>1;23</code> . . Y Error This expression contains an unencapsulated list. <code>{123}</code> . . . No Set of one integer. <code>{1.23}</code> Y . . No Set of one float. <code>{1,23}</code> . Y . Yes Option needed to interpret the role of '<code>,</code>'. <code>{1.2,3}</code> Y Y . No '<code>.</code>' used, '<code>;</code>' not used, so '<code>,</code>' must separate lists. <code>{1;23}</code> . . Y No Set of two integers. <code>{1.2;3}</code> Y . Y No '<code>.</code>' used, and no '<code>,</code>' <code>{1,2;3}</code> . Y Y No '<code>;</code>' used, no '<code>.</code>', so '<code>,</code>' is a decimal separator. <code>{1,2;3;4.1}</code> Y Y Y Error Inconsistent decimal/list separators used."},{"location":"en/Developer/Syntax_numbers/#proposal-for-options-in-stack","title":"Proposal for options in STACK","text":"<p>We need a new question-level option in STACK for decimal separators.  This option distinguishes between \"British\" '<code>.</code>' and \"contiential\" '<code>,</code>' decimal separators.  Output, e.g. LaTeX generated by Maxima, will respect this useage throughout the question. Hence the need for a question-level option.</p> <ol> <li>Strict continential.  Reject any use of '<code>.</code>' as a decimal separator.  I.e. reject any use of '<code>.</code>'.</li> <li>Strict British.  Reject any use of '<code>,</code>' as decimal separator.  Warn for unencapsulated lists with '<code>,</code>' and reject any use of '<code>;</code>'.  (Current STACK behaviour)</li> <li>Weak continential.  When ambiguity arises, assume '<code>,</code>' should be a decimal separator.</li> <li>Weak British.  When ambiguity arises, assume '<code>,</code>' should be a list separator.</li> </ol> <p>Wherever '<code>;</code>' is permitted (all but Strict British) we should warn for unencapsulated lists with '<code>;</code>' as we currently do for '<code>,</code>' in STACK.</p> <p>We have always worked on the basis of being as forgiving as possible, and accepting expessions where no ambiguity arises. E.g. <code>2x</code> must always mean <code>2*x</code> under any reasonable interpretation, and if we choose to reject it in STACK we do so with explicit validation feedback explaining where to put the <code>*</code> symbol. Therefore, we should try to do the same when supporting input sytax for decimal seprators.  Forgiving inference rules</p> <ol> <li>If a student's expression contains neither dots '<code>.</code>' or semicolon '<code>;</code>' then a question-level (continential/British) option is used to determine the meaning of the '<code>,</code>'.</li> <li>If the student's expression contains a '<code>;</code>' then any commas are interpreted as decimal separators.</li> <li>If the student's expression contains a '<code>.</code>' then any commas are interpreted as list separators.</li> <li>If a student's expression contains both dots '<code>.</code>' and semicolon '<code>;</code>' then a student cannot use '<code>,</code>' without ambiguity.  A question-level option is needed to determine the probable meaning.</li> </ol>"},{"location":"en/Developer/Syntax_numbers/#practical-implementation-in-stack","title":"Practical implementation in STACK","text":"<p>Students do not type in expression termination symbols <code>;</code>, freeing up this symbol for use in students' input for separating list items, including lists which are arguments to functions.</p> <p>Internally, we retain strict Maxima syntax.  Teachers must use strict Maxima syntax, so that numbers are typed in base 10, and the decimal point (<code>.</code>) must be used by teachers as the decimal separator.   This simplifies the problem considerably, as input parsing is only required for students' answers.</p> <ol> <li>Currently the only option available is \"strict\".</li> <li>TO-DO: Allow student input of <code>matrix([3,1415;2,71]).matrix([1];[2])</code> this example should be parsed, but currently the system rejects this.</li> </ol>"},{"location":"en/Developer/Syntax_numbers/#practial-implementation-in-other-software","title":"Practial implementation in other software","text":"<ol> <li>NUMBAS also uses the semicolon to separate list items, as discussed in NUMBAS issue 889</li> </ol>"},{"location":"en/Developer/Syntax_numbers/#comments-from-peter-mayer","title":"Comments from Peter Mayer:","text":"<p>In the school context, it is almost exclusively common in German-speaking countries to use the '<code>,</code>' as a decimal separator. In contrast, I have never encountered a '<code>.</code>' as a decimal separator. The '<code>.</code>' is usually used as a thousands separator: 1002 = 1.002 and can also be used in conjunction with a comma: 1002,54 = 1.002,54. A '<code>;</code>' is usually used in schools only in geometry as an alternative to A(4|5): A(4;5).</p> <p>As a suggestion, I would like to point out the behavior of Microsoft Excel.  In the German version, the '<code>,</code>' and '<code>.</code>' are also used according to my comment above. In formulas, the individual arguments are separated by a '<code>;</code>'.  If you switch to the English version, however, thousands are separated by '<code>,</code>' and decimal numbers by '<code>.</code>' as well as the parameters of functions by '<code>,</code>'. Maybe it is advisable to approach this behavior, because there could be synnergies. </p> <p>As a silver bullet, however, I would suggest the following:</p> <p>In Moodle there is a method (unformat_float lib/moodlelib.php:8880) that converts local numbers entered by the user into a standard-compliant number, which can then also be stored in the DB. Depending on the viewer, this can then be output again in the respective local representation (format_float; lib/moodlelib.php) of the viewer. The advantage would be that thereby no special cases must be considered but, everything can be kept as before. Only the user input and output has to be converted accordingly, and moodle does that itself.</p>"},{"location":"en/Developer/Syntax_numbers/#comments-from-bjorn-ger","title":"Comments from Bj\u00f6rn Ger\u00df:","text":"<p>I agree with Chris' analyses and Peter's comment.</p> <p>Weak option:  for my use case, I would like a behavior as described in \"Strict continental\". I completely understand why the weak options are proposed, but in German-speaking schools only the calculator works in British mode and no one writes it done like that. So the weak option is not needed for school use. This might be different in university use, where writing like in the weak-option is more common.</p> <p>Where to put the option:  If the option is part of the question, it is possible to mix settings from question to question. I think this is confusing for students. So I would suggest a site wide option.</p> <p>In my use case, it isn't essential, but we might think of connection the option to the language the student is using. On the last annual meeting, there were many talks about translating question. As a user, I would expect a British behavior when moodle is set to English and a Continental when moodle is set to German. So it could be best to have a sitewide option for a behavior for every installed language. As the most instances of moodle have a clear focus on the type of student, I assume it only rarely the wish to change the setting between different courses.</p> <p>With the sitewide option, imported material is also no problem anymore</p>"},{"location":"en/Developer/Syntax_numbers/#comments-from-matti-harjula","title":"Comments from Matti Harjula:","text":"<p>A site-level setting is indeed something that would be nice, but for larger multi-locale sites where needs may vary between courses and subjects, we really need to be able to override it at the question and, preferably, course level, think #993. Personally, I would want the following:</p> <ol> <li>A site-level setting that allows choosing between traditional CAS syntax (using the separators we have used up to this point) and using locale-specific separators which would match with the active locale that gets chosen by the course or by the student.</li> <li>That site level setting could then be overridden at lower levels, e.g. course, quiz, question, or even at the input level.</li> <li>At the input level, the setting would have even more options, e.g., not tying it to the active locale but instead allowing one to override it, maybe even defining a custom separator combination that is not backed by a locale.</li> <li>When that setting gets overridden and differs from the site level (or course level), we should always provide a note in the user interface describing what the syntax is within this question or even for a given input.</li> </ol> <p>When we eventually get this, and there will be a site-level setting I strongly suggest that the default value for it will be to keep using the current CAS syntax so that no system switches to something unexpected.</p> <p>And I really want to be able to target this at the input level, even though the use for that would mainly be for teaching cultural syntax differences and would not be used outside those few extra special materials. For that it would be enough to be able to set those options through some magical \"extra options\" syntax. At the question level, a simple dropdown for selecting between \"CAS/locale\" should be enough.</p>"},{"location":"en/Developer/Unit_tests/","title":"Unit tests","text":"<p>Unit testing for STACK comes in the following three parts.</p> <ul> <li>PHP Unit tests,</li> <li>Maxima unit tests,</li> <li>Test scripts exposed to the question author.</li> </ul> <p>These three mechanisms aim to provide comprehensive testing of STACK.  The last category are a compromise, and are designed to expose the results of unit tests to question authors in a reasonably attractive manner to inform them of what each answer test is actually supposed to do.  Links to these tests are in the healthcheck page.</p> <p>STACK uses the moodle-ci continuous integration mechanism via github actions so that all unit tests are triggered when a commit is pushed to github.</p>"},{"location":"en/Developer/Unit_tests/#php-unit-tests","title":"PHP Unit tests","text":"<p>Moodle uses PHPUnit for its unit tests. Setting this up and getting it working is a bit of a pain, but you only have to follow the instructions in the Moodle PHPUnit documentation once to get it working.</p>"},{"location":"en/Developer/Unit_tests/#stack-specific-set-up-steps","title":"STACK-specific set-up steps","text":"<p>Once you have executed</p> <pre><code>php admin/tool/phpunit/cli/init.php\n</code></pre> <p>you need to edit the config.php file to add the following configuration information near the end, but before the <code>require_once(dirname(__FILE__) . '/lib/setup.php');</code>. Other options for the platform are <code>linux</code> and <code>linux-optimised</code>.</p> <pre><code>/* Options for the platform are `linux` and `linux-optimised`. */\ndefine('QTYPE_STACK_TEST_CONFIG_PLATFORM',        'linux');\n/* It is essential that the MAXIMAVERSION and MAXIMACOMMAND match.\n   That is, you must check that the command executed here really loads\n   the version specified in MAXIMAVERSION.  Some unit tests are version\n   dependent.  Do not use default.  */\ndefine('QTYPE_STACK_TEST_CONFIG_MAXIMAVERSION',   '5.42.0');\ndefine('QTYPE_STACK_TEST_CONFIG_MAXIMACOMMAND',   'maxima --use-version=5.42.0');\ndefine('QTYPE_STACK_TEST_CONFIG_MAXIMACOMMANDOPT',   '');\ndefine('QTYPE_STACK_TEST_CONFIG_MAXIMACOMMANDSERVER',   'http://pool.home:8080/MaximaPool/MaximaPool');\ndefine('QTYPE_STACK_TEST_CONFIG_CASTIMEOUT',      '20');\ndefine('QTYPE_STACK_TEST_CONFIG_MAXIMALIBRARIES', 'stats, distrib, descriptive, simplex');\ndefine('QTYPE_STACK_TEST_CONFIG_CASDEBUGGING',    '0');\ndefine('QTYPE_STACK_TEST_CONFIG_PLOTCOMMAND',     '');\n\ndefine('QTYPE_STACK_TEST_CONFIG_CASRESULTSCACHE', 'db');\ndefine('QTYPE_STACK_TEST_CONFIG_CASPREPARSE', 'true');\n</code></pre> <p>You should probably copy the settings from Admin -&gt; Plugins -&gt; Question types -&gt; STACK. However, you can use the flexibility to have different configurations of STACK for testing in order to test a new release of Maxima, for example.</p> <p>If you want to run just the unit tests for STACK, you can use the command</p> <pre><code>vendor/bin/phpunit --group qtype_stack\n</code></pre> <p>To make sure this keeps working, please annotate all test classes with</p> <pre><code>/**\n * @group qtype_stack\n * @covers class_name\n */\n</code></pre> <p>To generate coverage reports you need to install xdebug.  Then modify php.ini configuration file to include xdebug.mode=coverage.</p> <p>Commands are</p> <pre><code>vendor/bin/phpunit --testsuite qtype_stack_testsuite --coverage-html folder-name \nvendor/bin/phpunit question/type/stack/tests/test.php --coverage-html folder-name\n</code></pre> <p>(where folder-name is the folder that you want to contains the report)</p> <p>If, for some reason, you have the STACK code in your codebase, and you want to run other unit tests on a server without Maxima installed, then you will get an error when you try to install the PHPunit site. You can avoid that by putting</p> <pre><code>define('QTYPE_STACK_TEST_CONFIG_PLATFORM',        'none');\n</code></pre> <p>in your config.php file. This will prevent the install from trying to create maxima-optimised. It will also cause most of the STACK unit tests to be skipped.</p>"},{"location":"en/Developer/Unit_tests/#stop-resetting-the-dataroot-directory","title":"Stop resetting the dataroot directory.","text":"<p>In <code>[...]/moodle/lib/phpunit/classes/util.php</code> </p> <pre><code>public static function reset_all_data() {\n</code></pre> <p>Comment out the line (currently 253).</p> <pre><code>self::reset_dataroot();\n</code></pre> <p>This stops the unit tests from deleting the Maxima image files at each step.</p>"},{"location":"en/Developer/Unit_tests/#making-the-tests-faster","title":"Making the tests faster","text":"<p>The tests will be very slow, because the Moodle PHPUnit integration keeps resetting the database state between each test, so you get no benefit from the cache. To get around that problem, you can use the option to connect to a different database server for the cache. Modify the following to suit your system and put this near the end of your config.php file:</p> <p>Note you need to make sure the <code>QTYPE_STACK_TEST_CONFIG_CASRESULTSCACHE</code> variable is only defined once.</p> <pre><code>define('QTYPE_STACK_TEST_CONFIG_CASRESULTSCACHE',   'otherdb');\ndefine('QTYPE_STACK_TEST_CONFIG_CASCACHEDBTYPE',    $CFG-&gt;dbtype);\ndefine('QTYPE_STACK_TEST_CONFIG_CASCACHEDBLIBRARY', $CFG-&gt;dblibrary);\ndefine('QTYPE_STACK_TEST_CONFIG_CASCACHEDBHOST',    $CFG-&gt;dbhost);\ndefine('QTYPE_STACK_TEST_CONFIG_CASCACHEDBNAME',    $CFG-&gt;dbname);\ndefine('QTYPE_STACK_TEST_CONFIG_CASCACHEDBUSER',    $CFG-&gt;dbuser);\ndefine('QTYPE_STACK_TEST_CONFIG_CASCACHEDBPASS',    $CFG-&gt;dbpass);\ndefine('QTYPE_STACK_TEST_CONFIG_CASCACHEDBPREFIX',  $CFG-&gt;prefix);\n</code></pre> <p>To make sure the CAS cache is cleared after each unit test, revert back to the <code>db</code> settings for <code>QTYPE_STACK_TEST_CONFIG_CASRESULTSCACHE</code> as described above.  This will be slow...</p>"},{"location":"en/Developer/Unit_tests/#running-moodle-unit-tests-on-other-plugins-without-maxima","title":"Running Moodle unit tests on other plugins without maxima.","text":"<p>It is possible that you want to install the <code>qtype_stack</code> PHP code, but not complete the installation of Maxima, and then run the PHP unit tests on a different plugin.  Trying to run unit tests on an incomplete install should fail badly.  By default it does, and by design we have set it up to fail when you execute</p> <pre><code>php admin/tool/phpunit/cli/init.php\n</code></pre> <p>on the whole moodle.  If you need to avoid this failure then</p> <pre><code>define('QTYPE_STACK_TEST_CONFIG_PLATFORM', 'none');\n</code></pre> <p>within the config.php.  See issue #1104 for discussion of this feature.</p>"},{"location":"en/Developer/Unit_tests/#other-configuration-issues","title":"Other configuration issues","text":"<p>Moodle overrides the PHP debug message settings.  To see errors and warnings, go to</p> <pre><code>Site administration -&gt; Development -&gt; Debugging\n</code></pre> <p>and set the Debug messages option.</p>"},{"location":"en/Developer/Unit_tests/#maxima-unit-tests","title":"Maxima unit tests","text":"<p>Maxima has a unit testing framework called \"rtest\".  One complication is that we need to run tests with and without simplification.  To help with this, a batch file is provided to run the unit tests.</p> <pre><code>\\moodle\\question\\type\\stack\\stack\\maxima\\unittests_load.mac\n</code></pre> <p>To run this set up the STACK-maxima-sandbox and load STACK's libraries.  Then type</p> <pre><code>load(\"unittests_load.mac\");\n</code></pre> <p>The output from these tests is written to <code>.ERR</code> files in <code>\\moodle\\question\\type\\stack\\stack\\maxima\\</code>.</p> <p>Please note that currently, with simplification false, there are a number of false negative results.  That is tests appear to fail, but do not.  This is because rtest is not designed to run with simp:false, and so does not correctly decide whether things are really the \"same\" or \"different\".</p>"},{"location":"en/Developer/Unit_tests/#timing-the-code","title":"Timing the code.","text":"<p>Maxima has a range of functions for code profiling.  Put the following at the start of the file.</p> <pre><code>timer(all)$\n</code></pre> <p>This adds all user-defined functions to the timer list.  </p> <p>To time a single command</p> <pre><code>ev(timer_info(abs_replace), simp);\n</code></pre> <p>To profile all user-defined commands execute.</p> <pre><code>simp:true$\nT:timer_info()$\n</code></pre> <p>Find those commands actually called (based on T being the matrix above).</p> <pre><code>S:sublist(rest(args(T)),lambda([a], not(is(third(a)=0))));\n</code></pre> <p>Sort by functions called most often.</p> <pre><code>S:sort(S, lambda([a,b],third(a)&gt;third(b)));\n</code></pre> <p>Sort by the time/call</p> <pre><code>float_time(a):= if a=0 then 0 else first(args(a))$\nS:sort(S, lambda([a,b],float_time(second(a))&gt;float_time(second(b))));\n</code></pre>"},{"location":"en/Developer/Unit_tests/#testing-ajax-specific-problems","title":"Testing ajax specific problems.","text":"<p>You need to output values to the file system, as the display can't manage this.  For example,</p> <pre><code>file_put_contents(\"/tmp/log.txt\", print_r($result, true));\n</code></pre>"},{"location":"en/Developer/Unit_tests/#testing-the-updated-parser-in-stack-43","title":"Testing the updated parser in STACK 4.3","text":"<p>In the STACK directory</p> <pre><code>php cli/casstringtester.php --string=\"0..1\"\n</code></pre>"},{"location":"en/Developer/Website/","title":"Updating the Online Docs","text":"<p>The STACK documentation is available online on docs.stack-assessment.org. The docs are automatically built whenever this repository is pushed to. This documentation details how to update the styling of the online docs.</p>"},{"location":"en/Developer/Website/#what-is-not-covered-in-this-document","title":"What is not covered in this document","text":"<p>Instructions for updating the main website www.stack-assessment.org. The main website is built in the stack-web repository, and has its own documentation.</p>"},{"location":"en/Developer/Website/#framework","title":"Framework","text":"<p>The website is built using MkDocs, a static site generator which converts STACK documentation, within the <code>/doc</code> directory, into HTML files and pushes them to the <code>gh-pages</code> branch. The website structure mirrors the file structure: the file <code>doc/en/Authoring/Answer_Tests/index.md</code> will be available on <code>docs.stack-assessment.org/en/Authoring/Answer_tests/</code>. Every sub-folder has an <code>index.md</code> file that will take that folder's name on the website: <code>doc/en/Authoring/index.md</code> will be available on <code>docs.stack-assessment.org/en/Authoring/</code>.</p> <p>MkDocs is configured in the <code>mkdocs.yml</code> file. MkDocs has a full list of available configuration options. MkDocs can either generate the navigation bar automatically, or accept a custom navigation configuration in the <code>nav</code> variable. The online docs uses the first option. The advantage is that new files are automatically added to the navigation bar when they are added to the repository. The disadvantage is that we cannot tweak the navigation bar manually. The online docs get around this with a number of workarounds.</p> <p>MkDocs cannot display MathJax out-of-the-box, so we use the markdown extension mdx_math, specified in <code>mkdocs.yml</code>, with the variable <code>extra_javascript</code> set to include MathJax.</p> <p>MkDocs can accept a third-party theme, and the main STACK website uses the Material Theme, mainly for its better search display and adaptive structure.</p> <p>The site is hosted by GitHub Pages from the <code>gh-pages</code> branch. A workflow under <code>.github</code> ensures that MkDocs runs its command <code>mkdocs gh-deploy</code> every time the repository is pushed to, which rebuilds the website and pushes the built HTML piles to the <code>gh-pages</code> branch. This overrides all the files currently in the <code>gh-pages</code> branch, so you must never edit files directly in the <code>gh-pages</code> branch.</p>"},{"location":"en/Developer/Website/#stack-specific-workarounds","title":"STACK-specific Workarounds","text":"<p>The online docs use a number of workarounds to make MkDocs compatible with the STACK docs.</p>"},{"location":"en/Developer/Website/#dealing-with-the-structure-of-the-docs","title":"Dealing with the structure of the docs","text":"<p>MkDocs expects a single folder to contain all the website files, starting with an <code>index.md</code> file that is to be the landing page. However, STACK's docs have a different structure: <code>doc</code> contains the <code>content</code> folder, and the two language folders where the documentation is provided. The landing page is under <code>en/index.md</code>.</p> <p>To work around this, we set <code>doc</code> to be the location of the docs, and use the plugin mkdocs-exclude to unwanted files from the navigation, such as <code>/de</code> and <code>en/Site_map.md</code>. We then use the plugin mkdocs-redirects to redirect the non-existing <code>index.md</code> file to the true landing page <code>en/index.md</code>. The effect of this is that docs.stack-assessment.org will always redirect to docs.stack-assessment.org/en/.</p> <p>We also update the sidebar navigation, such that it does not show the <code>en</code> directory. This is done by overriding Material's <code>nav-item</code> partial in the <code>site_overrides/partials/</code> directory. </p>"},{"location":"en/Developer/Website/#dealing-with-the-theme","title":"Dealing with the theme","text":"<p>The online docs make a number of custom changes to the Material theme.</p> <ul> <li>We use the basic MkDocs search algorithm, by including a script in the <code>{% block config %}</code> block under <code>site_overrides/main.html</code></li> <li>In <code>site_overrides/partials/logo.html</code> we customise how the STACK logo is shown. This is necessary, since the STACK logo is not square.</li> <li>We add a custom footer in the <code>{% block footer %}</code> block under <code>site_overrides/main.html</code>. In here we copy Material's primary and secondary sidebar classes, such that the footer collapses when the sidebar navigation and search bar does. It was necessary to make an identical copy of the <code>md-sidebar--primary</code> class called <code>md-sidebar--primary_footer</code>, to avoid the sidebar breaking when zoomed.</li> </ul>"},{"location":"en/Developer/Website/#updating-the-documentation","title":"Updating the documentation","text":"<p>When you change the documentation, the website automatically updates as well. This introduces some new limitations to the sort of elements that can be included in the documentation. This is documented in the Documentation file.</p>"},{"location":"en/Developer/Website/#updating-the-style","title":"Updating the style","text":"<p>The online docs uses a custom CSS stylesheet which you can edit. This stylesheet builds upon the stylesheets of MkDocs and Material.</p> <p>You can also edit the theme directly. Any file in the <code>site_overrides</code> folder will override files of the same name in Material's directory. The <code>main.html</code> file is designed to make it easy to override some predetermined blocks, but sometimes it is necessary to override files directly. Notice we directly override some of Material's partials.</p>"},{"location":"en/Developer/Website/#testing-the-website-locally","title":"Testing the website locally","text":"<p>Before adding major style changes to the online docs, you are encouraged to test your changes locally. For this, you will need to install MkDocs and all the required extensions.</p> <ol> <li>Install MkDocs, including its requirements.</li> <li>Install Material with <code>pip install mkdocs-material</code></li> <li>Install the markdown extension with <code>pip install https://github.com/mitya57/python-markdown-math/archive/master.zip</code></li> <li>Install the exclude plugin with <code>pip install mkdocs-exclude</code></li> <li>Install the redirect plugin with <code>pip install mkdocs-redirects</code></li> </ol> <p>You can run a local version of the website with the command <code>mkdocs serve</code>. This will make your local version available on the IP <code>http://127.0.0.1:8000/</code>.</p> <p>Please test that your changes work on:</p> <ul> <li>The following browsers: Chrome, Firefox, Safari, Edge.</li> <li>The following sizes: Computer, tablet, mobile. Chrome's \"inspect\" tool works well for this.</li> </ul>"},{"location":"en/Installation/","title":"Installation instructions.","text":"<p>STACK is being used live at many institutions, including the University of Edinburgh, the UK Open University, Aalto, Loughborough University, and the University of Birmingham in the UK.</p> <p>We appreciate some people prefer hosted services as an alternative to running their own server.  If so, then please contact the developers for more details of current providers.</p> <p>STACK is designed to be used on a Linux-based server.  For testing and local question development we recommend using virtual box.</p> <p>Direct connection to Maxima on windows/MS is not supported.  On windows/MS please set up a server with goemaxima (installed via docker) and connect your server to Maxima that way.  Note, you must match the version of goemaxima to the same version of the STACK plugin.  (This is not suitable for development, where you want to change Maxima code.)</p>"},{"location":"en/Installation/#0-set-up-php-with-mbstring","title":"0. Set up PHP with mbstring","text":"<p>STACK requires PHP 7.4 and later.</p> <p>STACK requires the PHP <code>mbstring</code> library.</p> <p>On an existing Moodle site navigate to</p> <pre><code>/admin/environment.php\n</code></pre> <p>to confirm before adding this plug-in.</p> <p>On some Linux distros, you simply need to</p> <pre><code>apt-get install php-mbstring\n</code></pre> <p>and then re-start the web server.</p>"},{"location":"en/Installation/#1-set-up-moodle","title":"1. Set up Moodle.","text":"<p>Please ensure you have installed Moodle.</p> <ul> <li>STACK has been tested on Moodle 4.1 to Moodle 5.1 inclusive.</li> <li>We intend to support STACK within the normal Moodle release cycle.  We intend to support all future Moodle releases. If your version of Moodle is not listed here please contact the developers: we probably simply have not done the testing of future versions yet.  For longer support of older versions of Moodle please contact us, otherwise will will drop them from our list.</li> </ul> <p>Please ensure LaTeX can be displayed.  We currently support MathJax through the Moodle MathJax filter.</p> <p>Consider updating the MathJax settings to wrap long equations. In particular, add</p> <pre><code>CommonHTML: { linebreaks: { automatic: true } },\n\"HTML-CSS\": { linebreaks: { automatic: true } },\nSVG: { linebreaks: { automatic: true } }\n</code></pre> <p>to <code>filter_mathjaxloader | mathjaxconfig</code> in the filter settings: Dashboard &gt; Site administration &gt; Plugins &gt; Filters &gt; MathJax</p>"},{"location":"en/Installation/#2-install-gnuplot-and-maxima","title":"2. Install gnuplot and Maxima","text":"<p>Ensure gcc, gnuplot and Maxima are installed on your server.  We currently recommend that you use any version of Maxima after 5.43.0.</p> <p>Maxima can be installed via a package manager on most Linux distributions (e.g. <code>sudo apt-get install maxima</code> on Debian/Ubuntu), downloaded, or compiled from source.  Please make sure you also have <code>maxima-share</code> installed.  (This is automatically installed on some distributions, but not others.)</p> <p>To check your version of maxima, run <code>maxima --version</code>.  If Moodle is set up using Apache, STACK will run maxima through the Apache user (<code>www-data/apache2</code>).  To check that this works, run maxima as the apache user (e.g. <code>sudo -u www-data maxima</code>).  Later versions of maxima create a cache and thus the executing user needs to have write access to a temporary folder, see #731 for more details and troubleshooting.</p> <p>Alternatively, Maxima can also be run on a separate server via GoeMaxima or MaximaPool.</p> <p>Please note</p> <ul> <li>Please avoid versions 5.37.x which are known to have a minor bug which affects STACK. In particular with <code>simp:false</code>,  is transformed into 1/s.  This apparently minor change makes it impossible to distinguish between the two forms.  This causes all sorts of problems.  Do not use Maxima 5.37.1 to 5.37.3.</li> <li>Older versions of Maxima:  in particular, Maxima 5.23.2 has some differences which result in 1/\\sqrt{x} \\neq \\sqrt{1/x}, and similar problems.  This means that we have an inconsistency between questions between versions of maxima.   Of course, we can argue about which values of x make 1/\\sqrt{x} = \\sqrt{1/x}, but currently the unit tests and assumption is that these expressions should be considered to be algebraically equivalent!   So, older versions of Maxima are not supported for a reason.  Please test thoroughly if you try to use an older version, and expect some errors in the mathematical parts of the code.</li> <li>If you install more than one version of Maxima then you will need to tell STACK which version to use.  Otherwise just use the \"default\" option.</li> <li>Maxima 5.40.0 changed the way subscripts were displayed.  We are no longer testing against versions before 5.40.0, so there may be inconsitencies with display of subscripts with other versions.</li> </ul> <p>Instructions for installing a more recent version of Maxima on CentOS 6 are available on the Moodle forum  (Oct 2014).</p>"},{"location":"en/Installation/#3-add-some-additional-question-behaviours","title":"3. Add some additional question behaviours","text":"<p>STACK requires these.</p> <ol> <li>Obtain Deferred feedback with explicit validation behaviour code. You can download the zip file, unzip it, and place it in the directory <code>moodle/question/behaviour/dfexplicitvaildate</code>. (You will need to rename the directory <code>moodle-qbehaviour_dfexplicitvaildate -&gt; dfexplicitvaildate</code>.)</li> </ol> <p>Alternatively, get the code using git by running the following command in the top level folder of your Moodle install:</p> <pre><code>    git clone https://github.com/maths/moodle-qbehaviour_dfexplicitvaildate.git question/behaviour/dfexplicitvaildate\n</code></pre> <ol> <li>Obtain Deferred feedback with CBM and explicit validation behaviour code. You can download the zip file, unzip it, and place it in the directory <code>moodle/question/behaviour/dfcbmexplicitvaildate</code>. (You will need to rename the directory <code>moodle-qbehaviour_dfcbmexplicitvaildate -&gt; dfcbmexplicitvaildate</code>.)</li> </ol> <p>Alternatively, get the code using git by running the following command in the top level folder of your Moodle install:</p> <pre><code>    git clone https://github.com/maths/moodle-qbehaviour_dfcbmexplicitvaildate.git question/behaviour/dfcbmexplicitvaildate\n</code></pre> <ol> <li>Obtain adaptivemutlipart behaviour code. You can download the zip file, unzip it, and place it in the directory <code>moodle/question/behaviour/adaptivemultipart</code>. (You will need to rename the directory <code>moodle-qbehaviour_adaptivemultipart  -&gt; adaptivemultipart</code>.)</li> </ol> <p>Alternatively, get the code using git by running the following command in the top level folder of your Moodle install:</p> <pre><code>    git clone https://github.com/maths/moodle-qbehaviour_adaptivemultipart.git question/behaviour/adaptivemultipart\n</code></pre> <ol> <li>Login to Moodle as the admin user and click on Notifications in the Site Administration panel.</li> </ol>"},{"location":"en/Installation/#4-add-the-stack-question-type","title":"4. Add the STACK question type","text":"<p>STACK is a question type for the Moodle quiz.</p> <ol> <li> <p>Obtain the code. You can download the zip file, unzip it, and place it in the directory <code>moodle/question/type/stack</code>. (You will need to rename the directory <code>moodle-qtype_stack -&gt; stack</code>.)</p> <p>Alternatively, get the code using git by running the following command in the top level folder of your Moodle install:</p> <pre><code>git clone https://github.com/maths/moodle-qtype_stack.git question/type/stack\n</code></pre> <ol> <li>Login to Moodle as the admin user and click on Notifications in the Site Administration panel.</li> <li>As the admin user, navigate to <code>Home &gt; Site administration &gt; Plugins &gt; Question types &gt; STACK</code>.  Please choose and save the appropriate options.</li> <li>On the same page, click on the link to the healthcheck script.  This writes local configuration files and then helps you verify that all aspects of STACK are working properly.</li> </ol> </li> </ol> <p>You must be able to connect to the CAS, and for the CAS to successfully create plots, before you can use STACK. You might want to try optimising Maxima access times.</p> <p>You should now have a question type available to the Moodle quiz.</p>"},{"location":"en/Installation/#5-multi-language-support","title":"5. Multi-language support","text":"<p>STACK questions can be localised into multiple languages.</p> <ol> <li>Your site administrator must enable the Moodle multi-language content filter.</li> <li>The multi-language content filter must be applied before the MathJax filter, otherwise strange results will occur.</li> </ol>"},{"location":"en/Installation/#6-activity-names-auto-linking-filter","title":"6. Activity names auto-linking filter","text":"<p>By default the Moodle \"Activity names auto-linking\" filter is enabled.  The Activity names auto-linking filter is a site Filter that will create links to an activity whenever the name of the activity is written in texts within the same course in which the activity is located. This includes forum postings, pages, labels etc.</p> <p>This also includes question content.</p> <p>STACK applies filters mid-way through the question creation process, mostly to provide multi-language support.  However, this means that other filters (including the Activity names auto-linking filter) can disrupt STACK question version generation.</p> <p>For example, if you create an activity in your course named \"feedback\", then this filter will link the feedback tags placing potential response trees in your question to that activity.  The filter-generated link will break your STACK questions.</p> <p>STACK is not incompatible with the Activity names auto-linking filter but it is known to cause some problems in edge cases.</p> <p>We recommend you disable the Activity names auto-linking filter by default.</p>"},{"location":"en/Installation/#7-post-install-confirmation","title":"7. Post-install confirmation.","text":"<p>It is essential to confirm that the PHP scripts are connecting to the CAS.</p> <p>We have special scripts which provide confirmation and trouble-shooting data to test the installation.</p>"},{"location":"en/Installation/#8-optional-but-recommended-fix-db-case-sensitivity-issue","title":"8. Optional (but recommended): Fix DB case sensitivity issue.","text":"<p>Using a database with a case insensitive collation can cause issues; for example MySQL with utf8mb4_unicode_ci. This is a general problem of Moodle, not specific to this plugin. See Database collation issue.</p> <p>If your DB uses case insensitive collations you must change them to case sensitive ones for the following columns:</p> <ul> <li>qtype_stacks_inputs -&gt; name</li> </ul> <p>Example command for MySQL 8.0:</p> <pre><code>ALTER TABLE mdl_qtype_stack_inputs CHANGE name name VARCHAR(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL DEFAULT '';\n</code></pre> <p>STACK will work without this fix, but input names will not be case sensitive (!) as far as Moodle's database is concerned.  This will throw errors for some questions.</p>"},{"location":"en/Installation/#upgrading-to-new-versions-of-stack","title":"Upgrading to new versions of STACK","text":"<p>Please check the release notes carefully.  Some upgrades inevitably require review/changes to existing STACK questions. We do our best to maintain back compatibility, but some changes are unavoidable.</p> <p>If STACK is already installed, as described above, it can be updated via git, like this:</p> <ol> <li> <p>Go into your moodle-dir and execute:</p> <pre><code>cd question/type/stack\ngit pull\ncd ..\ncd ..\ncd behaviour/dfcbmexplicitvaildate/\ngit pull\ncd ..\ncd dfcbmexplicitvaildate/\ngit pull\ncd ..\ncd adaptivemultipart/\ngit pull\n</code></pre> </li> <li> <p>Then login as admin in your moodle and update the database.</p> </li> <li> <p>As admin user, navigate to yourmoodle/admin/settings.php?section=qtypesettingstack</p> </li> <li> <p>Check for the correct maxima version.</p> </li> <li> <p>Click on the link to the healthcheck script.  This writes local configuration files and then helps you verify that all aspects of STACK are working properly.</p> </li> <li> <p>On the same site, you might need to create a new maxima image, by using the button at the end of the page.</p> </li> </ol> <p>It is a good idea to bulk test your materials with the new version.</p> <p>If you are upgrading from much older versions please look at the migrations page.</p>"},{"location":"en/Installation/API/","title":"STACK API","text":"<p>STACK also has an API to provide STACK questions as a web service.</p> <p>The API provides a basic, stateless, interface to STACK questions.  This is an advanced feature.  STACK is shipped with a very basic front-end for evaluation and testing, but the use of the API will require existing questions in Moodle XML, a \"quiz system\" to manage access to individual questions, and a database to store attempts at questions.</p>"},{"location":"en/Installation/API/#minimal-example","title":"Minimal example","text":"<p>The STACK API has been designed to be deployed using Docker. </p> <ol> <li>Images are available from https://hub.docker.com/u/stackmaths</li> <li>The Dockerfile is available here.</li> </ol> <p>To start the docker container try <code>docker compose -f docker-compose.yml up</code></p> <p>To use the API look at <code>http://localhost:3080/stack.php</code> (or perhaps <code>http://172.18.0.2/stack.php</code>)</p> <p>To stop the docker container try <code>docker compose -f docker-compose.yml down</code></p> <p>The API also provides a bulk test option <code>http://localhost:3080/bulktest.php</code></p>"},{"location":"en/Installation/API/#building-the-image-locally","title":"Building the image locally","text":"<p>The code, and further documentation, for the API is in the <code>api/README.md</code> directory of the distribution.</p>"},{"location":"en/Installation/LTI/","title":"About LTI","text":"<p>Learning Tools Interoperability (LTI) is a web services protocol which allows online learning systems to exchange information and interconnect.  It can be used to provide quizzes (containing STACK questions or not) to other learning systems, or to include quizzes within a Moodle system on which STACK is not installed.</p> <p>LTI is entirely separate from STACK, and the details of the protocol are available from the IMS Global website.  LTI can be used to provide/consume a wide range of functionality beyond STACK quizzes.</p>"},{"location":"en/Installation/LTI/#installing-lti","title":"Installing LTI","text":"<p>There are two sides to LTI: the provider and consumer.</p> <ol> <li>If you haven't installed STACK on your server, or use another learning management system, you will need to consume a service with STACK.  Moodle has an LTI consumer by default.  You don't need to add anything to Moodle to consume LTI.</li> <li>The LTI provider <code>local_ltiprovider</code> is an optional plugin.  If you intend to provide STACK questions as an LTI service you will need to install this.</li> </ol>"},{"location":"en/Installation/LTI/#providing-stack-quizzes","title":"Providing STACK quizzes","text":"<p>This section describes how to use LTI to provide Moodle quizzes (e.g. containing STACK questions).  We assume you have written your quizzes as part of a Moodle course.</p>"},{"location":"en/Installation/LTI/#setting-up-a-moodle-course-as-a-service-for-learn","title":"Setting up a Moodle course as a service for Learn","text":"<p>The Moodle LTI provider enables a wide range of possibilities.</p> <ul> <li>A single course is provided which contains a number of quizzes.</li> <li>The provided course is (normally) consumed by a single course in Learn.</li> <li>A single grade is provided to Learn.  All marks are recorded in the Moodle gradebook separately, and students should be able to access these.</li> <li>Students and teachers follow a single link from Learn.  The LTI protocol ensures this connection respects their respective level of permissions.</li> </ul> <p>If you would like more than one grade in Learn, then consider having more than one course on Moodle.  Students will be able to see their individual grades in Moodle (unless you disable access to the gradebook!), so it is likely to be sufficient for most purposes to return a single grade to Learn.  The difficulty with this is the lack of shared question banks.</p> <ol> <li>Login to the provider (STACK) directly with Moodle admin privileges and create a course as follows.<pre><code>Site administration -&gt; Courses -&gt; Manage courses and categories.\n</code></pre> </li> </ol> <p>Then choose \"Create new course\". 2. Create the course with appropriate Course full name and Course short name.  These should be identical to those on Learn.</p> <pre><code>    Course format -&gt; Format -&gt; Topics format\n    Number of sections -&gt; 0\n</code></pre> <p>This creates the simplest possible course, with no section breakup.  All the quizzes will then appear as a list in this.  Other options are, of course, possible.    (If you just really want a single quiz, consider the \"Single activity format\"). 3. Delete all unnecessary elements, e.g. News. 4. Add quizzes, etc., as required.  This does not need to be complete before the next step, but the course should be non-empty when it is exposed to avoid confusion. 5. Now expose the course using the LTI provider.</p> <pre><code>   Course administration -&gt; LTI Provider -&gt; Add\n\n   Tool to be provided -&gt; Course\n\n   Layout and CSS -&gt; Hide page header, footer, left, right blocks.\n</code></pre> <p>Save changes. 6. The \"List of tools provided\" will give the 'Tool name', 'Shared secret' and 'Launch URL'.  These will be needed by the LTI consumer.</p> <p>It is possible to expose an individual quiz, but then you need to consume the quiz.  It is easier to make one connection at the course level, than many LTI connections at the quiz level.</p>"},{"location":"en/Installation/LTI/#providing-clones-of-moodle-courses","title":"Providing clones of Moodle courses","text":"<p>The University of Edinburgh uses a learning management system called \"Learn\".  We need to connect Learn up to Moodle to allow a wide variety of courses (on Learn) to use quizzes containing STACK (and other) questions.  We want each (Learn) course to have a private area on the Moodle server parallel to the course on Learn.</p> <p>We have developed an enrolement plugin, <code>enrol_lticoursetemplate</code>, which provides an LTI service which enables users to clone a course template from a remote connection, automatically giving each teacher the ability to create a new clean course tied to their consumer content system.  This plugin removes the need to set up parallel courses in Moodle by hand.</p> <p>Documention on how to set up this plugin is available.</p>"},{"location":"en/Installation/Mathjax/","title":"Displaying mathematics for STACK in Moodle","text":"<p>STACK generates LaTeX code on the fly and expects to use a Moodle filter to convert this into something the user's browser will display.  For Moodle 2.7 or later, MathJax is distributed as a filter.  We strongly recommend using the Moodle MathJax filter.  One reason for adopting MathJax is that it aids accessibility.</p>"},{"location":"en/Installation/Mathjax/#using-the-mathjax-filter","title":"Using the MathJax filter","text":"<p>These are notes on configuring the MathJax filter options for use with STACK.</p> <ol> <li>Do not use \"TeX filter compatibility\" unless you want all equations to appear inline!</li> <li>To add support for actuarial notation you need to add the option 'enclose.js' to the extensions.  I.e. within the \"MathJax configuration\" text we need the following.   <pre><code>TeX: { extensions: ['enclose.js'] }\n</code></pre> </li> </ol>"},{"location":"en/Installation/Mathjax/#accessibility","title":"Accessibility","text":"<p>Among other things, MathJax allows screenreaders to read mathematics in a meaningful way which is critical for students who rely on this technology, or simply find it easier to learn with an aural option. For this to work, information must be typed up, not contained in a screenshot.</p> <p>The accessibility features supported by MathJax are given detailed in the MathJax documentation and YouTube. </p>"},{"location":"en/Installation/Mathjax/#adding-mathjax-to-additional-html","title":"Adding MathJax to additional HTML","text":"<p>If the MathJax filter is not available then you can include it in the head of every page by adding additional HTML to every page.  We don't recommend you do this, but have retained this information in the documentation for completeness.</p>"},{"location":"en/Installation/Mathjax/#option-1-install-mathjax-locally","title":"Option 1: install MathJax locally","text":"<p>A local installation may be preferable, e.g., if you want your STACK-equipped Moodle to work off-line, or if you want to try to speed up LaTeX rendering.</p> <ol> <li>Download MathJax</li> <li>Unpack the archive and rename folder to \"mathjax\".</li> <li>Place the mathjax folder in .../moodle/lib and set appropriate ownership, e.g., <code>chown -R root.root mathjax</code>.</li> <li> <p>Carry out the procedure in Option 1, editing the script above to reflect your path to MathJax. The last line can resemble the following:</p> <p></p> </li> </ol>"},{"location":"en/Installation/Mathjax/#option-2-link-to-external-mathjax-setup","title":"Option 2: link to external MathJax setup","text":"<p>As of August 2017, you can use an external CDN at <code>cdnjs.cloudflare.com</code>.</p> <ol> <li>Admin -&gt; Appearance -&gt; Additional HTML -&gt; Within HEAD</li> <li> <p>Put the following script in it and save</p> <p> MathJax.Hub.Config({             MMLorHTML: { prefer: \"HTML\" },             tex2jax: {                 displayMath: [['\\[', '\\]']],                 inlineMath:  [['\\(', '\\)']],                 processEscapes: true             },             TeX: {              extensions: ['enclose.js'],             Macros: { pounds: '{\\it\\unicode{xA3}}', euro: '\\unicode{x20AC}' }             }         });     </p> </li> </ol> <p>Please note the following.</p> <ul> <li>These settings enable only the strict LaTeX maths environments, and does not support the use of dollars;</li> <li>The <code>processEscapes</code> flag enables you to include a dollar symbol in mathematics environments with <code>\\$</code>.</li> <li>The line <code>extensions: ['enclose.js'],</code> enables support for actuarial notation.</li> <li>The line <code>Macros: { pounds: '{\\\\it\\\\unicode{xA3}}', euro: '\\\\unicode{x20AC}' }</code> enables support for the UK pounds sign and the Euro symbol in LaTeX using <code>\\pounds</code> and <code>\\euro</code> macros respectively.  E.g. \\pounds and \\euro.</li> </ul>"},{"location":"en/Installation/Mathjax/#delimiters","title":"What about dollar mathematics delimiters?","text":"<p>Please note that we strongly discourage the use of dollar symbols for denoting LaTeX mathematics environments such as <code>$...$</code> and <code>$$...$$</code> for inline and displayed mathematics respectively.  As of STACK 4.0 use of dollars are officially unsupported. The reasons are (1) they do not match, which makes parsing more difficult, and (2) many courses use currency which needs this symbol and protecting it is always problematic.</p> <p>If you have extensive existing materials using these delimiters then we have scripts which will automatically convert them for you.  All fields within existing questions can be converted with the automatic scripts available from</p> <pre><code>Home &gt; Site administration &gt; Plugins &gt; Question types &gt; STACK\n</code></pre> <p>If you have ad-hoc text to convert then the CAS chat script always converts dollars into the forms <code>\\( .... \\)</code> and <code>\\[ .... \\]</code>.  You can test and edit the display of text in this window to see the conversion. </p> <p>If you really want to use dollars, MathJax can display them with the code</p> <pre><code>displayMath: [['$$', '$$'], ['\\\\[', '\\\\]']],\ninlineMath:  [['$',  '$' ], ['\\\\(', '\\\\)']],\n</code></pre> <p>Before deciding to support the use of dollars for mathematics on your site, please see the notes on the use of dollars for currency.</p>"},{"location":"en/Installation/Maxima_installation/","title":"Compiling Maxima from source.","text":"<p>As of 12th April 2024 the following has been used to compile Maxima from source on Linux Ubuntu 22.04.3.</p> <p>If you compile Maxima from source you must include unicode support. This is essential even if you only use Maxima in English.  Students' answers, and teacher's content, increasingly uses unicode which inevitably passes through Maxima.</p>"},{"location":"en/Installation/Maxima_installation/#you-will-need-the-following-and-gnu-autotools","title":"You will need the following, and GNU autotools","text":"<pre><code>sudo apt-get install texinfo\n</code></pre>"},{"location":"en/Installation/Maxima_installation/#download-and-compile-sbcl-lisp","title":"Download and compile SBCL (Lisp)","text":"<pre><code>wget https://sourceforge.net/projects/sbcl/files/sbcl/2.3.2/sbcl-2.3.2-source.tar.bz2\ntar -xf sbcl-2.3.2-source.tar.bz2\ncd sbcl-2.3.2/\n./make-config.sh\n./make.sh\n\nsudo ./install.sh\n</code></pre>"},{"location":"en/Installation/Maxima_installation/#download-and-compile-maxima-with-sbcl","title":"Download and compile Maxima with SBCL","text":"<pre><code>wget https://sourceforge.net/projects/maxima/files/Maxima-source/5.47.0-source/maxima-5.47.0.tar.gz \ntar -xzf maxima-5.47.0.tar.gz\ncd maxima-5.47.0/\n\n./configure --enable-sbcl\n\nmake\nsudo make install\n</code></pre> <p>By default the above will install Maxima to <code>/usr/local/bin/maxima</code>. You can use the <code>--prefix</code> flag in the call to <code>./configure</code> to change this. For example, <code>./configure --prefix=/usr/bin --enable-sbcl</code>, followed by <code>make</code> and <code>sudo make install</code> will install Maxima to <code>/usr/bin/maxima</code>. Optionally, you can use the <code>make check</code> command after <code>make</code> and before <code>sudo make install</code> to  check for any issues found from the configuration and build procedures.</p>"},{"location":"en/Installation/Migration/","title":"Migration from STACK 3.X to STACK 4.0","text":"<p>STACK 4.0 has one important change in the question authoring.  CAS text now uses <code>{@...@}</code> in include mathematics in the text.  The change from <code>@...@</code> to <code>{@...@}</code> gives us matching parentheses to parse, which is much better.  The <code>{..}</code> will not break LaTeX.</p> <p>You will need to update all your existing questions which include CAS calculations. This includes all fields, e.g. in the feedback as well.  To help with this process we have an automatic conversion script.  As an admin user navigate to </p> <pre><code>Site administration -&gt; \nPlugins -&gt;\nQuestion Types -&gt;\nSTACK\n</code></pre> <p>Then choose the link \"The fix maths delimiters script\".  If you have any difficulties with this process please contact the developers.</p>"},{"location":"en/Installation/Migration/#migration-from-stack-2x-to-stack-30","title":"Migration from STACK 2.X to STACK 3.0","text":"<p>If you wish to import STACK 2 questions into STACK 3 you will need to install the STACK question format separately.  This is distributed as <code>qformat_stack</code>.  It provides a different question format for the Moodle quiz importer.</p> <ol> <li> <p>Obtain the code. You can download the zip file, unzip it, and place it in the directory <code>moodle/question/format/stack</code>. (You will need to rename the directory <code>moodle-qformat_stack -&gt; stack</code>.) </p> <p>Alternatively, get the code using git by running the following command in the top level folder of your Moodle install: </p> <pre><code>git clone https://github.com/maths/moodle-qformat_stack.git question/format/stack\n</code></pre> <ol> <li>Login to Moodle as the admin user and click on Notifications in the Site Administration panel.</li> </ol> </li> </ol> <p>There have been a number of changes between STACK 2 and STACK 3.  This feature has not been tested since STACK 4.0.  If you need to use this please contact the developers.  Also, see the notes on the importer before using it.</p>"},{"location":"en/Installation/Optimising_Maxima/","title":"Optimising Maxima","text":"<p>There are several ways to reduce the access and execution time of this CAS which can prove useful for scaling. They have the potential to greatly speed up STACK, and are required on a production server.  It is particularly important on a Linux system to compile the Maxima code.</p> <p>The instructions for both CLISP and SBCL have been tested and work in STACK 3.  As of November 2020, these are working with all versions between Maxima 5.36.1 and Maxima 5.44.0.</p> <p>The procees of creating an optimised Maxima image is now automated.  This should be built automatically when installing STACK, and on upgrade.  However, you should use the plugin healthcheck script to confirm you have a fully working system.</p> <p>For developers the code to automatically generate the LISP images is described below.</p>"},{"location":"en/Installation/Optimising_Maxima/#terminating-runaway-lisps","title":"Terminating runaway LISPS","text":"<p>It is relatively easy for students to inadvertently generate an answer which takes Maxima a very long time to evaluate.  Typically this arises from where Maxima needs to expand out the brackets by comparing <code>(x-a)^59999</code> with a similar expression.  It is very hard to ensure this kind of calculation is impossible so in general this situation will arise from time to time.  The PHP scripts have a timeout, but on Linux systems you can also ensure the underlying LISP process is killed off using <code>timeout</code> command in Linux.  This is particularly valuable for production systems where stability is essential.</p> <ol> <li>Check that your Linux has the <code>timeout</code> command.  Because this is not standard we have not included this mechanism by default.</li> <li>Make sure STACK is working.</li> <li>Set the CAS connection timeout variable as normal in the STACK settings.  E.g. you might choose 5 seconds</li> <li> <p>Use the following Maxima command</p> <p>timeout --kill-after=6s 6s maxima</p> </li> </ol> <p>It is important that the timeout time is longer than the CAS connection timeout.  That way, PHP gives up first and degrades gracefully.  The OS then kills the process later.  If you choose the timeout to be the same or less, PHP may not have gathered enough data to degrade gracefully.  </p> <p>The above can be used with either a direct Maxima connection, or with the image created as described below.</p>"},{"location":"en/Installation/Optimising_Maxima/#compiled-lisp-image-of-the-stack-libraries","title":"Compiled Lisp image of the STACK libraries","text":"<p>Maxima can be run with a number of different Lisp implementations. Although CLISP is the most portable - due to being interpreted - other Lisps can give faster execution.</p>"},{"location":"en/Installation/Optimising_Maxima/#create-maxima-image","title":"Create Maxima Image","text":"<p>Lisp is able to save a snapshot of its current state to a file. This file can then be used to restart Lisp, and hence Maxima, in exactly that state. This optimization involves creating a snapshot of Lisp with Maxima and all the STACK code loaded, which can speed up launch times by an order of magnitude on Linux. This tip was originally provided Niels Walet.</p> <p>The principle is to save an image of Maxima running with STACK libraries already loaded then run this directly.  The healthcheck page contains a link at the bottom \"Create Maxima Image\".  We strongly recommend you use the automated option to create a Maxima image.</p>"},{"location":"en/Installation/Optimising_Maxima/#create-maxima-image-by-hand","title":"Create Maxima Image by hand","text":"<p>These steps should not be needed.  Our goal is to do this automatically.  If your OS and Maxima version do not work, please contact the developers with details and we will try to automate this process.</p> <p>For reference:</p> <ul> <li>Check your Maxima Lisp with <code>maxima --list-avail</code> to see what versions of Maxima and which Lisp you have.  This information is available through the healthcheck page.</li> <li>Load Maxima, using switches for the particular version you want, e.g. <code>maxima -l CLISP -u 5.19.2</code> or <code>maxima --use-version=5.40.1</code>.</li> </ul>"},{"location":"en/Installation/Optimising_Maxima/#gcl","title":"GCL","text":"<p>This is the default Lisp used by most of the binary distributions, and therefore the Lisp which you are most likely to have.</p> <ul> <li>Get STACK working with Platform type set to 'Linux'. Run the health-check. It is important to do this every time you upgrade your version.</li> </ul> <pre><code>    load(\"&lt;path&gt;/maximalocal.mac\");\n    :lisp (si::save-system \"/path/to/moodledata/stack/maxima-optimised\")  \n    quit();\n</code></pre> <ul> <li>Go into the STACK settings and set Platform type to 'Linux (Optimised)'.</li> <li>Set Maxima command to.</li> </ul> <pre><code>    /path/to/moodledata/stack/maxima-optimised  -eval '(cl-user::run)'\n</code></pre>"},{"location":"en/Installation/Optimising_Maxima/#clisp","title":"CLISP","text":"<p>Save an image in CLISP.</p> <ul> <li>Get STACK working with Platform type set to 'Linux'. Run the health-check. It is important to do this every time you upgrade your version.</li> <li>We assume you have CLISP. Type locate lisp.run to find the path(s) for the next step. You might need to run the command as root, and if you get no results try doing a sudo updatedb.</li> <li>Within Maxima, type the following lines to create an image and exit.</li> </ul> <pre><code>    load(\"&lt;path&gt;/maximalocal.mac\");\n    load(\"&lt;path&gt;/stackmaxima.mac\");\n    :lisp (ext:saveinitmem \"/path/to/moodledata/stack/maxima-optimised.mem\" :init-function #'user::run)\n    quit();\n</code></pre> <ul> <li>Go into the STACK settings and set Platform type to 'Linux (Optimised)'.</li> <li>Set Maxima command to.</li> </ul> <pre><code>    &lt;path&gt;/lisp.run -q -M &lt;path&gt;/maxima-optimised.mem\n</code></pre> <ul> <li>Click Save changes at the bottom of the settings page.</li> <li>Visit the healthcheck page, and clear the cache (if applicable), to make sure everything is still working.</li> </ul> <p>Access speed increases of between 2 and 9.5 times have been reported over the standard CLISP configurations.</p>"},{"location":"en/Installation/Optimising_Maxima/#sbcl","title":"SBCL","text":"<p>If you are using STACK with SBCL (if you are using CentOS/SL5/RHEL with Maxima from EPEL), use the following to generate a standalone executable:</p> <ul> <li>Get STACK working with Platform type set to 'Linux'. Run the healthcheck. It is important to do this every time you upgrade your version.</li> <li>Go into your moodledata/stack folder as the current directory, and run Maxima.</li> <li>In Maxima, type the commands:</li> </ul> <pre><code>    load(\"maximalocal.mac\");\n    :lisp (sb-ext:save-lisp-and-die \"maxima-optimised\" :toplevel #'run :executable t)\n</code></pre> <ul> <li>Go into the STACK settings and set the Platform to 'Linux (Optimised)'.</li> <li>You should be able to leave Maxima command blank.</li> <li>Click save changes at the bottom of the settings page.</li> <li>Visit the healthcheck page, and clear the cache (if applicable), to make sure everything is still working.</li> </ul>"},{"location":"en/Installation/Optimising_Maxima/#other-lisps","title":"Other Lisps","text":"<p>The following web pages have more information for a few types of Lisp: http://stackoverflow.com/questions/25046/lisp-executable and http://code.google.com/p/lispbuilder/wiki/StandAloneExecutables#Defining_a_Startup_Function</p>"},{"location":"en/Installation/Optimising_Maxima/#putting-maxima-on-other-servers","title":"Putting Maxima on other servers","text":"<p>Running Maxima on a separate server dedicated to the task is more secure. We believe it also improves performance because the server can start up Maxima processes in advance so they are all ready and waiting to compute some CAS with zero delay.</p> <p>See a Maxima pool has been implemented to do this.  See https://github.com/maths/stack_util_maximapool/blob/master/README.md</p>"},{"location":"en/Installation/Optimising_Maxima/#optimisation-results","title":"Optimisation results","text":""},{"location":"en/Installation/Optimising_Maxima/#2024","title":"2024","text":"<p>The following data was gathered by Sal Mercuri on 12/04/2024 using specified Maxima version and Lisp compilation, on Linux  Ubuntu 22.04.3.</p> <p>Running the PHP testing suites we have the following data, where all times are in seconds. The second line, in italics, is time per test.</p> Maxima + Lisp configuration CAS setting Answertest (2033 tests) Inputs (439 tests) 5.45.1 + GCL 2.6.12 Linux 2650.973421.30397 441.03543  1.00464 Mature cache (with Linux) 25.65669  0.01262 0.69035 0.00157 Linux (optimised) 152.87 0.07519 13.7997 0.03143 Mature cache (when optimised) 14.77583 0.00727 0.57989 0.00132 5.47.0 + SBCL 2.3.2 Linux 4089.26856 2.01145 679.26826 1.54731 Mature cache (with Linux) 24.67213 0.01214 0.63175 0.00144 Linux (optimised) 144.23283  0.07095 14.9878  0.03414  Mature cache (when optimised) 14.46183 0.00711 0.58733 0.00134 <p>The optimised version saves a considerable amount of time in both compilations of Lisp. However, SBCL is considerably slower than GCL on the non-optimised and uncached setting. Other settings see SBCL and GCL on a par.</p>"},{"location":"en/Installation/Optimising_Maxima/#2012","title":"2012","text":"<p>The following data was gathered by CJS on 23/9/2012 using Maxima 5.28.0 with CLISP 2.49 (2010-07-07) on a Linux server.</p> <p>Running the PHP testing suites we have the following data, where all times are in seconds. The second line, in italics, is time per test.</p> CAS setting Answertest (460 tests) Inputs (257 tests) Linux 517.8672 1.1258 208.85655 0.81267 Mature cache (with Linux) 0.92644  0.00201 13.9798 0.0544 Linux (optimised) 95.16954 0.20689 20.89807 0.08132 Mature cache (when optimised) 0.90839  0.00197 1.48648 0.00578 <p>However, not all tests result in a CAS call.  So, to estimate this we subtract the overhead time for a mature cache (which is essentially time for database/PHP processing) from the raw time and divide by the number of CAS calls.  We have the following time per CAS call estimates.</p> CAS setting Answertest (438 calls) Inputs (204 calls) Linux 1.180 0.955 Linux (optimised) 0.215 0.095 <p>The optimised version saves a considerable amount of time, representing a significant performance improvement in the critical step of just under a second per call.  Well worth the effort (&amp; maintenance) to reward ratio.  It is likely that using a compiled version of LISP would result in further considerable savings.</p> <p>The following data was gathered by CJS on 10/10/2012 using Maxima 5.28.0 with CLISP 2.49 and SBCL 1.0.58-1.el6, both on the same Linux server.  The table gives time in seconds to run the answer tests (462 tests).</p> Maxima version Linux Linux optimised CLISP 2.49 652.3 117.76314 SBCL 1.0.58-1.el6 1570.6 118.39215 <p>With both lisp versions, the optimisation gives a significant performance gain and there is very little difference between the times of the optimised versions.</p>"},{"location":"en/Installation/Optimising_Maxima/#cas-on-linux","title":"CAS on Linux","text":"<p>The tests above use Maxima through the PHP interface.  To gauge the overhead from the CAS itself we ran the following tests on the same server using Maxima 5.28.0 with CLISP 2.49.</p> <pre><code>model name: Intel(R) Xeon(R) CPU, E3113  @ 3.00GHz\n</code></pre> Linux Time for 100 cycles (s) Start Maxima and quit 43 Start STACK  and quit 124 Process AtAlgEquiv 133 <p>Without optimising Linux, compared to processing one AtAlgEquiv, there is approximately 93% overhead in starting the maxima process.</p> Optimised Linux Time for 100 cycles (s) Start STACK and quit 12 Process AtAlgEquiv 16 Process 100 AtAlgEquiv 104 Process 100 plot 117 <p>The PHP processing time is almost insignificant against the time it takes to initiate and use the CAS.</p> <p>With the optimised Linux we have reduced the loading time, and the loading overhead considerably.  A single ATAlgEquiv request takes about 0.04s.  Asking for 100 ATAlgEquiv requests in a single session take 0.0092s per request.  Asking for 100 plot commands takes 1.05s per plot - which is rather slow (plots undertake a large number of floating point calculations). The overhead times for loading Maxima might be reduced, and smoothed out by using the Maxima pool, see http://github.com/maths/stack_util_maximapool for an implementation of this.  The computation times are difficult to reduce.</p> <p>Memory appears to be modest: the optimised Linux takes about 15Mb of memory per process.</p>"},{"location":"en/Installation/Optimising_Maxima/#compiling-a-maxima-image","title":"Compiling a Maxima image","text":"<p>The following was tested in March 2016 on CENTOS.  It is for compiling a Maxima image.  Really this is mostly for developers.</p> <pre><code>sudo yum install sbcl texinfo rpm-build\ncd ~\nwget http://dl.fedoraproject.org/pub/fedora/linux/updates/22/SRPMS/m/maxima-5.36.1-2.fc22.src.rpm\nrpm -i maxima-5.36.1-2.fc22.src.rpm\ncd rpmbuild\nrpmbuild -ba SPECS/maxima.spec\ncd RPMS/x86_64\nsudo yum remove maxima\nsudo yum install maxima-runtime-sbcl-5.36.1-2.el6.x86_64.rpm maxima-5.36.1-2.el6.x86_64.rpm\n</code></pre> <p>The following was tested in March 2016 on Ubuntu 14.04.4 LTS (GNU/Linux 3.13.0-79-generic x86_64) (Trusty). Install dependencies:</p> <pre><code>sudo apt-get -y install clisp texinfo\n</code></pre> <p>Then run:</p> <pre><code>cd ~\nwget -O maxima_source.tar.gz http://sourceforge.net/projects/maxima/files/Maxima-source/5.36.1-source/maxima-5.36.1.tar.gz/download\ntar zxvf maxima_source.tar.gz\ncd maxima-5.36.1\n./configure --with-clisp\nmake --silent\nsudo make install --silent\nmaxima --list-avail\n</code></pre>"},{"location":"en/Installation/Release_notes_4_4_x/","title":"Release notes for STACK 4.4.x","text":"<p>STACK version 4.4.0 was released in July 2022.  This was a major rewrite of the PRT and CASText systems, with a focus on performance and limitations of the previous systems.  This release has changed/tightened up some question authoring causing some problems with existing questions.  For this reason we have written these dedicated release notes.</p>"},{"location":"en/Installation/Release_notes_4_4_x/#issue-foreach-blocks-over-zero-length-lists","title":"Issue: <code>[[ foreach ]]</code> blocks over zero length lists.","text":"<p><code>[[ foreach ]]</code> blocks over a list that happens to have length zero causes \"text rendering error\" if reference to the non-existent element is made, even though the loop is not run: e.g.</p> <pre><code>[[ foreach item=\"[]\" ]]  {@item@}   [[/ foreach ]].\n</code></pre> <p>(Note without the <code>{@item@}</code> it runs fine.)</p> <p>Solution Protect loop with an <code>[[ if  ]]</code> block on the length of the list.</p>"},{"location":"en/Installation/Release_notes_4_4_x/#issue-bad-interaction-between-ordergreat-and-exdowncase","title":"Issue: Bad interaction between <code>ordergreat</code> and <code>exdowncase</code>","text":"<p>This is a more serious problem, see https://github.com/maths/moodle-qtype_stack/issues/887 for updates.</p> <p>One solution is to test for <code>exdowncase(sans)=exdowncase(tans)</code> [not just <code>tans</code>].</p>"},{"location":"en/Installation/Release_notes_4_4_x/#issue-automatically-calculated-numerical-teachers-answer-might-now-include-brackets","title":"Issue: Automatically calculated numerical teachers answer might now include brackets","text":"<p>Automatically calculated numerical teachers answer might now include brackets: ( -(3/8)), which is a problem if the input forbade brackets!, causing Question Test failure.</p> <p>Solution: Don't forbid input of brackets!</p>"},{"location":"en/Installation/Release_notes_4_4_x/#issue-when-selecting-function-names-from-a-list","title":"Issue: when selecting function names from a list.","text":"<p>When using something like</p> <pre><code>func:rand([sin,cos,exp,ln]);\nis(equal(func,ln));\n</code></pre> <p>now returns unknown. Used to return true/false.</p> <p>Solution: First generate a random integer. Set <code>func</code> based on that, and test the value of the integer. (Not as neat!)</p>"},{"location":"en/Installation/Release_notes_4_4_x/#issue-mathjax","title":"Issue: MathJax","text":"<p>Mathjax no longer likes   <code>\\begin{pmatrix}{@xx@}\\\\{@yy@}\\end{pmatrix}</code> in castext.</p> <p>Solution: make sure there is a space between <code>\\\\</code> and <code>{@yy@}</code>.  (Better!) Define the vector to be a maxima object and display that instead.</p>"},{"location":"en/Installation/Release_notes_4_4_x/#issue-cas-text-comments-delineated-with-are-rendered","title":"Issue: CAS text comments delineated with / ... / are rendered","text":"<p>Solution:  Use  <code>[[ comment ]] ... [ [/ comment ]]</code></p>"},{"location":"en/Installation/Release_notes_4_4_x/#issue-fatal-error-causing-an-exception-and-then-displaying-nothing","title":"Issue: Fatal error causing an exception and then displaying nothing.","text":"<p>Solution: \"tans\" PRT node entry ended with semicolon: Delete the semi-colon!  We now have error trapping for this problem.</p>"},{"location":"en/Installation/Release_notes_4_4_x/#issue-taylor-now-returns-a-maxima-taylor-series-object","title":"Issue: <code>taylor</code> now returns a maxima taylor series object","text":"<p><code>taylor</code> now returns a maxima taylor series object (as it should!) rather than a normal algebraic expression (as it did!) Solution use <code>expand(taylor( ... ) )</code> to get a normal algebraic object. (May then also need to set <code>powerdisp:true</code> to get the usual ordering of terms)</p> <p>This is one consequence of the single call to Maxima.  Previously there was some string input/output which lost the data type information.</p>"},{"location":"en/Installation/Release_notes_4_4_x/#issue-rounding-of-numerical-quantities","title":"Issue: rounding of numerical quantities.","text":"<p>The answer test <code>AlgEquiv</code> now does not think floats are equivalent, even though they look identical when displayed in decimal.</p> <p>Solution: don't use the answer test <code>AlgEquiv</code> for floats, use a numerical answertest instead.</p> <p>This is one consequence of the single call to Maxima.  Previously there was some string input/output which created numerical rounding. This rounding no longer happens, causing the apparent problem.  Examples are given in the documentation on numbers instead.</p>"},{"location":"en/Installation/STACK_versions/","title":"STACK version map","text":"<p>This file contains a mapping between the Moodle plugin version number and STACK release name. To be used for communication. </p> <p>To generate a row for this table, use the command <code>cli/getversionstring.php</code>, remeber to do that when releasing.</p> Release Version number Supported Maxima versions 4.11.0 2025102100 5.40.0, 5.41.0, 5.42.0, 5.42.1, 5.42.2, 5.43.0, 5.43.1, 5.43.2, 5.44.0, 5.46.0, 5.47.0 4.10.0 2025073100 5.40.0, 5.41.0, 5.42.0, 5.42.1, 5.42.2, 5.43.0, 5.43.1, 5.43.2, 5.44.0, 5.46.0, 5.47.0 4.9.1 2025040200 5.40.0, 5.41.0, 5.42.0, 5.42.1, 5.42.2, 5.43.0, 5.43.1, 5.43.2, 5.44.0, 5.46.0, 5.47.0 4.9.0 2025033100 5.40.0, 5.41.0, 5.42.0, 5.42.1, 5.42.2, 5.43.0, 5.43.1, 5.43.2, 5.44.0, 5.46.0, 5.47.0 4.8.5 2025030700 5.40.0, 5.41.0, 5.42.0, 5.42.1, 5.42.2, 5.43.0, 5.43.1, 5.43.2, 5.44.0, 5.46.0, 5.47.0 4.8.3 2025012100 5.40.0, 5.41.0, 5.42.0, 5.42.1, 5.42.2, 5.43.0, 5.43.1, 5.43.2, 5.44.0, 5.46.0, 5.47.0 4.8.0 2024111500 5.40.0, 5.41.0, 5.42.0, 5.42.1, 5.42.2, 5.43.0, 5.43.1, 5.43.2, 5.44.0, 5.46.0, 5.47.0 4.7.0 2024072400 5.40.0, 5.41.0, 5.42.0, 5.42.1, 5.42.2, 5.43.0, 5.43.1, 5.43.2, 5.44.0, 5.46.0, 5.47.0 4.6.0 2024060300 5.40.0, 5.41.0, 5.42.0, 5.42.1, 5.42.2, 5.43.0, 5.43.1, 5.43.2, 5.44.0, 5.46.0, 5.47.0 4.5.0 2023121100 5.40.0, 5.41.0, 5.42.0, 5.42.1, 5.42.2, 5.43.0, 5.43.1, 5.43.2, 5.44.0, 5.46.0, 5.47.0 4.4.5 2023072101 5.40.0, 5.41.0, 5.42.0, 5.42.1, 5.42.2, 5.43.0, 5.43.1, 5.43.2, 5.44.0, 5.46.0, 5.47.0 4.4.4 2023060500 5.40.0, 5.41.0, 5.42.0, 5.42.1, 5.42.2, 5.43.0, 5.43.1, 5.43.2, 5.44.0 4.4.3 2023052400 5.38.1, 5.39.0, 5.40.0, 5.41.0, 5.42.0, 5.42.1, 5.42.2, 5.43.0, 5.43.1, 5.43.2, 5.44.0 4.4.2 2023010400 5.38.1, 5.39.0, 5.40.0, 5.41.0, 5.42.0, 5.42.1, 5.42.2, 5.43.0, 5.43.1, 5.43.2, 5.44.0 4.4.1 2022082900 5.38.1, 5.39.0, 5.40.0, 5.41.0, 5.42.0, 5.42.1, 5.42.2, 5.43.0, 5.43.1, 5.43.2, 5.44.0 4.4.0 2022071300 5.38.1, 5.39.0, 5.40.0, 5.41.0, 5.42.0, 5.42.1, 5.42.2, 5.43.0, 5.43.1, 5.43.2, 5.44.0 4.3.11 2022060100 5.38.1, 5.39.0, 5.40.0, 5.41.0, 5.42.0, 5.42.1, 5.42.2, 5.43.0, 5.43.1, 5.43.2, 5.44.0 4.3.10 2021120900 5.38.1, 5.39.0, 5.40.0, 5.41.0, 5.42.0, 5.42.1, 5.42.2, 5.43.0, 5.43.1, 5.43.2, 5.44.0 4.3.8 2020120600 5.38.1, 5.39.0, 5.40.0, 5.41.0, 5.42.0, 5.42.1, 5.42.2, 5.43.0, 5.43.1, 5.43.2, 5.44.0 4.3.7 2020101501 5.38.1, 5.39.0, 5.40.0, 5.41.0, 5.42.0, 5.42.1, 5.42.2 4.3.6 2020100900 5.38.1, 5.39.0, 5.40.0, 5.41.0, 5.42.0, 5.42.1, 5.42.2 4.3.4 2020070100 5.38.1, 5.39.0, 5.40.0, 5.41.0, 5.42.0, 5.42.1, 5.42.2 4.3.3 2020061000 5.38.1, 5.39.0, 5.40.0, 5.41.0, 5.42.0, 5.42.1, 5.42.2 4.3.2 2020052700 5.38.1, 5.39.0, 5.40.0, 5.41.0, 5.42.0, 5.42.1, 5.42.2 4.3.1 2020042000 5.38.1, 5.39.0, 5.40.0, 5.41.0, 5.42.0, 5.42.1, 5.42.2 4.3.0 2020040300 5.23.2, 5.25.1, 5.26.0, 5.27.0, 5.28.0, 5.30.0, 5.31.1, 5.31.2, 5.31.3, 5.32.0, 5.32.1, 5.33.0, 5.34.0, 5.34.1, 5.35.1,3.35.1.2, 5.36.0, 5.36.1, 5.37.3, 5.38.0, 5.38.1, 5.39.0, 5.40.0, 5.41.0, 5.42.0, 5.42.1, 5.42.2 4.2.3 2020013100 5.23.2, 5.25.1, 5.26.0, 5.27.0, 5.28.0, 5.30.0, 5.31.1, 5.31.2, 5.31.3, 5.32.0, 5.32.1, 5.33.0, 5.34.0, 5.34.1, 5.35.1,3.35.1.2, 5.36.0, 5.36.1, 5.37.3, 5.38.0, 5.38.1, 5.39.0, 5.40.0, 5.41.0, 5.42.0, 5.42.1, 5.42.2 4.2.2 2019090200 5.23.2, 5.25.1, 5.26.0, 5.27.0, 5.28.0, 5.30.0, 5.31.1, 5.31.2, 5.31.3, 5.32.0, 5.32.1, 5.33.0, 5.34.0, 5.34.1, 5.35.1,3.35.1.2, 5.36.0, 5.36.1, 5.37.3, 5.38.0, 5.38.1, 5.39.0, 5.40.0, 5.41.0, 5.42.0, 5.42.1, 5.42.2 4.2.1 2018080600 5.23.2, 5.25.1, 5.26.0, 5.27.0, 5.28.0, 5.30.0, 5.31.1, 5.31.2, 5.31.3, 5.32.0, 5.32.1, 5.33.0, 5.34.0, 5.34.1, 5.35.1,3.35.1.2, 5.36.0, 5.36.1, 5.37.3, 5.38.0, 5.38.1, 5.39.0, 5.40.0, 5.41.0 4.2 2018073000 5.23.2, 5.25.1, 5.26.0, 5.27.0, 5.28.0, 5.30.0, 5.31.1, 5.31.2, 5.31.3, 5.32.0, 5.32.1, 5.33.0, 5.34.0, 5.34.1, 5.35.1,3.35.1.2, 5.36.0, 5.36.1, 5.37.3, 5.38.0, 5.38.1, 5.39.0, 5.40.0, 5.41.0 <p>Note that the release name here is for the Moodle plugin release. For ILIAS versions check for example https://github.com/mathinstitut/goemaxima or ILIAS sites.</p>"},{"location":"en/Installation/Testing_installation/","title":"Testing Installation","text":"<p>It is important to confirm that STACK has been installed correctly, and that it is connecting to the CAS.</p>"},{"location":"en/Installation/Testing_installation/#stack-configuration-page","title":"STACK configuration page","text":"<p>STACK provides a number of options.  To set these you must login as the Moodle site Administrator.  Navigate to</p> <pre><code>Site administration -&gt; Plugins -&gt; Question Types -&gt; STACK\n</code></pre>"},{"location":"en/Installation/Testing_installation/#healthcheck-script","title":"Healthcheck script","text":"<p>To confirm if the PHP scripts are connecting to Maxima navigate to the STACK configuration page (see above).  Choose the link to the \"healthcheck script\".</p> <p>The healthcheck script checks the following.</p> <ul> <li>Check LaTeX is being converted correctly?  Check MathJax or another LaTeX converter.</li> <li>Can PHP call external applications?  No, then change PHP settings.</li> <li>Can PHP call Maxima? No, then see below.</li> <li>Does Maxima support unicode?  Distributed versions of Maxima do (as of July 2023) but if you compile Maxima from source then you must include unicode support.</li> <li>Graph plotting. Are auto-generated plots being created correctly?  There should be two different graphs.  If not, check the gnuplot settings, and directory permissions.</li> </ul> <p>The CAS-debug option in the STACK settings will provide a very verbose output which is indispensable at this stage.  Turn this off for production servers, as it is wasteful of storage, particularly when caching results.</p> <p>If PHP does not connect to Maxima then please see the \"Troubleshooting\" section below.</p>"},{"location":"en/Installation/Testing_installation/#maxima-optional-packages","title":"Maxima optional packages","text":"<p>Maxima has a wide range of optional libraries.  Which are loaded on your server is set with the option <code>qtype_stack | maximalibraries</code> from the STACK question type settings page. Currently the default setting is to load the following optional Maxima packages whenever Maxima is used.</p> <pre><code>stats, distrib, descriptive\n</code></pre> <p>We need to support STACK in a wide range of situations. In production environments system admins have asked us to check packages do not write files to the server, or have other server-side effects.  E.g. the plot2d command executes a <code>gnuplot</code> process on the server for example.  For this reason only some optional packages can be loaded into STACK.  Currently the only supported packages are</p> <pre><code>stats, distrib, descriptive\n</code></pre> <p>If you wish to subvert this process you will need to alter the source code of STACK.  If you have authority on your server to modify the source code you already have some level of responsibility and trust on the server!  In the file <code>/stack/cas/installhelper.class.php</code>, there is a static class <code>$maximalibraries</code> which contains the list of permitted libraries.</p>"},{"location":"en/Installation/Testing_installation/#caching-cas-output","title":"Caching CAS output","text":"<p>By default, the interactions with the CAS are cached.  You can connect freshly to the CAS each time, which is useful for  debugging, and this option is available on the STACK configuration page.  To clear the cache, click the button on the healthcheck script.</p>"},{"location":"en/Installation/Testing_installation/#optimizing-maxima","title":"Optimizing Maxima","text":"<p>Maxima is the rate-determining step in performance to STACK. Once you have the STACK question type working with a direct connection to the CAS, then you should consider optimizing the  performance of Maxima.  See the page dedicated to optimizing Maxima</p>"},{"location":"en/Installation/Testing_installation/#cas-chat","title":"CAS Chat","text":"<p>At any stage you can evaluate a fragment of CASText by using the CASChat script.  There is a link from the STACK configuration page.</p>"},{"location":"en/Installation/Testing_installation/#testing-your-questions-when-you-upgrade","title":"Testing your questions when you upgrade","text":"<p>We have a whole section of the documentation dedicated to maintaining questions for the longer term.</p> <p>Please check the release notes carefully.</p> <p>Whenever you upgrade to a new version of the STACK plugin, it is a really good idea to run all of the question tests to be sure that the behaviour of STACK has not changed in a way that breaks any of your questions. To do this, go to</p> <pre><code>Site administration -&gt; Plugins -&gt; Question types -&gt; STACK\n</code></pre> <p>and follow the \"run the question tests in bulk script\" link.</p> <p>It is even possible, with a bit of hacking, to execute the question tests from one Moodle site on a different Moodle site. For example you may be evaluating the latest release of STACK on a test server, and you would like to know if the upgrade will break any of your existing questions. (And you don't want to do a lot of exporting and importing.)</p>"},{"location":"en/Installation/Testing_installation/#using-a-local-mathjax-installation-with-jsxgraph","title":"Using a local MathJax installation with JSXGraph","text":"<p>If you are using a local distribution of MathJax instead of a content-delivery-network (CDN), you will need to make sure that your web server is configured properly. Otherwise, advanced features that are rendered in separate iframes (e.g., JSXGraph) will likely fail to render MathJax formulas.</p> <p>You can determine if you are using a local copy of MathJax by checking the admin setting <code>filter_mathjax | httpsurl</code>. If this is set to a local URL, such as <code>/lib/mathjax/MathJax.js</code>, you are using a local copy of MathJax and must ensure that your web server sends the correct CORS headers for the MathJax files.</p> <p>In order to allow MathJax to load correctly, your web server must serve a valid <code>Access-Control-Allow-Origin</code> header with the MathJax files. The following sections provide guidance on how to configure different web servers and confirm that the configuration works.</p>"},{"location":"en/Installation/Testing_installation/#configuring-apache","title":"Configuring Apache","text":"<p>Apache allows setting the CORS headers via your web server configuration or via an <code>.htaccess</code> file. Using the web server configuration is preferred and described here.</p> <ol> <li>Activate the <code>headers</code> module if it is not already enabled: <code>a2enmod headers</code></li> <li> <p>Add the following to the Apache configuration for your Moodle <code>VirtualHost</code>:</p> <p><code>&lt;Directory /var/www/moodle/lib/mathjax/&gt;    Header set Access-Control-Allow-Origin \"*\" &lt;/Directory&gt;</code> 3. Check that your configuration is valid: <code>apachectl configtest</code> 4. Reload the Apache configuration: <code>systemctl reload apache2</code> (or similar)</p> </li> </ol> <p>Note: Replace <code>/lib/mathjax/</code> with the actual path to your MathJax files if it differs.</p>"},{"location":"en/Installation/Testing_installation/#configuring-nginx","title":"Configuring Nginx","text":"<p>With nginx, you can add the CORS header directly via your web server configuration through a designated location block.</p> <ol> <li> <p>Add the following to the nginx configuration that serves your Moodle site:</p> <p><code>location /lib/mathjax/ {     add_header 'Access-Control-Allow-Origin' '*'; }</code> 2. Check that your configuration is valid: <code>nginx -t</code> 3. Reload the nginx configuration: <code>nginx -s reload</code> (or similar)</p> </li> </ol> <p>Note: Replace <code>/lib/mathjax/</code> with the actual path to your MathJax files if it differs.</p>"},{"location":"en/Installation/Testing_installation/#testing-cors-headers","title":"Testing CORS headers","text":"<p>You can check if your web server is configured correctly using the command line utility <code>curl</code>.</p> <ol> <li>Determine the URL of your MathJax installation. Example: <code>http://mymoodle.localhost/lib/mathjax/MathJax.js</code></li> <li>Request the MathJax file and check the response headers: <code>curl -I http://mymoodle.localhost/lib/mathjax/MathJax.js</code></li> <li>Ensure that the response headers include <code>Access-Control-Allow-Origin: *</code>.</li> </ol> <p>To test the MathJax rendering within JSXGraph:</p> <ol> <li>Create a new STACK question.</li> <li> <p>Add a basic JSXGraph element that makes use of MathJax rendering:</p> <p><code>[[jsxgraph]]     JXG.Options.text.useMathJax = true;     let board = JXG.JSXGraph.initBoard(divid);     board.create('text',[0,0,'This should be LaTex: \\\\(\\\\int_{\\\\pi}^{\\\\phi}x\\\\textrm{d}x\\\\)']) [[/jsxgraph]]</code> 3. Preview the question and make sure that the MathJax formula is rendered correctly.</p> </li> </ol> <p>If the rendering fails, check the developer console of your browser for any errors related to MathJax or CORS issues.</p>"},{"location":"en/Installation/Testing_installation/#troubleshooting-an-installupgrade","title":"Troubleshooting an install/upgrade","text":"<p>When you upgrade, the STACK plugin will try to automatically recreate the optimised Maxima image.  Occasionally this will not work and you will need to troubleshoot why.</p>"},{"location":"en/Installation/Testing_installation/#1-goal-maxima-works-on-the-server","title":"1. GOAL: maxima works on the server","text":"<p>Check Maxima is installed and working.  E.g. type <code>maxima</code> on the command line, and try a non-trivial calculation such as <code>diff(sin(x^2),x);</code> to confirm Maxima is working.</p> <p>Use <code>quit();</code> to exit.</p>"},{"location":"en/Installation/Testing_installation/#2-goal-stack-works","title":"2. GOAL: STACK works!","text":"<p>Next, check STACK is working without the optimised image, and without caching.  The STACK settings are defined on the plugin page.</p> <pre><code>Site administration -&gt; Plugins -&gt; Question Types -&gt; STACK\n</code></pre> <p>To set these you must login as the Moodle site Administrator.  Take note of your old settings and save the following settings.</p> <pre><code>qtype_stack | platform = Linux\nqtype_stack | maximaversion = default\nqtype_stack | casresultscache = Do not cache\nqtype_stack | castimeout = 100\nqtype_stack | maximacommand =\nqtype_stack | maximacommandopt =\nqtype_stack | maximalibraries =\n</code></pre> <p>Note that the <code>maximacommand</code>, <code>maximacommandopt</code> and <code>maximalibraries</code> should be empty boxes.</p> <p>The <code>castimeout</code> of 100s is excessive. However, the very first time Maxima is called on a server it internally compiles a lot of LISP source code.  This can take a surprisingly long time!</p>"},{"location":"en/Installation/Testing_installation/#3-goal-reduce-timeout-and-check-maxima-libraries","title":"3. GOAL: Reduce timeout and check Maxima libraries.","text":"<p>Now we need to back away gently from the above raw configuration, back towards the defaults/production settings.</p> <pre><code>qtype_stack | castimeout = 10\nqtype_stack | maximalibraries = stats, distrib, descriptive, simplex\n</code></pre> <p>Not all versions of Maxima have the stats libraries, but if you do have them add them back now.  You can check whether you have each library individually on the command line by typing <code>load(\"stats\");</code> (etc.)  Save these settings and run the healthcheck script.</p>"},{"location":"en/Installation/Testing_installation/#4-goal-choose-a-specific-maxima-version-optional","title":"4. GOAL: choose a specific maxima version (optional).","text":"<p>If you want to choose a specific version of Maxima now is the time to do so by selecting</p> <pre><code>qtype_stack | maximaversion\n</code></pre> <p>from the dropdown.  Part of the healthcheck script will tell you which version you have on your server or use <code>maxima --list-avail</code> on the command line.  If your version does not appear on the dropdown (and it won't if you compiled Maxima from source) then set <code>maximacommand</code> to be the command you need to type.  E.g. if you use <code>maxima --use-version=5.42.1</code> on the command line then</p> <pre><code>qtype_stack | maximacommand = maxima --use-version=5.42.1\n</code></pre> <p>Save these settings and run the healtcheck script.</p>"},{"location":"en/Installation/Testing_installation/#5-goal-check-libraries-in-maxima","title":"5. Goal: check libraries in Maxima","text":"<p>The setting <code>qtype_stack | maximalibraries</code> tries to load some optional Maxima libraries.  Not all versions of Maxima have these libraries, which can be confusing.</p> <p>Only supported library names can be used.  For example try the following.</p> <pre><code>qtype_stack | maximalibraries = stats, distrib, descriptive, simplex\n</code></pre> <p>Save these settings and run the healtcheck script.</p> <p>Note, internally in Maxima this is equivalent to typing <code>load(stats);</code> in at the Maxima command line for each library in the list.  You can try this in step 1 above to check each library you want to load by hand.</p> <p>If you get the following error <code>loadfile: failed to load /usr/share/maxima/5.32.1/share/draw/draw.lisp</code> then remove the optional libraries from <code>qtype_stack | maximalibraries</code>.  I.e. set this to blank and re-try the healthcheck.  (One of the stats libraries also tries to load the draw library.)</p>"},{"location":"en/Installation/Testing_installation/#6-goal-create-optimised-image","title":"6. Goal: create optimised image.","text":"<p>Now press the \"Create Maxima Image\" button on the healthcheck script page to create the optimised image, and read the output of the refreshed healthcheck page.  Note, this page updates some of your settings in the plugin page. In particular, it changes <code>qtype_stack | platform</code> to optimised and fills in the value of <code>qtype_stack | maximacommandopt</code>.</p> <p>Reload the plugin page (but don't save over the top).</p> <p>The maxima image is stored in a sub-directory of moodle's <code>dataroot</code> directory, specifically in <code>dataroot/stack</code>.  This is defined in Moodle's <code>config.php</code> as, for example,</p> <pre><code>$CFG-&gt;dataroot  = '/var/data/moodle311';\n</code></pre> <p>The optimised image will therefore be something like</p> <pre><code>/var/data/moodle311/stack/maxima_opt_auto'\n</code></pre> <p>and the command to execute this (with a timeout) will be</p> <pre><code>timeout --kill-after=10s 10s /var/data/moodle311/stack/maxima_opt_auto -eval '(cl-user::run)'\n</code></pre> <p>The PHP process must have permission to write to this directory.  If your optimised image was not created please check the file permissions, check the file exists and try to run the command <code>maximacommandopt</code> from the server command line.  If the current optimised image was created by a different user (e.g. during command-line install) you may not have permission to replace it.</p> <p>(The precise name of the Maxima image depends on the LISP version, e.g. <code>maxima_opt_auto</code> is generated by GCL.)</p>"},{"location":"en/Installation/Testing_installation/#7-goal-use-the-cas-cache","title":"7. Goal: use the CAS cache.","text":"<p>The very last step is to use the CAS cache.</p> <pre><code>qtype_stack | casresultscache = Cache in the database\n</code></pre> <p>This should be a working server, using the optimised image.  Please consider using the Maxima Pool for production sites, putting Maxima onto another server completely.</p>"},{"location":"en/Moodle/","title":"STACK within the Moodle VLE.","text":"<p>This section contains useful information about using STACK within the Moodle VLE.</p> <ul> <li>Finding the question bank,</li> <li>Creating a quiz,</li> <li>Importing and exporting.</li> </ul>"},{"location":"en/Moodle/Import_Export/","title":"Import and Export of STACK questions","text":"<p>STACK questions use the \"Moodle XML format\" to import and export.</p>"},{"location":"en/Moodle/Import_Export/#importing-stack-questions","title":"Importing STACK questions","text":"<p>Go to</p> <pre><code>Question bank =&gt; Import\n</code></pre> <p>Choose \"Moodle XML format\" and the question bank category you wish to import your questions to.  Then select files to import. </p> <p>STACK also comes with a large question bank.</p>"},{"location":"en/Moodle/Import_Export/#exporting-stack-questions","title":"Exporting STACK questions","text":"<p>There are two ways to export STACK questions.</p> <ol> <li>The normal Moodle procedure is to export whole category of questions at one time through the Moodle question bank.  To export a selection of questions, you need to move them into a separate category.  This can be any mix of STACK and other Moodle questions.  You must choose \"Moodle XML format\" as the file format.</li> <li>To export a single STACK question as \"Moodle XML format\".</li> <li>Preview the question.</li> <li>Follow the link to \"Question tests &amp; deployed variants\".</li> <li>Export this question.</li> </ol> <p>This export mechanism is only available to STACK questions and no other question types in Moodle.</p>"},{"location":"en/Moodle/Import_Export/#migrating-stack-23-questions-to-stack-4","title":"Migrating STACK 2/3 questions to STACK 4","text":"<p>STACK 4.0 has one important change in the question authoring.  CASText now uses <code>{@...@}</code> in include mathematics in the text.  The change from <code>@...@</code> to <code>{@...@}</code> gives us matching parentheses to parse, which is much better.  The <code>{..}</code> will not break LaTeX.</p> <p>You will need to update all your existing questions which include CAS calculations. This includes all fields, e.g. in the feedback as well.  To help with this process we have an automatic conversion script.  As an admin user navigate to</p> <pre><code>Site administration -&gt;\nPlugins -&gt;\nQuestion Types -&gt;\nSTACK\n</code></pre> <p>Then choose the link \"The fix maths delimiters script\".</p> <p>To Import STACK 2 questions you will need to install the <code>qformat_stack</code> importer before you can import STACK 2 questions.  When you import choose \"STACK2.0 format\" rather than Moodle XML.</p>"},{"location":"en/Moodle/Question_bank/","title":"How do I find the Moodle question bank?","text":"<p>To find the STACK questions login as a teacher.</p> <p>To begin, go to Moodle and navigate to your course's Course administration page and, from the Question bank section, click on Questions:</p> <p></p> <p>On the Question Bank page, press the 'Create new question' button:</p> <p></p> <p>From the 'Choose a question type to add' dialog select 'STACK' and press 'Add':</p> <p></p> <p>The 'Editing a STACK question' page is displayed. Now we can begin to create the actual question. Don't be put off by the amount of configuration options as, in order to get started, there are only a few we need to worry about.</p>"},{"location":"en/Moodle/Semi-automatic_Marking/","title":"Semi-automatic Marking","text":"<p>The primary goal of STACK is automatic marking of students' answers.  However, there are many situations where we want students to justify their answer, or provide a response which cannot be marked automatically.</p> <p>It is certainly possible to have students answer one of the other question types.  E.g. Moodle provides an \"essay\" question type in which students can type in their answer (essay?), or the teacher can permit students to upload a file, e.g. a picture of their written response.  The teacher can then mark this by hand.</p> <p>Another option is to automatically mark students' short answers using a question type such as the pattern match question type in Moodle.</p> <p>STACK provides the \"notes\" input type.  There are some advantages to using the notes input, rather than an essay.</p> <ol> <li>It is part of a STACK question, so students' answers can be between other parts of a multi-part question.</li> <li>When students \"validate\" their answer, any maths types in using LaTeX is displayed.  If the teacher shows validation then students get a preview of their answer, and LaTeX will be displayed.</li> </ol>"},{"location":"en/Moodle/Semi-automatic_Marking/#manual-grading","title":"Manual grading.","text":"<p>The notes input has a special extra option <code>manualgraded</code>, and the default option value is <code>manualgraded:false</code>.  If you specify <code>manualgraded:true</code> then the whole STACK question will require manual grading!</p> <p>There really is no way to mix automatic and manually graded parts of a question. Therefore, if you want automatic and manual marking you must have separate questions. </p>"},{"location":"en/Reference/","title":"Reference materials","text":"<p>This section contains reference materials which are useful, but generally not part of the STACK project.</p> <ol> <li>Actuarial notation</li> <li>The HELM project.</li> <li>Using LaTeX and HTML in questions.</li> </ol>"},{"location":"en/Reference/Actuarial/","title":"Notation used in actuarial work","text":"<p>There are a number of special notations particular to actuarial work.  For example, </p> <p> </p> <p>which is typeset using <code>\\[\\require{enclose} EPV = a _{[25]+5:\\enclose{actuarial}{30}} ^ {\\space 1}\\]</code>. Further examples are given below.</p>"},{"location":"en/Reference/Actuarial/#life-contingencies-symbols","title":"Life Contingencies' Symbols","text":"Inline Code (without LaTeX delimiters)  a  <code>a</code>  \\require{enclose} a_{\\enclose{actuarial}{K}}  <code>\\require{enclose} a_{\\enclose{actuarial}{K}}</code>  \\require{enclose} \\bar{a}_{\\enclose{actuarial}{T}}  <code>\\require{enclose} \\bar{a}_{\\enclose{actuarial}{T}}</code>  \\require{enclose} \\ddot{a}_x  <code>\\require{enclose} \\ddot{a}_x</code>  \\require{enclose} \\bar{a}_{h}^{r}  <code>\\require{enclose} \\bar{a}_{h}^{r}</code>  \\require{enclose} \\ddot{a}_{x}^{\\{m\\}}  <code>\\require{enclose} \\ddot{a}_{x}^{\\{m\\}}</code>  \\require{enclose} a_{x:\\enclose{actuarial}{n}}  <code>\\require{enclose} a_{x:\\enclose{actuarial}{n}}</code>  \\require{enclose} \\bar{a}_{x:\\enclose{actuarial}{n}}  <code>\\require{enclose} \\bar{a}_{x:\\enclose{actuarial}{n}}</code>  \\require{enclose} \\ddot{a}_{x:\\enclose{actuarial}{n}}  <code>\\require{enclose} \\ddot{a}_{x:\\enclose{actuarial}{n}}</code>  \\require{enclose} \\ddot{a}_{x:\\enclose{actuarial}{n}}^{(m)}  <code>\\require{enclose} \\ddot{a}_{x:\\enclose{actuarial}{n}}^{(m)}</code>  \\require{enclose} \\mathring{a}_{x:\\enclose{actuarial}{n}}^{(m)}  <code>\\require{enclose} \\mathring{a}_{x:\\enclose{actuarial}{n}}^{(m)}</code>  \\require{enclose} \\ddot{a}_{x:\\enclose{actuarial}{n}}^{\\{m\\}}  <code>\\require{enclose} \\ddot{a}_{x:\\enclose{actuarial}{n}}^{\\{m\\}}</code>  \\require{enclose} \\bar{a}_{\\overline{x:\\enclose{actuarial}{n}}}  <code>\\require{enclose} \\bar{a}_{\\overline{x:\\enclose{actuarial}{n}}}</code>  \\require{enclose} {}^{2}\\bar{a}_{x:\\enclose{actuarial}{n}}  <code>\\require{enclose} {}^{2}\\bar{a}_{x:\\enclose{actuarial}{n}}</code>  \\require{enclose} {}^{2}\\ddot{a}_{xy:\\enclose{actuarial}{n}}  <code>\\require{enclose} {}^{2}\\ddot{a}_{xy:\\enclose{actuarial}{n}}</code> <p>STACK provides some support for statistical functions via optional Maxima packages.  See specific pages on statistics.</p>"},{"location":"en/Reference/HELM/","title":"HELM","text":"<p>During the summer of 2020, we started to convert the HELM workbooks into STACK quizzes.  The ultimate goal is to create and release one quiz for each of the .pdf workbooks.</p> <p>To help question authors work in parallel and yet achieve a consistent style we introduced the following style conventions which are now available to any STACK question.</p>"},{"location":"en/Reference/HELM/#key-points","title":"Key points","text":"<ul> <li>These appear in boxes in the original HELM workbooks.</li> <li>Do not include the numbers that appear in the PDFs (i.e. use \"Key Point\" rather than \"Key Point 1\")</li> </ul> Example Code <p>A generalisation of the third law of indices states:</p> Key Point <p> For all ... .</p> <pre>&lt;p&gt;A generalisation of the third law of indices states:&lt;/p&gt;\n&lt;div class=\"HELM_keypoint\"&gt;\n&lt;h4&gt;Key Point&lt;/h4&gt;\n&lt;p&gt;For all ... .&lt;/p&gt;\n&lt;/div&gt;</pre>"},{"location":"en/Reference/HELM/#examples","title":"Examples","text":"<ul> <li>Have a horizontal rule before them. They also have a horizontal rule after them, unless they are last in the text.</li> <li>Do not include the numbers that appear in the PDFs (i.e. use \"Example\" rather than \"Example 1\")</li> <li>The headings are &lt;h4&gt; with a special class applied to them for styling.</li> <li>Use the HELM_parts and HELM_parts_inline styles to label lists of parts (a), (b), (c), etc.</li> </ul> Example Code Example <p>Use a calculator to evaluate ... .</p> Solution <p>Using the ... button on the calculator check that you obtain ... .</p> <pre>&lt;hr&gt;\n&lt;h4 class=\"HELM_example\"&gt;Example&lt;/h4&gt;\n&lt;p&gt;Use a calculator to evaluate ... .&lt;/p&gt;\n&lt;h4 class=\"HELM_solution\"&gt;Solution&lt;/h4&gt;\n&lt;p&gt;Using the ... button on the calculator check that you obtain ... .&lt;/p&gt;</pre> Example <p>Identify the index and base in the following expressions. </p> <ol> <li> Ex 1. </li> <li> Ex 2. </li> <li> Ex 3. </li> </ol> Solution <ol> <li>In the expression ..., 8 is the base and 11 is the index.</li> <li>In the expression ..., -2 is the base and 5 is the index.</li> <li>In the expression ..., p is the base and -q is the index.<p> </p><p>The interpretation of a negative index will be given   in sub-section 4 which starts on page 31.</p></li> </ol> <pre>&lt;hr&gt;\n&lt;h4 class=\"HELM_example\"&gt;Example&lt;/h4&gt;\n&lt;p&gt;Identify the index and base in the following expressions. &lt;/p&gt;\n&lt;ol class=\"HELM_parts_inline\"&gt;\n&lt;li&gt; Ex 1. &lt;/li&gt;\n&lt;li&gt; Ex 2. &lt;/li&gt;\n&lt;li&gt; Ex 3. &lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h4 class=\"HELM_solution\"&gt;Solution&lt;/h4&gt;\n&lt;ol class=\"HELM_parts\"&gt;\n  &lt;li&gt;In the expression ..., 8 is the base and 11 is the index.&lt;/li&gt;\n  &lt;li&gt;In the expression ..., -2 is the base and 5 is the index.&lt;/li&gt;\n  &lt;li&gt;In the expression ..., p is the base and -q is the index.&lt;p&gt;\n  &lt;/p&gt;&lt;p&gt;The interpretation of a negative index will be given\n  in sub-section 4 which starts on page 31.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;</pre> <p>Hint: If &lt;hr&gt; doesn't work try preceding it with &lt;p&gt;&amp;nbsp;&lt;/p&gt;.</p>"},{"location":"en/Reference/HELM/#questions","title":"Questions","text":"<ul> <li>Start with heading \"Exercise\" - see below for styling. Note that these are numbered in the PDFs but do not copy the numbers. The Moodle quiz will take care of numbering the questions.</li> </ul> Example Code <p>Exercise</p> <pre>\u00a0&lt;p class=\"HELM_exercise\"&gt;Exercise&lt;/p&gt;</pre>"},{"location":"en/Reference/HTML/","title":"Most useful HTML","text":"<p>HTML Paragraphs (don't forget the end tag!)</p> <pre><code>&lt;p&gt;This is a paragraph&lt;/p&gt;\n&lt;p&gt;This is another paragraph&lt;/p&gt;\n</code></pre> <p>HTML Line Breaks</p> <p>Use the <code>&lt;br /&gt;</code> tag if you want a line break (a new line) without starting a new paragraph:</p> <pre><code>&lt;p&gt;This is&lt;br /&gt;a para&lt;br /&gt;graph with line breaks&lt;/p&gt;\n</code></pre> <p>Some formatting</p> <pre><code>&lt;em&gt;This is emphasis&lt;/em&gt;\n\n&lt;b&gt;This text is bold&lt;/b&gt;\n\n&lt;big&gt;This text is big&lt;/big&gt;\n\n&lt;i&gt;This text is italic&lt;/i&gt;\n\n&lt;code&gt;This is computer output&lt;/code&gt;\n\nThis is &lt;sub&gt;subscript&lt;/sub&gt; and &lt;sup&gt;superscript&lt;/sup&gt;\n</code></pre>"},{"location":"en/Reference/Latex/","title":"Useful LaTeX","text":"<p>LaTeX notation can specify inline or display mode for maths by delimiting with <code>\\(</code> or <code>\\[</code> respectively.  Here are some simple examples:</p> <ul> <li><code>x^2</code> gives  </li> <li><code>x_n</code> gives x_n </li> <li><code>x^{2x}</code> gives x^{2x} </li> <li><code>\\alpha\\beta</code> gives \\alpha\\beta </li> <li><code>\\sin(3\\pi x)</code> gives \\sin(3\\pi x) </li> <li><code>\\frac{1}{1-n^2}</code> gives \\frac{1}{1-n^2} when inline.  In display mode it gives:</li> </ul> <p>  \\frac{1}{1-n^2}  </p> <ul> <li><code>\\int_a^b x^2\\ dx</code> gives \\int_a^b x^2\\ dx when inline.  In display mode it gives:</li> </ul> <p>  \\int_a^b x^2\\ dx  </p>"},{"location":"en/STACK_question_admin/","title":"Testing, using and maintaining questions","text":"<p>STACK comes with a large library of tested questions.</p> <p>This section of the documentation provides information on testing questions and maintaining question banks for the long term.  The foundation of long-term maintenance is testing.  We strongly recommend all questions have question tests.</p> <p>This section assumes you have working questions, and it provides information on testing, using and maintaining questions.</p> <ul> <li>Creating question tests,</li> <li>Deploying variants,</li> <li>Reporting,</li> <li>Ensuring questions work in the future.</li> <li>Bulk testing and Bulk testing on other sites.</li> </ul> <p>Access to functions related to testing STACK questions and maintaining question banks for the long term is through the \"adminui\" page</p> <pre><code>[...]/question/type/stack/adminui/index.php\n</code></pre> <p>(or available from the qtype_stack plugin setting page).  To make use of these tools (in Moodle) users require the capability <code>qtype/stack:usediagnostictools</code> via Moodle's capability system.  We strongly recommend anyone who regularly writes STACK questions across more than one Moodle course be given this capability.  It enables the following:</p> <ul> <li>Bulk testing of questions, and efficient follow-up via direct links to the \"STACK question dashboard\" for questions of interest</li> <li>Identifying STACK questions using particular blocks, e.g. the \"todo\" block, or includes.</li> <li>Bulk change of the default settings.</li> <li>Direct connection to Maxima (with normal teacher privileges in place) through a \"Chat\" script</li> <li>Ability to view unit test results for STACK answer tests online, which acts as comprehensive documentation for the intended behaviour, with commentary.</li> </ul> <p>If your institution restricts site admin status, then this capability will allow a subset of users to access these functions. If it is not possible to get this capability, then Moodle site administrators will need to run the tests themselves and give you the results.</p> <p>When you upgrade, or before you upgrade, please check the release notes carefully.</p> <p>The foundation of long-term maintenance is testing.  We strongly recommend all questions have question tests.  As a minimum we recommend the following test cases.</p> <ol> <li>The answer a teacher recommends as the correct answer.</li> <li>Ensure not every answer is assessed as correct.</li> <li>Ideally, each separate feedback intended for students would be covered by a test case.</li> </ol> <p>Encourage question authors to future proof their materials.</p> <p>We have separate advice on fixing broken questions in a live quiz, or on upgrade.</p>"},{"location":"en/STACK_question_admin/#identifying-stack-questions-using-particular-blocks","title":"Identifying STACK questions using particular blocks","text":"<p>It is possible to identify questions for dependencies, such as use of JSXGraph, inclusion of external maxima code, or \"todo\" blocks.</p> <p>The dependency checker is available from the question setting page or from the \"adminui\" page</p> <pre><code>[...]/question/type/stack/adminui/index.php\n</code></pre> <p>See also the notes on [local usageAdvanced_reporting.mdmd) of STACK questions on your server.</p>"},{"location":"en/STACK_question_admin/#bulk-change-of-the-default-settings","title":"Bulk change of the default settings","text":"<p>You may need to upgrade question defaults over a range of questions. We recommend you do this offline, e.g. with the gitync project.</p>"},{"location":"en/STACK_question_admin/#import-and-replace-questions","title":"Import and replace questions","text":"<p>The STACK community developed an import question as new version plugin for Moodle.  This plugin allows you to import a question from a Moodle XML file as a new version of an existing question.  This is useful when a question is fixed/updated on an external site.</p>"},{"location":"en/STACK_question_admin/Advanced_reporting/","title":"Advanced reporting","text":"<p>There are a number of reporting options which are built-in and supported.  To use the features on this page requires Moodle admin permission.</p> <p>It is often useful to know numbers about STACK usage on your local server.  To do this we need to work in the Moodle database.  E.g.</p> <ol> <li>How many STACK questions were initialised for students during the last time interval?</li> <li>How many attempts those students made to those question during that time on average?</li> <li>Which courses had most attempts and which courses had the most STACK questions in use?</li> <li>Question bank status by course, how many questions were in use, which questions have not been used for a long time?</li> <li>Quiz/activity usage, i.e. in what context are the questions being used and for example how many questions are present in a quiz by average?</li> <li>Duplicate questions, how many copies of the same questions are present in the question banks?</li> </ol> <p>To get this kind of data you will need the Ad-hoc database queries plugin.</p>"},{"location":"en/STACK_question_admin/Advanced_reporting/#examples-of-queries","title":"Examples of queries","text":"<p>Below are examples of SQL queries that may be useful.</p> <p>Please contribute additional queries to the developers.</p>"},{"location":"en/STACK_question_admin/Advanced_reporting/#find-questions-with-a-given-string-in-the-question-variables","title":"Find questions with a given string in the question variables","text":"<p>This can be useful, e.g. to find all questions that include the use of a particular function.</p> <pre><code>SELECT DISTINCT\n  c.id as courseid,\n  c.shortname,\n  c.fullname,\n  concat('%%WWWROOT%%/question/bank/editquestion/question.php%%Q%%cmid=',c.id,'&amp;id=',q.id) as name_link_url,\n  qs.questionvariables,\n  q.*\nFROM {quiz} quiz\n    JOIN {course} c ON c.id = quiz.course\n    JOIN {quiz_slots} slot ON slot.quizid = quiz.id\n    LEFT JOIN {question_references} qr ON qr.component = 'mod_quiz' AND qr.questionarea = 'slot' AND qr.itemid = slot.id\n    LEFT JOIN {question_bank_entries} qbe ON qbe.id = qr.questionbankentryid\n    LEFT JOIN {question_versions} qv ON qv.questionbankentryid = qbe.id\n    LEFT JOIN {question} q ON q.id = qv.questionid\n    LEFT JOIN {qtype_stack_options} qs ON q.id = qs.questionid\nWHERE (\n    qs.questionvariables REGEXP CONCAT(:search_string)\n)\n</code></pre>"},{"location":"en/STACK_question_admin/Advanced_reporting/#number-of-times-each-student-attempted-each-quiz-question","title":"Number of times each student attempted each quiz question","text":"<p>Note that for courses with many questions/students, this will likely return too many results to be displayed -- in which case, the next query might be more useful instead, as it sums up the number of attempts across all students</p> <pre><code>SELECT \n  q.name AS quiz, \n  MIN(qa.slot) AS slot, \n  que.name AS question, \n  u.id AS student_id, \n  COALESCE(\n    SUM(\n      (\n        que.qtype = 'stack' \n        AND (\n          LOCATE('[score]', qa.responsesummary) &gt; 0\n        )\n      ) \n      OR (\n        que.qtype &lt;&gt; 'stack' \n        AND LENGTH(qa.responsesummary) &gt; 0\n      )\n    ), \n    0\n  ) AS 'num_attempts_by_student' \nFROM \n  {quiz_attempts} quiza \n  JOIN {quiz} q ON q.id = quiza.quiz \n  JOIN {question_usages} qu ON qu.id = quiza.uniqueid \n  JOIN {question_attempts} qa ON qa.questionusageid = qu.id \n  JOIN {question} que ON que.id = qa.questionid \n  JOIN {user} u ON u.id = quiza.userid \nWHERE \n  q.course = :course_id \n  AND que.qtype &lt;&gt; 'description' \nGROUP BY \n  quiz, \n  question, \n  u.id \nORDER BY \n  quiz, \n  slot, \n  student_id\n</code></pre>"},{"location":"en/STACK_question_admin/Advanced_reporting/#number-of-times-each-question-has-been-attempted","title":"Number of times each question has been attempted","text":"<pre><code>SELECT \n  q.name AS quiz, \n  MIN(qa.slot) AS slot, \n  que.name AS question, \n  COALESCE(\n    SUM(\n      (\n        que.qtype = 'stack' \n        AND (\n          LOCATE('[score]', qa.responsesummary) &gt; 0\n        )\n      ) \n      OR (\n        que.qtype &lt;&gt; 'stack' \n        AND LENGTH(qa.responsesummary) &gt; 0\n      )\n    ), \n    0\n  ) AS 'num_attempts' \nFROM \n  {quiz_attempts} quiza \n  JOIN {quiz} q ON q.id = quiza.quiz \n  JOIN {question_usages} qu ON qu.id = quiza.uniqueid \n  JOIN {question_attempts} qa ON qa.questionusageid = qu.id \n  JOIN {question} que ON que.id = qa.questionid\nWHERE \n  q.course = :course_id \n  AND que.qtype &lt;&gt; 'description' \nGROUP BY \n  quiz, \n  question\nORDER BY \n  quiz, \n  slot\n</code></pre>"},{"location":"en/STACK_question_admin/Advanced_reporting/#legacy-examples","title":"Legacy examples","text":"<p>These queries were last updated in April 2020 (and are not actively maintained as a core part of STACK).</p>"},{"location":"en/STACK_question_admin/Advanced_reporting/#the-number-of-questions-that-students-have-interacted-with","title":"The number of questions that students have interacted with","text":"<p>That is the number of questions that students have interacted with.</p> <pre><code>SELECT COUNT(1)\nFROM {question_attempts} qa\nJOIN {question} q ON q.id = qa.questionid\nJOIN {quiz_attempts} quiza ON quiza.uniqueid = qa.questionusageid\nWHERE quiza.preview = 0\nAND q.qtype = 'stack'\nAND qa.timemodified BETWEEN %%STARTTIME%% AND %%ENDTIME%%\n</code></pre> <p>And, here is a query that does number of questions attempted (ever) by course</p> <pre><code>SELECT c.shortname AS Website, COUNT(1) AS Number_of_STACK_questions_attempted\n\nFROM {question_attempts} qa\nJOIN {question} q ON q.id = qa.questionid\nJOIN {quiz_attempts} quiza ON quiza.uniqueid = qa.questionusageid\nJOIN {quiz} quiz ON quiz.id = quiza.quiz\nJOIN {course} c ON c.id = quiz.course\n\nWHERE q.qtype = 'stack'\nAND quiza.preview = 0\n\nGROUP BY c.shortname\n\nORDER BY COUNT(1) DESC, c.shortname\n</code></pre> <p>Moodle has a built-in report that will count the number of questions of any type in the question bank (report/questioninstances) but this is a less useful statistic.</p>"},{"location":"en/STACK_question_admin/Advanced_reporting/#closing-date-of-quizzes-which-use-stack","title":"Closing date of quizzes which use STACK","text":"<p>Another useful report, which we use for planning the time of upgrades, is this one, which lists the close date of quizzes uses STACK (including ones that use STACK questions via Moodle's 'Random question' feature:</p> <pre><code>SELECT DISTINCT\n    c.shortname AS Website,\n    quiz.name AS iCMA,\n    quiz.timeopen AS Open_date,\n    quiz.timeclose AS Close_date\n\nFROM {quiz} quiz\nJOIN {course} c ON c.id = quiz.course\n\nWHERE to_timestamp(quiz.timeclose) &gt; 'now'::timestamp - '1 month'::interval\nAND EXISTS (\n    SELECT 1\n    FROM {quiz_slots} slot\n    JOIN {question} q ON q.id = slot.questionid\n    WHERE slot.quizid = quiz.id AND (\n        q.qtype = 'stack' OR q.qtype = 'random' AND EXISTS (\n            SELECT 1\n            FROM {question_categories} qc\n            JOIN {question} rq ON rq.category = qc.id\n            WHERE qc.id = q.category AND rq.qtype = 'stack'\n        )\n    )\n)\nORDER BY Close_date, Website, iCMA\n</code></pre>"},{"location":"en/STACK_question_admin/Advanced_reporting/#list-all-the-people-who-have-created-stack-questions-in-your-site","title":"List all the people who have created STACK questions in your site","text":"<p>One final query, which lists all the people who have created STACK questions in your site (useful if you need to email them about something:</p> <pre><code>SELECT u.firstname, u.lastname, u.username, u.email, number_created, number_modified\n\nFROM (\n    SELECT COALESCE(createdby, modifiedby) AS userid,\n           COALESCE(number_created, 0) AS number_created,\n        COALESCE(number_modified, 0) AS number_modified\n    FROM (\n\n        SELECT createdby, COUNT(1) AS number_created\n        FROM {question} WHERE qtype = 'stack'\n        GROUP BY createdby\n\n    ) qscreated\n    FULL JOIN (\n\n        SELECT modifiedby, COUNT(1) AS number_modified\n        FROM {question} WHERE qtype = 'stack'\n        GROUP BY modifiedby\n\n    ) qsmodified ON createdby = modifiedby\n\n) comined_counts\n\nJOIN {user} u ON u.id = userid\n\nORDER BY number_created DESC, number_modified DESC\n</code></pre>"},{"location":"en/STACK_question_admin/Authoring_workflow/","title":"Question authoring workflow","text":"<p>This document contains suggestions for effective question authoring workflow, especially when working collaboratively.</p>"},{"location":"en/STACK_question_admin/Authoring_workflow/#1-minimal-working-question","title":"1. Minimal working question","text":"<p>The first task is to create a minimal working question.  At the outset</p> <ol> <li>Give the question a meaningful name. E.g. it can match up to course, section and topic.  E.g. <code>2018ILA-Wk3-Q2: equation of plane</code>.</li> <li>Write the question itself.</li> <li>Provide the correct answer.  By default the variable <code>ta</code> is used as the \"teacher's answer\".  Give this a value in the question variables.<ul> <li>The default \"model answer\" for input <code>ans1</code> is <code>ta1</code> (this need not be changed).</li> <li>The default potential response tree checks <code>ATAlgEquiv(ans1, ta1)</code> (this need not be changed). </li> </ul> </li> </ol> <p>The above gives a minimal working question.  STACK will accept any algebraically equivalent answer. </p> <p>Then you can do the following.</p> <ul> <li>Add minimal question variables, especially if you intend to create random variants later. We recommend you add random variants later.</li> <li>Add minimal feedback in the PRTs.</li> <li>Create any multi-parts needed.</li> </ul> <p>If you already have a good idea of common mistakes, misconception, or intended feedback then you can use the potential response trees to test for this.  This can be added now, however it might be better to wait until step 5 below to add feedback.</p> <p>Consider</p> <ol> <li>Is the phrasing of the question clear to students?</li> <li>Will students know how to input an answer?</li> <li>Could a \"syntax hint\" or message in the question help?</li> <li>Can \"validation\" help, e.g. by telling students how many significant figures are expected?  Advanced users might consider bespoke validation functions.</li> </ol>"},{"location":"en/STACK_question_admin/Authoring_workflow/#2-add-basic-question-tests","title":"2. Add basic question tests","text":"<p>It is important to test questions for quality control, via the \"STACK question dashboard\".  At this stage the preview question page will warn \"Question is missing tests or variants.\"</p> <p>We recommend the following two test cases:</p> <ol> <li>Ensure the \"Model answer\" is really awarded full marks by your PRT.</li> <li>Ensure that not every answer is given full marks!</li> </ol> <p>The STACK question dashboard makes it relatively easy to check the mode answer:  press the button marked \"Add test case assuming teacher's answer gets full marks\".  You will have to think about an answer which is wrong, and the format of this will depend on the types of inputs used.</p>"},{"location":"en/STACK_question_admin/Authoring_workflow/#3-write-a-robust-worked-solution","title":"3. Write a robust worked solution","text":"<p>From the STACK question dashboard follow the link to \"Send general feedback to the CAS\".  This is a special page, only available to the STACK question type.  The page is loaded with the question variables, model answers, and the general feedback (worked solution) fields.  The page allows you to immediately preview the general feedback, edit variables, and then preview the instantiated general feedback.</p> <p>Add in further question variables, calculations etc. as needed and use these in the worked solution.  An effective way to create equivalent random variants is to ensure invariance of the worked solution.  If you cannot create a single worked solution for all variants then you can consider using question blocks, or separate questions and selecting questions in the quiz.  A single question need not be the most general possible.</p> <p>Once the you are happy with the general feedback press the \"Save back to question\" button. This replaces the question variables and general feedback.  Be aware that if you still have the edit form open, and you subsequently save the edit form again, then you will replace your question variables and general feedback with the contents of the edit form.</p>"},{"location":"en/STACK_question_admin/Authoring_workflow/#4-add-random-variants","title":"4. Add random variants","text":"<p>If you need to do so, at this point add in random variants.</p> <ol> <li>Edit the question variables to add in randomisation (if you did not do so in step 3.)</li> <li>Add a question note.</li> <li>Return to the Stack question dashboard and deploy variants.  The STACK question dashboard link on the edit form will change to \"No variants of this question have been deployed yet.\" to remind you to deploy variants.</li> <li>Confirm any question tests added in step 2 continue to work for all variants.  There is a button \"Run all tests on all deployed variants (Slow)\" to help you check this.</li> </ol>"},{"location":"en/STACK_question_admin/Authoring_workflow/#5-add-better-feedback","title":"5. Add better feedback","text":"<p>Add in better feedback to the question.</p> <p>Feedback is likely to be effective when it is specific in helping student improve on the task.</p> <p>It is sensible to use the question variables to create variables for each answer which will trigger feedback.  This answer can be based on any random variables, and can be used both in the potential response tree and to create a test case to confirm the feedback and any partial credit is really awarded for each random variant.</p> <p>In theory one test case should be created for each anticipated response which gets feedback.  In very complex PRTs this is sometimes not possible/practical.</p> <p>When updating a PRT at this stage we would expect test cases added in step 2 to fail.  This is reassuring as it indicates something significant has changed!  You can easily confirm the new behaviour of the testcase is now what is intended.</p>"},{"location":"en/STACK_question_admin/Authoring_workflow/#6-use-data-obtained-from-one-cycle-of-attempts-by-students","title":"6. Use data obtained from one cycle of attempts by students.","text":"<p>Rather than second-guess what students might get wrong it is more effective to look at what they do.  See the section on reporting for documentation on how to review students' answers.  When feedback/marks are delayed (e.g. online exam) this can be done between students taking the assessment and results being released.  If feedback/marks are immediate then better quality feedback can still be usefully added later.</p> <ol> <li>Did the question operate correctly?  E.g. were correct answers correctly marked, and incorrect answers rejected?</li> <li>What did students get wrong?  Is there a reason for these answers such as a common misconception?  If so, add nodes to the PRTs to test for this and improve feedback.</li> <li>Add further question tests to test each misconception.</li> <li>Is there any significant difference between random variants?</li> </ol>"},{"location":"en/STACK_question_admin/Authoring_workflow/#authoring-collaboratively","title":"Authoring collaboratively","text":"<p>The question description, and descriptions within PRT nodes, can be used to describe intentions and problems to other team members.  These fields are only available question authors, and are never shown to students.</p> <p>You can use the <code>[[todo]]...[[/todo]]</code> question block to indicate unfinished questions.  See below.</p> <p>You can use the <code>[[escape]]...[[/escape]]</code> and <code>[[comment]]...[[/comment]]</code> blocks to remove broken content which is preventing a question from being saved.  Maxima code can be removed with code comments: <code>/* .... */</code>, but these comments cannot be used in castext.</p>"},{"location":"en/STACK_question_admin/Authoring_workflow/#using-tags-within-the-todo-blocks","title":"Using tags within the <code>[[todo]]</code> blocks","text":"<p>Authoring collaboratively can be better organised by using tags within the <code>[[todo]]</code> blocks.  For example</p> <pre><code>[[todo tags=\"tag1,tag2,...\"]]Please fix ...[[/todo]]\n</code></pre> <p>Tags are a comma separated list of strings.  Whitespace will be trimmed from the ends of tags.</p> <ul> <li>Tags can represent a user (e.g. using their name, username) to alert an issue is for them to resolve.</li> <li>Tags can represent a stage in an agreed workflow, e.g. \"draft\", \"for review\", \"stage 2\".</li> <li>Tags can represent an issue, e.g. \"iss1231\" to remind authors to update the question when a fix to a bug/issue finally goes live on a production server.</li> <li>Tags can be added automatically to the question description by the bulk test script where a question requires attention.</li> </ul> <p>It is entirely up to individual users to decide on what and how to use tags.</p> <p>By design, \"todo\" tags are not tied to userid fields in the moodle site.  Instead tags are site-neutral so they can be preserved in cross-site collaboration.</p>"},{"location":"en/STACK_question_admin/Authoring_workflow/#finding-questions-with-todo-blocks","title":"Finding questions with <code>[[todo]]</code> blocks","text":"<p>Any logged-in user can navigate to the URL</p> <pre><code>../moodle/question/type/stack/adminui/todo.php\n</code></pre> <p>on the moodle site.  This page will list</p> <ol> <li>Any contexts for which they have Moodle capability <code>moodle/question:editall</code>.</li> <li>Any questions in that context which contain STACK questions with <code>[[todo]]</code> blocks.</li> <li>Questions which contain <code>[[todo]]</code> blocks are arranged into groups by tag, and additionally there is a list of questions with <code>[[todo]]</code> blocks without any tags.</li> </ol> <p>Notice that, by design, any teachers on the course can see all tags. The purpose of the <code>[[todo]]</code> block is not to provide a private list of tickets for an individual user to address.  Rather, it is a public list of tags.  In this way, if users choose to use tags to flag issues for users, every teacher can see outstanding tags including those intended for them and those raised by them for someone else.</p> <p>We anticipate lists of questions with <code>[[todo]]</code> blocks will be rather short, and so questions are displayed on a simple page.</p> <p>Since <code>[[todo]]</code> blocks can be added anywhere, they could be used in the Question Description field.  Once these are resolved, the Question Description field can be used to store an audit trail, and any metadata, as required by a particular collaborative workflow.</p>"},{"location":"en/STACK_question_admin/Authoring_workflow/#future-ideas","title":"Future ideas.","text":"<p>If using tags within the <code>[[todo]]</code> blocks becomes popular may</p> <ol> <li>Hook into Moodle's \"cron\" system to alert teachers to questions with <code>[[todo]]</code> blocks via email.</li> <li>Hook into the Moodle question bank to flag questions with outstanding <code>[[todo]]</code> blocks more visibly in the question bank.</li> </ol>"},{"location":"en/STACK_question_admin/Bulk_testing/","title":"Bulk testing STACK questions on your site","text":"<p>You can bulk test all question tests on all variants of all STACK questions by using the bulk-test script.  Access this functionality from STACK's \"adminui\" page (or the plugin setting page)</p> <pre><code>[...]/question/type/stack/adminui/index.php\n</code></pre> <p>To make use of the bulk test users require the capability <code>qtype/stack:usediagnostictools</code> via Moodle's capability system.</p> <p>The bulk-test index page lists all Moodle contexts which contain STACK questions.  You can bulk-test by context.</p> <p>Bulk testing does the following.</p> <ol> <li>Validate the STACK question against it's <code>stackversion</code> number.  STACK questions store the version of the STACK plug-in last used to edit the question.  The bulk tester checks for changes with the current STACK plug-in version.</li> <li>Runs all question tests on all variants of each STACK question.</li> <li>Catch any run-time errors generated in the above.</li> <li>List questions with deficiencies:</li> <li>No question tests</li> <li>No deployed variants</li> <li>Missing general feedback (worked solution)</li> </ol> <p>A report is generated with links to the question dashboard for each question.</p>"},{"location":"en/STACK_question_admin/Bulk_testing/#bulk-test-all-stack-questions","title":"Bulk test all STACK questions","text":"<p>Moodle site-admins can bulk test all STACK questions on a site. This is typically slow, and so is not available to general users.  Indeed, we recommend this is done using the command line.</p> <pre><code>[...]/question/type/stack/cli/bulkrestall.php\n</code></pre> <p>On linux consider using \"screen\" to run this bulk test in the background.  Typically this process is done as part of upgrade acceptance testing.</p> <p>Site admins will find a link \"Run all the question tests for all the questions in the system (slow, admin only)\" at the bottom of the bulk-test web index page.  However, running all the tests on a large site is typically too slow.</p>"},{"location":"en/STACK_question_admin/Bulk_testing/#adding-todo-blocks","title":"Adding <code>[[todo]]</code> blocks","text":"<p>Running question tests is slow, and not all users have the capability <code>qtype/stack:usediagnostictools</code>.  For this reason, it is useful to be able to \"tag\" questions requiring attention with <code>[[todo]]</code> blocks.</p> <p>You can add in <code>[[todo]]</code> blocks to the question description listing problems as a one-off process.</p> <ul> <li>For the web page run the bulk-test on the chosen context, then run the page again with the option <code>&amp;addtags=true</code> in the URL.  There is no web-form interface for this (advanced) option.</li> <li>For the CLI use the flag <code>--addtags</code>.</li> </ul> <p>The purpose of adding <code>[[todo]]</code> blocks is (1) to find questions more easily without running the whole bulk test again, (2) enabling people without the capability <code>qtype/stack:usediagnostictools</code> to find questions which we know need work.</p> <p>The <code>[[todo]]</code> blocks are added for broken questions, problems with upgrade, runtime errors, missing seeds, missing tests and failing question tests.  The <code>[[todo]]</code> blocks are not added for empty worked solutions.</p> <p>These <code>[[todo]]</code> blocks are only added once, but it does change the DB entry for each question.  Use with care.</p> <p>Any teacher with Moodle capability <code>moodle/question:editall</code> for a given context can find all questions with any <code>[[todo]]</code> blocks from STACK's \"adminui\" page. </p> <pre><code>[...]/question/type/stack/adminui/index.php\n</code></pre>"},{"location":"en/STACK_question_admin/Bulk_testing/#bulk-test-materials-on-other-sites","title":"Bulk test materials on other sites","text":"<p>It is possible to bulk test materials on other sites.</p>"},{"location":"en/STACK_question_admin/Deploying/","title":"Deploying","text":"<p>Questions in STACK can contain randomly generated elements.  A student will be given a random variant of a question generated by a pseudo-random seed.</p> <p>It is best if questions are not randomly generated on the fly.  Instead the teacher is strongly advised to pre-generate and \"deploy\" variants of a question.  When a student attempts the question they will be given a random selection from the deployed variants.</p> <p>We have chosen to add the extra deploy step, instead of generating on the fly, for a number of reasons.</p> <ol> <li>STACK runs all the question tests on each deployed variant to establish each variant of the question is working. This aids quality control. By using question tests it is unlikely a student will be given a random variant which does not work correctly.</li> <li>The teacher can decide if each deployed variant appears to be of equal difficulty.  The teacher can easily delete variants they do not like.  Experience suggests there are unanticipated consequences of randomly generating questions.  Really only statistics generated by real use can establish fairness amongst variants.</li> <li>The pre-generation combined with a cache helps minimise server load during the start of a large class which aids robustness of the whole experience.  This helps STACK to optimize its use of the CAS for efficiency and reliability via a dynamic cache.</li> </ol> <p>Notes:</p> <ol> <li>If an author does not deploy any variants (not advised!) then the student gets any random variant.</li> <li>Questions that don't use randomization cannot be deployed explicitly.  STACK automatically detects randomization.</li> <li>Variants are different if and only if the evaluated question note is different. Any number of instances can be requested and deployed but only one instance of each question note can be deployed.  It is possible to deploy  variants in one go, but the system will give up if too many duplicate question notes are generated.  The teacher is responsible to ensure question variants are different if and only if the question notes are different.  The deployment management also allows specific variants to be dropped.  You can also return to the question preview window and try a specific deployed variant.</li> <li>Deployment is not required for authors to test questions: an instance is generated on-the-fly.</li> <li>Once a quiz is underway it is still possible in Moodle to edit a question, and to re-grade students' attempts.  This is useful in rare cases where there is a mistake, you want to improve the worked solution, you would like to add better feedback/partial credit for a particular etc.  However, do not change anything related to the random generation of questions!  Results are unpredictable, and may well result in a situation when the modified question is different to that answered by students taking the test prior to modifications...</li> <li>It is possible to systematically deploy all variants of a question in a simple manner.</li> </ol>"},{"location":"en/STACK_question_admin/Deploying/#how-to-deploy-question-variants","title":"How to deploy question variants","text":"<p>The deployment interface can be found by editing a question and clicking on <code>question tests and deployed variants.</code> This link can also be found in the top right corner when previewing a question. This page contains the list of currently deployed variants, and links to un-deploy a variant.</p> <p>Notes:</p> <ol> <li>You can click on the seed numbers to view a particular random variant.  The testing page lists values of all the variables, displays the question and the worked solution.  The testing page is a very efficient way to look at your random variants.</li> <li>When you deploy new variants STACK will run all the question tests.  If a test fails, the generation process will stop with an error message, showing the failing test.</li> </ol>"},{"location":"en/STACK_question_admin/Deploying/#systematic-and-matched-variants","title":"Systematic and matched variants","text":"<ol> <li>It is possible to deploy all variants systematically.</li> <li>It is possible to match variants between separate questions.</li> </ol> <p>These are advanced features.</p>"},{"location":"en/STACK_question_admin/Deploying_matched_variants/","title":"Variant matching","text":"<p>This is a relatively advanced feature which links together random variables between questions in the Moodle quiz.</p> <p>Some teachers regularly want to create \"random groups\" with questions based on each other in which students might be presented with a set of questions that are all based on some common question variables.  This can be achieved with multi-input questions or variant matching.</p> <ol> <li>Multi-input questions keep all the information inside one STACK question.  This encapsulation is ideal for clarity of the relationship between parts/questions and sharing a single \"STACK question\", but questions quickly become complex to maintain.  When questions are only weakly linked this can also look strange.</li> <li>Variant matching allows separate questions to synchronise random variables.  However, the question author is now responsible for making sure their questions actually match!</li> </ol> <p>There is currently no way to formally record that two or more questions enjoy variant matching within the questions.  In particular, there is no way two questions can share a fragment of question variables, question notes, or a pool of seeds!  This makes variant matching currently rather fragile for long-term support.</p> <p>To create matched variants, create two or more STACK questions in the normal way.</p> <ol> <li>Random variable generation must be identical for all questions.  The complete question variables need not be identical, but anything which affects randomisation must.  E.g. any randomisation can be in a block at the start of the question variables which can be copied between all questions.</li> <li>The \"Random Group\" field in each question must be non-empty and identical for all questions in each group sharing randomisation.</li> <li>Formally, question notes need not be identical for all questions.  We recommend they at least have one common element uniquely identifying all random variables which contribute to the random group!</li> <li>Deploy variants of one question in the normal way.  This should ensure question notes not being deployed more than once (see point 2 above). </li> <li>Copy the list of seeds from one deployed questions to deploy all the other questions in the random group.</li> </ol> <p>If question notes are duplicated in a subsequent question this will not stop students using the question. Preventing duplicate question notes normally ensures statistics are grouped correctly.  Statistics are grouped by variant, which a teacher will actually want since the underlying variant will be a single member of the random group.</p>"},{"location":"en/STACK_question_admin/Deploying_matched_variants/#developer-notes","title":"Developer notes","text":"<p>Internally a \"variant\" is matched to the integer seed.  <code>get_variants_selection_seed</code> is a Moodle-side feature syncing the seed we get from Moodle based on the group names we have in the questions.</p>"},{"location":"en/STACK_question_admin/Deploying_systematically/","title":"Systematic deployment","text":"<p>STACK has the option to create random variants of questions, and it is very good practice to deploy variants in advance.  However, users may need to systematically deploy all variants of a question in a simple manner.  For example, where there is a small number of cases and all should be readily available.</p> <p>Every CAS (Maxima) session contains a constant <code>stack_seed</code> which holds the integer value of the seed used by that variant of the question.</p>"},{"location":"en/STACK_question_admin/Deploying_systematically/#deploying-every-variant","title":"Deploying every variant","text":"<p>The constant <code>stack_seed</code> can be used to deploy every variant of a question.  As an example, consider the data below (from https://nssdc.gsfc.nasa.gov/planetary/factsheet/)</p> <pre><code>planet:[\"Mercury\", \"Venus\", \"Earth\", \"Moon\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\", \"Pluto\"];\n/* mass 10^(24)kg. */\nmass:[0.330, 4.87, 5.97, 0.073, 0.642, 1898.0, 568.0, 86.8, 102.0, 0.0130];\n/* Orbital Period (days). */\nperiod[88.0, 224.7, 365.2, 27.3, 687.0, 4331, 10747, 30589, 59800, 90560];\n/* Distance from Sun (106 km) */\ndist:[57.9, 108.2, 149.6, 0.384, 228.0, 778.5, 1432.0, 2867.0, 4515.0, 5906.4];\n</code></pre> <p>If you want to use this data in a question, you can use a variable to index elements in these lists.  In particular, you can deploy seeds 1,2,3,4,5,6,7,8,9,10.  Then in the question variables or castext you can use the variable <code>stack_seed</code> as an index to the data, e.g.</p> <pre><code>The planet {@planet[stack_seed]@} has mass \\({@mass[stack_seed]*10^(24)@} \\mathrm{kg}\\).\n</code></pre> <p>We recommend you add in a question variable, e.g. <code>n1:stack_seed;</code> and then use this variable (e.g. <code>n1</code>) as your index.</p> <p>If you want to exclude the moon, then you can omit seed 4, and deploy only seeds 1,2,3,5,6,7,8,9,10. (Of course, alternatively you could delete the entries for the moon from the list!)</p> <p>Note, in Maxima the list index starts at 1. I.e the first element of a list is <code>l[1]</code> (not zero).</p> <p>It is your responsibility to make sure the index remains within range!  You can ensure this by creating an index variable such as <code>n1:mod(stack_seed-1,10)+1;</code> and then using this</p> <pre><code>The planet {@planet[n1]@} has mass \\({@mass[n1]*10^(24)@} \\mathrm{kg}\\).\n</code></pre> <p>It is sensible to always ensure your <code>stack_seed</code> does not create run-time errors.  Notice that although the <code>mod</code> function does return <code>0</code> we have avoided possible zero indexes when defining <code>n1</code>.</p> <p>Of course, there are many other ways to map deployed seeds onto systematic deployment of variants.  Using consecutive integers from  as the starting point is probably simplest and easiest to maintain.  For this reason there is a special option to do this on the deploy variants page.  There is also an option to use consecutive integers from n, \\ldots, m.</p> <p>Notes</p> <ol> <li>You can combine use of <code>stack_seed</code> with random functions.  There is nothing wrong with seeding the random number generator from a small integer!</li> <li>STACK auto-detects random functions.  You must refer to <code>stack_seed</code>, or a random function, in the question variables to trigger use of deployed variants.  Otherwise STACK will think deployed variants are not needed.  If necessary add in a variable <code>n1:stack_seed;</code> and then use <code>n1</code> as your index to make sure you have explicitly made use of <code>stack_seed</code>.</li> <li>The variable <code>stack_seed</code> is a constant.  You cannot reassign values to this variable within the question.</li> <li>Just as with randomisation, you must create a question note to distinguish between variants of a question.</li> </ol>"},{"location":"en/STACK_question_admin/Fixing_broken_questions/","title":"I have a misbehaving STACK question in a live Moodle quiz.  What should I do?","text":"<p>You can't remove or add a question to a live Moodle quiz, but you can modify it.  If you edit a live STACK question then students will see the updates.</p> <ol> <li>Did you add any question tests to your question?  If not, add these now.  The testing page has a lot of information, including values of the question variables, and gives specific information of what is going into the answer tests and what values are returned.  This page will also show some runtime errors, not all of which are displayed to students (and so are invisible on the preview testing page).</li> <li>Duplicate the question, rather than editing a live question in a quiz.  Decide what changes need to be made before editing the broken live question.  The database has no \"undo\" so you cannot revert once the question is saved, and you can only test a saved question...</li> <li>There are \"regrade\" and \"dry-run regrade\" options in the Moodle quiz.  If you are happy with the new behaviour of the question you can regrade. You can also manually assign a mark in the Moodle quiz. </li> <li>It is ok to add nodes to an existing PRT and \"regrade\".  However, the Moodle DB caches outcomes, so unless the score changes you will not see new stats.  If you are using the basic question usage report to generate stats you might need to change the marks, regrade, change the marks back and regrade again to update the usage report stats.</li> </ol> <p>If you cannot apply a patch, then create a copy of the question and put it in a new category \"for next year\".  It is normally best to fix it now!</p> <p>It is possible to change the weight of an individual question within a live quiz and re-grade. If the live question is impossible to fix you do have the option to disregard the question by assigning it a mark of  in the quiz.</p>"},{"location":"en/STACK_question_admin/Fixing_broken_questions/#fixing-broken-mathjax-and-javascript","title":"Fixing broken MathJax and Javascript","text":"<p>A relatively common problem is that MathJax stops working half way through a question resulting in an equation showing up as a <code>[Math Error]</code> or similar error message, (or just showing the source).</p> <p>MathJax is a javascript library, and sometimes when it encounters malformed HTML it gives up.</p> <p>The first place to look is to check the integrity of the HTML in your question.  Do not use the WYSIWYG editors in Moodle.  The editors cut and paste all sorts of HTML formatting into LaTeX equations, e.g. \"span\" tags, which break MathJax.</p> <ol> <li>Choose the Moodle \"plain textarea\" editor from the user preferences.</li> <li>Edit your question and carefully tidy up your html.  Things to look for:</li> <li>span tags inside LaTeX equations.  Make sure your LaTeX has no HTML inside it, (entities like <code>&amp;lt;</code> are fine).</li> <li>the <code>[[input:....]]</code> and other tags should not be inside random span tags either.</li> </ol> <p>If your javascript code, e.g. JSXGraph, also stops working this is almost certainly because it has been edited with a WYSIWYG editor which has \"protected\" your code and so broken it.  Check with the plain textarea editor.</p>"},{"location":"en/STACK_question_admin/Fixing_broken_questions/#sorting-out-broken-random-versions","title":"Sorting out broken random versions.","text":"<p>Do not change anything which alters the randomisation of variants.</p> <p>In particular, do not add, remove or re-order <code>rand</code> statements or other statement which will increment the state of the pseudo random number generation. Students get a \"seed\" which starts the pseudo-random number generator.  If your changes change the random version, then the students' previous answers will still stand, and will now most likely be \"wrong\".  Minor typographical mistakes can be fixed, but often there is nothing you can do to fix seriously bad random versions.  This is why we have the \"deploy\" system and question tests so question variants can be checked in advance....</p> <p>Modifying the question variables in a way which does not alter random versions should be fine. E.g. adding variables for test case consturction or improving a worked solution.</p> <p>If you have a single mis-behaving random variant, you can try the following type of approach.</p> <p>Imagine your question variables are</p> <pre><code>n1:rand(10);\n</code></pre> <p>and your question says _<code>`Find a numerical approximation to {@1/n1@} to three decimal places''_.  Clearly the case</code>n1=0<code>will throw a division by zero error,</code>n1=1` will be (basically) pointless from an educational perspective and so on.  However, the other students who have already taken a live quiz will have been given, and answered, the question you intended.  It is tempting to change the question variables to</p> <pre><code>n1:2+rand(8);\n</code></pre> <p>but of course this will change the question for everyone.  Instead you could just change the question variables to the following.</p> <pre><code>n1:rand(10);\nn1:if is(n1&lt;2) then 3 else n1;\n</code></pre> <p>This will fix the broken variants, without changing all the others. Of course, you still have to deal with students who originally got a broken variant (grant an extra attempt at the quiz using the user override feature of the quiz?) and your <code>n1=3</code> version will be three times as likely to occur.  If you use</p> <pre><code>n1:if is(n1&lt;2) then (2+rand(8)) else n1;\n</code></pre> <p>then any subsequent random number generation will be changed as well.  Indeed, since the pseudo-random number generation is not really random then the second <code>rand</code> statement will only return a single value anyway because random variants are seeded from a single seed.  To generate a second random number you would need to have</p> <pre><code>n1:rand(10);\nn2:2+rand(8);\nn1:if is(n1&lt;2) then n2 else n1;\n</code></pre> <p>and make the question note include both <code>n1</code> and <code>n2</code> to show there are distinct random versions including both <code>n1</code> and <code>n2</code> as random variables.</p> <p>Of course, if the question author has created question tests in the first place, and deployed random variants to check in advance, this problem would never have occurred!</p>"},{"location":"en/STACK_question_admin/Fixing_broken_questions/#i-forgot-to-deploy-random-variants","title":"I forgot to deploy random variants.","text":"<p>Moodle creates a random integer to seed the random number generation for each question.  The seed is stored in the question-attempt and it is picked at the initiation of the quiz either from deployed ones or, if no variants have been deployed, is chosen freely.</p> <p>Students will therefore have their seed picked at the moment they start their quiz.  The seed remains unchanged regardless of whether any variants are subsequently deployed, removed etc.  Hence, deploying or undeploying variants will have no effect on students who already started the quiz.</p>"},{"location":"en/STACK_question_admin/Future_proof/","title":"Guidelines for ensuring that a question works in the future","text":"<p>We are committed to long-term support for STACK questions.  The most important things are listed here.</p> <ol> <li>All questions must have \"question tests\", which allow unit testing of each question variant.  You can test individual question variables with the <code>s_assert</code> function.  Testing helps build questions that detect changes in the platform.</li> <li>Use simple correct HTML with all closing tags, avoiding explicit style of your own.</li> <li>Use only simple core LaTeX Maths environments/commands, with only <code>\\(...\\)</code> and <code>\\[...\\]</code> as the maths delimiters.  In many projects <code>$</code>-delimiters for LaTeX are strictly forbidden.  (There is a simplistic auto-convert to help with a one-time conversion.)</li> <li>Avoid linking to externally hosted content, such as pictures and applets.</li> <li>End Maxima commands with a semi-colon <code>;</code>.</li> <li>Add comments to your Maxima code.</li> <li>Do not use arbitrary Javascript!  Future versions of STACK will not support arbitrary Javascript.  Please work with developers to create supported features, e.g. the <code>[[reveal]]</code> block is a prime example of this approach working.</li> <li>A STACK question stores the version of STACK with which it was last edited. If we need to make changes the bulk test will use this version number, and search within your question, to identify questions that might need attention.</li> </ol>"},{"location":"en/STACK_question_admin/Future_proof/#writing-castext","title":"Writing CASText","text":"<p>CASText is an HTML-document fragment with inline LaTeX equations, and special blocks.  E.g. special blocks indicate where the input boxes go.  CASText is the definition of the visible parts of the question.</p> <p>You should ensure that you are writing valid (X)HTML.  Make sure that all the tags get closed and that you are not placing block level elements in places where they do not belong. <code>&lt;span&gt;&lt;div&gt;...&lt;/div&gt;&lt;/span&gt;</code> is bad while <code>&lt;div&gt;&lt;span&gt;...&lt;/span&gt;&lt;/div&gt;</code> might be less bad. </p> <p>Avoid using inline CSS styles in your CASText which may change and cause conflicts.  In general all styles are bad with the sole exception being <code>text-align</code> in the context of table cells. Otherwise:</p> <ul> <li>If at all possible remove all styles and the <code>&lt;span&gt;</code> tags related to them from the CASText. Most WYSIWYG editors have some clear formatting feature to do just that. You cannot have block level HTML elements inside a span tag, which is an inline element.</li> <li>Do not define <code>font-size</code> anywhere. If you need a heading with big text then use the <code>&lt;hX&gt;...&lt;/hX&gt;</code> tags, but not with too small or large values of X. In Abacus <code>&lt;h3&gt;</code> and <code>&lt;h4&gt;</code> are recommended especially in model solutions.</li> <li>Other font style should be left to the surrounding system but feel free to use <code>&lt;i&gt;</code>, <code>&lt;b&gt;</code>, <code>&lt;em&gt;</code>, and <code>&lt;strong&gt;</code> if you need and assume that the surrounding system handles them correctly.</li> <li>You can use the <code>&lt;code&gt;</code> tag to explain how to type in answers.</li> <li>The top level of your CASText document should consist of <code>&lt;p&gt;</code>, <code>&lt;table&gt;</code>, <code>&lt;div&gt;</code>, or CASText block elements not of raw text. For the PRT be careful about using <code>&lt;p&gt;</code> tags (which editors hide).  If you use the compact PRT style then STACK then puts this into span tags, and you cannot have block level HTML elements such as <code>&lt;p&gt;</code> inside a span tag.</li> <li>In the case of tables and images you may use a bit of styling, e.g. borders, paddings, margins, and sizes, but you should always use relative units when describing those sizes. Scale to match the current font-size or maybe to the width of the viewport or even to the maximum dimension of the display not to pixels as pixels have very different actual sizes on different screens and we cannot assume that the software displaying things will make the same scaling assumptions for them in the future.</li> <li>STACK now SVG, and this is preferred to embed images within the CASText.</li> <li>Only use supported JavaScript libraries, like JSXGraph.</li> <li>Avoid complex LaTeX constructions where you inject values into multiple places, instead try to tune Maxima LaTeX generation to meet your needs, e.g. showing working, using <code>texput</code>, or changing other features of Maxima constructs.</li> </ul> <p>If your CASText document contains scripts like JSXGraph content definitions you should ensure that if they require some external files to be evaluated you include those files with the question as links to external files will be broken at some point or the external files themselves change. In the case of JSXGraph use the <code>jsxgraph</code> CASText block which will handle the scripts at STACK level.</p> <p>All external files/links are bad! If you have images or other documents related to the question they should be included in the question. Avoid embedded frames, applets and other interactive content. To test inclusion you should be able to export the question and import it to a freshly installed raw system on a computer not connected to the internet and those questions should work. There is nothing wrong with internal files of any type, as long as they come with the question.</p> <p>STACK does provide the option for inclusions within questions.  If you regularly use <code>stack_include</code> in your questions please consider contributing your libraries to the STACK core code.  Contributing tested libraries is the best way to ensure longer term maintenance.  Use of the include feature with external source is also a bad thing, but you can make it less bad if the included file is present on a public server and link to a version that never changes.</p>"},{"location":"en/STACK_question_admin/Future_proof/#writing-cas-code","title":"Writing CAS code","text":"<p>The CAS code (internally keyvals and CASStrings) consists of Maxima assignment statements. Occasionally, Maxima's behaviour changes, and occasionally there are changes in the STACK provided Maxima functions. Changes cannot be avoided, but you can try to develop your questions based on as new as possible Maxima version to give them longer life. Otherwise there are some details that should be noted:</p> <ul> <li>End your statements with semicolons (<code>;</code>) this will ease your life if you ever need to copy code to Maxima for testing. In the future semicolons may become mandatory, automatic conversion will however handle that change.</li> <li>Avoid interesting chars in your variable names e.g. <code>_</code> has meaning and it is reasonable to assume that other chars might have new meanings in the future.</li> <li>Never write to a variable sharing a name with an input!</li> </ul> <p>You should also heed to these general guidelines:</p> <ul> <li>Correct answers are generally stored in variables named <code>ta1</code>, which match the corresponding input name.</li> <li>Should there be need to process the student's answer it might make sense to store it to <code>sans1</code>, etc., which match the corresponding input name.</li> <li><code>texput</code> instead of manual string construction when generating LaTeX representations will keep your code readable.</li> <li>Write comments! More complex code is more likely to break at some point and someone, probably you, will need to understand it and provide a replacement logic for it.</li> </ul>"},{"location":"en/STACK_question_admin/Future_proof/#question-tests-teachers-answers","title":"Question tests &amp; teacher's answers","text":"<p>To detect broken questions we need to be able to test them and the only reasonable way to that is through the question tests. You must define some tests: at least one for each PRT in your question. Preferably provide one correct answer test for each PRT, tests for each branch in the PRTs, and some nonsense inputs to check for 'false positive' style failures.</p> <p>For manual testing it is important to provide each input with the correct teacher's answer and that teacher's answer must be in a form that matches input requirements.  For example, if you require a floating-point number with a specific number of significant figures then do not specify the teacher's answer as a rational number!  Note that you will need to do the same output formatting for the question tests if your question cares about the formatting of the answer.</p> <p>Please note that the system administrator has access to a \"bulk test\" script which runs all the tests on a category. You can use this when you upgrade your site.</p>"},{"location":"en/STACK_question_admin/Future_proof/#things-that-have-broken-or-will-break","title":"Things that have broken or will break","text":"<p>There have been some changes, which have created broken questions between versions.</p> <ul> <li>List instantiation in Maxima is now required by Maxima and writing to an un-instantiated list gives errors like 'ARRSTORE: use_fast_arrays=false; allocate a new property hash table'. Basically, this means that you cannot say <code>TAns[1]:x;</code> without first saying <code>TAns:[];</code>. So do not assume that Maxima knows you want to create a list by simply assigning to an index on an undefined variable.</li> </ul>"},{"location":"en/STACK_question_admin/Future_proof/#abacus-guidelines","title":"Abacus guidelines","text":"<p>The Abacus project is a STACK material sharing organisation that seeks to develop high-quality materials to be implemented following these guidelines. This document ends with additional guidelines adopted by Abacus. This is both good practice, and will be relevant if you ever intend to join Abacus.</p> <p>Abacus materials are assumed to take into account the comments above. In addition to this there are some other rules:</p>"},{"location":"en/STACK_question_admin/Future_proof/#naming-of-questions","title":"Naming of questions","text":"<p>The question names are to be in English and the question name is then suffixed with the language codes of the localisations present in the question e.g. 'Eigenvalues and eigenvectors [FI,SV]'. While uniqueness of the naming of questions might be desirable it makes more sense to name the collection (category for those dealing with Moodle) of questions uniquely and keep the individual question names short.</p> <p>As a special rule if your question contains scripting inside CASText section that would suffer from being opened and saved with a helpful WYSIWYG editor do note that in the name. Maybe a suffix of '[NO WYSIWYG]' or a prefix if you fear that it would not be displayed in the question list due to a long question name.</p> <p>Use lexicographical ordering to your advantage, so questions are listed in an order which might be helpful when using them in a quiz or a course.</p>"},{"location":"en/STACK_question_admin/Future_proof/#keywords-author-attribution","title":"Keywords &amp; author attribution","text":"<p>'Tags' i.e. keywords can be connected to questions and you are encouraged to use them. You may try to gain access to a listing of most common ones and see if your ideas about them might have been typed slightly differently over there but worry not about creating a new one.</p> <p>Author attribution in Abacus happens through keys/tags. Your questions should have a tag referencing your home organisation and one for your name. As some platforms do not support spaces in their keywords you may want to play it safe by writing the author tag as 'LastnameFirstname'. If you are significantly modifying an existing question feel free to add your author tag there but do not remove the existing ones.</p>"},{"location":"en/STACK_question_admin/Future_proof/#html","title":"HTML","text":"<p>All HTML needs to be valid XHTML. Empty <code>&lt;p&gt;&lt;/p&gt;</code>-tags and <code>&lt;br/&gt;</code>-tags are to be eliminated on sight. All content should go through clear formatting. Editing using the plain text area editor is strongly recommended, at the minimum authors should take a look at the source code view of their WYSIWYG editor and prune every now and then.</p>"},{"location":"en/STACK_question_admin/Future_proof/#model-solution","title":"Model solution","text":"<p>Abacus materials are expected to contain model solutions in the 'general feedback'-field and that solution is expected to apply to the random variables present in the student's question. Feel free to use conditional rendering available through CASText blocks to handle differences in the solution process if the random variables require it. However, in general questions should aim to have the same solution process for all values of the parameters to avoid differences in difficulty. Naturally, questions with wildly different solutions are also useful.</p>"},{"location":"en/STACK_question_admin/Future_proof/#question-note","title":"Question note","text":"<p>The question note must be filled correctly, i.e. all random variables must be present in it. It is also recommended that the note provides a summary of the question and answer, if multiple differing solution processes are possible the note should tell which of those is required in the variant. Question notes are used if one selects specific variants for use and all that information will help then.</p>"},{"location":"en/STACK_question_admin/Future_proof/#localisation","title":"Localisation","text":"<p>Questions are to be localised within the question i.e. there must not exist more than one instance of the same question only differing by the language of the CASText portions. Currently, the localisation is to be done with the multilang filter of Moodle; once better or higher-level solutions are made possible we will automatically convert to them.</p>"},{"location":"en/STACK_question_admin/Future_proof/#prt-feedback","title":"PRT feedback","text":"<p>It is perfectly acceptable to place the PRT-feedback marker within the question text, as opposed to the specific feedback field in Moodle, and it is recommended when dealing with questions with multiple PRTs and inputs. Try to place the feedback near to the things it applies to e.g. feedback for part A at the end of part A before part B starts.</p>"},{"location":"en/STACK_question_admin/Future_proof/#cas-code-input-and-prt-naming","title":"CAS Code &amp; input and PRT naming","text":"<p>Abacus materials should aim to use English names for the CAS variables, inputs and PRTs to ease debugging by other members. Realistically, when generating new localisations for an existing question the variables should be renamed at the same time unless they are already in English.</p> <p>If a variable name could cause confusion you should describe the variable in inline comments. You should use verbose internal variable names but not too verbose, try to aim for less than 10 characters. PascalCase/camelCase is the recommended way of dealing with multi word verbose names.</p> <p>Naming of PRTs is highly recommended, even <code>partA</code> and <code>partB</code> will be more descriptive names than <code>prt1</code> and <code>prt2</code>, naming of PRTs happens when you create them i.e. when you create that PRT-feedback marker. </p>"},{"location":"en/STACK_question_admin/Notes_about_performance/","title":"Notes about performance","text":"<p>Authoring style may affect the server performance of the questions, e.g. response times and bandwidth usage. </p> <p>When we are talking about affecting the performance, in most cases, the effects are linear; adding more inputs means that we need to process more inputs, and the time used grows accordingly. The bits that matter are the non-linear ones, e.g. unknown execution lengths or filling the buffers with unused data might simply push things over some limit and increase the processing time unexpectedly.</p> <p>One could say many things about the pedagogical performance of questions, but that is something that this document skips.</p>"},{"location":"en/STACK_question_admin/Notes_about_performance/#deployed-variants-are-good","title":"Deployed variants are good!","text":"<p>Deployed variants improve performance and allow caching to work. They also allow one to visually inspect the randomised parameters and thus help detect wildly differing difficulty levels.</p> <p>If you are running on a truly large scale or if your servers cannot keep up, always look at deployed variants first.</p> <p>Just make your question notes informative, the preferred way is to show the question and the answer for this particular variant in short form; a simple parameter list may help, but it is often less than helpful.</p>"},{"location":"en/STACK_question_admin/Notes_about_performance/#randomisation-loops-are-really-bad","title":"Randomisation loops are really bad!","text":"<p>If you need to randomise something and then select only the ones that match certain conditions, you will need to know that the loop will be repeated every time the question receives input, often more than once.</p> <p>So don't write anything like this:</p> <pre><code>foo: rand(.....);\nwhile not is_good(foo) do foo: rand(.....);\n</code></pre> <p>Not only is there a risk that some seed of the random number generator never leads to parameters that end up being \"good\", but that can also lead to wildly varying execution times and even timeouts.</p> <p>If you cannot write code that directly randomises a \"good\" result, you should use deployed variants and question-tests to pre-randomise and select only the cases where the randomisation is \"good\", the key is to use question-tests as the filter here.</p>"},{"location":"en/STACK_question_admin/Notes_about_performance/#big-strings-or-things-you-might-not-want-to-place-in-question-variables","title":"Big strings or things you might not want to place in question-variables.","text":"<p>In the STACK question model, it is assumed that whatever is in the question-variables or in any other code/logic block is data and needs to be fully transferred into the CAS during all processing steps of the question; conversely, whatever is present in the question-text or other text content is assumed to be safe and not \"data\". We do special side-lining of such safe \"not data\" and don't send it all the way to CAS if we can avoid it, and it still rejoins the output once necessary.</p> <p>This means that if you place big strings on the logic side without actually using them there, you are probably wasting resources. If that text is intended as something to be outputted in the text itself then one should look at putting it into the text itself, maybe using CASText features that allow conditional inclusion if need be.</p> <p>Typically one can end up in this type of situation if one converts materials from other systems and chooses to build their output on the logic side. Sometimes people do image inclusions, either SVG or base64 style content and end up slowing their systems if they add too many of them.</p> <p>The issue is not only about the transfer of large strings or other content taking bandwith, cache space, and parsing resources but also about transferring things not needed. Those question variables are always included in the evaluation session even when that session would not actually render question-text e.g. when doing input-validation.</p>"},{"location":"en/STACK_question_admin/Notes_about_performance/#number-of-inputs-directly-affects-performance","title":"Number of inputs directly affects performance.","text":"<p>Currently (pre input2), the number of inputs in a question affects the number of CAS sessions needed for the evaluation and validation of answers. In general, you will have to live with it, but if you happen to do extensive scripting on the client-side, you might want to know that it is only the number of inputs in the question model that matters, not the number of things you place into those inputs. So if you are pushing the limits, maybe map multiple client-side inputs into a few hidden actual inputs.</p>"},{"location":"en/STACK_question_admin/Notes_about_performance/#number-of-prts-affected-the-performance","title":"Number of PRTs affected the performance.","text":"<p>If you have large numbers of PRTs and are not running 4.4 or later, you might gain significant performance boosts if you update to 4.4. In the earlier versions, every PRT was evaluated separately in their own CAS session, but now they get handled in a single session. Every new session always incurs a performance overhead, so joining them does give us some benefits. </p>"},{"location":"en/STACK_question_admin/Notes_about_performance/#image-sizes","title":"Image sizes","text":"<p>We strongly recommend against including images within questions.  Instead use SVG.  Please consider students who may have bandwith issues, especially those students using mobile phones with pay as you go contracts.</p>"},{"location":"en/STACK_question_admin/Reporting/","title":"Analyze responses","text":"<p>Basic reporting is undertaken through the Moodle quiz.  For example, lists of scores, etc. are available there.  The Moodle quiz also calculates basic statistics based on the numerical information.</p> <p>To review work in more detail we need to use two important parts of the question. Please read the following two entries before continuing with this article.</p> <ul> <li>The question note.</li> <li>The answer note.</li> </ul>"},{"location":"en/STACK_question_admin/Reporting/#moodle-quiz-features","title":"Moodle quiz features","text":"<p>Most of the day to day reporting is done through the Moodle quiz features.</p> <p>For detailed reporting go to</p> <pre><code>Quiz administration -&gt; Results -&gt; Reporting\n</code></pre> <p>The \"response\" column shows the raw Maxima input value entered by the student and the validity status, e.g. \"blank\" (not reported), \"invalid\", \"valid\", \"score\".  The \"response\" column also shows the value of the answer note for each potential response tree.</p> <p>An example note is shown below.  In this question a student has answered with <code>(x-4)^6+c</code> for the input <code>ans1</code>. The potential response tree <code>prt1</code> has executed and the note is <code>ATInt_generic. | 1-0-F</code>.</p> <pre><code>ans1: (x-4)^6+c [score]; prt1: ATInt_generic. | 1-0-F\n</code></pre> <p>Notes:</p> <ol> <li>If the potential response tree does not execute it will be reported as <code>prt1: #</code> to indicate it exists but was not used.</li> <li>Reporting is stored in the database, so you may need to \"regrade\" attempts if you update the answer notes.</li> <li>You can download the responses for offline analysis.  Split over <code>;</code> to separate inputs and separate PRT answer notes.  Split the individual answer note over <code>|</code> to get the route through the tree, and the notes added by the answer tests.</li> </ol>"},{"location":"en/STACK_question_admin/Reporting/#individual-stack-item-analysis","title":"Individual STACK item analysis","text":"<p>STACK has a bespoke basic reporting mechanism for analysing responses to questions.  To access the report you need to navigate to the STACK question dashboard and choose \"Analyze responses\".  Choose the quiz in which the question is used.</p> <p>The report makes use of the response summary.  (For developers, this is generated by <code>qtype_stack_question::summarise_response</code> in <code>question.php</code>.)</p> <p>The response summary is a string consisting of the following information.</p> <ul> <li>The \"seed\" for the question used, enabling attempts to be grouped by question variant.</li> <li>The Maxima string value of each input, and its status (blank, invalid, valid, score).</li> <li>The answernote generated by each potential response tree. <code>!</code> denotes a blank note, i.e. the PRT did not execute.</li> </ul> <p>Here is a raw response summary.</p> <pre><code> Seed: 254530683; ans1: 15180 [score]; ans2: 24360 [score]; prt1: # = 1 | prt1-1-T; prt2: # = 0 | prt2-1-F\n</code></pre> <p>Here we see the following.</p> <ul> <li>The report can be split over <code>;</code> into separate fields.   Within the PRTs the data can be split over <code>|</code>.</li> <li>The seed used in this example was 254530683.</li> <li>There are two inputs, each at the \"score\" state.</li> <li><code>ans1: 15180 [score]</code></li> <li><code>ans2: 24360 [score]</code></li> <li>There are two potential response trees</li> <li><code>prt1: # = 1 | prt1-1-T</code>  The <code>prt1</code> was activated, the score <code>#</code> returned was <code>1</code> and we see the answer note.</li> <li><code>prt2: # = 0 | prt2-1-F</code>  The <code>prt2</code> was activated, the score <code>#</code> returned was <code>0</code> and we see the answer note.</li> </ul> <p>The response summary contains a lot of information in a condensed way, and can only be understood with an appreciation of the question structure itself in STACK (inputs, prts, variants) and the individual question.</p> <p>The report splits this information into the following, text-based, reports.</p> <ul> <li>Frequency of answer notes, for each PRT, regardless of which variant was used.  Useful to know the route through the tree.</li> <li>Frequency of answer notes, for each PRT, split by |, regardless of which variant was used.   Useful to understand the outcome at each node.</li> <li>Raw inputs, regardless of which variant was used.</li> <li>Raw inputs and PRT answer notes by variant.</li> <li>Raw data.</li> </ul> <p>Note, the question summary is stored in a database and will not be updated if you subsequently edit the question.  If you wish to improve your question you will need to do a quiz \"regrade\" to update the basic question use report.</p>"},{"location":"en/STACK_question_admin/Reporting/#download-json-data","title":"Download JSON data","text":"<p>Rather than provide complex analysis online, we provide download of data in JSON format for offline analysis.  Choose the tab \"JSON data\".</p> <p>The output has two parts.</p> <ol> <li>Minimal metadata about the question.  E.g. <code>{\"id\":\"1729\",\"name\":\"3.2.1: Completing the square\",\"reporttime\":\"2025-08-28T10:18:42+01:00\"}</code>.  The metadata has only three fields.<ol> <li>The <code>id</code> of the question from the Moodle database.</li> <li>The <code>name</code> of the question (which should be human-readable)</li> <li>The <code>reporttime</code> which is the time the report is created for download.</li> </ol> </li> <li>JSON objects, one response per line.</li> </ol> <p>Here is an example line of data.</p> <pre><code>{\"userid\":\"736\",\"timecreated\":\"1756387076\",\"inputs\":{\"ans1\":{\"status\":\"score\",\"note\":\"\",\"value\":\"4*(x-5)^2-4\"}},\"prts\":{\"prt1\":{\"score\":1,\"penalty\":0,\"note\":[\"prt1-1-T\",\"ATCompSquare_true.\",\"prt1-2-T\"],\"errors\":[]}},\"Seed\":1569710461}\n</code></pre> <p>which encodes the following student's single response:</p> <pre><code>{\n    \"userid\": \"736\",\n    \"timecreated\": \"1756387076\",\n    \"inputs\": {\n        \"ans1\": {\n            \"status\": \"score\",\n            \"note\": \"\",\n            \"value\": \"4*(x-5)^2-4\"\n        }\n    },\n    \"prts\": {\n        \"prt1\": {\n            \"score\": 1,\n            \"penalty\": 0,\n            \"note\": [\n                \"prt1-1-T\",\n                \"ATCompSquare_true.\",\n                \"prt1-2-T\"\n            ],\n            \"errors\": []\n        }\n    },\n    \"Seed\": 1569710461\n}\n</code></pre> <p>If you save your data in a file <code>data.txt</code> then the following is minmal Python script to read in and decode the data.</p> <pre><code># Example Python code to load in JSON data from the STACK response analysis download.\nimport json\n\ndef load_json_lines(file_path):\n    dataset = []\n    with open(file_path, \"r\", encoding=\"utf-8\") as f:\n        for line_number, line in enumerate(f, start=1):\n            line = line.strip()\n            if not line:\n                continue  # skip empty lines\n            try:\n                data = json.loads(line)\n                pretty = json.dumps(data, indent=4)\n                print(f\"Line {line_number}:\\n{pretty}\\n\")\n                dataset.append(data)\n            except json.JSONDecodeError as e:\n                print(f\"Error parsing line {line_number}: {e}\")\n    return dataset\n\n# Example usage:\nif __name__ == \"__main__\":\n    file_path = \"data.txt\"  # Replace with your filename\n    dataset = load_json_lines(file_path)\n</code></pre>"},{"location":"en/STACK_question_admin/Reporting/#site-wide-usage","title":"Site-wide usage","text":"<p>Moodle Admins can get stats on site-wide STACK usage. </p>"},{"location":"en/STACK_question_admin/Testing/","title":"Testing, debugging and quality control","text":"<p>This page deals with testing questions and quality control. This is largely done through the question test functionality.</p> <p>High-quality question production needs care at each stage.  An authoring workflow is described separately.</p> <p>We have separate advice on fixing broken questions in a live quiz.</p>"},{"location":"en/STACK_question_admin/Testing/#testing-for-quality-control","title":"Testing for quality control","text":"<p>It is important to test questions to ensure they work correctly.  One approach would be for the teacher to repeatedly test them with various random numbers and inputs.  But this is inefficient and unreliable.</p> <p>Question Tests provide an automated mechanism through which the author may establish with confidence that the Potential Response Trees are processing the student answer as expected. They are based on the concept of \"unit testing\" from software development. Question variables can be included in the tests; indeed these are needed to define test inputs in the context of random values.</p> <p>Each test assigns values to</p> <ol> <li>any/all of the inputs.  These values may, naturally, depend on the    question variables.</li> <li>values for the score and any penalty.</li> <li>Answer notes from each of    the potential response trees.</li> </ol> <p>The teacher can opt to run the question tests from the preview window.  STACK automatically takes each test, assigns the values to inputs and attempts to submit it.  The results of the last answer note from each potential response tree is compared to that specified by the teacher.  Notice that this is a limitation of the system.  Specifying the complete route through the potential response tree would be too difficult and would discourage teachers from writing tests.</p> <p>If the score, penalty and answer note generated by each potential response tree matches that specified by the teacher, then the test will PASS, otherwise the test will FAIL. Note that failure of a test is a mismatch between outputs and expected outputs, not necessarily a sign that something is wrong with the question itself!</p> <p>The teacher can also examine by hand the outcomes generated by each step of each test, including full feedback generated.</p> <p>In this way, the teacher can record, within the question itself, how they expect the marking scheme to work for a variety of student answers.</p>"},{"location":"en/STACK_question_admin/Testing/#writing-tests","title":"Writing tests","text":"<ol> <li>Author and save your question.</li> <li>Navigate to the \"STACK question dashboard\". This page manages both question tests and deployed variants.  Initially you will have no tests or deployed variants.  Choose Add a test case...</li> <li>Specify values for each input.  This may use the question variables.  The values of these variables will be used for any random variants.</li> <li>Specify the expected outcomes for each potential response tree.  This includes the score, penalty and answer note.</li> <li>Currently only the last Answer Note, not the whole path through the potential response tree, is examined.  This is a limitation.</li> <li>Scores and penalties must be floats (not, e.g. 2/3) and are rounded to three decimal places for testing purposes.</li> <li>Once you have added the test case, STACK will automatically validate and submit these responses and display the outcomes.</li> <li>You may add as many test cases are you need.  It is sensible to add in the following.<ol> <li>The correct response.  There is a button which will copy the expression used as the \"Teacher's answer\" in the input as a basis for a test case to help create this test.</li> <li>One example of each distinction you wish to make, i.e. if you have added specific feedback then provide an answer you expect to trigger this.</li> <li>Some \"invalid\" responses, especially if these are syntactically-valid expressions.  E.g. If the answer is an equation such as , then 2x+1 might be invalid if you have chosen the input option \"check types\".  Adding a test case is useful to confirm this potential problem is caught by the question.  Leave the fields empty and the answer note <code>NULL</code> to indicate this.</li> <li>Add a totally incorrect answer.</li> </ol> </li> <li>If you leave the penalty field blank it will assume you mean the default penalty for the question.</li> </ol> <p>Normally test cases are constructed taking into account values of the question variables, so test-case construction can reflect any random variants.  If you start your test case with the tag <code>RAW:</code> (case sensitive) then the remainder of your input will be used as a raw string.  E.g. if your test case is <code>RAW:2 x</code> then your input test case will be <code>2 x</code>.  Note, this feature does not evaluate the expression further, and values of question variables will not be used as part of constructing the input for this test case.  However, the potential response tree will have access to the question variables later.  For example, if <code>n:42</code> in the question variables then typically student's who input <code>n</code> will get a validation error.  <code>RAW:n</code> allows you to create a test case, which will be displayed as <code>n</code> but later the PRTs will pick up the question variables.  This feature is intended to test invalid input rather than evaluation of test cases constructed from the random variables.  We can't have it both ways!</p> <p>If you start your test case with the tag <code>CT:</code> (case sensitive) then the remainder of your input will be evaluated as a castext string.  E.g. if your test case is  <code>CT:{#a#}{#v#}</code> then the castext <code>{#a#}{#v#}</code> will be evaluated, and the values of variables <code>a</code> and <code>v</code> placed next to each other to create an input string. This feature can be used to test input settings, such as insert stars, is working leading to a \"score\" state rather than an invalid state.  Please do not use <code>CT:{@a@}</code> which will generate LaTeX output!  For test-case construction we need to create Maxima syntax, not LaTeX.</p> <p>On the question testing page is a \"Send to CAS\" button.  Pressing this sends the question variables and general feedback to a special page which enables more efficient authoring of the feedback in the context of the values of the variables.  You still need to copy this by hand into the question edit form when you are satisfied.</p> <p>A Moodle administrator can run all of the questions tests within a particular course, or across the whole site by following the links on the STACK admin page.  It is useful to do this after upgrading the STACK code on the server to identify any test cases which have changed.</p> <p>Test cases can include a meaningful description of up to 255 characters.  This field is a simple string, and is not castext.</p>"},{"location":"en/STACK_question_admin/Testing/#test-case-construction-and-maxima-evaluation","title":"Test case construction and Maxima evaluation","text":"<p>Test cases are always written assuming <code>simp:false</code> regardless of the option set elsewhere.  If you want to construct a simplified test case then wrap this in <code>ev(... , simp)</code> to simplify the expression generating the test case.  This behaviour is required to enable construction of un-simplified test cases.</p> <p>Test cases are always written using the period <code>.</code> as the decimal separator.  This corresponds to strict Maxima syntax, which teachers should always use.</p> <p>You can (and should) construct test cases based on invalid expressions.  If the raw testcase expression cannot be sent to the CAS, e.g. a missing bracket, then this invalidity will be tested.</p> <p>While test case construction uses <code>simp:false</code> Maxima must \"evaluate\" the expression prior to the result being used by an input as a test case.  This will replace variables by their values.  E.g. the typical case is to define a variable such as <code>ta</code> as the teacher's answer in the question variables field and use this throughout the question.  This answer will either be simplified, or not, when the question variables are evaluated.  To construct a test case using the teacher's answer use <code>ta</code> as the test case input.</p> <p>It is easier to create a number of variables in the question variables field for wrong answers, e.g. <code>wa1</code>, <code>wa2</code>, and construct the test cases in the question variables in advance.</p> <p>For matrix inputs the test case must be a correct Maxima statement, e.g. <code>matrix([1,2],[2,3])</code>.  There is currently no option to construct test cases by filling in individual input boxes here, which restricts the ability to create test cases of individual syntactically invalid matrix entries.  Similarly, for the textarea and equivalence reasoning input types the test case should be constructed as a list, just as the teacher's answer field is constructed.</p> <p>Some evaluations in Maxima do actually more than just replace existing variables with the values from the question variables. For example, in Maxima try</p> <pre><code>simp:false;\nf:x*sin(1/x);\nlimit(f,x,0);\n</code></pre> <p>Notice here, that while <code>simp:false</code> the limit is still evaluated.  This is not \"simplification\".  For the full story, please refer to the Maxima docs on the <code>ev</code> command.</p> <p>In this case, you can prevent evaluation of limits by using an apostrophe in the test case construction to prevent evaluation.</p> <pre><code>simp:false;\nf:x*sin(1/x);\n'limit(f,x,0);\n</code></pre>"},{"location":"en/STACK_question_admin/Testing/#test-case-construction-and-mcq","title":"Test case construction and MCQ","text":"<p>Remember that MCQ input types return a CAS expression.  However, you must ensure each testcase actually corresponds to an option provided to the student, otherwise STACK will generate a runtime error.  Hence you cannot construct a test case from the list provided as the \"Teacher's answer\" in these input types!</p> <p>It is sensible to use the helper functions.  E.g. for a radio/dropdown use</p> <pre><code>tc1:first(mcq_correct(ta));\n</code></pre> <p>For the checkbox type you will need the whole list.</p> <pre><code>tc1:mcq_correct(ta);\n</code></pre>"},{"location":"en/STACK_question_admin/Testing/#test-case-construction-and-numerical-precision","title":"Test case construction and numerical precision","text":"<p>You can construct test cases using the functions such as <code>dispdp</code> to create a test-case input with trailing zeros.  This is needed if the input, or answer test, is testing for a minimum number of decimal places or significant figures.</p>"},{"location":"en/STACK_question_admin/Testing/#test-case-construction-and-decimal-separators","title":"Test case construction and decimal separators","text":"<p>The decimal separator option (e.g. <code>.</code> or <code>,</code>) is a very thin layer based on the student input.  The teacher must always use a <code>.</code> (full stop) as the decimal separator in question variables.  Consistent with this, all test-case construction must use a <code>.</code> (full stop) as the decimal separator.  This means it's hard to test the functionality of the decimal separator option (sorry), but otherwise there is genuine confusion in the internal logic about when to assume a <code>,</code> is a decimal separator or a list separator.  Also, if you change this option in the question you do not need to change all your test cases.</p>"},{"location":"en/STACK_question_admin/Testing/#testing-values-of-variables","title":"Testing values of variables","text":"<p>STACK provides a special function <code>s_assert(ex1, ex2)</code> which can be used in the question variables and feedback variables.  If <code>is(ex1=ex2)</code> does not evaluate to <code>true</code> then this function throws a maxima error message.  This can be used to create a run-time error and prevent a question, and a particular variant, being used.</p> <p>For example, if you have an expression <code>1/n</code> and the variable <code>n</code> is randomly generated you need to prevent a random version being zero.  In this case put the following in the question variables.</p> <pre><code>s_assert(is(n=0), false);\n</code></pre> <p>This test will throw an error when <code>n</code> is zero.</p> <p>In many situations this kind of test creation will be simpler than mapping onto student inputs.</p>"},{"location":"en/STACK_question_admin/Testing/#stack-maxima-sandbox","title":"STACK-Maxima sandbox","text":"<p>It is very useful to be able to use the desktop Maxima application to test questions.  To do this it is very helpful to load all the STACK libraries.  Details on how to do this are in the STACK-Maxima sandbox page.</p>"},{"location":"en/STACK_question_admin/Testing/#Simplification","title":"Simplification","text":"<p>You can set global simplification flags in two places within questions:</p> <ol> <li>Globally in the question.</li> <li>In each potential response tree.</li> </ol> <p>Regardless of what settings you use here the expressions you enter for inputs in question tests are not simplified.  This is necessary.  For example, if your question is <code>what is \\({@a@}+{@b@}\\)?</code> where <code>{@a@}</code> and <code>{@b@}</code> are randomly generated.  You will need to set the question level option <code>simplify:false</code> to prevent the student typing in the sum itself as an answer.  Then you will probably need separate tests for the expressions <code>a+b</code> and <code>ev(a+b,simp)</code> to make sure the student hasn't typed in the sum instead of the value of the sum.  For this reason, to enable \"unsimplified\" expressions to be included as question tests we do not simplify test inputs regardless of the options used in the question.</p> <p>(If you have set <code>simplify:true</code> everywhere in your question, and you are only establishing algebraic equivalence of your answers anyway, \"un-simplified\" expressions as inputs to the tests will not matter.)</p>"},{"location":"en/STACK_question_admin/Testing/#next-steps","title":"Next steps","text":"<p>When you are done testing a question which uses randomization, you need to deploy variants of the question.</p>"},{"location":"en/STACK_question_admin/Testing_questions_on_other_sites/","title":"Running question tests for questions on other sites (command line)","text":"<p>You can bulk test all question tests on all variants of all question by using the command line bulk-test script contained in the <code>cli</code> directory as follows:</p> <pre><code>php bulktestall.php\n</code></pre> <p>Since you have command line access to the development server you will need to edit this line</p> <pre><code>$DB-&gt;connect('live.database.host.name', 'read_only_user', 'pa55w0rd', 'live_database_name', 'mdl_', $CFG-&gt;dboptions);\n</code></pre> <p>to specify the remote database.  Then run the command line script (perhaps using something like screen to allow this to run in the background while you logout) with the <code>remote</code> option.</p> <pre><code>php bulktestall.php --remote\n</code></pre>"},{"location":"en/STACK_question_admin/Testing_questions_on_other_sites/#running-question-tests-for-questions-on-other-sites-web","title":"Running question tests for questions on other sites (web)","text":"<p>When you upgrade to a new version of STACK, it would be reassuring to know beforehand whether there is any change in behaviour in STACK which will affect your existing questions.</p> <p>After you have done the upgrade, it is easy to run the question tests in bulk, using the link on the STACK plugin admin screen. </p> <p>It is possible to run the code from the new STACK release (with a few modifications) on your development server, but have it open a read-only connection to your live database, in order to load the questions and their corresponding tests.</p> <p>The following patch is provided as-is. It will probably require tinkering with to work in any given situation.</p> <pre><code>diff --git a/bulktest.php b/bulktest.php\nindex 7974af2..a6614f2 100644\n--- a/bulktest.php\n+++ b/bulktest.php\n@@ -29,13 +29,14 @@ require_once($CFG-&gt;libdir . '/questionlib.php');\n require_once(__DIR__ . '/locallib.php');\n require_once(__DIR__ . '/stack/utils.class.php');\n require_once(__DIR__ . '/stack/bulktester.class.php');\n+require_once(__DIR__ . '/stack/cas/connectorhelper.class.php');\n\n\n // Get the parameters from the URL.\n $contextid = required_param('contextid', PARAM_INT);\n\n // Login and check permissions.\n-$context = context::instance_by_id($contextid);\n+$context = context_system::instance();\n require_login();\n require_capability('qtype/stack:usediagnostictools', $context);\n $PAGE-&gt;set_url('/question/type/stack/bulktest.php', array('contextid' =&gt; $context-&gt;id));\n@@ -50,8 +51,8 @@ if ($context-&gt;contextlevel == CONTEXT_MODULE) {\n     $PAGE-&gt;set_cm($cm, $DB-&gt;get_record('course', array('id' =&gt; $cm-&gt;course), '*', MUST_EXIST));\n }\n\n-// Create the helper class.\n-$bulktester = new stack_bulk_tester();\n+// Cache the connection settings.\n+stack_connection_helper::make();\n\n // Release the session, so the user can do other things while this runs.\n \\core\\session\\manager::write_close();\n@@ -60,9 +61,25 @@ $bulktester = new stack_bulk_tester();\n echo $OUTPUT-&gt;header();\n echo $OUTPUT-&gt;heading($title);\n\n+// Connect to other database.\n+$bulktestrealdb = $DB;\n+if (!$DB = moodle_database::get_driver_instance($CFG-&gt;dbtype, $CFG-&gt;dblibrary)) {\n+    throw new dml_exception('dbdriverproblem', \"Unknown driver $CFG-&gt;dblibrary/$CFG-&gt;dbtype\");\n+}\n+$DB-&gt;connect('live.database.host.name', 'read_only_user', 'pa55w0rd', 'live_database_name', 'mdl_', $CFG-&gt;dboptions);\n+\n+$context = context::instance_by_id($contextid);\n+\n+// Create the helper class.\n+$bulktester = new stack_bulk_tester();\n+\n // Run the tests.\n list($allpassed, $failing) = $bulktester-&gt;run_all_tests_for_context($context);\n\n // Display the final summary.\n $bulktester-&gt;print_overall_result($allpassed, $failing);\n+\n+// Switch back to the read DB.\n+$DB = $bulktestrealdb;\n+\n echo $OUTPUT-&gt;footer();\ndiff --git a/bulktestindex.php b/bulktestindex.php\nindex 3d5eafa..f84b4bd 100644\n--- a/bulktestindex.php\n+++ b/bulktestindex.php\n@@ -38,13 +38,20 @@ $PAGE-&gt;set_url('/question/type/stack/adminui/bulktestindex.php');\n $PAGE-&gt;set_context($context);\n $PAGE-&gt;set_title(stack_string('bulktestindextitle'));\n\n-// Create the helper class.\n-$bulktester = new stack_bulk_tester();\n-\n // Display.\n echo $OUTPUT-&gt;header();\n echo $OUTPUT-&gt;heading(stack_string('replacedollarsindex'));\n\n+// Connect to other database.\n+$realdb = $DB;\n+if (!$DB = moodle_database::get_driver_instance($CFG-&gt;dbtype, $CFG-&gt;dblibrary)) {\n+    throw new dml_exception('dbdriverproblem', \"Unknown driver $CFG-&gt;dblibrary/$CFG-&gt;dbtype\");\n+}\n+$DB-&gt;connect('live.database.host.name', 'read_only_user', 'pa55w0rd', 'live_database_name', 'mdl_', $CFG-&gt;dboptions);\n+\n+// Create the helper class.\n+$bulktester = new stack_bulk_tester();\n+\n echo html_writer::start_tag('ul');\n foreach ($bulktester-&gt;get_stack_questions_by_context() as $contextid =&gt; $numstackquestions) {\n     echo html_writer::tag('li', html_writer::link(\n@@ -53,6 +60,9 @@ foreach ($bulktester-&gt;get_stack_questions_by_context() as $contextid =&gt; $numstac\n }\n echo html_writer::end_tag('ul');\n\n+// Switch back to the read DB.\n+$DB = $realdb;\n+\n if (has_capability('moodle/site:config', context_system::instance())) {\n     echo html_writer::tag('p', html_writer::link(\n             new moodle_url('/question/type/stack/bulktestall.php'), stack_string('bulktestrun')));\ndiff --git a/stack/cas/connectorhelper.class.php b/stack/cas/connectorhelper.class.php\nindex 40ef26e..d8ba3e1 100644\n--- a/stack/cas/connectorhelper.class.php\n+++ b/stack/cas/connectorhelper.class.php\n@@ -78,6 +78,11 @@ abstract class stack_connection_helper {\n                 throw new stack_exception('stack_cas_connection: Unknown platform ' . self::$config-&gt;platform);\n         }\n\n+        global $bulktestrealdb;\n+        if (!empty(($bulktestrealdb))) {\n+            // Use the real db as the cache for performance.\n+            return new stack_cas_connection_db_cache($connection, $debuglog, $bulktestrealdb);\n+        }\n         switch (self::$config-&gt;casresultscache) {\n             case 'db':\n                 global $DB;\n</code></pre> <p>As an example of the kind of tinkering that might be required, and the time I devised this patch, the new version of STACK had a database change, which had not yet been applied to our live database. Therefore, I had to tweak the question loading code as follows:</p> <pre><code>diff --git a/questiontype.php b/questiontype.php\nindex 6dcc96d..02c4354 100644\n--- a/questiontype.php\n+++ b/questiontype.php\n@@ -348,7 +348,7 @@ class qtype_stack extends question_type {\n         $question-&gt;inputs = $DB-&gt;get_records('qtype_stack_inputs',\n                 array('questionid' =&gt; $question-&gt;id), 'name',\n                 'name, id, questionid, type, tans, boxsize, strictsyntax, insertstars, ' .\n-                'syntaxhint, syntaxattribute, forbidwords, allowwords, forbidfloat, requirelowestterms, ' .\n+                'syntaxhint, 0 AS syntaxattribute, forbidwords, allowwords, forbidfloat, requirelowestterms, ' .\n                 'checkanswertype, mustverify, showvalidation, options');\n\n         $question-&gt;prts = $DB-&gt;get_records('qtype_stack_prts',\n@@ -403,7 +403,7 @@ class qtype_stack extends question_type {\n                 'strictSyntax'    =&gt; (bool) $inputdata-&gt;strictsyntax,\n                 'insertStars'     =&gt; (int) $inputdata-&gt;insertstars,\n                 'syntaxHint'      =&gt; $inputdata-&gt;syntaxhint,\n-                'syntaxAttribute' =&gt; $inputdata-&gt;syntaxattribute,\n+                'syntaxAttribute' =&gt; '0',\n                 'forbidWords'     =&gt; $inputdata-&gt;forbidwords,\n                 'allowWords'      =&gt; $inputdata-&gt;allowwords,\n                 'forbidFloats'    =&gt; (bool) $inputdata-&gt;forbidfloat,\n</code></pre>"},{"location":"en/STACK_question_admin/Tidy_Tool/","title":"Tidy Tool","text":"<p>STACK potential response trees, and other parts of questions, can easily get messy. You may have one long question and delete some inputs, or duplicate a question and use it as a template but have to heavily edit it. Another example is to add nodes in an existing PRT and place these nodes between existing nodes. The numbering won't be in order and it will make it harder to follow the PRT logic.</p> <p>In STACK, there is a \"tidy tool\" that can help with resolving these annoying issues. </p> <p>You can find the tool under the \"STACK question dashboard\" -&gt; \"Tidy inputs and PRTs\"</p> <p>This opens a page where you can see the preview of the question, the name of each input and the Feedback that corresponds to each specific input.  You have the options to change the name of each Input, the name of each PRT (feedback option) and the name of each node in each individual PRT. </p> <p>Here are 2 examples to demonstrate this feature. </p>"},{"location":"en/STACK_question_admin/Tidy_Tool/#a-question-with-1-input-and-messy-nodes-in-the-prt","title":"A question with 1 input and messy nodes in the PRT","text":"<p>The tool suggests the new names for the nodes so they will appear in arithmetic order. </p> <p></p> <p>Go back into the question and you can see the change at the nodes of the PRT.</p> <p></p>"},{"location":"en/STACK_question_admin/Tidy_Tool/#a-question-with-messy-input-names","title":"A question with messy input names","text":"<p>The question has five inputs but because some inputs were removed, the names of the inputs are not in order. You need to type the new names of the inputs and PRTs.</p> <p></p>"},{"location":"en/STACK_question_admin/Library/","title":"The STACK question library","text":"<p>STACK is distributed with a large library of sample questions in</p> <pre><code> /qtype_stack/samplequestions\n</code></pre> <p>The sample questions are in English.</p>"},{"location":"en/STACK_question_admin/Library/#stack-library","title":"STACK library #","text":"<p>This is a collection of individual question files which can be imported via the STACK library page. Begin creating a new STACK question in your required question category. On the question edit form, rather than entering question data, click on the 'STACK question library' link. You can then browse and import questions.</p> <p>The questions are contained in the STACK source code</p> <pre><code> /qtype_stack/samplequestions/stacklibrary\n</code></pre> <p>This directory contains sub-directories with large libraries of questions, some of which arose from specific projects:</p> <ul> <li><code>Algebra-Refresher</code> contains questions to cover all parts of the The Map of Algebraic Manipulation. Question numbers are linked to the map.</li> <li><code>Calculus-Refresher</code> contains questions to cover all of the Calculus Refresher by Dr Tony Croft and Dr Anthony Kay.</li> <li><code>Doc-Examples</code> contains questions linked to documentation pages.  These are not intended as exemplar questions!  (They may be incomplete, and illustrate a starting point for an exercise for question authors to complete.) This is split by documentation section.</li> <li><code>Features</code> contains questions to illustrate the features of STACK such as different input types.  These are intended as exemplar questions.</li> <li><code>Introductory-Mathematics</code> is a comprehensive course of mathematics questions for students at the upper level of school or the transition to university. </li> <li><code>Templates</code> contains questions which are templates for question authors to use. They should require a small amount of editing to make them into a complete tailored question.</li> <li><code>Topics</code> contains questions on a variety of mathematical topics.</li> </ul> <p>We would encourage colleagues to release their materials under a creative commons licence.  Please contact the developers.</p> <p>A significant advantage of using questions from the STACK library is that they are distributed with the source code, and therefore use features which match your version of STACK.</p>"},{"location":"en/STACK_question_admin/Library/#moodle-courses-released-with-stack","title":"Moodle courses released with STACK","text":"<p>STACK is released with a demonstration course.</p> <pre><code> /qtype_stack/samplequestions/STACK-demo.mbz\n</code></pre> <p>We have also release a course containing all the HELM materials, which are comprehensive courses in engineering mathematics.</p> <pre><code> /qtype_stack/samplequestions/HELM_Sept_23.mbz\n</code></pre> <p>You can \"restore\" these into your version of Moodle.  It has a number of quizzes, pre-created with questions and deployed variants.  It also has a large question bank, with questions not arranged into quizzes.</p>"},{"location":"en/STACK_question_admin/Library/#open-educational-resources","title":"Open Educational Resources","text":"<ul> <li>The FETLAR project released a large collection of STACK questions in English covering calculus and algebra in April 2010.  These materials have been redeveloped are now part of the STACK library.</li> <li>Abacus is a material bank for STEM education which seeks to produce, share and host high-quality educational material between collaborators.  For more information see https://abacus.aalto.fi/ </li> </ul>"},{"location":"en/STACK_question_admin/Library/Algebra_refresher/","title":"A pocket map of algebraic manipulation","text":""},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#introduction-and-use","title":"Introduction and use","text":"<p>This is a markdown copy of a summary of a pocket map of algebraic manipulation by Tony Barnard. The original PDF summary is available as a PDF and the TeX source code.</p> <p>The numbering of sections in this document corresponds to the numbering of questions and quizzes in the questions in the library.</p>"},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#the-map-of-algebraic-manipulation","title":"The Map of Algebraic Manipulation","text":"<p>At the heart of the secondary school algebra curriculum lies the development of skills in algebraic manipulation. This little booklet collects together for reference some of the stepping stones of experiences in the development of these basic algebraic skills.</p> <p>A guiding factor in the categorisation of the contents has been the splitting of an item into a range of separate cases where it was felt that these cases constituted significantly different experiences for a learner whose development in that item was at an early stage. Manipulation with numerical fractions has been dealt with fairly extensively in this sense, as it was considered that experience with a wide range of possibilities was essential in order for later progress in algebra. Similarly situations in which a sum or difference of two terms in an algebraic expression has to be mentally perceived as a single item, have been noted explicitly. On the other hand, there has been an attempt to balance the conflicting aims of comprehensiveness and conciseness. So, for example, in listing the three kinds of behaviour for the roots of a quadratic equation, it was considered unnecessary to split this further and give two different graphs for each case, relating to whether the turning point was a maximum or minimum, as this was felt to be a less significant distinction at this stage in the development. Generally speaking things have been broken down in the hope that they will be put together, and if a learner is unable to see why an item comes in so many 'different' cases, having developed to a stage where the distinctions seem insignificant, this is to be regarded as a success!</p> <p>This booklet is intended for use by teachers rather than by pupils. However, as well as listing the items from the pupil's viewpoint in getting to grips with what you actually do in a particular situation, the language has also been chosen with an eye on teacher-pupil dialogue. Thus practical descriptions such as ''two-term expression\", ''no number in front of the \" and ''no factor in common with\" have been used instead of technical expressions such as ''binomial\", ''monic\" and ''relatively prime\". As an aid to describing the items, each is accompanied by at least one illustrative example. Sometimes only the 'question' has been given, sometimes the 'answer' has also been given and sometimes the 'working' has been included as well. In each case, the aim of keeping the booklet as concise as possible has been at the forefront, and the 'answer' or 'working' have been included only if it was felt that doing so would give a clearer picture of the experiences in algebraic manipulation encompassed by the item.</p> <p>Finally it should be emphasised that, in summarising this collection of pupil oriented steps in algebraic manipulation, there is no desire to lay out a prescribed route that everyone must follow. On the contrary it is hoped that the booklet might be thought of simply as a pocket map of the landscape.</p> <p>I should like to thank Ian Evans and Tom Roper for their valuable comments in the preparation of this booklet.</p> <p>Tony Barnard</p>"},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#1-combinations-of-arithmetic-operations","title":"1 Combinations of arithmetic operations","text":"<p> (+)+(+), (+)+(-), (-)+(+), (-)+(-) \\quad\\rightarrow\\quad Example: 7+(-6), 5-(-9), -6-(+4), (-3) \\times (-1),</p> <p> (+)-(+), (+)-(-), (-)-(+), (-)-(-) \\quad\\rightarrow\\quad Example: (+2) \\times (-7), (-6) \\div (+2), (-9) \\div (-3),</p> <p> (+)\\times(+), (+)\\times(-), (-)\\times(+), (-)\\times(-) \\quad\\rightarrow\\quad Example: 2-3+1, -6+2+7, (4\\times 3)+2 </p> <p> (+)\\div(+), (+)\\div(-), (-)\\div(+), (-)\\div(-) \\quad\\rightarrow\\quad Example: 4 \\times(3+2), 4+(3\\times 2), 3-(4\\div 2).</p> <p>'Brackets, Of, Division,Multiplication, Addition,Subtraction.'</p> <p>Powers of whole numbers   \\quad\\rightarrow\\quad Example: 2^3 \\times 2^4 = 2^7, 2^5 \\div 2^2 = 2^3, (5^2)^3 = 5^6, (2 \\times 3)^4 = 2^4 \\times 3^4.</p> <p>'Brackets, Indices, Division, Multiplication,Addition, Subtraction.'</p> <p>Negative and fractional powers  \\quad\\rightarrow\\quad Example: 2^{-1}=\\frac{1}{2}, 2^0 = 1, 3^{-2} = \\frac{1}{3^2} = \\frac{1}{9}, 9^\\frac{1}{2} = \\sqrt{9} = 3, 8^\\frac{1}{3} = \\sqrt[3]{8} =2.</p>"},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#2-factorisation-of-whole-numbers","title":"2 Factorisation of whole numbers","text":"<p>Prime factorisations  \\quad\\rightarrow\\quad Example: 228 = 2^2 \\times 3 \\times 19, 1734 = 2 \\times 3 \\times 17^2.</p> <p>Highest common factor  \\quad\\rightarrow\\quad Example:   HCF of 228 and 1734 is 2 \\times 3 = 6.</p> <p>Least common multiple   \\quad\\rightarrow\\quad Example:  LCM of 228 and 1734 is 2^2 \\times 3 \\times 17^2 \\times 19 = 65892.</p> <p>Reduction of fractions to lowest terms   \\quad\\rightarrow\\quad Example: \\frac{10}{18} = \\frac{5}{9}.</p> <p>Change of improper fractions to mixed fractions, and vice-versa \\quad\\rightarrow\\quad Example: \\frac{13}{5} = 2\\frac{3}{5}, 1\\frac{7}{8} = \\frac{15}{8}.</p> <p>Products and quotients of surds  \\quad\\rightarrow\\quad Example: \\sqrt{12} \\times \\sqrt{6} = \\sqrt{2^2 \\times 3} \\times \\sqrt{2 \\times 3} = 2 \\times 3 \\times \\sqrt{2} = 6\\sqrt{2},  \\frac{\\sqrt{108}}{\\sqrt{150}} = \\frac{\\sqrt{2^2 \\times 3^3}}{\\sqrt{2 \\times 3 \\times 5^2}} = \\sqrt{\\frac{2^2 \\times 3^3}{2 \\times 3 \\times 5^2}} = \\sqrt{\\frac{2 \\times 3^2}{5^2}} = \\frac{3\\sqrt{2}}{5}. </p>"},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#3-addition-and-subtraction-of-fractions","title":"3 Addition and subtraction of fractions","text":""},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#31-nature-of-denominators","title":"3.1 Nature of denominators","text":"<p>Same denominator \\quad\\rightarrow\\quad Example: \\frac{4}{7} + \\frac{2}{7}, \\frac{5}{6} - \\frac{1}{6}.</p> <p>One denominator a multiple of the other   \\quad\\rightarrow\\quad Example: \\frac{1}{4} + \\frac{5}{12}, \\frac{9}{10} - \\frac{4}{5}.</p> <p>Denominators having no common factor\\quad\\rightarrow\\quad Example: \\frac{2}{3} + \\frac{4}{7}, \\frac{5}{8} - \\frac{1}{3}.</p> <p>Denominators having a common factor \\quad\\rightarrow\\quad Example: \\frac{4}{9} + \\frac{1}{6}, \\frac{7}{12} - \\frac{3}{8}.</p>"},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#32-mixed-numbers","title":"3.2 Mixed numbers","text":"<p>(Addition) Fractional parts adding to less than 1 \\quad\\rightarrow\\quad Example: 1\\frac{3}{16} + 2\\frac{3}{4} = 3\\frac{15}{16} </p> <p>(Addition) Fractional parts adding to greater than 1 \\quad\\rightarrow\\quad Example: 3\\frac{1}{2} + 2\\frac{2}{3} = 6\\frac{1}{6} </p> <p>(Subtraction) Fractional part of smaller fraction less than fractional part of greater fraction \\quad\\rightarrow\\quad Example: 4\\frac{5}{6} - 2\\frac{3}{4} = 2\\frac{1}{12} </p> <p>(Subtraction) Fractional part of smaller fraction greater than fractional part of greater fraction \\quad\\rightarrow\\quad Example: 5\\frac{1}{6} - 3\\frac{4}{9} = 1\\frac{13}{18} </p>"},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#33-number-of-fractions","title":"3.3 Number of fractions","text":"<p>Two, three, ...  \\quad\\rightarrow\\quad Example: \\frac{7}{10} + \\frac{1}{4} + \\frac{3}{5}, 2\\frac{3}{8} + 4\\frac{5}{12} + 1\\frac{2}{3}.</p>"},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#34-combination-of-operations","title":"3.4 Combination of operations","text":"<p> a+b, a - b, a-b+c, ...  \\quad\\rightarrow\\quad Example: \\frac{5}{6} - \\frac{2}{3} - \\frac{1}{9}, 1\\frac{2}{3} - 3\\frac{7}{8} + 4\\frac{5}{6}.</p>"},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#35-special-case","title":"3.5 Special case","text":"<p>Fraction minus itself; e.g. \\frac{4}{5} - \\frac{4}{5}. x - x = 0, rather than \\frac{4}{5} - \\frac{4}{5} = \\frac{4-4}{5} = \\frac{0}{5} = 0.</p>"},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#4-multiplication-and-division-of-fractions","title":"4 Multiplication and division of fractions","text":""},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#41-nature-of-component-fractions","title":"4.1 Nature of component fractions","text":"<p>Fraction times whole number which is relatively prime to the denominator \\quad\\rightarrow\\quad Example: \\frac{2}{9} \\times 4 </p> <p>Fraction times whole number which is a factor of the denominator (cancelling involved)  \\quad\\rightarrow\\quad Example: \\frac{3}{8} \\times 4 </p> <p>Fraction times whole number which has a factor in common with the denominator (cancelling involved)  \\quad\\rightarrow\\quad Example: \\frac{5}{12} \\times 9 </p> <p>Fraction times fraction with no cancelling involved \\quad\\rightarrow\\quad Example: \\frac{2}{7} \\times \\frac{3}{5} </p> <p>Fraction times fraction with cancelling involved (preferably before multiplying)  \\quad\\rightarrow\\quad Example: \\frac{14}{15} \\times \\frac{3}{4} </p> <p>Fraction divided by whole number which is a factor of the numerator \\quad\\rightarrow\\quad Example: \\frac{4}{5} \\div 2 </p> <p>Fraction divided by whole number which has no factor in common with the numerator \\quad\\rightarrow\\quad Example: \\frac{3}{4} \\div 5 </p> <p>Fraction divided by whole number which has a factor in common with the numerator (cancelling involved)  \\quad\\rightarrow\\quad Example: \\frac{4}{7} \\div 6 </p> <p>Fraction divided by fraction with no cancelling involved \\quad\\rightarrow\\quad Example: \\frac{5}{8} \\div \\frac{2}{3} </p> <p>Fraction divided by fraction with cancelling involved \\quad\\rightarrow\\quad Example: \\frac{6}{7} \\div \\frac{9}{14} </p>"},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#1411-mixed-numbers","title":"14.1.1 Mixed numbers","text":"<p>In question \\quad\\rightarrow\\quad Example: 1\\frac{1}{5} \\times \\frac{1}{3} = \\frac{2}{5}, 3 \\div 4\\frac{1}{2} = \\frac{2}{3}.</p> <p>In answer \\quad\\rightarrow\\quad Example: \\frac{5}{16} \\times 6 = 1\\frac{7}{8}, \\frac{3}{5} \\div \\frac{4}{7} = 1\\frac{1}{20}.</p> <p>In both question and answer \\quad\\rightarrow\\quad Example: \\frac{3}{4} \\times 3\\frac{1}{5} = 2\\frac{2}{5}, 3\\frac{1}{6} \\div 1\\frac{1}{2} = 2\\frac{1}{9}.</p>"},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#412-number-of-fractions","title":"4.1.2 Number of fractions","text":"<p>Two, three, ...  \\quad\\rightarrow\\quad Example: \\frac{2}{5} \\times \\frac{1}{3} \\times \\frac{15}{16}, 1\\frac{1}{3} \\times 2\\frac{1}{4} \\times 1\\frac{7}{12}.</p>"},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#413-combination-of-operations","title":"4.1.3 Combination of operations","text":"<p> a \\times b, a \\div b, a \\times b \\div c, a \\div (b \\times c), \\quad\\rightarrow\\quad Example: \\frac{2}{3} \\div \\left(\\frac{1}{2} \\times \\frac{5}{6} \\right),</p> <p> (a \\div b) \\times c, a \\div (b \\div c), (a \\div b) \\div c, ...  \\quad\\rightarrow\\quad Example: \\left(\\frac{9}{10} \\times 6\\frac{2}{3} \\right) \\div 2 \\frac{1}{4}.</p>"},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#414-special-case","title":"4.1.4 Special case","text":"<p>Fraction divided by itself; e.g. \\frac{2}{3} \\div \\frac{2}{3}. x \\div x = 1 (or \\frac{x}{x} = 1), rather than \\frac{2}{3} \\times \\frac{3}{2} = \\frac{1}{1} = 1.</p>"},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#5-combinations-of-arithmetic-operations-on-fractions","title":"5 Combinations of arithmetic operations on fractions","text":"<p>Including fractions in which the numerator and denominator are themselves a sum or difference of two fractions.</p> <p> 5\\frac{1}{4} - \\left(1\\frac{1}{5} \\times \\frac{15}{16} \\right),\\ \\left( \\frac{3}{10} \\div \\frac{1}{4} \\right)  + 2 \\frac{1}{5},\\ 3\\frac{3}{8} \\left(  4 \\frac{2}{3} + 1\\frac{3}{7}\\right), \\left( \\frac{1}{3} + \\frac{1}{2}\\right)  \\left(  2\\frac{1}{2} + 1 \\frac{1}{4} \\right),\\ \\frac{2+\\frac{3}{8}}{1\\frac{1}{3}+\\frac{1}{4}},\\ \\frac{1\\frac{1}{2}+\\frac{2}{3}}{\\frac{5}{6}},\\ \\frac{\\frac{4}{9} + \\frac{5}{6}}{\\frac{5}{8} - \\frac{7}{12}}. </p> <p>Substituting numbers for letters \\quad\\rightarrow\\quad Example: \\frac{s^2 + 2t^2}{3 - 2t} when s = \\frac{3}{8} and t = \\frac{2}{5} </p>"},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#6-simplifying-algebraic-expressions","title":"6 Simplifying algebraic expressions","text":""},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#61-collecting-like-terms","title":"6.1 Collecting like terms","text":""},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#611-linear","title":"6.1.1 Linear","text":"<p>Numbers and one letter \\quad\\rightarrow\\quad Example: 6-2x-4 + 3x </p> <p>Two (or more) letters \\quad\\rightarrow\\quad Example: 2a + b - c + 3a - 2b </p> <p>Numbers and two (or more) letters \\quad\\rightarrow\\quad Example: 5s + 3t - 1 - 2s + t - 6 </p>"},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#612-higher-orders","title":"6.1.2 Higher orders","text":"<p>Numbers and terms in one letter \\quad\\rightarrow\\quad Example: x^2 - 2x^3 + 1 - 3x^2 - 4 + x + 5x^3 </p> <p>Numbers and terms in two (or more) letters \\quad\\rightarrow\\quad Example: xy^2 - y - xy + 2 + x^2 + 3xy^2 + 4y </p>"},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#613-compound-terms-non-removal-of-brackets","title":"6.1.3 'Compound terms' (non-removal of brackets)","text":"<p> 2(4x+1)+3(4x+1) = 5(4x+1), 7(a+b) - 4(a+b) = 3(a+b).</p>"},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#62-powers-of-single-term-expressions","title":"6.2 Powers of single-term expressions","text":"<p>Rules of indices, mainly for particular integer values of m and n:</p> <p> a^ma^n = a^{m+n}, a^m \\div a^n = a^{m-n}, (a^m)^n = a^{mn}, \\quad\\rightarrow\\quad Example: (a^2)^3 = a^6, (ab)^3 = a^3b^3, a^0 = 1, a^{-1} = \\frac{1}{a}, a^{-n} = \\frac{1}{a^n},(ab)^n = a^nb^n \\quad\\rightarrow\\quad Example: \\left(  \\frac{1}{a} \\right)  ^{-2} = a^2,(3a)^2 = 9a^2, (2a^2b)^3 = 8a^6b^3.</p> <p>Fractional indices and surds  \\quad\\rightarrow\\quad Example: a^{\\frac{1}{n}} = \\sqrt[n]{a},  a^{\\frac{m}{n}} = \\sqrt[n]{a^m} = \\left(  \\sqrt[n]{a} \\right) ^m.  \\quad\\rightarrow\\quad Example: \\left(  2 \\sqrt{a}\\right)  ^4 = 16a^2, (4a)^{\\frac{1}{2}} \\div a^\\frac{3}{2} = \\frac{2}{a}.</p> <p>Substituting numbers for letters \\quad\\rightarrow\\quad Example: a^\\frac{3}{4} + b^\\frac{2}{3} when a = 16 and b = 27, \\sqrt{(y^2 + z^2)x^{-1}} when x = 4, y = 6 and z = 8.</p>"},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#63-multiplying-and-dividing-single-term-expressions","title":"6.3 Multiplying and dividing single-term expressions","text":"<p>Terms in a single letter   \\quad\\rightarrow\\quad Example: a \\times a \\times a = a^3, b^4 \\div b^2 = b^2, c^2 \\div c^3 = \\frac{1}{c}.</p> <p>Terms in a single letter with numbers   \\quad\\rightarrow\\quad Example: 5a \\times 2a^2 = 10a^3, 6b^2 \\div 2b = 3b.</p> <p>Terms involving more than one letter \\quad\\rightarrow\\quad Example: 4a \\times 3b = 12ab, 8a \\div 2b = \\frac{4a}{b}, 9a^3 \\div 6ab = \\frac{3a^2}{b}.</p>"},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#7-removing-brackets","title":"7 Removing brackets","text":""},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#71-multiplying-single-term-expression-and-bracket","title":"7.1 Multiplying single-term expression and bracket","text":"<p>Number times linear expression in one letter \\quad\\rightarrow\\quad Example: 2(3x +4), -3(x+2).</p> <p>Number times linear expression in two (or more) letters   \\quad\\rightarrow\\quad Example: 3(a-2b), -2(x+4y).</p> <p>Minus sign on its own outside bracket \\quad\\rightarrow\\quad Example: -(x+3), -(a-b), -(-2x-1).</p> <p>Letter times linear expression in same letter   \\quad\\rightarrow\\quad Example: x(x+2) </p> <p>Letter times linear expression in two (or more) letters   \\quad\\rightarrow\\quad Example: a(b-c) </p> <p>Higher order terms \\quad\\rightarrow\\quad Example: x^2(1-x), x(x^3+x).</p> <p>More than two terms inside bracket \\quad\\rightarrow\\quad Example: a(a^2-ab+b^2), xy(x+y-1).</p>"},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#72-multiplying-two-brackets-each-with-two-terms","title":"7.2 Multiplying two brackets, each with two terms","text":""},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#721-linear-terms-in-a-single-letter","title":"7.2.1 Linear terms in a single letter","text":"<p>Various types, illustrated by the following examples   (x+1)(x+2),\\  (x+1)(x-2),\\  (x-1)(x+2),\\  (x-1)(x-2),\\\\ (x+1)(2+x),\\ (x+1)(2-x),\\ (x-1)(2+x),\\ (x-1)(2-x),\\\\ (1+x)(x+2),\\ (1+x)(x-2),\\ (1-x)(x+2),\\ (1-x)(x-2),\\\\ (1+x)(2+x),\\ (1+x)(2-x),\\ (1-x)(2+x),\\ (1-x)(2-x).\\\\  </p> <p>As above, but with one of the xs replaced by a number times x \\quad\\rightarrow\\quad Example: (5x + 1)(x - 2) </p> <p>As above, but with both of the xs replaced by a number times x \\quad\\rightarrow\\quad Example: (4x - 1)(2+ 3x) </p>"},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#722-linear-terms-involving-more-than-one-letter","title":"7.2.2 Linear terms involving more than one letter","text":"<p>The same two letters in each bracket   \\quad\\rightarrow\\quad Example: (a+3b)(2a-b) </p> <p>More than two different letters involved   \\quad\\rightarrow\\quad Example: (x+4y)(2x+3z), (a-b)(c - d).</p>"},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#723-square-twice-product-square","title":"7.2.3 'Square, twice product, square'","text":"<p> (x+1)^2 = x^2+2x+1, (x-1)^2 = x^2 - 2x +1, (2x+3)^2 = 4x^2 + 12x + 9, (pq-r)^2 = p^2q^2 - 2pq + r^2, (a+b)^2 = a^2 + 2ab + b^2.</p>"},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#724-difference-of-two-squares","title":"7.2.4 'Difference of two squares'","text":"<p> (x+2)(x-2) = x^2 - 4, (2x+5)(2x-5) = 4x^2 - 25, (xy+zt)(xy - zt) = x^2y^2 - z^2t^2, (a+b)(a-b) = a^2 - b^2.</p>"},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#73-additional-features","title":"7.3 Additional features","text":"<p>Three or more factors \\quad\\rightarrow\\quad Example: x(y+2z)(y - z) </p> <p>Three or more terms inside one (or more) of the brackets \\quad\\rightarrow\\quad Example: (x+2y+1)(x-y), (a+b+c)^2.</p> <p>Removing brackets and collecting like terms \\quad\\rightarrow\\quad Example: x^3(x+1) - x^2(x-1), a(b-c)-b(a-c), 5b(a+2) - a(3b+4), (2x+1)^2 + (x-3)^2.</p> <p>Involvement of surds \\quad\\rightarrow\\quad Example: \\left(  \\sqrt{2} - 1 \\right)  \\left(  \\sqrt{2} + 3 \\right), \\left(  1 + 2 \\sqrt{2} \\right)  ^2, \\left(  \\sqrt{a} - 6 \\right)  \\left(  \\sqrt{a} + 6 \\right), \\sqrt{25xy^3(x - 2y)^2}.</p>"},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#8-algebraic-fractions","title":"8 Algebraic fractions","text":""},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#81-cancelling","title":"8.1 Cancelling","text":"<p>Cancelling a number only \\quad\\rightarrow\\quad Example: \\frac{2a}{4b} </p> <p>Cancelling a letter only \\quad\\rightarrow\\quad Example: \\frac{3a}{2a} </p> <p>Leaving 1 or -1 after cancelling   \\quad\\rightarrow\\quad Example: \\frac{x}{2x} = \\frac{1}{2} </p> <p>Cancelling both letters and numbers   \\quad\\rightarrow\\quad Example: \\frac{8ab^2}{12ab} </p> <p>Cancelling a bracketed term   \\quad\\rightarrow\\quad Example: \\frac{(y+1)^2}{y+1}, \\frac{20(x-2)}{5(x-2)^3}.</p>"},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#811-minus-1","title":"8.1.1 Minus 1","text":"<p>Minus 1 in denominator   \\quad\\rightarrow\\quad Example: \\frac{a}{-1} = -a, \\frac{a-b}{-1} = b - a, \\frac{x^2+x-2}{-1}= 2 - x - x^2.</p> <p>Expressions of opposite sign in numerator and denominator \\quad\\rightarrow\\quad Example: \\frac{b-a}{a-b} = -1 </p>"},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#82-adding-and-subtracting-algebraic-fractions","title":"8.2 Adding and subtracting algebraic fractions","text":"<p>Denominators numbers and numerators multiples of the same letter or bracketed expression</p> <p>Same denominator \\quad\\rightarrow\\quad Example: \\frac{5x}{8} + \\frac{x}{8}, \\frac{4(x+2)}{7} - \\frac{3(x+2)}{7}.</p> <p>One denominator a multiple of the other   \\quad\\rightarrow\\quad Example: \\frac{3x}{4} + \\frac{x}{12} </p> <p>Denominators having no common factor   \\quad\\rightarrow\\quad Example: \\frac{3a}{4}-\\frac{2a}{5}, \\frac{2(x+y)}{3}+\\frac{3(x+y)}{4}.</p> <p>Denominators having a common factor   \\quad\\rightarrow\\quad Example: \\frac{5x}{6}+\\frac{2x}{9} </p>"},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#821-single-term-numerators-and-denominators","title":"8.2.1 Single-term numerators and denominators","text":"<p>Same denominator   \\quad\\rightarrow\\quad Example: \\frac{1}{9x}+\\frac{2}{9x}, \\frac{a}{5}+\\frac{2b}{5}.</p> <p>One denominator a multiple of the other   \\quad\\rightarrow\\quad Example: \\frac{3}{4x} + \\frac{5}{8x} </p> <p>Denominators having no common factor \\quad\\rightarrow\\quad Example: \\frac{1}{a} + \\frac{1}{b}, \\frac{a}{b}+\\frac{c}{d}.</p> <p>Denominators having a common factor \\quad\\rightarrow\\quad Example: \\frac{2}{ab} + \\frac{5}{bc}, \\frac{7}{4x} - \\frac{2}{5x}, \\frac{3a}{10b}+\\frac{4c}{5d}.</p> <p>Numerical and literal fractions mixed   \\quad\\rightarrow\\quad Example: \\frac{1}{2}+\\frac{1}{x}, \\frac{a}{b} - \\frac{5}{8}.</p> <p>Adding or subtracting 1 \\quad\\rightarrow\\quad Example: \\frac{x}{y} - 1 = \\frac{x-y}{y}, 1+\\frac{a}{b} = \\frac{b+a}{b}.</p>"},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#822-linear-expression-in-numerator-or-denominator","title":"8.2.2 Linear expression in numerator or denominator","text":"<p>In numerators only \\quad\\rightarrow\\quad Example: \\frac{2x-1}{5}+\\frac{x+3}{2} </p> <p>In denominators only   \\quad\\rightarrow\\quad Example: \\frac{3}{x-2} - \\frac{4}{x+1} </p> <p>In both numerator and denominator   \\quad\\rightarrow\\quad Example: \\frac{2x+1}{x-3} + \\frac{3x-1}{x+4} </p>"},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#823-higher-powers-orand-several-different-letters","title":"8.2.3 Higher powers or/and several different letters","text":"<p> \\frac{a-c}{a+b} - \\frac{a-b}{a+c},\\ \\frac{2}{3xy} + \\frac{5}{4x^2y}. </p>"},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#824-combinations-of-operations","title":"8.2.4 Combinations of operations","text":"<p> \\frac{2}{x} - \\frac{3}{x^2} + \\frac{4}{x^3},\\ \\frac{a-3}{3} + \\frac{a+5}{4} - \\frac{2a-1}{6}. </p>"},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#83-multiplying-and-dividing-algebraic-fractions","title":"8.3 Multiplying and dividing algebraic fractions","text":"<p>No cancelling involved   \\quad\\rightarrow\\quad Example: \\frac{x^2}{y} \\times \\frac{x^3}{2}, \\frac{x-1}{2} \\div \\frac{5}{x}.</p> <p>(Multiplication) single-term common factor in numerator of one fraction and denominator of the other (cancelling involved)  \\quad\\rightarrow\\quad Example: \\frac{4y}{3} \\times \\frac{15z}{8y} </p> <p>(Multiplication) bracketed common factor in numerator of one fraction and denominator of the other (cancelling involved)  \\quad\\rightarrow\\quad Example: \\frac{x+y}{5} \\times \\frac{7}{2(x+y)}, \\frac{4a^2}{a-b} \\times \\frac{a-b}{8a}.</p> <p>(Division) single-term common factor in numerators or in denominators (cancelling involved)   \\quad\\rightarrow\\quad Example: xy \\div \\frac{x}{y+1} </p> <p>(Division) bracketed common factor in numerators or in denominators (cancelling involved)  \\quad\\rightarrow\\quad Example: \\frac{a(a+b)}{2b^2} \\div \\frac{a+b}{6b^3} </p>"},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#84-combinations-of-arithmetic-operations-on-algebraic-fractions","title":"8.4 Combinations of arithmetic operations on algebraic fractions","text":"<p>Including fractions in which the numerator and denominator are themselves a sum or difference of two fractions.</p> <p> \\frac{a}{b}\\div c = \\frac{a}{bc},\\ \\frac{a}{b \\div c} = \\frac{ac}{b}, \\ \\frac{\\frac{b+1}{a}+1}{b} = \\frac{a+b+1}{ab}, \\left(  \\left(  x - \\frac{1}{x} \\right)  ^2 + 2 \\right)  \\div \\frac{1}{x^2} = x^4 + 1. </p>"},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#9-linear-equations","title":"9 Linear equations","text":"<p>Unknown on one side of equation   \\quad\\rightarrow\\quad Example: 3x+2 = 11, 7-2x = 3.</p> <p>Unknown on both sides of equation   \\quad\\rightarrow\\quad Example: 2x+6=3-x, 3x-5 = 7+9x.</p> <p>Removal of brackets involved   \\quad\\rightarrow\\quad Example: 3(2x-1)-2(x-1)=0 </p> <p>Fractions involved   \\quad\\rightarrow\\quad Example: \\frac{3-x}{5} + 3 = \\frac{2x+1}{10} </p>"},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#10-single-term-common-factors","title":"10 Single-term common factors","text":"<p>Common factor a number   \\quad\\rightarrow\\quad Example: 8 - 2x, 6x+9y.</p> <p>Common factor a letter   \\quad\\rightarrow\\quad Example: 3x^2 + 2x, x^2 - 4xy.</p> <p>More than one common factor   \\quad\\rightarrow\\quad Example: 5xy + 10x^2z, 6abc - 8bcd.</p> <p>More than two terms   \\quad\\rightarrow\\quad Example: 3xy + 6y^2 - 9y </p> <p>Leaving 1 or -1 after taking out common factor   \\quad\\rightarrow\\quad Example: x^3+x^2, 6s^2 - s.</p> <p>Some, but not all, terms fractions   \\quad\\rightarrow\\quad Example: P + \\frac{PRT}{100} </p> <p>Common given bracketed expression   \\quad\\rightarrow\\quad Example: (a-b)c + (a-b)d, x(y+1) - 2(y+1).</p>"},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#11-rearranging-algebraic-formulae","title":"11 Rearranging algebraic formulae","text":""},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#111-fundamental-multiplicative-equivalences","title":"11.1 Fundamental multiplicative equivalences","text":"<p>Equivalence of ab=c, b = \\frac{c}{a} and a = \\frac{c}{b}.</p> <p>Equivalence of \\frac{a}{b} = \\frac{c}{d} and ad = bc (cross multiplication).</p>"},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#112-making-a-specified-letter-the-subject-of-a-formula","title":"11.2 Making a specified letter the subject of a formula","text":"<p>Specified letter in one term \\quad\\rightarrow\\quad Example: s = 2t - d\\ (t) </p> <p>Specified letter in two (or more) terms   \\quad\\rightarrow\\quad Example: a-bx = c+dx\\ (x) </p> <p>Specified letter with mixed coefficients (numbers and letters)  \\quad\\rightarrow\\quad Example: T= 2p+ph\\ (p) </p> <p>Removal of brackets involved   \\quad\\rightarrow\\quad Example: r^2=V(h-a)\\ (a) </p> <p>Fractions involved   \\quad\\rightarrow\\quad Example: a=b+\\frac{x}{c}, \\frac{x}{a}+\\frac{x}{b} = 2\\ (x) </p> <p>Removal of surds involved   \\quad\\rightarrow\\quad Example: a=b\\sqrt{x}, a= \\sqrt{b+x}\\ (x) </p> <p>Taking square roots involved   \\quad\\rightarrow\\quad Example: z^2 = y^2 - x^2, y = \\sqrt{x^2 + 4}, y = \\sqrt{\\frac{x^2-1}{x^2+1}}\\ (x) </p>"},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#113-substituting-from-one-formula-into-another","title":"11.3 Substituting from one formula into another","text":"<p>Direct substitution of one letter \\quad\\rightarrow\\quad Example: m = \\frac{r}{s}, k = mr \\rightarrow k in terms of r and s </p> <p>Direct substitution of two (or more) letters \\quad\\rightarrow\\quad Example: c=2ab, a=x+5, b = x-1 \\rightarrow c in terms of x; r = 4p - q, p = x - 2y, q = x-5y \\rightarrow r in terms of x and y.</p> <p>Elimination of a letter from two formulae \\quad\\rightarrow\\quad Example: k = \\frac{A}{u}, L = \\frac{u^2}{m} \\rightarrow L in terms of A, k and m;\\ v = at, s = \\frac{1}{2}at^2 \\rightarrow s in terms of v and t.</p>"},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#12-simultaneous-linear-equations","title":"12 Simultaneous linear equations","text":"<p>Coefficients of one unknown the same in both equations (Subtract one equation from the other)</p> <ul> <li> <p>Coefficient positive \\quad\\rightarrow\\quad Example: 3x + 2y = 9, x+2y = 7 </p> </li> <li> <p>Coefficient negative \\quad\\rightarrow\\quad Example: 5x-y = 14, 2x - y = 5 </p> </li> <li> <p>Equations given in least convenient order (Subtract first from second)  \\quad\\rightarrow\\quad Example: x+2y = 7, 3x + 2y = 9 </p> </li> </ul> <p>Coefficient of an unknown in one equation minus its coefficient in the other (Add equations) \\quad\\rightarrow\\quad Example: 3x+2y = 12, 5x - 2y = 4 </p> <p>Coefficient of an unknown in one equation a positive multiple of its coefficient in the other (Multiply and subtract) \\quad\\rightarrow\\quad Example: 2x + 5y = 24, 4x + 3y = 20 </p> <p>Coefficient of an unknown in one equation a negative multiple of its coefficient in the other (Multiply and add) \\quad\\rightarrow\\quad Example: 3x - 2y = 7, 4x + y = 13 </p> <p>Multiplication of both equations before adding or subtracting  \\quad\\rightarrow\\quad Example: 4x - 3y = 11, 5x + 2y = 9 </p> <p>Prior rearrangement of equations involved \\quad\\rightarrow\\quad Example: 2x = 5y + 1, 5x + 3(y-6) = 0 </p> <p>Substitution method \\quad\\rightarrow\\quad Example: \\left. \\begin{array}{l} x - 2y = 1 \\\\ 3x + 5y = 14 \\end{array} \\right\\} \\rightarrow 3(2y+1) + 5y = 14 \\rightarrow 11y = 11 \\rightarrow \\left. \\begin{array}{l} y = 1 \\\\ x = 3 \\end{array} \\right\\} </p>"},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#13-factorising-algebraic-expressions","title":"13 Factorising algebraic expressions","text":""},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#131-quadratic-expressions","title":"13.1 Quadratic expressions","text":""},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#1311-no-number-in-front-of-the-x2","title":"13.1.1 No number in front of the x^2","text":"<p>Constant term +, x-term + \\quad\\rightarrow\\quad Example: x^2 + 5x +4 </p> <p>Constant term +, x-term - \\quad\\rightarrow\\quad Example: x^2 - 7x +12 </p> <p>Constant term -, x-term + \\quad\\rightarrow\\quad Example: x^2 + 3x - 10 </p> <p>Constant term -, x-term - \\quad\\rightarrow\\quad Example: x^2 - 2x - 15 </p> <p>'Square, twice product, square'   \\quad\\rightarrow\\quad Example: x^2 + 6x + 9 </p> <p>'Difference of two squares'   \\quad\\rightarrow\\quad Example: x^2 - 16 </p>"},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#1312-number-in-front-of-the-x2","title":"13.1.2 Number in front of the x^2","text":"<p>Constant term +, x-term + \\quad\\rightarrow\\quad Example: 2x^2 + 11x +12 </p> <p>Constant term +, x-term - \\quad\\rightarrow\\quad Example: 15x^2 - 13x + 2 </p> <p>Constant term -, x-term + \\quad\\rightarrow\\quad Example: 3x^2 + x - 4 </p> <p>Constant term -, x-term - \\quad\\rightarrow\\quad Example: 6x^2 - 7x - 10 </p> <p>'Square, twice product, square'   \\quad\\rightarrow\\quad Example: 9x^2 - 12x + 4 </p> <p>'Difference of two squares'   \\quad\\rightarrow\\quad Example: 25x^2 - 4 </p>"},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#1313-modifications-of-the-above","title":"13.1.3 Modifications of the above","text":"<p>Terms not in usual order   \\quad\\rightarrow\\quad Example: 3x+4-x^2, 11x - x^2 - 30, 4 - 8x + 4x^2.</p> <p>Homogeneous in two variables   \\quad\\rightarrow\\quad Example: x^2 + xy - 6y^2, 36x^2 - 49y^2, x^2 + 8xy + 16y^2.</p> <p>Single-term factor leaving quadratic   \\quad\\rightarrow\\quad Example: 3x^3 - 6x^2 - 24x, 50a^3 - 18ab^2.</p> <p>Expression in place of a single letter   \\quad\\rightarrow\\quad Example: x^2y^2 - 2xy + 1, (a+b)^2 - (a+c)^2.</p> <p>Fractions involved \\quad\\rightarrow\\quad Example: x^2 - \\frac{y^2}{4} = \\left(  x - \\frac{y}{2} \\right)  \\left(  x + \\frac{y}{2} \\right), x^2 + 2 + \\frac{1}{x^2} = \\left(  x + \\frac{1}{x} \\right)  ^2.</p>"},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#132-other-two-or-more-term-factors","title":"13.2 Other two (or more)-term factors","text":"<p>Grouping   \\quad\\rightarrow\\quad Example: ab + a + b + 1 = (a+1)(b+1), ax + ay - bx - by = (a-b)(x+y).</p> <p>Sum of two cubes   \\quad\\rightarrow\\quad Example: x^3 + y^3 = (x+y)(x^2 - xy + y^2) </p> <p>Difference of two cubes   \\quad\\rightarrow\\quad Example: x^3 - y^3 = (x-y)(x^2 + xy + y^2) </p> <p>Just for fun \\quad\\rightarrow\\quad Example: a^3 + b^3 + c^3 - 3abc = (a+b+c)(a^2 + b^2 + c^2 - bc - ca - ab) = \\frac{1}{2}\\left(  a+b+c \\right)  \\left( (b-c)^2 + (c-a)^2 + (a-b)^2 \\right) </p>"},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#14-algebraic-fractions-involving-factorising","title":"14 Algebraic fractions involving factorising","text":""},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#141-cancelling","title":"14.1 Cancelling","text":"<p>Cancelling a number only   \\quad\\rightarrow\\quad Example: \\frac{9x+3}{3x}, \\frac{4x^2 + 2x}{6x^2 - 10}.</p> <p>Cancelling a letter only   \\quad\\rightarrow\\quad Example: \\frac{3x}{4x+5x^2}, \\frac{a^2 - 2ab}{a^3 + 3a^2b + ab^2}.</p> <p>Cancelling both letters and numbers   \\quad\\rightarrow\\quad Example: \\frac{4a}{(2a)^2 - 8a}, \\frac{5x^3 - 15x^2y + 10xy^2}{5x^2 + 10xy}.</p> <p>Cancelling a two (or more)-term expression \\quad\\rightarrow\\quad Example: \\frac{3a-6b}{a^2-2ab} = \\frac{3(a-2b)}{a(a-2b)} = \\frac{3}{a}, \\frac{x^2 - 5x + 6}{3y - xy} = \\frac{(x-2)(x-3)}{y(3-x)} = \\frac{2-x}{y}.</p>"},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#142-arithmetic-operations","title":"14.2 Arithmetic operations","text":"<p>Adding and subtracting where there is a common factor in the denominators   \\quad\\rightarrow\\quad Example: \\frac{1}{x^2 + 5x +6} - \\frac{2}{x^2 - 4} </p> <p>Multiplying where there is a common factor in the numerator of one fraction and the denominator of the other (cancelling involved)  \\quad\\rightarrow\\quad Example: \\frac{6}{x^2 - 2x - 8} \\times \\frac{x+2}{3} </p> <p>Dividing where there is a common factor in the numerators or in the denominators (cancelling involved)  \\quad\\rightarrow\\quad Example: \\frac{3x}{x^2 - 1} \\div \\frac{5}{x+1} </p> <p>Combinations of arithmetic operations \\quad\\rightarrow\\quad Example: \\frac{\\frac{a+b+1}{ab} + 1}{\\frac{b+1}{a}} = \\frac{ab + a + b + 1}{b(b+1)} = \\frac{(a+1)(b+1)}{b(b+1)} = \\frac{a+1}{b}, \\frac{\\frac{a+1}{b} + 1}{\\frac{a+b+1}{ab}} = \\frac{a(a+1) + ab}{a+b + 1} = \\frac{a(a+b + 1)}{a+b+1} = a </p> <p>Aside  \\quad\\rightarrow\\quad Example:  The sequence (u_n), given by u_1 = a, u_2 = b, u_n = \\frac{u_{n-1} + 1}{u_{n-2}} (n \\geq 3), therefore repeats itself after 5 terms  \\quad\\rightarrow\\quad Example: a, b, \\frac{b+1}{a}, \\frac{a+b+1}{ab}, \\frac{a+1}{b}, a, b, \\cdots. It is an interesting exercise, beyond the scope of school algebra, to 'explain' this phenomenon!</p>"},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#15-quadratic-equations","title":"15 Quadratic equations","text":""},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#151-solution-by-factorising","title":"15.1 Solution by factorising","text":"<p> 6x^2 - 11x - 2 = 0 \\rightarrow (x-2)(6x+1) = 0 \\rightarrow x = 2 or -\\frac{1}{6} </p>"},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#152-completing-the-square-of-a-quadratic-expression","title":"15.2 Completing the square of a quadratic expression","text":"<p>No number in front of the x^2 \\quad\\rightarrow\\quad Example: x^2 + 5x + 3 = \\left(  x + \\frac{5}{2} \\right)  ^2 - \\frac{13}{4} </p> <p>Number in front of the x^2 \\quad\\rightarrow\\quad Example: 2x^2 - 3x + 5 = 2 \\left(  x - \\frac{3}{4} \\right)  ^2 + \\frac{31}{8} </p>"},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#153-solution-by-completing-the-square","title":"15.3 Solution by completing the square","text":"<p> x^2 + 5x + 3 = 0 \\rightarrow x + \\frac{5}{2} = \\pm \\frac{\\sqrt{13}}{2} \\rightarrow x = -\\frac{5}{2} \\pm \\frac{\\sqrt{13}}{2} </p> <p>General case ('the formula')   \\quad\\rightarrow\\quad Example: ax^2 + bx + c = 0 (a \\neq 0) \\rightarrow x = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} </p> <p>Prior rearrangement involved \\quad\\rightarrow\\quad Example: \\frac{1}{x-2} - \\frac{1}{x+5} = \\frac{7}{18} </p>"},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#154-the-three-kinds-of-behaviour-and-corresponding-graphical-interpretation","title":"15.4 The three kinds of behaviour and corresponding graphical interpretation","text":"<p> b^2 &gt; 4ac - two roots  </p> <p> b^2 = 4ac - one root  </p> <p> b^2 &lt; 4ac - no (real) roots </p>"},{"location":"en/STACK_question_admin/Library/Algebra_refresher/#155-simultaneous-equations-one-linear-and-one-quadratic","title":"15.5 Simultaneous equations, one linear and one quadratic","text":"<p>Direct substitution from linear equation into quadratic equation \\quad\\rightarrow\\quad Example: x^2 + y^2 = 10, y = 2 - x </p> <p>Prior rearrangement involved \\quad\\rightarrow\\quad Example: x^2 - xy + y^2 = 13, 2x - 3y = 5 </p>"},{"location":"en/Specialist_tools/","title":"Specialist tools","text":"<p>This section of the documentation provides details of how to use \"specialist tools\".  This section falls outside quick start, reference documentation, or advice on particular mathematical topics.</p> <p>Topics include</p> <ul> <li>Drag and drop question types, including proof, grid and matching.</li> <li>Equivalence reasoning for input and assessment of line by line reasoning.</li> <li>JSXGraph for interactive graphics, including how to use this as an input type.</li> <li>GeoGebra for interactive graphics, including how to use this as an input type.</li> <li>Graphics for options for including graphics.</li> <li>Unsorted multi input explains how to have separate input boxes.</li> </ul>"},{"location":"en/Specialist_tools/Graphics/","title":"Plots and graphics in STACK","text":"<p>Plots and graphics can be placed into any of the CASText fields, e.g. question, worked solution, feedback.</p> <p>There are a number of ways to embed plots, images, diagrams etc into STACK.</p> <ol> <li>Embed an external image, using the HTML <code>&lt;img&gt;</code> tag.</li> <li>Maxima plots can be used in STACK questions using the <code>plot</code> command which provides access to some of the functionality of <code>plot2d</code>.</li> <li>Create an image with JSXGraph.</li> <li>For graph theory discrete graphs can be created directly using STACK's <code>plot</code> command command by building a combination of discrete and line plots.</li> </ol> <p>Notes.</p> <ul> <li>The <code>draw</code> package is currently not supported.</li> <li>Maxima's <code>implicit_plot()</code> function does not respect the plot options, and we cannot place the resulting plot files in the correct places. Hence, STACK does not currently support implicit plots.  For reference try <code>load(\"implicit_plot\");implicit_plot(x^2+y^2=x^2*y^2+1,[x,-2,2],[y,-2,2]);</code> in Maxima.</li> <li>As of version 4.0, the tags <code>{#...#}</code> provide the possibility to interact with 3rd party scripts.  If you have examples of this, please contact the developers.</li> </ul>"},{"location":"en/Specialist_tools/Unsorted_multi_input/","title":"Unsorted multi-input answers","text":"<p>Quite often we have a number of separate inputs, but we don't know which order the student will choose to enter.</p> <p>Let's assume we ask a student to break down integration using linearity for example we have  where the <code>?</code> are inputs <code>ans1</code> and <code>ans2</code>.  We might expect <code>ans1=x^2</code> but of course we could also have <code>ans1=sin(x)</code>.</p> <p>Another option is to create a set from multiple inputs.</p> <ol> <li>Establish basic properties of each input with one a corresponding PRT.</li> <li>Establish the overall properties of the set of solutions.</li> </ol> <p>An example question is given in the stack library under <code>Topics\\Complex_cube_roots.xml</code>.</p>"},{"location":"en/Specialist_tools/Unsorted_multi_input/#use-the-feedback-variables","title":"Use the feedback variables","text":"<p>One option is to define <code>sans:ans1+ans2</code> in the feedback variables.  Then the PRT can check <code>sans</code> is equivalent to the integrand up to commutativity and associativity (or something else if you perefer). The problem with this is the difficulty in awarding partial credit.</p>"},{"location":"en/Specialist_tools/Unsorted_multi_input/#partial-credit-for-some-correct-answers","title":"Partial credit for some correct answers","text":"<p>We want to provide some partial credit when student have some, but not all, the inputs correct.</p> <p>Let's assume we are looking for n different inputs.  We define m to be the number of missing, w to be the number of \"not wanted\" inputs, then we choose the score to be  s = \\max\\left(1-\\frac{m+w}{2n}, 0\\right) E.g., here if a student gets all n wrong so that m=w=n then the score is zero. If the student types in all the required expressions, n=0 and n wrong ones in addition, then s=\\frac{1}{2}. This function is, of course, a choice of the teacher.</p> <p>In the above example, put the following in the question variables</p> <pre><code>ta1:x^2;\nta2:sin(x);\ntas:{ta1, ta2};\np:ta1+ta2;\n</code></pre> <p>In the feedback variables put</p> <pre><code>sans:{ans1, ans2};\nmissing:setdifference(tas, sans);\nnotwanted:setdifference(sans, tas);\nscore:max(1-(length(missing)+length(notwanted))/(2*length(tas)),0);\n</code></pre> <p>Continuing the above example, in the PRT use</p> <ol> <li>The answer test <code>sets</code> perhaps with the quiet option.</li> <li><code>sans</code> is <code>{ans1,ans2}</code>.</li> <li><code>tans</code> is <code>tas</code>.</li> <li>Assign the score in both prt branches to be <code>score</code>.</li> </ol>"},{"location":"en/Specialist_tools/Unsorted_multi_input/#dealing-with-duplicate-entries","title":"Dealing with duplicate entries","text":"<p>How do we decide partial credit when there may be duplicates, e.g. eigenvalues with repetition?  If the teacher's answer is <code>[1,1,2]</code> then we can't use the above example based on sets.</p> <p>STACK provides a maxima function <code>list_cancel(l1,l2)</code> which removes any common elements from <code>[l1,l2]</code>, with duplication.  E.g. use the following in the question variables.</p> <pre><code>sans:{ans1, ans2};\n[missing, notwanted]:list_cancel([sans, tas]);\nscore:max(1-(length(missing)+length(notwanted))/(2*length(tas)),0);\n</code></pre> <p>Note that <code>list_cancel</code> will not establish algebraic equivalence and within this function two expressions are considered the same using maxima's <code>is(ex1=ex2))</code>.  Hence, some pre-processing of the lists might be needed, depending on the situation and what you consider is the \"same\".  For example if we have</p> <pre><code>l1:[x^2,x^3,x^2-1,x+x];\nl2:[x^2,x^4,(x-1)*(x+1),2*x];\nlist_cancel([l1,l2]);\n</code></pre> <p>will return \\left[ \\left[ x^3 , x^2-1 \\right]  , \\left[ x^4 , \\left(x-1\\right) \\,\\left(x+1\\right) \\right]  \\right]  Notice the last elements are remove because default simplification takes place but x^2-1 and (x-1)(x+1) are not considered the same by <code>is</code>.  In this case <code>ratsimp</code> can be applied to the lists first.  In other situations functions like <code>trigsimp</code> or <code>trigrat</code> might be needed.</p>"},{"location":"en/Specialist_tools/Drag_and_drop/","title":"Drag and drop questions in STACK","text":"<p>Drag and drop problems are often referred to as \"Parson's problems\".</p> <p>You can add in drag and drop functionality using the <code>[[parsons ..]]</code> question block.  As of STACK v4.6.0, the <code>parsons</code> block has three main configurations (each of which support further customisation) which can be achieved by setting block header parameters <code>columns</code> and <code>rows</code> as appropriate:</p> <ol> <li>Proof (Example usage: <code>[[parsons]] ... [[/parsons]]</code>) : This was introduced in STACK v4.5.0, and a full guide can be found under Parsons problems.</li> <li>Grouping (Example usage: <code>[[parsons columns=\"3\"]] ... [[/parsons]]</code>) :  This will set up a number of columns, each of which behave similarly to the single left-hand column of the Proof configuration, where the student may drag and drop items starting at the top of each column.  This is useful when we are only interesting in grouping items together, and specific row positions do not matter, or when each column may have variable length. Example problems are given in the grouping page.</li> <li>Grid (Example usage: <code>[[parsons columns=\"3\" rows=\"2\"]] ... [[/parsons]]</code>) :  This will set up a grid of shape <code>(columns, rows)</code>, where the student may drag and drop items to any position in the grid. Example problems are given in the grid page.</li> </ol> <p>Note that many Grid style questions can also be written using the Grouping setup.  The main difference between them is that Grid allows the student to drag any item to any position in the grid, regardless of whether the item above it has been filled; Grouping on the other hand only allows students to drag items to the  end of the list within a column.</p> <p>There is separate documentation on troubleshooting Parsons questions.</p>"},{"location":"en/Specialist_tools/Drag_and_drop/Grid/","title":"Grid drag and drop questions","text":"<p>This will set up a grid of shape <code>(columns, rows)</code>, where the student may drag and drop items to any position in the grid. </p> <p>Example usage: <code>[[parsons columns=\"3\" rows=\"2\"]] ... [[/parsons]]</code></p>"},{"location":"en/Specialist_tools/Drag_and_drop/Grid/#troubleshooting","title":"Troubleshooting","text":"<p>Please see the troubleshooting page for known issues and how to resolve them.</p>"},{"location":"en/Specialist_tools/Drag_and_drop/Grid/#example-grid-example","title":"Example: Grid example","text":"<p>Here, the student is asked to drag functions and their derivatives to relevant columns and rows.  This particular example could work as a grouping example in the vein of the grouping example, however the key difference  here is that the student can drag an item to any position in the grid, whereas in grouping items can only be added  to the end of a growing column list.</p> <p>Much of this example is very similar to the grouping example, with the following key differences: - The <code>parsons</code> block should include a specified <code>rows</code> parameter. - The <code>match_answer</code> function should use <code>true</code> as a third parameter inside Model answer. - The <code>match_decode</code> function should use <code>true</code> as a third parameter inside the PRT. - We also define our PRT answer test differently, since we care only about the order within a row being preserved. However this difference is not required and is due only to the nature of the question (i.e., what we want to assess from this question is  different from the one in the grouping example), rather than from any system requirements.</p>"},{"location":"en/Specialist_tools/Drag_and_drop/Grid/#question-variables","title":"Question variables","text":"<p>As a minimum it is recommended to include: - Load the matching library. - Define all items in the available list as a two-dimensional array, where each item is an array of the form <code>[\"&lt;ID&gt;\", \"&lt;actual item contents&gt;\"]</code>.  You will use the <code>\"&lt;ID&gt;\"</code> string to write solutions and assess student inputs; the second item is what is displayed to the student. - Randomly permute the available items. - The headers that will appear on top of the answer columns. - The correct answer as a two-dimensional array. This should always be column grouped.</p> <p>For our example, the Question variables field looks as follows.</p> <pre><code>stack_include_contrib(\"matchlib.mac\");\n\nsteps : [\n  [\"f\", \"\\\\(y = x^2\\\\)\"],\n  [\"g\", \"\\\\(y = x^3\\\\)\"],\n  [\"dfdx\", \"\\\\(y' = 2x\\\\)\"],\n  [\"dgdx\", \"\\\\(y' = 3x^2\\\\)\"],\n  [\"df2d2x\", \"\\\\(y'' = 2\\\\)\"],\n  [\"dg2d2x\", \"\\\\(y'' = 6x\\\\)\"]\n];\n\nsteps: random_permutation(steps);\n\nheaders: [\n  \"Function\", \n  \"\\\\(d/dx\\\\)\", \n  \"\\\\(d^2/d^2x\\\\)\"\n];\n\nta: [\n  [\"f\", \"g\"], \n  [\"dfdx\", \"dgdx\"], \n  [\"df2d2x\", \"dg2d2x\"]\n];\n</code></pre>"},{"location":"en/Specialist_tools/Drag_and_drop/Grid/#question-text","title":"Question text","text":"<p>Here we should: - Write the question text itself. - Open the <code>parsons</code> block with <code>input</code>, <code>columns</code> and <code>rows</code> header parameters. - Transfer the variables from Question variables into a JSON inside the <code>parsons</code> block using <code>match_encode</code>. - Close the <code>parsons</code> block.</p> <pre><code>&lt;p&gt;Drag the items to match up the functions with their derivatives. &lt;/p&gt;\n[[parsons input=\"ans1\" columns=\"3\" rows=\"2\"]]\n{\n    \"steps\" : {#match_encode(steps)#},\n    \"headers\" : {#headers#}\n}\n[[/parsons]]\n&lt;p&gt;[[input:ans1]] [[validation:ans1]]&lt;/p&gt;\n</code></pre>"},{"location":"en/Specialist_tools/Drag_and_drop/Grid/#question-note","title":"Question note","text":"<p>A question note is required due to the random permutation of <code>steps</code>. We use:</p> <pre><code>{@map(first, steps)@}\n</code></pre>"},{"location":"en/Specialist_tools/Drag_and_drop/Grid/#input-ans1","title":"Input: ans1","text":"<ol> <li>The Input type field should be Parsons.</li> <li>The Model answer field should be a list with four elements. It should be one of the following:</li> <li><code>[ta, steps, headers, index]</code> : if you have specified the <code>headers</code> and <code>index</code> in your <code>parsons</code> block.</li> <li><code>[ta, steps, headers, rows]</code> : if you have specified the <code>headers</code> only in your <code>parsons</code> block, where <code>rows</code> is the number of rows (e.g., <code>[ta, steps, headers, 2]</code>)</li> <li><code>[ta, steps, cols, index]</code> : if you have specified the <code>index</code> only in your <code>parsons</code> block, where <code>cols</code> is the number of columns (e.g., <code>[ta, steps, 2, index]</code>)</li> <li><code>[ta, steps, cols, rows]</code> : if you are specifying neither of <code>headers</code> nor <code>index</code> in your parsons block.</li> <li>The Model answer field should be a list with three elements. If you are specifying the <code>headers</code> parameter, then you should use <code>[ta, steps, headers]</code>, where <code>ta</code> is the teacher answer and <code>steps</code> is the array containing key-string pairs of all possible steps. Otherwise, use <code>[ta, steps, cols]</code>, where <code>cols</code> is the number of columns (e.g., <code>[ta, steps, 3]</code>). </li> <li>Set the option Student must verify to \"no\".</li> <li>Set the option Show the validation to \"no\".</li> </ol> <p>Steps 3 and 4 are strongly recommended, otherwise the student will see unhelpful code representing the underlying state  of their answer.</p>"},{"location":"en/Specialist_tools/Drag_and_drop/Grid/#potential-response-tree-prt1","title":"Potential response tree: prt1","text":"<p>Define the feedback variable</p> <pre><code>sans: match_decode(ans1, true);\n</code></pre> <p>This provides the student response as a two-dimensional array of the same format as <code>ans</code>.  At this point the author may choose to assess by comparing <code>sans</code> and <code>ans</code> as they see fit. In this case, the order of the rows themselves really doesn't matter, but the order of the rows does of course. So we may convert the list of rows of <code>sans</code> and <code>ans</code> to a set in feedback variables using <code>match_set_row</code> from <code>matchlib.mac</code>.</p> <pre><code>sans: match_set_row(sans);\ntans: match_set_row(ta);\n</code></pre> <p>We can then do a regular algebraic equivalence test between <code>sans</code> and <code>ans</code>.  You should turn the node to <code>Quiet: Yes</code>, otherwise the student will see unhelpful code if they the answer wrong.</p>"},{"location":"en/Specialist_tools/Drag_and_drop/Grid/#example-grid-example-with-an-index","title":"Example: Grid example with an index","text":"<p>One can add a left-hand index to the grid in first grid example by defining an <code>index</code> array in Question variables and passing this through in the JSON inside the <code>parsons</code> block.  This will fix the row order and simplify assessment.</p> <p>Important points: - An item that appears in both the header and the index is required.  This item should appear in the index and not in the header. - Reduce the value of the <code>columns</code> parameter in the <code>parsons</code> block by one: this corresponds only to the number of answer columns. - Pass the index as the value of key <code>\"index\"</code> inside the JSON within the <code>parsons</code> block.</p>"},{"location":"en/Specialist_tools/Drag_and_drop/Grid/#question-variables_1","title":"Question variables","text":"<p>The question variables with an index is as follows.</p> <pre><code>stack_include_contrib(\"matchlib.mac\");\n\nsteps : [\n  [\"dfdx\", \"\\\\(y' = 2x\\\\)\"],\n  [\"dgdx\", \"\\\\(y' = 3x^2\\\\)\"],\n  [\"df2d2x\", \"\\\\(y'' = 2\\\\)\"],\n  [\"dg2d2x\", \"\\\\(y'' = 6x\\\\)\"]\n];\n\nsteps: random_permutation(steps);\n\nheaders: [\n  \"\\\\(d/dx\\\\)\", \n  \"\\\\(d^2/d^2x\\\\)\"\n];\n\nindex: [\n  \"Function\",\n  \"\\\\(y = x^2\\\\)\",\n  \"\\\\(y = x^3\\\\)\"\n]\n\nta: [\n  [\"dfdx\", \"dgdx\"], \n  [\"df2d2x\", \"dg2d2x\"]\n];\n</code></pre>"},{"location":"en/Specialist_tools/Drag_and_drop/Grid/#question-text_1","title":"Question text","text":"<pre><code>&lt;p&gt;Drag the items to match up the functions with their derivatives. &lt;/p&gt;\n[[parsons input=\"ans1\" columns=\"2\" rows=\"2\"]]\n{\n    \"steps\" : {#match_encode(steps)#},\n    \"headers\" : {#headers#},\n    \"index\" : {#index#}\n}\n[[/parsons]]\n&lt;p&gt;[[input:ans1]] [[validation:ans1]]&lt;/p&gt;\n</code></pre>"},{"location":"en/Specialist_tools/Drag_and_drop/Grid/#question-note_1","title":"Question note","text":"<p>A question note is required due to the random permutation of <code>steps</code>. We use:</p> <pre><code>{@map(first, steps)@}\n</code></pre>"},{"location":"en/Specialist_tools/Drag_and_drop/Grid/#input","title":"Input","text":"<p>This is exactly the same as the previous. </p> <ol> <li>The Input type field should be Parsons.</li> <li>The Model answer field should be a list <code>[ta, steps, 2, 2]</code> containing the teacher answer, all possible steps, the number of columns,  and the number of rows.</li> <li>Set the option Student must verify to \"no\".</li> <li>Set the option Show the validation to \"no\".</li> </ol>"},{"location":"en/Specialist_tools/Drag_and_drop/Grid/#prt","title":"PRT","text":"<p>As in with the previous , we first extract the two-dimensional array of used items from the students input.</p> <pre><code>sans: match_decode(ans1, true);\n</code></pre> <p>At this point the author may choose to assess by comparing <code>sans</code> and <code>ta</code> as they see fit.  Since we have fixed the order of both dimensions, there is only one correct answer which is given by <code>ta</code>.  Hence we have a basic PRT which tests only algebraic equivalence between <code>sans</code> and <code>ta</code>.  As always, turn the node to <code>Quiet: Yes</code>, otherwise the student will see unhelpful code if they the answer wrong.</p>"},{"location":"en/Specialist_tools/Drag_and_drop/Grouping/","title":"Grouping drag and drop questions","text":"<p>This will set up a number of columns, each of which behave similarly to the single left-hand column of the Proof configuration, where the student may drag and drop items starting at the top of each column.  This is useful when we are only interesting in grouping items together, and specific row positions do not matter, or when each column may have variable length.</p> <p>Example usage: <code>[[parsons columns=\"3\"]] ... [[/parsons]]</code>.</p>"},{"location":"en/Specialist_tools/Drag_and_drop/Grouping/#troubleshooting","title":"Troubleshooting","text":"<p>Please see the troubleshooting page for known issues and how to resolve them.</p>"},{"location":"en/Specialist_tools/Drag_and_drop/Grouping/#simple-example","title":"Simple example","text":""},{"location":"en/Specialist_tools/Drag_and_drop/Grouping/#question-variables","title":"Question variables","text":"<pre><code>stack_include_contrib(\"matchlib.mac\");\n\nsteps: [\n    [\"f\", \"\\\\(y = x^2\\\\)\"],\n    [\"g\", \"\\\\(y = x^3\\\\)\"],\n    [\"quad\", \"Quadratic\"],\n    [\"cubic\", \"Cubic\"],\n]\n</code></pre>"},{"location":"en/Specialist_tools/Drag_and_drop/Grouping/#question-text","title":"Question text","text":"<pre><code>[[parsons columns=\"2\"]]\n{# match_encode(steps) #}\n[[/parsons]]\n</code></pre>"},{"location":"en/Specialist_tools/Drag_and_drop/Grouping/#clone-mode","title":"Clone mode","text":"<p>We emphasise that items can be re-used by setting <code>clone=\"true\"</code> in the block header (as in <code>[[parsons columns=\"n\" clone=\"true\"]][[/parsons]]</code>). This is more likely to be needed for grouping and grid setups.</p>"},{"location":"en/Specialist_tools/Drag_and_drop/Grouping/#transposing-on-load","title":"Transposing on load","text":"<p>The re-orientation button allows the student to switch between vertical and horizontal orientation as they wish, but on load the default is for the columns to be displayed vertically. Using <code>transpose=\"true\"</code> in the header (as in <code>[[parsons columns=\"n\" transpose=\"true\"]][[/parsons]]</code>) will change this so that the horizontal orientation will display on load.</p>"},{"location":"en/Specialist_tools/Drag_and_drop/Grouping/#headers","title":"Headers","text":"<p>By default, answer lists in groupings and grid layouts will get default headers indexed by positive whole numbers. The available list will get a default header of \"Drag from here:\". These will become row indexes in Row grouping layout, or when the user presses the re-orient button.</p> <p>Answer list headers can be changed by assigning the key <code>\"headers\"</code> key an an array of strings containing the new headers. The single header for the available list can be changed by assigning the <code>\"available_header\"</code> key to a string.</p>"},{"location":"en/Specialist_tools/Drag_and_drop/Grouping/#question-variables_1","title":"Question variables","text":"<pre><code>stack_include_contrib(\"matchlib.mac\");\n\nsteps: [\n    [\"f\", \"\\\\(y = x^2\\\\)\"],\n    [\"g\", \"\\\\(y = x^3\\\\)\"],\n    [\"quad\", \"Quadratic\"],\n    [\"cubic\", \"Cubic\"],\n]\n</code></pre>"},{"location":"en/Specialist_tools/Drag_and_drop/Grouping/#question-text_1","title":"Question text","text":"<pre><code>[[parsons columns=\"2\"]]\n{\n    \"steps\" : {# match_encode(steps) #},\n    \"headers\" : [\"Equation\", \"Type\"],\n    \"available_header\" : \"Available items\"\n}\n[[/parsons]]\n</code></pre> <p>Note that <code>headers.</code> must be a list of the same length as the number of columns and <code>available</code> must be a string.  Beware that long headers may overflow boxes when using several columns so it is best to keep them short.</p>"},{"location":"en/Specialist_tools/Drag_and_drop/Grouping/#index","title":"Index","text":"<p>By default in Column grouping and grid layouts no index is used. In Row grouping mode the headers are an index, and in this case no headers exist by default.</p> <p>To change this, one can pass an index to the JSON as follows:</p> <pre><code>[[parsons columns=\"1\" rows=\"2\"]]\n{\n    \"steps\": {# match_encode(steps) #},\n    \"headers\" : [\"Type\"]\n    \"available_header\" : \"Available items\"\n    \"index\" : [\"Equation\", \"\\\\(y = x^2\\\\)\", \"\\\\(y = x^3\\\\)\"]\n}\n[[/parsons]]\n</code></pre> <p>Note that the length of the index must be the same as <code>rows + 1</code>. You can simply pass an empty string to the first position if no index header is required. </p>"},{"location":"en/Specialist_tools/Drag_and_drop/Grouping/#example-grouping-example","title":"Example: Grouping example","text":"<p>In our first example, the student is asked to place functions, given as equations, into columns with the categories \"Differentiable\", \"Continuous, not differentiable\", \"Discontinuous\".</p>"},{"location":"en/Specialist_tools/Drag_and_drop/Grouping/#question-variables_2","title":"Question variables","text":"<p>As a minimum it is recommended to include: - Load the matching library. - Define all items in the available list as a two-dimensional array, where each item is an array of the form <code>[\"&lt;ID&gt;\", \"&lt;actual item contents&gt;\"]</code>.  You will use the <code>\"&lt;ID&gt;\"</code> string to write solutions and assess student inputs; the second item is what is displayed to the student. - Randomly permute the available items. - The headers that will appear on top of the answer columns. - The correct answer as a two-dimensional array.  This should be column grouped.</p> <p>For our example, the Question variables field looks as follows.</p> <pre><code>stack_include_contrib(\"matchlib.mac\");\n\nsteps : [\n    [\"sq\", \"\\\\(f(x) = x^2\\\\)\"],\n    [\"sin\", \"\\\\(f(x) = \\\\sin(x)\\\\)\"],\n    [\"abs\", \"\\\\(f(x) = |x|\\\\)\"],\n    [\"sqrt\", \"\\\\(f(x) = \\\\sqrt{|x|}\\\\)\"],\n    [\"rec\", \"\\\\(f(x) = \\\\left\\\\{\\\\begin{array}{ll}1/x &amp;, x\\\\neq 0 \\\\\\\\ 0&amp;, x=0\\\\end{array}\\\\right.\\\\)\"],\n    [\"sgn\", \"\\\\(f(x) = \\\\text{sgn}(x)\\\\)\"]\n];\n\nsteps: random_permutation(steps);\n\nheaders: [\n    \"Differentiable\", \n    \"Continuous, not differentiable\", \n    \"Discontinuous\"\n];\n\nta: [\n    [\"sq\", \"sin\"], \n    [\"abs\", \"sqrt\"], \n    [\"rec\", \"sgn\"]\n];\n</code></pre>"},{"location":"en/Specialist_tools/Drag_and_drop/Grouping/#question-text_2","title":"Question text","text":"<p>Here we should: - Write the question text itself. - Open the <code>parsons</code> block with <code>input</code> and <code>columns</code> header parameters. - Transfer the variables from Question variables into a JSON inside the <code>parsons</code> block using <code>match_encode</code>. - Close the <code>parsons</code> block.</p> <pre><code>&lt;p&gt;Recall that a function may be differentiable, continuous but \nnot differentiable, or discontinuous. The following expressions define functions \\(f:\\mathbb{R}\\rightarrow\\mathbb{R}\\).\nDrag the functions to their appropriate category. &lt;/p&gt;\n[[parsons input=\"ans1\" columns=\"3\"]]\n{\n    \"steps\" : {#match_encode(steps)#},\n    \"headers\" : {#headers#}\n}\n[[/parsons]]\n&lt;p&gt;[[input:ans1]] [[validation:ans1]]&lt;/p&gt;\n</code></pre>"},{"location":"en/Specialist_tools/Drag_and_drop/Grouping/#question-note","title":"Question note","text":"<p>A question note is required due to the random permutation of <code>steps</code>. We use:</p> <pre><code>{@map(first, steps)@}\n</code></pre>"},{"location":"en/Specialist_tools/Drag_and_drop/Grouping/#input-ans1","title":"Input: ans1","text":"<ol> <li>The Input type field should be Parsons.</li> <li>The Model answer field should be a list with three elements. If you are specifying the <code>headers</code> parameter, then you should use <code>[ta, steps, headers]</code>, where <code>ta</code> is the teacher answer and <code>steps</code> is the array containing key-string pairs of all possible steps. Otherwise, use <code>[ta, steps, cols]</code>, where <code>cols</code> is the number of columns (e.g., <code>[ta, steps, 3]</code>). </li> <li>Set the option Student must verify to \"no\".</li> <li>Set the option Show the validation to \"no\".</li> </ol> <p>Steps 3 and 4 are strongly recommended, otherwise the student will see unhelpful code representing the underlying state of their answer.</p>"},{"location":"en/Specialist_tools/Drag_and_drop/Grouping/#potential-response-tree-prt1","title":"Potential response tree: prt1","text":"<p>Define the feedback variable</p> <pre><code>sans: match_decode(ans1);\n</code></pre> <p>This provides the student response as a two-dimensional array of the same format as <code>ans</code>.  At this point the author may choose to assess by comparing <code>sans</code> and <code>ans</code> as they see fit.  In this case, the order within a column really doesn't matter, but the order of the columns does of course.  So we may convert the columns of <code>sans</code> and <code>ans</code> to sets in feedback variables using <code>match_column_set</code> from <code>matchlib.mac</code>.</p> <pre><code>sans: match_column_set(sans);\ntans: match_column_set(ta);\n</code></pre> <p>We can then do a regular algebraic equivalence test between <code>sans</code> and <code>ans</code>. You should turn the node to <code>Quiet: Yes</code>, otherwise the student will see unhelpful code if they the answer wrong.</p>"},{"location":"en/Specialist_tools/Drag_and_drop/Parsons/","title":"Authoring Parson's problems (drag and drop) in STACK","text":"<p>Parson\u2019s problems require students to assemble pre-written blocks (typically containing text) into a correct order by dragging blocks into a tree structure.  E.g. to assemble a correct mathematical proof.</p> <p>This page provides a quick-start to authoring whole questions.  There are a number of parts to authoring a Parson's problem:</p> <ol> <li>Defining strings and creating drag and drop area using the Parson's block.</li> <li>Linking the Parson's block to a STACK input (string input).</li> <li>Assessing the student's answer and providing meaningful feedback automatically.</li> </ol> <p>While drag and drop is certainly not new in automatic assessment, these problems have become popular in computer science, e.g. Parsons (2006).</p> <p>Parson\u2019s problems enable students to focus on the structure and meaning, by providing all the right words but just not initially in the right order. Learning mathematical proof is well-known to be very difficult for most students. The scaffolding provided by Parson's problems has been found to be very useful to students in discrete mathematics. This may well be due to the expert reversal effect. The expert reversal effect is a well-established phenomenon that what is useful for a beginner is quite different, perhaps the opposite, of what is useful for an expert. Even when independent proof writing is the final goal of instruction, it is very likely that Parson's problems have an important place in formative learning towards that goal.</p> <p>Traditionally Parson\u2019s problems require the student to create an ordered list. For mathematical proofs, we believe it is more natural to ask students to create a tree. Parson's problems in mathematics, especially proofs, do not always have a unique answer which is considered correct. Hence, there are challenges in deciding what a correct answer is in particular cases, and how to develop authoring tools to robustly create problems with reliable marking algorithms. For example, in a proof of  We might expect/require two conscious and separate blocks</p> <ol> <li>Assume A, \\cdots, hence B.</li> <li>Assume B, \\cdots, hence A.</li> </ol> <p>The order in which these two sub-proofs are presented is (normally) irrelevant.  That is the if and only if proof construct allows its two sub-proofs to commute.  This is precisely the same sense in which A=B and B=A are equivalent. There are blocks within the proof which can change order. Furthermore, since proofs are often nested blocks these sub-proofs may themselves have acceptable options for correctness. Proofs often contain local variables.  Use of explicit block-structures clarify the local scope of variables, and the local scope of assumptions.</p> <p>STACK provides \"proof construction functions\" with arguments. For example, an if and only if proof would be represented as <code>proof_iff(A,B)</code>.  Here <code>A</code> and <code>B</code> are either sub-proofs or strings to be shown to the student.</p> <p>If the student has an opportunity to indicate more structure, then the assessment logic becomes considerably simpler, more reliable and transparent. Actually, we think there is significant educational merit in making this structure explicit and consciously separating proof-structure from the finer grained details. It is true that professional mathematicians often omit indicating explicit structure, they abbreviate and omit whole blocks (\"the other cases are similar\") but these are all further examples of expert reversal.</p> <p>Notes</p> <ul> <li>Lists are a special case of a tree with one root (the list creation function) and an arbitrary number of nodes in order.  Hence our design explicitly includes traditional Parson's problems as a special case.</li> <li>Teachers who do not want to scaffold explicit block structures (e.g. signal types of proof blocks) can choose to restrict students to (i) flat lists, or (ii) lists of lists.</li> </ul>"},{"location":"en/Specialist_tools/Drag_and_drop/Parsons/#troubleshooting","title":"Troubleshooting","text":"<p>Please see the troubleshooting page for known issues and how to resolve them.</p>"},{"location":"en/Specialist_tools/Drag_and_drop/Parsons/#examples","title":"Examples","text":"<p>Please follow the examples below to understand how the components work.  Then we provide two tools.</p> <ol> <li>Advice on workflow for authoring Parson's problems.</li> <li>Template questions in the STACK question library, under <code>Topics\\Parsons-proof-template.xml</code> which you can load and use immediately.</li> </ol>"},{"location":"en/Specialist_tools/Drag_and_drop/Parsons/#example-1-a-minimal-parsons-question","title":"Example 1: a minimal Parson's question","text":"<p>The following is a minimal Parson's question where there student is expected to create a list in one and only one order. It shows the proof that \\log_2(3) is irrational.</p>"},{"location":"en/Specialist_tools/Drag_and_drop/Parsons/#question-variables","title":"Question variables","text":"<p>Define the following question variables:</p> <pre><code>stack_include_contrib(\"prooflib.mac\");\n\nproof_steps: [\n    [\"assume\", \"Assume, for a contradiction, that \\\\(\\\\log_2(3)\\\\) is rational.\"],\n    [\"defn_rat\", \"Then \\\\(\\\\log_2(3) = \\\\frac{p}{q}&gt;0\\\\) where \"],\n    [\"defn_rat2\", \"\\\\(p\\\\) and \\\\(q\\\\neq 0\\\\) are positive integers.\"],\n    [\"defn_log\", \"Using the definition of logarithm:\"],\n    [\"defn_log2\", \"\\\\[ 3 = 2^{\\\\frac{p}{q}}\\\\]\"],\n    [\"alg\", \"\\\\[ 3^q = 2^p\\\\]\"],\n    [\"alg_int\", \"The left hand side is always odd and the right hand side is always even.\"],\n    [\"contra\", \"This is a contradiction.\"],\n    [\"conc\", \"Hence \\\\(\\\\log_2(3)\\\\) is irrational.\"]\n];\n\nproof_steps: random_permutation(proof_steps);\n\nta: proof(\"assume\", \"defn_rat\", \"defn_rat2\", \"defn_log\", \"defn_log2\", \"alg\", \"alg_int\", \"contra\", \"conc\");\n</code></pre> <p>The optional library <code>prooflib.mac</code> contain many useful functions for dealing with student's answers which represent proofs.</p> <p>The variable <code>proof_steps</code> holds all the keys that will be displayed on the string.  Each step is indexed by a key identifier, which are used to refer to the steps throughout the question (for example, when constructing the model answer).</p> <p>We can randomise the order the strings will be shown on the mpage through <code>random_permutation</code>.</p> <p>The variable <code>ta</code> holds the teacher's answer which is a proof construction function <code>proof</code>.  The arguments to this function are string keys, e.g. <code>\"alg\"</code> which refer to lines in the proof.  The teacher expects these lines in this order.</p>"},{"location":"en/Specialist_tools/Drag_and_drop/Parsons/#question-text","title":"Question text","text":"<p>The example question text below contains a Parson's block. Within the header of the Parson's block, ensure that <code>input=\"ans1\"</code> is included, where <code>ans1</code> is the identifier of the input. Place the following in the Question text field:</p> <pre><code>&lt;p&gt;Show that \\(\\log_2(3)\\) is irrational. &lt;/p&gt;\n[[parsons input=\"ans1\"]]\n{# parsons_encode(proof_steps) #}\n[[/parsons ]]\n&lt;p&gt;[[input:ans1]] [[validation:ans1]]&lt;/p&gt;\n</code></pre> <p>Notes:</p> <ol> <li>The function <code>parsons_encode</code> turns the variable <code>proof_steps</code> into a JSON object with hashed keys, as expected by the <code>parsons</code> block.</li> <li>The Parson's block has a wide range of options such as <code>height</code> and <code>width</code> which are documented elsewhere.</li> </ol>"},{"location":"en/Specialist_tools/Drag_and_drop/Parsons/#question-note","title":"Question note","text":"<p>Due to the randomisation of the proof steps, we need to add a question note. One that simply gives the order of the keys is as follows.</p> <pre><code>{@ map(first, proof_steps) @}\n</code></pre>"},{"location":"en/Specialist_tools/Drag_and_drop/Parsons/#input-ans1","title":"Input: ans1","text":"<ol> <li>The Input type field should be Parsons.</li> <li>The Model answer field should be a list <code>[ta, proof_steps]</code>.</li> <li>Set the option \"Student must verify\" to \"No\".</li> <li>Set the option \"Show the validation\" to \"No\".</li> </ol>"},{"location":"en/Specialist_tools/Drag_and_drop/Parsons/#potential-response-tree","title":"Potential response tree","text":"<p>Define the feedback variables:</p> <pre><code>sa: parsons_decode(ans1);\n</code></pre> <p>The student's answer will be a JSON string, but we need to interpret which of the strings have been used and in what order.  The <code>parsons_decode</code> function takes a JSON string and  builds a proof representation object.</p> <p>Then you can set up the potential response tree to be <code>ATAlgEquiv(sa,ta)</code> to confirm the student's answer is the same as the teacher's answer.</p>"},{"location":"en/Specialist_tools/Drag_and_drop/Parsons/#adding-a-test-case","title":"Adding a test case","text":"<p>On the STACK question dashboard, add in a test case.  Test case construction requires use of a special function <code>parsons_answer</code> to mock up the input from a Parsons block (with hashing) and send to the testing code what a correct response from the user would look like.  The test case should look like</p> <pre><code>parsons_answer(ta, proof_steps)\n</code></pre> <p>In general, you need to provide a list of tags in place of <code>ta</code>, and the <code>proof_steps</code> array.</p>"},{"location":"en/Specialist_tools/Drag_and_drop/Parsons/#example-question-2-a-proof-with-interchangeable-block-order","title":"Example question 2: a proof with interchangeable block order","text":"<p>The following Parson's question is an if and only if proof, containing two blocks in order.</p>"},{"location":"en/Specialist_tools/Drag_and_drop/Parsons/#question-variables_1","title":"Question variables","text":"<pre><code>stack_include_contrib(\"prooflib.mac\");\n\nta: proof_iff(proof(\"assodd\",\"defn_odd\",\"alg_odd\",\"def_M_odd\",\"conc_odd\"), proof(\"contrapos\",\"assnotodd\",\"even\",\"alg_even\",\"def_M_even\",\"conc_even\"));\n\nproof_steps: [\n    [\"assodd\",     \"Assume that \\\\(n\\\\) is odd.\"],\n    [\"defn_odd\",   \"Then there exists an \\\\(m\\\\in\\\\mathbb{Z}\\\\) such that \\\\(n=2m+1\\\\).\"],\n    [\"alg_odd\",    \"\\\\[ n^2 = (2m+1)^2 = 2(2m^2+2m)+1.\\\\]\"],\n    [\"def_M_odd\",  \"Define \\\\(M=2m^2+2m\\\\in\\\\mathbb{Z}\\\\) then \\\\(n^2=2M+1\\\\).\"],\n    [\"conc_odd\",   \"Hence \\\\(n^2\\\\) is odd.\"],\n\n    [\"contrapos\",  \"We reformulate \\\"\\\\(n^2\\\\) is odd \\\\(\\\\Rightarrow \\\\) \\\\(n\\\\) is odd \\\" as the contrapositive.\"],\n    [\"assnotodd\",  \"Assume that \\\\(n\\\\) is not odd.\"],\n    [\"even\",       \"Then \\\\(n\\\\) is even, and so there exists an \\\\(m\\\\in\\\\mathbb{Z}\\\\) such that \\\\(n=2m\\\\).\"],\n    [\"alg_even\",   \"\\\\[ n^2 = (2m)^2 = 2(2m^2).\\\\]\"],\n    [\"def_M_even\", \"Define \\\\(M=2m^2\\\\in\\\\mathbb{Z}\\\\) then \\\\(n^2=2M\\\\).\"],\n    [\"conc_even\",  \"Hence \\\\(n^2\\\\) is even.\"]\n];\n\n/* Permute the steps randomly. */ \nproof_steps: random_permutation(proof_steps);\n\n/* Generate the alternative proofs. */\ntal: proof_alternatives(ta);\n\n/* Create a set of flattened proofs. */\ntas: setify(map(proof_flatten, tal));\n</code></pre>"},{"location":"en/Specialist_tools/Drag_and_drop/Parsons/#question-text_1","title":"Question text","text":"<p>The complete question text is</p> <pre><code>&lt;p&gt;Let \\(n\\in\\mathbb{N}\\).  Show that \\(n\\) is odd if and only if \\(n^2\\) is odd. &lt;/p&gt;\n[[parsons input=\"ans1\"]]\n{# parsons_encode(proof_steps) #}\n[[/parsons ]]\n&lt;p&gt;[[input:ans1]] [[validation:ans1]]&lt;/p&gt;\n</code></pre> <p>Notice in this example the teacher's proof is nested. This can be seen if we use numerical keys, not string keys and define</p> <pre><code>ta:proof_iff(proof(1,2,3,4,5),proof(6,7,8,9,10,11));\n</code></pre> <p>The two blocks can be in either order.  Prooflib provides a function to automatically create both options.  Notice the command <code>tal:proof_alternatives(ta);</code> in the question variables.  The variable <code>tal</code> will be a list of both options for the if and only if proof.  Note that <code>proof_alternatives</code> will recurse over all sub-proofs.  Types of supported proof structure are documented within the prooflib file.  Then we have to \"flatten\" each of these proofs to a set of list-based proofs: <code>tas:setify(map(proof_flatten, tal));</code></p>"},{"location":"en/Specialist_tools/Drag_and_drop/Parsons/#question-note_1","title":"Question note","text":"<p>Due to the randomisation of the proof steps, we need to add a question note. One that simply gives the order of the keys is as follows.</p> <pre><code>{@ map(first, proof_steps) @}\n</code></pre>"},{"location":"en/Specialist_tools/Drag_and_drop/Parsons/#input","title":"Input","text":"<p>The \"Input\" should be set exactly as in the previous example.</p> <ol> <li>The Input type field should be Parsons.</li> <li>The Model answer field should be a list <code>[ta, proof_steps]</code>.</li> <li>Set the option \"Student must verify\" to \"No\".</li> <li>Set the option \"Show the validation\" to \"No\".</li> </ol>"},{"location":"en/Specialist_tools/Drag_and_drop/Parsons/#potential-reponse-tree","title":"Potential reponse tree","text":"<p>As before, define the feedback variables to interpret the JSON as a proof:</p> <pre><code>sa:parsons_decode(ans1);\n</code></pre> <p>Set up the potential response tree to check if the student's proof <code>sa</code> is in the set of possible teacher's proofs. The simplest way is <code>ATAlgEquiv(elementp(sa,tas), true)</code> to confirm the student's answer is in the set of answers equivalent to teacher's answer.</p> <p>To see this in action, try the following in the general feedback to display both proof options.</p> <pre><code>This is the proof, written with some structure\n{@proof_display(tal[2], proof_steps)@}\nNotice this proof has two sub-proofs, which can occur in any order.  Therefore we have two correct versions of this proof.\n&lt;table&gt;&lt;tr&gt;\n&lt;td&gt;&lt;div class=\"proof\"&gt;{@proof_display_para(tal[1], proof_steps)@}&lt;/div&gt;&lt;/td&gt;\n&lt;td&gt;&lt;div class=\"proof\"&gt;{@proof_display_para(tal[2], proof_steps)@}&lt;/div&gt;&lt;/td&gt;\n&lt;/tr&gt;&lt;/table&gt;\nCan you see the differences between these proofs?\n</code></pre> <p>We have much more sophisticated general assessment tools for establishing the edit distance between the student's and teacher's proof and providing feedback on how to correct a partially correct proof.  These are documented elsewhere.</p>"},{"location":"en/Specialist_tools/Drag_and_drop/Parsons/#adding-a-test-case_1","title":"Adding a test case","text":"<p>On the STACK question dashboard, add in a test case.  Test case construction requires use of a special function <code>parsons_answer</code> to mock up the input from a Parsons block (with hashing) and send to the testing code what a correct response from the user would look like.  The test case should look like</p> <pre><code>parsons_answer(ta, proof_steps)\n</code></pre> <p>In general, you need to provide a list of tags in place of <code>ta</code>, and the <code>proof_steps</code> array.</p>"},{"location":"en/Specialist_tools/Drag_and_drop/Parsons/#legacy-versions","title":"Legacy versions","text":"<p>Old versions of the parsons block (before 2024072500) used <code>stackjson_stringify</code> in place of <code>parsons_encode</code>, <code>proof_parsons_key_json</code> in place of  <code>parsons_answer</code>, and <code>proof_parsons_interpret</code> in place of <code>parsons_decode</code>, and used the <code>String</code> input type. Legacy versions of questions are still  supported and should function as previously, so long as the <code>String</code> input type is used. </p> <p>It is strongly recommended to update questions to use the new functions. These will hash they keys of the <code>proof_steps</code> variable so that they are hidden even when the web page is inspected. This also fixes a randomisation bug that occurred when numerical keys are used (see Issue #1237).</p> <p>Upgrading Parsons questions:</p> <ol> <li>Parsons blocks should use the <code>parsons_encode</code> function to create the JSON needed to go to the <code>[[parsons]]</code> block.  E.g.<code>[[parsons input=\"ans1\"]]{# parsons_encode(proof_steps) #}[[/parsons ]]</code></li> <li>The Input type field should be Parsons. The Model answer field should be a list <code>[ta, proof_steps]</code>.</li> <li>The feedback variables use the <code>parsons_encode</code> function, e.g. <code>sa:parsons_decode(ans1);</code></li> <li>Test cases (question tests) are constructed using <code>parsons_answer(ta, proof_steps)</code>.</li> </ol> <p>The <code>parsons_encode</code>, <code>parsons_decode</code> and <code>parsons_answer</code> deal with the hash, as does choosing the \"Parsons\" input type.</p>"},{"location":"en/Specialist_tools/Drag_and_drop/Question_block/","title":"Parson's problem (drag and drop) question blocks","text":"<p>Parson\u2019s problems require students to assemble pre-written text into a correct order by dragging blocks into a tree structure.  </p> <p>This page provides reference documentation for the <code>[[parsons]] ... [[/ parsons]]</code> question block.  </p> <p>The question author pre-defines strings to drag within the block.  These strings can be defined as Maxima variables in the question text, or just defined within the question block itself.</p> <p>Users interact with the strings, dragging them into a tree structure.  Note, a list is a special case of a more structured tree.  The block can be linked to a STACK input so that the student's configuration can be stored and/or assessed.  This page is reference documentation for the <code>[[parsons]]</code> block.  Documentation on how to use this block in a complete question is given under topics: Authoring Parson's problems.</p>"},{"location":"en/Specialist_tools/Drag_and_drop/Question_block/#basic-usage","title":"Basic usage","text":"<p>Here is a basic example of use:</p>"},{"location":"en/Specialist_tools/Drag_and_drop/Question_block/#question-variables","title":"Question variables","text":"<p>The question author should write all steps to be shown to the student as a list of pairs of the form <code>[\"key\", \"string\"]</code>, where  <code>\"string\"</code> is what is shown to the student on the question page. Throughout the question the author uses <code>\"key\"</code> to reference  the steps. Note the <code>\\</code> character needs to be protected within strings, so for example we have to type <code>\\\\(n=2m+1\\\\)</code> rather than just <code>\\(n=2m+1\\)</code>.</p> <pre><code>stack_include_contrib(\"prooflib.mac\");\n\nproof_steps: [\n    [\"assume\", \"Assume that \\\\(n\\\\) is odd.\"],\n    [\"ex\", \"Then there exists an \\\\(m\\\\in\\\\mathbb{Z}\\\\) such that \\\\(n=2m+1\\\\).\"],\n    [\"expand\", \"\\\\[ n^2 = (2m+1)^2 = 2(2m^2+2m)+1.\\\\]\"],\n    [\"def\", \"Define \\\\(M=2m^2+2m\\\\in\\\\mathbb{Z}\\\\) then \\\\(n^2=2M+1\\\\).\"],\n];\n</code></pre>"},{"location":"en/Specialist_tools/Drag_and_drop/Question_block/#question-text","title":"Question text","text":"<pre><code>[[parsons input=\"ans1\"]]\n{# parsons_encode(proof_steps) #}\n[[/parsons]]\n</code></pre>"},{"location":"en/Specialist_tools/Drag_and_drop/Question_block/#customising-the-parsons-block","title":"Customising the <code>[[parsons]]</code> block","text":""},{"location":"en/Specialist_tools/Drag_and_drop/Question_block/#json-options","title":"JSON \"options\"","text":"<p>The <code>[[parsons]]</code> block is a wrapper for the javascript library \"Sortable.js\", optimised and with default options for Parson's problems. Moreover, there are default settings we add in, such as the headers for each of the two lists. These may be customised by structuring the JSON in the block contents as follows:</p> <pre><code>[[parsons input=\"ans1\"]]\n{ \"steps\": {# parsons_encode(proof_steps) #},\n  \"options\": {\"sortable option 1\" : value, ..., \"sortable option n\" : value},\n  \"headers\" : [\"Custom header for the answer list\"], \n}\n[[/parsons]]\n</code></pre> <p>A list of all Sortable.js options can be found on the SortableJS GitHub, currently these are set at the default option for <code>\"animation\"</code> which controls the animation speed.</p> <pre><code>{\n    \"animation\": 50,\n}\n</code></pre> <p>Most other Sortable options can be modified, except for <code>ghostClass</code>, <code>group</code> and <code>onSort</code> as these are required to be set for basic functionality.</p> <p>Note that if you enter an unknown sortable option or if an attempt to pass <code>ghostClass</code>, <code>group</code>, or <code>onSort</code> is made, then these will simply be ignored. A warning will be displayed on the question page to signify this situation.</p> <p>The default for \"headers\" and \"available_header\" are:</p> <pre><code>{\n    \"headers\": [\"Construct your solution here:\"], \n    \"available_header\": [\"Drag from here:\"]\n}\n</code></pre>"},{"location":"en/Specialist_tools/Drag_and_drop/Question_block/#troubleshooting","title":"Troubleshooting","text":"<p>If your Parson's problem is not displaying properly, in particular if the all the items are displayed in a single yellow block, then double-check that you have spelled the keys of the JSON inside the Parsons block correctly as described above. They should be a subset of </p> <pre><code>{\"steps\", \"options\", \"headers\", \"available_header\"}\n</code></pre> <p>and a superset of </p> <pre><code>{\"steps\"}\n</code></pre> <p>For technical reasons this is one error that we are unable to validate currently.</p>"},{"location":"en/Specialist_tools/Drag_and_drop/Question_block/#block-parameters","title":"Block parameters","text":"<p>Functionality and styling can be customised through the use of block parameters.</p> <ol> <li><code>input</code>: string. The name of the STACK input variable (e.g., <code>\"ans1\"</code>), this links to an internal <code>state</code> parameter that updates the input as a Maxima expression so that it can be stored and evaluated by a PRT.</li> <li><code>height</code>: string containing a positive float + a valid CSS unit (e.g.<code>\"480px\"</code>, <code>\"100%\"</code>, ...). Default is to create a window of automatic height to fit all the content upon load. Entering a value for the <code>height</code> parameter in the block header fixes the height of the window containing the drag-and-drop lists and will disable automatic resizing of the window containing the lists. Students will still be able to automatically resize the window with the expand button.</li> <li><code>width</code>: string containing a positive float + a valid CSS unit (e.g.<code>\"480px\"</code>, <code>\"100%\"</code>, ...).  Default is <code>\"100%\"</code>. This fixes the width of the window containing the drag-and-drop lists.</li> <li><code>aspect-ratio</code>: string, containing a float between 0 and 1. This can be used with <code>height</code>/<code>length</code> or <code>width</code> (not both) and automatically determines the value of the un-used parameter in accordance with the value of <code>aspect-ratio</code>; unset by default. An error will occur if one sets values for <code>aspect-ratio</code>, <code>width</code>, <code>height</code> or <code>aspect-ratio</code>, <code>width</code>, <code>length</code>.</li> <li><code>clone</code>: string of the form <code>\"true\"</code> or <code>\"false\"</code>. It is <code>\"false\"</code> by default. When <code>\"false\"</code> there are two lists and each proof step is \"single-use\", here the author must write all necessary proof steps even if they repeat; when <code>\"true\"</code> all proof steps are re-usable with no restrictions on how many times they are used, steps can only be dragged from the available list into the answer list, and there is a bin to tidy up steps.</li> <li><code>override-css</code>: string containing the location of a local CSS file contained in <code>question/type/stack/corsscripts/</code> directory in the format <code>cors://file-name</code> or a href to an external CSS stylesheet. This will override all CSS styling of the drag-and-drop listing, so it should be used with care. However, it can be used to customise the styling of the lists by writing one's own custom CSS file and passing in the location of that file to this parameter. This parameter is unset by default.</li> <li><code>override-js</code>: string containing a local JavaScript library or a href to a cdn of a JavaScript library. This will overwrite the Sortable library used with the library identified by the string. This should be used if one wishes to use an updated version of the Sortable library, or adding functionality with a custom library. Note that the custom library will need to either extend or import the base Sortable functionality. Unset by default.</li> <li><code>version</code>: string of the form <code>\"local\"</code> or <code>\"cdn\"</code>. Whether to use STACK's local copy of the Sortable library or whether to pull version 1.15.0 of Sortable from cdn. This is <code>\"local\"</code> by default.</li> <li><code>columns</code> : string containing an integer <code>\"n\"</code>. How many vertical answer lists to display. By default, this is not used. If it is specified, then the styling will change to a grid-format with multiple vertical answer lists of unspecified length.</li> <li><code>rows</code> : string containing an integer <code>\"m\"</code>. How many horizontal answer lists to display. By default, this is not used. If it is specified and <code>columns</code> is not specified, this will change to a grid-format with multiple horizontal answer lists of unspecified width. If both <code>columns</code> and <code>rows</code> are specified then this will provide a fixed length and width grid format, where items can be dragged to any position in the grid in any order. You cannot specify <code>rows</code> without specifying <code>columns</code>.</li> <li><code>transpose</code> : <code>\"true\"</code> or <code>\"false\"</code>; <code>\"false\"</code> by default. While the student is able to re-orient between vertical and horizontal as they wish, the default on load is for columns to be vertical. If you wish them to default to being horizontal, then pass <code>transpose=\"true\"</code>.</li> <li><code>log</code> : <code>\"true\"</code> or <code>\"false\"</code>; <code>\"false\"</code> by default. When set to <code>\"true\"</code> the student's will contain their entire drag-and-drop move history for that attempt, along with the timestamp (number of seconds since 00:00 GMT 01/01/1970) of that move.</li> </ol>"},{"location":"en/Specialist_tools/Drag_and_drop/Question_block/#sortable-options","title":"Sortable options","text":"<p>The final JSON key allowed inside the <code>parsons</code> block is <code>\"options\"</code> whose value can be a JSON containing options that can be used to customise the functionality of the drag-and-drop list. See the Parsons guide for how to include these, and the Sortable library for further details on possible customisations.</p>"},{"location":"en/Specialist_tools/Drag_and_drop/Question_block/#random-generation-of-proof_step-order","title":"Random generation of <code>proof_step</code> order","text":"<p>To track which random variants of a question a student sees, and make sure they return to the same variant, we need to perform all randomisation at the Maxima level.</p> <p>To create a random order, you must define steps as Maxima objects using a <code>proof_steps</code> list (see the documentation of for CAS libraries for representing text-based proofs) then you can randomly order the <code>proof_steps</code> as follows.</p> <ol> <li>Define a variable <code>proof_steps</code> as normal.</li> <li>Add in <code>proof_steps:random_permutation(proof_steps);</code> to the question variables.</li> <li>Add in a question note such as <code>{@map(first, proof_steps)@}</code> to create a meaningful, minimal, question note giving the order of steps.</li> </ol>"},{"location":"en/Specialist_tools/Drag_and_drop/Question_block/#block-connection-with-maxima","title":"Block connection with Maxima","text":"<p>All communication to and from the Parsons block uses the JSON format.  However, internally STACK uses maxima objets.  We therefore need to convert between Maxima syntax and JSON format.</p> <ol> <li>The maxima function <code>parsons_encode(proof_steps)</code> will convert a list of <code>proof_steps</code> into a JSON string with hashed keys.</li> <li>The maxima function <code>parsons_decode(ans1)</code> will convert a JSON string into a proof construction function.</li> </ol>"},{"location":"en/Specialist_tools/Drag_and_drop/Question_block/#block-parameters-height-and-width","title":"Block parameters: <code>height</code> and <code>width</code>","text":"<p>Additional display options including <code>height</code> and <code>width</code> may also be passed to the header, as in</p> <pre><code>[[parsons input=\"ans1\" height=\"360px\" width=\"100%\"]]\n{# parsons_encode(proof_steps) #}\n[[/parsons]]\n</code></pre>"},{"location":"en/Specialist_tools/Drag_and_drop/Question_block/#adding-plots-to-a-parsons-block","title":"Adding plots to a Parson's block","text":"<p>Since HTML can be embedded into strings dragged within a Parson's block, images can be included with the HTML <code>&lt;img&gt;</code> tags as normal.</p> <p>STACK-generated plots can also be included just using <code>{@plot(x^2,[x,-1,1])@}</code> as might be expected.  This is because of the order of evaluation.  The full URL of the image is only created in the (complex) chain of events after the value has been substituted into the javascript code.</p> <pre><code>proof_steps: [\n    [\"A\", \"The inverse function of \\\\(f(x)=x^2\\\\) has graph\"],\n    [\"B\", plot(x^2,[x,-1,1],[size,250,250])]\n];\n</code></pre>"},{"location":"en/Specialist_tools/Drag_and_drop/Question_block/#legacy-versions","title":"Legacy versions","text":"<p>In (2024072500) we changed the way we deal with Parsons problems, adding in a special input type to support them. These will hash they keys of the <code>proof_steps</code> variable so that they are hidden even when the web page is inspected.  This also fixes a randomisation bug that occurred when numerical keys are used (see Issue #1237).</p> Use Old versions New versions Block <code>stackjson_stringify</code> <code>parsons_encode</code> Input <code>proof_parsons_key_json</code> <code>parsons_answer</code> Used in test-case construction PRT <code>proof_parsons_interpret</code> <code>parsons_decode</code> <p>E.g. in test-case construction use <code>parsons_answer([ta, proof_steps])</code> where <code>ta</code> is a list of tags and <code>proof_steps</code> is the proof steps array.</p> <p>Legacy versions of questions are still supported and should function as previously. However it is strongly recommended to update questions to use the new functions.  You will be prompted to upgrade by the bulk test.</p>"},{"location":"en/Specialist_tools/Drag_and_drop/Question_block/#obtaining-attempt-histories","title":"Obtaining attempt histories","text":"<p>When <code>log = \"true\"</code> is used in the block header, the final input value submitted will contain an array containing the internal  representations of the attempt's move history, along with the timestamp at which each move occurs. Timestamps are measured as  number of seconds elapsed since 00:00 GMT 01/01/1970. </p> <p>Given the following <code>proof_steps</code> variable within Question Variables:</p> <pre><code>proof_steps: [  \n  [\"assume_odd\", \"Assume that \\\\(n\\\\) is odd.\"],\n  [\"ex_odd\", \"Then there exists an \\\\(m\\\\in\\\\mathbb{Z}\\\\) such that \\\\(n=2m+1\\\\).\"],\n  [\"expand\", \"\\\\[ n^2 = (2m+1)^2 = 2(2m^2+2m)+1.\\\\]\"],\n  [\"def\", \"Define \\\\(M=2m^2+2m\\\\in\\\\mathbb{Z}\\\\) then \\\\(n^2=2M+1\\\\).\"],\n  [\"assume_even\", \"Assume that \\\\(n\\\\) is even.\"],\n  [\"ex_even\", \"Then there exists an \\\\(m\\\\in\\\\mathbb{Z}\\\\) such that \\\\(n = 2m\\\\).\"]\n];\n</code></pre> <p>the move history takes the following format</p> <pre><code>[\n    [\n        {\"used\" : [\"assume_odd\", ...], \"available\" : []}, \n        1723723269679\n    ],\n    [\n        {\"used\" : [\"assume_odd\", ...], \"available\" : [...]}, \n        1723723269675\n    ],\n    ...\n    [\n        {\"used\" : [], \"available\" : [\"assume_odd\", ...]},\n        1723723269667\n    ]\n]\n</code></pre>"},{"location":"en/Specialist_tools/Drag_and_drop/Troubleshooting/","title":"Troubleshooting","text":"<p>This page gives advice on troubleshooting Parsons questions.</p> <p>If your matching problem is not displaying properly, in particular if the all the items are displayed in a single yellow block, then double-check that you have spelled the keys of the JSON inside the Parsons block correctly as described below. They should be a subset of </p> <pre><code>{\"steps\", \"options\", \"headers\", \"available_header\", \"index\"}\n</code></pre> <p>and a superset of </p> <pre><code>{\"steps\"}\n</code></pre> <p>For technical reasons this is one error that we are unable to validate currently.</p>"},{"location":"en/Specialist_tools/Drag_and_drop/Troubleshooting/#state","title":"State","text":"<p>The state of the problem at any given point in time during question answer takes on the following format:</p> <pre><code>{used: usedState, available: availableState}\n</code></pre> <p>where <code>usedState</code> and <code>availableState</code> are arrays containing the keys specified in <code>steps</code> of the JSON in the answer. In all cases, <code>availableState</code> is a flat array of variable length. The shape of <code>usedState</code> depends on which of the four layouts is being used. We give examples below.</p> <ol> <li>Proof: In this case <code>usedState</code> will have shape <code>(1, 1, ?)</code>, where <code>?</code> indicates the variable dimension. For example:</li> </ol> <pre><code>[[parsons input=\"ans1\"]]\n{\n  \"1\":\"Assume that \\\\(n\\\\) is odd.\",\n  \"2\":\"Then there exists an \\\\(m\\\\in\\\\mathbb{Z}\\\\) such that \\\\(n=2m+1\\\\).\",\n  \"3\":\"\\\\[ n^2 = (2m+1)^2 = 2(2m^2+2m)+1.\\\\]\",\n  \"4\":\"Define \\\\(M=2m^2+2m\\\\in\\\\mathbb{Z}\\\\) then \\\\(n^2=2M+1\\\\).\",\n}\n[[/parsons]]\n</code></pre> <p>might have, at a given time, a state that looks like:</p> <pre><code>{\n    used : [\n        [\n            [\"1\", \"3\"]\n        ]\n    ]\n    available : \n        [\"2\", \"4\"]\n}\n</code></pre> <ol> <li>Column grouping: In this case <code>usedState</code> will have shape <code>(n, 1, ?)</code>, where <code>n</code> is the number of columns and <code>?</code> indicates the variable dimension. For example:</li> </ol> <pre><code>[[parsons columns=\"2\"]]\n{\n    \"f\" : \"\\\\(y = x^2\\\\)\",\n    \"g\" : \"\\\\(y = x^3\\\\)\",\n    \"quad\" : \"Quadratic\",\n    \"cubic\" : \"Cubic\",\n}\n[[/parsons]]\n</code></pre> <p>might have, at a given time, a state that looks like:</p> <pre><code>{\n    used : [\n        [\n            [\"f\"]\n        ],\n        [\n            [\"quad\", \"cubic\"]\n        ]\n    ],\n    available : [\"g\"]\n}\n</code></pre> <ol> <li>Row grouping : In this case <code>usedState</code> will have shape <code>(m, 1, ?)</code>, where <code>m</code> is the number of rows and <code>?</code> indicates the variable dimension. The state of Row grouping is just the same as Column grouping if <code>m</code> and <code>n</code> are the same.</li> <li>Grid : In this case <code>usedState</code> will have shape <code>(n, m, 1)</code>, where <code>n</code> is the number of columns and <code>m</code> is the number of rows. For example:</li> </ol> <pre><code>[[parsons columns=\"2\" rows=\"3\"]]\n{\n    \"f\" : \"\\\\(y = x^2\\\\)\",\n    \"g\" : \"\\\\(y = x^3\\\\)\",\n    \"h\" : \"\\\\(y = x^4\\\\)\",\n    \"quad\" : \"Quadratic\",\n    \"cubic\" : \"Cubic\",\n    \"quart\" : \"Quartic\"\n}\n[[/parsons]]\n</code></pre> <p>might have, at a given time, a state that looks like:</p> <pre><code>{\n    used : [\n        [\n            [\"f\"],\n            [\"g\"],\n            [],\n        ],\n        [\n            [\"quad\"],\n            [],\n            [\"quart\"]\n        ]\n    ],\n    available : [\"h\", \"cubic\"]\n}\n</code></pre>"},{"location":"en/Specialist_tools/Equivalence_reasoning/","title":"Getting started with equivalence reasoning","text":"<p>The reasoning by equivalence capacity is, by design, relatively simple.  We currently provide support for </p> <ul> <li>basic single variable polynomials,</li> <li>very simple inequalities,</li> <li>simple simultaneous equations.</li> </ul> <p>There is no support for algebraic manipulations involving logarithms and trig functions although individual examples may work.</p>"},{"location":"en/Specialist_tools/Equivalence_reasoning/#writing-your-first-question","title":"Writing your first question","text":"<p>This guide shows you how to write STACK questions using the line by line equivalence reasoning input type.</p> <p>As an example, we want the students to expand the cubic  showing their working in a stepwise fashion, line by line. The student's response to this question will allow us to test their knowledge and competency in the following:</p> <ol> <li>Expanding brackets</li> <li>Simplifying by collecting like terms</li> </ol> <p>Therefore we need them to show their working.</p> <p>Create a new STACK question, give it a suitable name and then copy the following into the Question variables box:</p> <pre><code>p:(x+2)^3;\ntaf:ev(expand(p),simp);\nta:[(x+2)^3,stackeq((x+2)*(x+2)^2),stackeq((x+2)*(x^2+4*x+4)),stackeq(x^3+4*x^2+4*x+2*x^2+8*x+8),stackeq(taf)];\n</code></pre> <p>The first variable, <code>p</code>, is the expression in the question. The variable <code>taf</code> is the final model answer. The variable <code>ta</code> is a list containing each step we are expecting our students to express as they work towards the final answer:</p> <p> (x+2)^{3} </p> <p> =(x+2)(x+2)^{2} </p> <p> =(x+2)(x^{2}+4x+4) </p> <p> =x^{3}+4x^{2}+4x+2x^{2}+8x+8 </p> <p> =x^{3}+6x^{2}+12x+8 </p> <p>Notes:</p> <ul> <li>We use the CAS functions <code>expand()</code> and <code>ev(...,simp)</code> to simply the output of <code>expand()</code>, to determine the model answer.</li> <li>The special function <code>stackeq</code> is replaced by unary equals.  Maxima expects equality to be an infix a=b not unary prefix =b, so STACK needs this special operator.  Students using the input area can just start a line with =, but teachers cannot!</li> </ul> <p>In this context the teacher's answer and the student's answer is a list.  The whole answer is a single object, which we assess.</p> <p>Copy the following text into the Question text box:</p> <pre><code>Expand {@p@}, remembering to show your working.\n[[input:ans1]] [[validation:ans1]]\n</code></pre>"},{"location":"en/Specialist_tools/Equivalence_reasoning/#setting-the-input-options","title":"Setting the input options","text":"<p>Under the <code>Input:ans1</code> header specify Equivalence reasoning from the Input type drop-down and <code>ta</code> as the model answer.</p> <p>We want students to work through the expansion one line at a time, so let's include a hint. Copy the following into the Syntax hint box, within the <code>Input:ans1</code> header::</p> <pre><code>[(x+2)^3,stackeq(?)]\n</code></pre> <p>This is a list, and uses <code>stackeq</code>.</p> <p>For students in this context, it is probably sensible to \"insert stars\" and provide the most forgiving input syntax available, but that is optional.</p> <p>We need to tell STACK to compare the first line of the student's working to the first line of the question. This makes sure the student \"answers the right question\". Type <code>firstline</code> into the Extra options box within the <code>Input:ans1</code> header. This ensures a student's response will be invalid if they don't have the correct first line.</p> <p><code>firstline</code> can also be used in the Syntax hint box. The first line is then already written in the answer-field when the student opens the question.</p>"},{"location":"en/Specialist_tools/Equivalence_reasoning/#setting-the-potential-response-tree","title":"Setting the potential response tree","text":"<p>As a minimal potential response tree have one node, with</p> <pre><code>Answer test = EquivFirst\nSAns = ans1\nTAns = ta\nAuto-simplify = no\n</code></pre> <p>Note, the <code>Auto-simplify</code> field is not in the node of the PRT, but a PRT option.</p>"},{"location":"en/Specialist_tools/Equivalence_reasoning/#setting-the-question-options","title":"Setting the question options","text":"<p>Under the options section, turn off simplification by setting</p> <pre><code>Auto-simplify = no\n</code></pre> <p>Save the question.  This should be a minimal working question, so preview it and add in at least one question test.</p>"},{"location":"en/Specialist_tools/Equivalence_reasoning/#more-specific-feedback","title":"More specific feedback","text":"<p>At this point the question only checks</p> <ol> <li>Has the student started from the right expression, specifically is the first line of their argument equivalent to the first line of <code>ta</code> using <code>EqualComAss</code> test (commutativity and associativity)?</li> <li>Are all the lines in the student's answer algebraically equivalent?</li> </ol> <p>Clearly, more is needed for a complete sensible question.</p> <p>At this point please read the equivalence reasoning input type documentation.</p>"},{"location":"en/Specialist_tools/Equivalence_reasoning/#getting-to-the-right-place","title":"Getting to the right place","text":"<p>We probably want the student to end up at the expression x^{3}+6x^{2}+12x+8.</p> <p>To check is the student has reached this point, add another node to the PRT.  If node 1 is true (i.e. the student started in the correct place and didn't make a mistake) then connect to node 2. Node 2 should be set up as</p> <pre><code>SAns = last(ans1)\nTAns = last(ta)\nanswer test = EqualComAss\nAuto-simplify = no\n</code></pre> <p>This node adds in feedback to check the student has reached the right place.</p> <p>Note, by using <code>EqualComAss</code> both x^{3}+6x^{2}+12x+8 and x^{3}+x^{2}6+8+12x will be accepted. If you really want the term order as well, as in, x^{3}+6x^{2}+12x+8 then you need to use <code>CasEqual</code> as the answer test instead.</p>"},{"location":"en/Specialist_tools/Equivalence_reasoning/#what-is-a-legitimate-step","title":"What is a legitimate step?","text":"<p>At this point, any expressions which are equivalent are considered to be a legitimate step.</p> <p>Clearly this is not entirely satisfactory. At this point in the development there is no concept of \"a step\" and indeed this appears to be very hard to define. In the future we will develop better tools for checking \"step size\", and any contributions in this direction are welcome.</p> <p>Teachers can check the students answer is long enough or not too long by looking at <code>length(ta)</code>.</p> <p>Teachers can check if specific expressions appear somewhere inside the student's answer.  To facilitate this search we provide the function <code>stack_equiv_find_step(ex, exl)</code>.  This looks for expression <code>ex</code> in the list <code>exl</code> using <code>ATEqualComAss</code>.  It returns the list of indices of the position.  If you just want to know if the expression is missing use the predicate <code>emptyp</code>.</p> <p>As an alternative you can check that the factored form exists somewhere in the student's answers using the following code in the feedback variables.</p> <pre><code>foundfac:sublist(ans1,lambda([ex], equationp(ex) and is(rhs(ex)=0)));\nfoundfac:ev(any_listp(lambda([ex], second(ATFacForm(lhs(ex),lhs(ex),x))), foundfac), simp);\n</code></pre> <p>At this stage there are few in-built features within STACK.  A lot is possible, but as the above example illustrates, this requires question authors to write more Maxima code than with other question types.</p> <p>This feature will be developed by use over the next few years. If you have experience, and views, on how this should work please contact the developers.</p>"},{"location":"en/Specialist_tools/Equivalence_reasoning/#longer-term-plans","title":"Longer term plans","text":"<ol> <li>Define x\\neq a operator.  Needed to exclude single numbers from the domain.</li> <li>Define x\\in X operator, for student use.</li> <li>Provide better tools for dealing with assessment, such as checking for particular steps.</li> <li>Provide better feedback to students about which steps they have taken and what goes wrong.</li> </ol> <p>In the long term, we may fully implement the ideas in the paper Sangwin, C.J. An Audited Elementary Algebra The Mathematical Gazette, July 2015.</p> <p>In the future students might also be expected to say what they are doing, e.g. ``add a to both sides\", as well as just do it.  Quite how it does this, and the options available to the teacher is what is most likely to change.</p> <p>We would like to introduce the idea of a model answer.  STACK will then establish the extent to which the student's answer follows this model solution.</p>"},{"location":"en/Specialist_tools/Equivalence_reasoning/Equivalence_assessment/","title":"Equivalence input assessent","text":"<p>This is reference documentation for assessing answers from the equivalence reasoning input.</p>"},{"location":"en/Specialist_tools/Equivalence_reasoning/Equivalence_assessment/#answer-tests","title":"Answer tests","text":"<p>There are a number of answer tests which seek to establish whether a student's list of expressions are all equivalent.</p> <p>In these tests there is no concept of \"step size\" or any test that a student has worked in a sensible order. The tests share code with the input type, and feedback from the test will be identical to that from the input when this is shown.</p> <p>You will also need to set options, as in the input type above, to get the answer tests to reflect the options set. The options supported are <code>assume_pos</code>, <code>assume_real</code>, and <code>calculus</code>.</p>"},{"location":"en/Specialist_tools/Equivalence_reasoning/Equivalence_assessment/#equivreasoning","title":"EquivReasoning","text":"<p>This test establishes that all the items in the list are equivalent, using algebraic equivalence.</p>"},{"location":"en/Specialist_tools/Equivalence_reasoning/Equivalence_assessment/#equivfirst","title":"EquivFirst","text":"<ol> <li>This test establishes that all the items in the list are equivalent, using algebraic equivalence.</li> <li>Test that the first line of the student's answer is equivalent to the first line of the teacher's answer up to commutativity and associativity (using the answer test EqualComAss.)</li> </ol> <p>To test the last line of an argument is in the correct form will require a separate node in the potential response tree.  To add this to the answer test gives too many possibilities.</p>"},{"location":"en/Specialist_tools/Equivalence_reasoning/Equivalence_assessment/#natural-domains","title":"Natural domains","text":"<p>The equivalence reasoning input tracks natural domains of expressions.  This is via the STACK's <code>natural_domain(ex)</code> function.  Natural domains are shown to students in the validation feedback.  At the moment STACK quietly condones silent domain enlargements such as in the above example.</p>"},{"location":"en/Specialist_tools/Equivalence_reasoning/Equivalence_assessment/#repeated-roots","title":"Repeated roots","text":"<p>There is general ambiguity about how to express multiplicity of roots.  If (x-1)^2=0 is not equivalent to x=1 then students need to indicate multiplicity of roots, but there appears to be no consensus on how this should be notated.</p> <p>The equation  (x-3)^2 = 0  and the expression  x=3 \\text{ or } x=3 are considered to be equivalent, because they have the same roots with the same multiplicity. The expressions  x=3 \\text{ or } x=3 and  x=3 have the same variety, but are not identical. This is, of course, slightly awkward since logical ``or'' is idempotent, and so  x=3 \\text{ or } x=3 and  x=3 would be equivalent at a symbolic level. For this reason, STACK accepts x=3 as equivalent to (x-3)^2=0, but with an acknowledgement.  \\begin{array}{lll} &amp;\\left(x-3\\right)^3=0&amp; \\cr \\color{green}{\\text{(Same roots)}}&amp;x=3&amp; \\cr \\end{array}  </p>"},{"location":"en/Specialist_tools/Equivalence_reasoning/Equivalence_assessment/#other-functions","title":"Other functions","text":"<p>The maxima function <code>stack_disp_arg(ex, [showlogic, showdomain])</code> can be used to display a list of expressions <code>ex</code> in the same form as used in the input and answer tests.  This is useful for displaying the teacher's worked solution in the general feedback.  </p> <p>The second two arguments are optional. 1. The boolean variable <code>showlogic</code> determines whether the equivalence symbols are shown.  For a worked solution you probably need to use the following: 2. The boolean variable <code>showdomain</code> determines whether the natural domains are shown.</p> <p>For a worked solution you probably need to use the function</p> <pre><code>\\[ {@stack_disp_arg(ta)@} \\]\n</code></pre> <p>Without the equivalence symbols you use </p> <pre><code>\\[ {@stack_disp_arg(ta, false)@} \\]\n</code></pre> <p>With the equivalence symbols but without natural domains you use </p> <pre><code>\\[ {@stack_disp_arg(ta, true, false)@} \\]\n</code></pre>"},{"location":"en/Specialist_tools/Equivalence_reasoning/Equivalence_assessment/#finding-a-step-in-working","title":"Finding a step in working","text":"<p>It is relatively common to want students to take a \"particular step\" in their argument.  That is to say, to expect a particular intermediate expression to appear explicitly in their list of answers.</p> <p>For example, imagine you want students to \"simplify\"  \\log_5(25)  to 2.  It is important to see evidence of the expression  \\log_5(5^2)  in their answer.  The teacher's answer is, e.g.</p> <pre><code>ta:[lg(25,5),stackeq(lg(5^2,5)),stackeq(2*lg(5,5)),stackeq(2*1),stackeq(2)]\n</code></pre> <p>We want to accept </p> <pre><code>sa1:[lg(25,5),stackeq(lg(5^2,5)),stackeq(2)]\n</code></pre> <p>But reject</p> <pre><code>sa0:[lg(25,5),stackeq(2)]\n</code></pre> <p>Both of these are correct reasoning arguments, but the second is missing the desired step.</p> <p>To facilitate this search we provide the function <code>stack_equiv_find_step(ex, exl)</code>.  This looks for expression <code>ex</code> in the list <code>exl</code> using <code>ATEqualComAss</code>.  It returns the list of indices of the position.  If you just want to know if the expression is missing use the predicate <code>emptyp</code>.  Note, this function strips off <code>stackeq</code> before testing, so this function will find  \\log_5(5^2)  in both <code>sa1</code> and <code>sa2</code> below.</p> <pre><code>sa2:[lg(25,5),lg(5^2,5),2]\n</code></pre>"},{"location":"en/Specialist_tools/Equivalence_reasoning/Equivalence_input/","title":"Equivalence reasoning input","text":"<p>This is reference documentation for the equivalence reasoning input.</p>"},{"location":"en/Specialist_tools/Equivalence_reasoning/Equivalence_input/#what-is-reasoning-by-equivalence-and-this-input-type","title":"What is reasoning by equivalence and this input type?","text":"<p>This input type enables us to capture and evaluate student's line-by-line reasoning.</p>"},{"location":"en/Specialist_tools/Equivalence_reasoning/Equivalence_input/#how-do-students-use-this-input","title":"How do students use this input?","text":"<p>Instructions for students.</p> <p>In traditional practice students work line by line rewriting an equation until it is solved. This input type is designed to capture this kind of working and evaluate it based on the assumption that each line should be equivalent to the previous one. We have instructions for students.  Some common observations about this form of reasoning are</p> <ol> <li>Students often use no logical connectives between lines.</li> <li>Students ignore the natural domain of an expression, e.g. in  the value x=0 is excluded from the domain of definition.</li> <li>Operations which do not result in equivalence are often used, e.g. squaring both sides of an equation.</li> </ol> <p>This input type mirrors current common practice and does not expect students to indicate either logic or domains. The input type itself will give students feedback on these issues.</p> <p>Note that students must use correct propositional logic connectives <code>or</code> and <code>and</code>. E.g. their answer must be something correct such as <code>x=1 or x=2</code>, not something sloppy like <code>x=1 or 2</code> or <code>x=1,2</code>. It certainly can't be something wrong such as <code>x=1 and x=2</code> which is often seen in written answers!</p> <p>Note that students may not take square roots of both sides of an equation.  This will be rejected because it is not equivalent!  Similarly, students may not cancel terms from both sides which may be zero.  As we require equivalence, students may not multiply either.  This will probably not correspond to students' expectations, and may take a bit of getting used to.</p> <p>But should students really use logical connectives?  Yes, I (CJS) believe they should but to require this from the input type now would be too big a step for students and their teachers. Students are already being expected to use connectives such as <code>and</code> and <code>or</code> correctly.  The input type uses these connectives and in the future options may be added to this input type which require students to be explicit about logical connectives, especially when we add support for implication in addition to equivalence.  As we gain confidence in teaching with equivalence reasoning, we will add more options to this input type.</p>"},{"location":"en/Specialist_tools/Equivalence_reasoning/Equivalence_input/#validation-and-correctness","title":"Validation and correctness","text":"<p>STACK carefully separates out validation of a student's answer from the correctness. This idea is encapsulated in the separation of validation feedback via the tags <code>[[validation]]</code>  which is tied to inputs, from the potential response trees which establish the mathematical properties.</p> <p>Each line of a student's answer must be a valid expression, just as with the algebraic input type. However, sets, lists and matrices are not permitted in this input type. The internal result is a list of expressions (equations or inequalities).</p>"},{"location":"en/Specialist_tools/Equivalence_reasoning/Equivalence_input/#validation-symbols-and-their-meaning","title":"Validation symbols and their meaning","text":"<p>Validation typically gives immediate feedback using symbols, which are documented in the mathematics of equivalence reasoning page.</p>"},{"location":"en/Specialist_tools/Equivalence_reasoning/Equivalence_input/#example-use-cases-for-this-input-type","title":"Example use cases for this input type","text":"<ol> <li> <p>Reasoning by equivalence is the entire task.  The argument must be correct and the last line is the final answer.</p> </li> <li> <p>In a formative setting, we want immediate feedback on whether the argument consists of equivalent lines.  This feedback can be given</p> </li> <li>as the student types line by line, or</li> <li>at the end when they press \"check\".</li> </ol> <p>The ability to give feedback on the equivalence of adjacent lines as the student types their answer somewhat  blurs the distinction between validation and correctness, but in a way which is probably very useful to students.</p>"},{"location":"en/Specialist_tools/Equivalence_reasoning/Equivalence_input/#notes-for-question-authors","title":"Notes for question authors","text":"<ul> <li>The position of the validation tags, e.g. <code>[[validation:ans1]]</code> are ignored for this input type.  Validation feedback is always displayed next to the TextArea into which students type their answer.</li> <li>The teacher's answer and any syntax hint must be a list.  If you just pass in an expression strange behaviour may result.</li> <li>The input type works very much like the TextArea input type.  Internally, the student's lines are turned into a list.  If you want to use the \"final answer\" then use code such as <code>last(ans1)</code> in your potential response tree.</li> <li>If students type in an expression rather than an equation, the system will assume they forgot to add =0 at the end and act accordingly.  This is displayed to the student.</li> </ul> <p>If the student starts their line with an <code>=</code> sign, this is accepted.  Teachers cannot use a prefix <code>=</code>.  In a worked solution the teacher must use the prefix function <code>stackeq</code>.  For example,</p> <pre><code>ta:[(x-1)^2,stackeq(x^2-2*x+1)]\n</code></pre> <p>Teachers must explicitly use the <code>nounor</code> and <code>nounand</code> commands, not the <code>and</code> and <code>or</code> logic.  For more details see the section on simplification.  For example, a worked solution might be</p> <pre><code>ta:[p=0,(v-n1)*(v-n2)=0,v-n1=0 nounor v-n2=0,v=n1 nounor v=n2]\n</code></pre>"},{"location":"en/Specialist_tools/Equivalence_reasoning/Equivalence_input/#syntax-hints","title":"Syntax hints","text":"<p>The result of evaluating the syntax hint castext must be a list.  This will be re-interpreted by Maxima, and if you just pass in an expression strange behaviour may result.</p> <p>The castext may be used to fine-tune the syntax hint. In particular, if you want to remove <code>*</code>s from the first line, then this is one (rare) situation where it's best to work at the display level, not at the Maxima expression level.  Normally, especially with PRTs, it's best to work at the maxima level to establish the mathematical meaning.  However, here we need to fine tune how an expression is displayed.  There are currently two options for creating a clean string representation of an expression.</p> <ol> <li><code>sh:stack_disp(unary_minus_sort(p), \"\")</code> will provide the LaTeX output (fine-tuned by STACK).  The problems with using this format here, outside the LaTeX maths environment, are things like (i) use of <code>\\left(...\\right)</code>, use of <code>\\frac{}{}</code> for division etc.</li> <li><code>sh:sremove(\"*\", string(unary_minus_sort(p)))</code> will provide the string output.  The problems with this format are things like (i) too many brackets, (ii) nounforms are not converted (<code>nounand</code>).  This Maxima function has not been fine-tuned by STACK.</li> </ol> <p>To solve this problem in general an outstanding developer task is to write an output format function, like Maxima's <code>tex</code> command.  However, this is a lot of work.</p> <p>Here is one specific example of question variables, sorting out unary minus problems.</p> <p>``` p:-8ad-3bc+6ac+4bd; make_multsgn(\"space\"); sh:stack_disp([unary_minus_sort(p)],\"\"); ta:[p,ev(p,simp)]; ````</p> <p>Then use <code>[{@sh@}]</code> in the syntax hint.</p>"},{"location":"en/Specialist_tools/Equivalence_reasoning/Equivalence_input/#input-type-options","title":"Input type options","text":"<p>To enter options for this input use the \"extra options field\".   Options should be a comma separated list of values only from the following list.</p> <p><code>hideequiv</code> does not display whether each line is equivalent to the next at validation time.</p> <p><code>hidedomain</code> does not display natural domain information.</p> <p><code>comments</code> allows students to include comments in their answer.  By default comments are not permitted as it breaks up the argument and stops automatic marking.</p> <p><code>firstline</code> takes the first line of the teacher's answer and forces the student to have this as the first line of the student's answer.  The test used is equality up to commutativity and associativity (EqualComAss answer test).</p> <p><code>assume_pos</code> sets the value of Maxima's <code>assume_pos</code> variable to be true. If we <code>assume_pos</code> they any negative solutions will be ignored, whether or not they exist.  So x=\\pm 2 will now be equivalent to x=2. You might not want this equivalence.  In particular, this also has the effect of condoning squaring or rooting both sides of an equation. For example x^4=2 will now be equivalent to x=2 (rather than x=2 \\vee x=-2). This is not the default, but is useful in situations where a student is rearranging an equation to a given subject, and all the variables are assumed to be positive.  Note, this option is only for the input type. You will also need to set this in the question options to also affect the answer test.</p> <p><code>assume_real</code> sets an internal flag to work over the real numbers.  If <code>true</code> then x=1 will be considered equivalent to x^3=1.  Note, this option is only for the input type. You will also need to set this in the question options to also affect the answer test.</p> <p><code>calculus</code> allows calculus operations in an argument.  Note, this option is only for the input type. You will also need to set this in the answer test options to also affect the answer test.  This is at a very early stage of development. For example, constants of integration are not currently checked by this currently.</p> <p>If the syntax hint is just the keyword <code>firstline</code> then the first line of the value of the teacher's answer will appear as a syntax hint. This enables a randomly generated syntax hint to appear in the box.</p>"},{"location":"en/Specialist_tools/Equivalence_reasoning/Equivalence_input/#let","title":"\"let\"","text":"<p>Students can assigne a value to a variable by typing <code>let v=a</code>.  This value will be used in all subsequent working.</p> <p>For example, try the following in the equiv-reasoning input.</p> <pre><code>x^2=a^2\nlet a=2\n(x-2)*(x+2)=0\n</code></pre> <p>Internally there is a special function <code>stacklet(v,a)</code> which is used to indicate the variable <code>v</code> should have the value <code>a</code> within equivalence reasoning.  Note, this only assigns a value to a variable, and by design is not intended for definition of functions (sorry).</p> <p>To find all assignments in a student's answer, such as <code>ans1</code>, you can filter on the <code>stacklet</code> function within the feedback variables.  Note, the student's answer will be a list..</p> <pre><code>L1:sublist(ans1,lambda([ex],safe_op(ex)=\"stacklet\"));\n</code></pre> <p>Then <code>L1</code> will be a list of the assignments.  If you want to turn this into a list of equations then</p> <pre><code>L1:ev(L1,stacklet=\"=\");\n</code></pre>"},{"location":"en/Specialist_tools/Equivalence_reasoning/Equivalence_reasoning/","title":"The mathematics of equivalence reasoning","text":"<p>Reasoning by equivalence is is line-by-line algebraic reasoning.</p> <p>Reasoning by equivalence is is an iterative formal symbolic procedure where algebraic expressions, or terms within an expression, are replaced by an equivalent until a \"solved\" form is reached.  Reasoning by equivalence is very common in elementary mathematics.  It is either the entire task (such as when solving a quadratic) or it is an important part of a bigger problem.  E.g. proving the induction step is often achieved by reasoning by equivalence.</p> <p>There are two modes:  (i) re-writing equivalent expressions, and (ii) solving equations.</p> <p>An example of working with equivalent expressions is shown below.  It is not necessary to write the equal sign at the start of the expression in this form of reasoning.</p> <p>An example of solving a quadratic equation is shown below. \\begin{array}{cc} \\  &amp; x^2-x=30 &amp; \\\\ \\color{green}{\\Leftrightarrow} &amp; x^2-x-30=0 &amp; \\\\ \\color{green}{\\Leftrightarrow} &amp; \\left(x-6\\right)\\cdot \\left(x+5\\right)=0 \\\\ \\color{green}{\\Leftrightarrow} &amp; x-6=0\\lor x+5=0 \\\\ \\color{green}{\\Leftrightarrow} &amp; x=6\\lor x=-5 \\end{array} </p> <p>STACK has predicates to determine which form of reasoning is used.  The predicate is applied to the list of expressions.</p> <ol> <li><code>stack_eval_arg_expression_reasoningp(ex)</code></li> <li><code>stack_eval_arg_equation_reasoningp(ex)</code></li> </ol>"},{"location":"en/Specialist_tools/Equivalence_reasoning/Equivalence_reasoning/#equivalent-expressions","title":"Equivalent expressions","text":"<p>Working with equivalent expressions is relatively straightforward.</p> <p>In STACK, equivalence of adjacent expressions is established with the <code>AlgEquiv</code> answer test.</p> <ul> <li> \\color{green}{\\checkmark} (<code>CHECKMARK</code>) is use to indicate the following expression is equivalent to the previous one.   E.g. \\begin{array}{lll} &amp; x^2-x-30&amp; \\\\ \\color{green}{\\checkmark}&amp;=\\left(x-6\\right)\\cdot \\left(x+5\\right)\\end{array} </li> <li> \\color{red}{?} (<code>QMCHAR</code>) is used to indicate one expression is not equivalent to the next (equation or expression).</li> </ul>"},{"location":"en/Specialist_tools/Equivalence_reasoning/Equivalence_reasoning/#equivalent-equations","title":"Equivalent equations","text":"<p>Two equations are equivalent if they have the same solutions.</p> <p>Line-by-line algebraic reasoning with equations involves different types of object:</p> <ol> <li>Algebraic equations, which (implicitly) represent the set of solutions:  e.g. x^2+6=5x.</li> <li>Logical expressions giving explicit solutions: e.g. x=2 \\mbox{ or } x=3.</li> <li>Sets of numbers representing the solution: e.g. \\{2,3\\}, intervals such as [0,\\infty) (<code>co(0,inf)</code> in STACK).</li> <li>Systems of inequalities, e.g.  x\\geq 0.</li> </ol> <p>Reasoning by equivalence typically means working from a given equation to the explicit solutions.</p> <p>In deciding whether two equations are \"the same\" there are a number of choices to be made.</p> <ol> <li>Are we working over the real numbers, the complex numbers or something else?</li> <li>What should we do about repeated solutions.  E.g. are (x-2)^3=0 and x=2 equivalent equations?</li> </ol> <p>There are some edge cases when reasoning with equations:</p> <ul> <li>  \\mbox{false} = \\{\\} = \\mbox{none} denote situations with empty solutions, such as equations such as 1=0.</li> <li>  \\mbox{true} = \\mbox{all} denote trivial equations which are universally true, such as x=x.  Note, the atom <code>all</code> is displayed as \\mathbf{R} rather than \\mathbf{C}.  (This can be changed with <code>texput(all, \"\\\\mathbb{R}\");</code>)</li> </ul> <p>These edge cases differ from <code>AlgEquiv</code> which does not consider \\{\\} to be  \\mbox{false}.</p> <p>Note that STACK has no concept of \"step size\": future plans include measuring the \"distance\" between two expressions/equations.  Teachers can then use this size to decide on whether a step is too big, or an argument needs more detail (another intermediate step).</p> <ul> <li> \\color{green}{\\Leftrightarrow} (<code>EQUIVCHAR</code>) is used to indicate the following equation is equivalent to the previous one.   E.g. \\begin{array}{cc} \\  &amp; x^2-x-30=0 &amp; \\\\ \\color{green}{\\Leftrightarrow} &amp; \\left(x-6\\right)\\cdot \\left(x+5\\right)=0\\end{array} </li> <li> \\color{red}{?} (<code>QMCHAR</code>)is used to indicate one expression is not equivalent to the next (equation or expression).</li> <li> \\color{green}{\\text{(Same roots)}} (<code>SAMEROOTS</code>) is used to indicate the same set of roots, without multiplicity.   E.g. {\\begin{array}{lll} &amp;x^2-6\\,x=-9&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;{\\left(x-3\\right)}^2=0&amp; \\cr \\color{green}{\\text{(Same roots)}}&amp;x-3=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x=3&amp; \\cr \\end{array}} </li> <li> \\color{red}{\\Rightarrow} (<code>IMPLIESCHAR</code>) and \\color{red}{\\Leftarrow} (<code>IMPLIEDCHAR</code>) are used when the solution sets of expressions are subsets. Let P be the solution set of p(x)=0 and Q be the solution set of q(x)=0 and P\\subset Q then we write p(x) \\color{red}{\\Rightarrow} q(x).   E.g. {\\begin{array}{lll} &amp;x+1=0&amp; \\cr \\color{red}{\\Rightarrow}&amp;{\\left(x+1\\right)}^2=0&amp; \\cr \\color{red}{\\Rightarrow}&amp;{\\left(x+1\\right)}^3=0&amp; \\cr \\color{red}{\\Leftarrow}&amp;x+1=0&amp; \\cr \\end{array}} </li> <li> \\color{green}{\\Leftrightarrow}\\, \\color{blue}{(\\mathbb{R})} is used when solving over the reals (see the option <code>assume_real</code>).   E.g. {\\begin{array}{lll}\\color{blue}{(\\mathbb{R})}&amp;x+1&amp; \\cr \\color{green}{\\Leftrightarrow}\\, \\color{blue}{(\\mathbb{R})}&amp;{\\left(x+1\\right)}^2=0&amp; \\cr \\color{green}{\\Leftrightarrow}\\, \\color{blue}{(\\mathbb{R})}&amp;{\\left(x+1\\right)}^3=0&amp; \\cr \\color{green}{\\Leftrightarrow}\\, \\color{blue}{(\\mathbb{R})}&amp;x+1=0&amp; \\cr \\end{array}} </li> <li> \\color{blue}{\\text{Assume +ve vars}} is used when solving over the positive reals (see the option <code>assume_pos</code>).   E.g. \\begin{array}{lll}\\color{blue}{\\text{Assume +ve vars}}&amp;\\left(x-7\\right)\\cdot \\left(x+1\\right)=0&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x=7\\,{\\text{ or }}\\, x=-1&amp; \\cr \\color{green}{\\Leftrightarrow}&amp;x=7&amp; \\cr \\end{array} </li> <li>  \\color{green}{\\log(?)}  is used when equivalence is established using the rule  A=B \\Leftrightarrow e^A=e^B.   E.g.  \\begin{array}{lll} &amp;\\log_{3}\\left(\\frac{x+17}{2\\cdot x}\\right)=2&amp; \\cr \\color{green}{\\log(?)}&amp;\\frac{x+17}{2\\cdot x}=3^2&amp;{\\color{blue}{{x \\not\\in {\\left \\{0 \\right \\}}}}}\\cr \\color{green}{\\Leftrightarrow}&amp;x=1&amp; \\cr \\end{array} </li> </ul>"},{"location":"en/Specialist_tools/Equivalence_reasoning/Equivalence_reasoning/#other-symbols-are-used-to-give-feedback-of-various-kinds","title":"Other symbols are used to give feedback of various kinds.","text":"<ul> <li> \\color{red}{\\text{Missing assignments}} is used when students forget to write a variable.   E.g. {\\begin{array}{lll} &amp;x=1\\,{\\text{ or }}\\, x=2&amp; \\cr \\color{red}{\\text{Missing assignments}}&amp;x=1\\,{\\text{ or }}\\, 2&amp; \\cr \\end{array}} </li> <li> \\color{red}{\\text{and/or confusion!}} is used when students use and/or incorrectly.   E.g. {\\begin{array}{lll} &amp;x=1\\,{\\text{ or }}\\, x=2&amp; \\cr \\color{red}{\\text{and/or confusion!}}&amp;\\left\\{\\begin{array}{l}x=1\\cr x=2\\cr \\end{array}\\right.&amp; \\cr \\end{array}} </li> <li> \\color{blue}{\\int\\ldots\\mathrm{d}x} and () are used when we infer students have performed calculus operations (see the option <code>calculus</code>).   E.g. {\\begin{array}{lll} &amp;x^2+1&amp; \\cr \\color{blue}{\\int\\ldots\\mathrm{d}x}&amp;\\frac{x^3}{3}+x&amp; \\cr \\color{blue}{\\frac{\\mathrm{d}}{\\mathrm{d}x}\\ldots}&amp;x^2+1&amp; \\cr \\color{blue}{\\int\\ldots\\mathrm{d}x}&amp;\\frac{x^3}{3}+x+c&amp; \\cr \\end{array}} </li> </ul>"},{"location":"en/Specialist_tools/GeoGebra/","title":"GeoGebra in STACK","text":"<p>Author Tim Lutz - University of Edinburgh and University of Education Heidelberg, 2022-23.</p> <p>STACK supports inclusion of dynamic graphics using GeoGebra: https://geogebra.org.  This page is reference documentation when using GeoGebra applets both to display GeoGebra worksheets as part of a STACK question, and how to connect GeoGebra worksheets to a STACK input.</p> <p>To help with assessment, STACK provides a number of geometry related maxima functions.</p> <p>Please note that significant computation and calculation can be done within GeoGebra itself.  In many cases it might be much better to establish mathematical properties within the GeoGebra applet, and link the results to STACK inputs.  These results could be the distance between relevant objects, or boolean results.</p> <p>A current restriction of the STACK design is that you cannot have a variable name in question variables which also matches the name of an input. For example, you cannot randomly generate the initial position of a point  with the \"set\" instruction, and also link this GeoGebra object to the input <code>input:A</code> with a \"watch\" instruction. In this situation you will need to have dependent objects (probably hidden) in GeoGebra which match to inputs. (This is hard-wired into the design of STACK and cannot be changed, sorry.)</p> <p>A note on licenses: Please note that GeoGebra's license does not match the STACK licence.  Users of STACK remain entirely responsible for complying with license for materials, and media embedded inside STACK questions.</p>"},{"location":"en/Specialist_tools/GeoGebra/#disclaimer","title":"Disclaimer","text":"<p>The creation of these resources has been (partially) funded by the ERASMUS+ grant program of the European Union under grant No. 2021-1-DE01-KA220-HED-000032031. Neither the European Commission nor the project's national funding agency DAAD are responsible for the content or liable for any losses or damage resulting of the use of these resources.</p>"},{"location":"en/Specialist_tools/GeoGebra/GeoGebra/","title":"Authoring your first GeoGebra question","text":"<p>Information from GeoGebra applets can be linked to STACK inputs and then assessed by potential response trees in the normal way.  The purpose of this document is to help you author your first question using GeoGebra as an input.</p> <p>Reference documentation for using GeoGebra applets is elsewhere.</p>"},{"location":"en/Specialist_tools/GeoGebra/GeoGebra/#before-we-start","title":"Before we start","text":"<p>This document assumes you have worked through the following sections of the Author quick-start guide.</p> <ul> <li>Authoring quick start 1: A basic question.</li> <li>Authoring quick start 2: Question variables.</li> <li>Authoring quick start 3: Improving feedback.</li> </ul> <p>We strongly recommend you do not use an HTML-aware editor when editing STACK questions containing GeoGebra.  Instead turn off the editor within Moodle and edit the raw HTML.  Individual users can set their editor preferences by following:</p> <pre><code>User Dashboard &gt; Preferences &gt; Editor preferences &gt; Manage editors\n</code></pre> <p>A note on licenses: Please note that the GeoGebra's license does not match the STACK licence.  Users of STACK remain entirely responsible for complying with licenes for materials, and media embedded inside STACK questions.</p>"},{"location":"en/Specialist_tools/GeoGebra/GeoGebra/#question-design","title":"Question design","text":"<p>The goal is to create the following question.</p> <p>Move the points  and B (on a GeoGebra applet) so that the line AB is perpendicular to a given line y=mx+c shown in the applet.</p> <p>Notes.</p> <ul> <li> m and c are defined by STACK in the question variables.  Ultimately these could be randomly generated.  They illustrate how to set values in an applet.</li> <li>We should listen to the gradient of the line AB as an input.  This illustrates how to watch a value in GeoGebra and link it to a STACK input.</li> <li> A and B are points in the GeoGebra applet.  We need to remember the position a student leaves the points in.</li> <li>In this question, the potential response tree should multiply the variable m by the gradient of AB to check this is -1.  We don't worry about the position of the student's line otherwise.</li> </ul>"},{"location":"en/Specialist_tools/GeoGebra/GeoGebra/#1-create-the-geogebra-applet","title":"1. Create the GeoGebra applet","text":"<p>The first step is to create a GeoGebra applet and publish it online.   You will need the material id from the URL in GeoGebra to link the worksheet to a STACK question.</p> <ol> <li>Login to https://www.geogebra.org/</li> <li>Create a blank applet directly on the GeoGebra website.</li> <li>Create numbers <code>m=2</code> and <code>c=3</code>.  These will be given a value by STACK when the question is started by the student, but we must set sensible initial values.</li> <li>Create the line <code>l=m*x+c</code>.</li> <li>Create points A and B and a line through them.  Call this line <code>f</code>.</li> <li>Create the new variable <code>ans1=Slope(f)</code>.   We will setup the question to a STACK input will watch the value of this variable <code>ans1</code>.</li> <li>Hide the slope, and other object names as needed in the GGB applet.</li> <li>Hide the algebra window on GeoGebra, leaving only the geometry window.</li> <li>Save and publish the GeoGebra file.  You will need the id from the URL.  For example, if your GeoGebra file has URL <code>https://www.geogebra.org/calculator/anr6ujyf</code> then the id is the last part <code>anr6ujyf</code>.  This code is needed to link STACK to GeoGebra, for the value of <code>material_id</code>.  E.g. <code>params[\"material_id\"]=\"anr6ujyf\";</code> within the GeoGebra block.</li> </ol>"},{"location":"en/Specialist_tools/GeoGebra/GeoGebra/#2-create-a-minimal-stack-question-containing-the-materials","title":"2. Create a minimal STACK question containing the materials","text":"<p>Create a new question.  Set the question variables.  Initially the question variables are fixed values. Later these values will be randomly generated.</p> <pre><code>m:2;\nc:-1;\nta:-1/m;\n</code></pre> <p>Set the question text - before entering make sure that the editor is switched to html-mode.:</p> <pre><code>[[geogebra set=\"c,m\" watch=\"ans1\"]]\nparams[\"material_id\"]=\"anr6ujyf\";\n[[/geogebra]]\n&lt;p&gt;Move the points \\(A\\) and \\(B\\) so that the line \\(AB\\) is perpendicular the line shown in the applet.&lt;/p&gt;\n[[input:ans1]][[validation:ans1]]\n</code></pre> <p>Notice this uses the <code>[[geogebra]]</code> question block. Then complete the question as follows.</p> <ol> <li>Make sure the question text is \"HTML\" format (not Moodle auto format, or something else).</li> <li>Input <code>ans1</code> should have Model answer equal to <code>-1/m</code>.</li> <li>Input <code>ans1</code> should \"Forbid float\" set to no/false (GeoGebra will return floating point numbers)</li> <li>Set up the PRT with node 1 testing <code>ATNumAbsolute(ans1*m, -1, 0.1)</code>.  This checks the product of the gradient of the lines is within 0.1 of -1 - i.e. are they close to perpendicular.  (You could opt for a strict algebraic equivalence <code>ATAlgEquiv(ans1*m, -1)</code> if you prefer.)</li> </ol> <p>Notes</p> <ul> <li>The tag <code>[[geogebra set=\"c,m\" watch=\"ans1\"]]</code> contains information about which variables within GeoGebra to set and which to watch.</li> <li>There are strict naming conventions which must be followed, e.g. names must match in GeoGebra and in STACK.  This is explained in more detail in the GeoGebra reference documentation.</li> </ul>"},{"location":"en/Specialist_tools/GeoGebra/GeoGebra/#3-preliminary-test-of-the-stack-question","title":"3. Preliminary test of the STACK question","text":"<p>At this point you should have a working, minimal STACK question. So save and preview the question.</p> <ol> <li>Confirm the GeoGebra worksheet shows in the question and points A and B are visible to move.</li> <li>Confirm as you move the points that the gradient is placed into input <code>ans1</code>, which at this point you can see.</li> </ol>"},{"location":"en/Specialist_tools/GeoGebra/GeoGebra/#4-remember-the-positions-of-points-a-and-b","title":"4. Remember the positions of points A and B","text":"<p>While the question sets and watches values inside the applet, the Moodle quiz also needs to remember the positions the student left A and B in so that these are retained when the page reloads (after check, or navigation).</p> <p>For this, add a tag remember with both points A and B to the block heading:</p> <pre><code>[[geogebra set=\"c,m\" watch=\"ans1\" remember=\"A,B\"]]\nparams[\"material_id\"]=\"anr6ujyf\"; \n[[/geogebra]] \n&lt;p&gt;Move the points \\(A\\) and \\(B\\) so that the line \\(AB\\) is perpendicular the line shown in the applet.&lt;/p&gt;\n[[input:ans1]][[validation:ans1]]\n[[input:remember]][[validation:remember]]\n</code></pre> <p>Notice two changes.  (1) there is a <code>remember</code> argument in the geogebra block tag and (2) there is a new input in the question.  To actually store the coordinates of A and B, we need to add in a new input <code>[[input:remember]][[validation:remember]]</code> at the end of the question text.  Verify the question text and update the form, to set up this new input as follows.</p> <ol> <li>The <code>remember</code> input must be of type string.</li> <li>For the \"model answer\" use the empty string <code>\"\"</code>.</li> <li>We don't want to show the model answer of \"remember\" as part of the teacher's final answer (if available during the quiz) so hide the input from students with the STACK \"extra option\" <code>hideanswer</code> in the \"remember\" input.</li> <li>Values in remember are not available to the PRT and can not be used to calculate values in STACK feedback.</li> </ol>"},{"location":"en/Specialist_tools/GeoGebra/GeoGebra/#5-polish-and-tidy-the-question","title":"5. Polish and tidy the question.","text":"<p>Once you have the question working, you can add better feedback, add a worked solution, create random versions, and so on.  For example you could choose</p> <pre><code>    m:rand_with_step(2,3,1);\n    c:rand_with_step(2,3,1);\n</code></pre> <p>Then add in an answer note such as <code>\\[ y={@m*x+c@} \\]</code>.  Authoring quick start 4 provides advice on randomisation.</p> <p>You could also have an additional algebraic input asking the student to find the equation of their line.  At this point there are lots of options for combining a geometric diagram within a larger question.</p> <p>You should hide the inputs from students with CSS after testing, e.g. <code>&lt;span hidden=\"\"&gt;...&lt;/span&gt;</code>.</p> <p>For reference the full question text should now be</p> <pre><code>[[geogebra set=\"c,m\" watch=\"ans1\" remember=\"A,B\"]]\nparams[\"material_id\"]=\"anr6ujyf\"; \n[[/geogebra]] \n&lt;p&gt;Move the points \\(A\\) and \\(B\\) so that the line \\(AB\\) is perpendicular the line shown in the applet.&lt;/p&gt;\n&lt;span hidden=\"\"&gt;\n[[input:ans1]][[validation:ans1]]\n[[input:remember]][[validation:remember]]\n&lt;/span&gt;\n</code></pre>"},{"location":"en/Specialist_tools/GeoGebra/Question_block/","title":"GeoGebra question block","text":"<p>GeoGebra blocks are included with the <code>[[GeoGebra ...]]</code> block.  This page provides reference documentation of all features of that block.</p>"},{"location":"en/Specialist_tools/GeoGebra/Question_block/#adding-a-geogebra-question-block-using-the-material_id","title":"Adding a GeoGebra question block using the <code>material_id</code>","text":"<p>To use GeoGebra in STACK an applet must be hosted at geogebra.org and the applet must be publicly available through a url. </p> <p>To include a GeoGebra applet into a STACK castext field (e.g. the question text), first create or search for an existing GeoGebra applet at geogebra.org. To set things up we need the <code>material_id</code> of an applet, we want to show.</p> <p>For the material https://www.geogebra.org/m/seehz3km the <code>material_id</code> is: <code>seehz3km</code></p> <p>An example <code>[[geogebra]]</code> question block is shown below.</p> <pre><code>&lt;p&gt;You can show an applet:&lt;/p&gt;\n[[geogebra]]\nparams[\"material_id\"]=\"seehz3km\";\n[[/geogebra]]\n</code></pre> <p>This illustrates how the material_id is used.</p>"},{"location":"en/Specialist_tools/GeoGebra/Question_block/#control-the-size-of-the-applet","title":"Control the size of the applet","text":"<p>There are two places where the size of the applet can be defined:</p> <p>Within the block, adding values to the GeoGebra parameters width and height will define the section of the applet that is to be shown.</p> <p>Within the block's header, adding values to the iframe parameters width and height will enlarge or reduce the size of the applet, or even distort it.</p> <pre><code>[[geogebra height=\"100px\" width=\"175px\"]]\nparams[\"material_id\"]=\"seehz3km\";\nparams[\"height\"]=200;\nparams[\"width\"]=350;\n[[/geogebra]]\n</code></pre> <p>In the block's head, <code>width=\"80%\" aspect-ratio=\"2/3\"</code> could be used instead to define relative sizes and possible distortions if needed.</p> <p>If no size is defined the default is to have <code>width=\"500px\" height=\"400px\"</code> and these are also the dimensions used if values are missing and no aspect-ratio has been defined.</p>"},{"location":"en/Specialist_tools/GeoGebra/Question_block/#using-the-sub-tags-set-watch-and-remember","title":"Using the sub-tags \"set\", \"watch\" and \"remember\"","text":"<p>The \"set\", \"watch\" and \"remember\" tags to the <code>[[geogebra]]</code> question block link Maxima values to GeoGebra objects in various ways.</p> <ul> <li>\"set\" will set a GeoGebra object, point or value to a STACK-calculated value.</li> <li>\"watch\" enables a STACK input to listen to values and points in GeoGebra.</li> <li>\"remember\" is needed when you do not want to calculate feedback with some of the GeoGebra objects in an applet, but you do want to be able to save and restore the state of an applet when the student returns to the question later.</li> </ul>"},{"location":"en/Specialist_tools/GeoGebra/Question_block/#naming-conventions","title":"Naming conventions","text":"<p>To be able to make things consistent and easy for question authors, the following name conventions must be followed:</p> <ol> <li>Names of variables must be equal in both STACK and GeoGebra.  However, no explicit checking is done.</li> <li>Value-names must start with lower case letters.</li> <li>Values must be <code>int</code> or <code>float</code> STACK variables.</li> <li>Angles are used like values, and so must be named lowercase letters in Latin-Alphabet, (not Greek unicode letters!) and values must be in radians.  (If you want to show a Greek letter to the student, then have a parallel internal variable which is used by STACK.  E.g. call the angle  visibly in GGB, but have a hidden GGB variable a which you can watch.)</li> <li>Point-names must start with upper case letters.</li> <li>Points are represented as a list in STACK.  For example <code>D:[2,3]</code>, means a point D with x=2, y=3.  (While STACK has an inert <code>ntuple</code> command which can be used for representing and displaying coordinates, we have chosen to use lists in this design.)</li> </ol> <p>The value of the <code>set</code> parameter must be a string of (unique), comma-separated, GeoGebra-objects with latin names. For example, the sub-tag value could look like:  <code>set = \"A,B,C,D,a2,E__fixed\"</code> and would be placed in the block as</p> <pre><code>[[geogebra set = \"A,B,C,D,a2,E__fixed\"]]\n[[/geogebra]]\n</code></pre>"},{"location":"en/Specialist_tools/GeoGebra/Question_block/#using-the-set-sub-tag","title":"Using the \"set\" sub-tag","text":"<p>With the \"set\" sub-tag you can set a GeoGebra object (currently a point or a value) to a STACK-calculated value when the applet is first loaded.</p> <p>By default points are free to manipulate in the applet, unless you add <code>__fixed</code> or other double-underscore-tags to the Point-name. A full list of available options see \"set: double-underscore-tags in the \"advanced use-cases\"-section.</p> <p>Notes</p> <ol> <li>No checking is done that the object in STACK matches one in GeoGebra.  If it does not exist it will be created by GeoGebra.</li> <li> <p>Currently setting points and values are the only supported objects.  Users can set objects, e.g. you could define <code>g:x^3</code> and set this in an applet. </p> </li> <li> <p>Angles cannot be set directly, set points instead!</p> </li> </ol>"},{"location":"en/Specialist_tools/GeoGebra/Question_block/#a-minimal-example-question-with-set-can-a-student-read-randomly-generated-coordinates","title":"A minimal example question with \"set\": can a student read (randomly) generated coordinates?","text":"<p>Set the question variables:</p> <pre><code>A:[2,3];\nB:[1,2];\n</code></pre> <p>Set the question text:</p> <pre><code>[[geogebra set=\"A,B\"]]\nparams[\"material_id\"]=\"seehz3km\";\n[[/geogebra]]\nWrite the coordinates of \\(A\\): [[input:ans1]][[validation:ans1]]\n</code></pre> <p>Then complete the question as follows.</p> <ol> <li>In the input, make the model answer <code>A</code>.  This is a list.</li> <li>Make sure you set \"forbid floats\" option in the input to be false, if you want to!</li> <li>Complete the default potential response tree <code>prt1</code> as <code>ATAlgEquiv(ntupleify(ans1),ntupleify(A))</code></li> </ol> <p>This should give a minimal working GGB question with \"set\".</p> <p>The use of the STACK function <code>ntupleify</code> ensures both the student's answer and teacher's answer is converted from a list to an <code>ntuple</code>.  STACK defines <code>ntuple</code> as data type allowing an \"n-tuple\" such as  (1,2)  to be a different data type from a \"list\"  [1,2] .  Internally in STACK/GGB lists are given preference in the design, but completing the PRT as above will allow student input of coordinates using traditional round brackets, which is interpreted by STACK as a data type <code>ntuple</code>.  See the docs on sets, lists, sequences and n-typles.</p> <p>The question can readily be adapted by making <code>A</code> a randomly generated object, if required.</p>"},{"location":"en/Specialist_tools/GeoGebra/Question_block/#using-the-watch-sub-tag","title":"Using the \"watch\" sub-tag","text":"<p>With the \"watch\" sub-tag someone can listen to values and points in GeoGebra. These values can then be used to calculate feedback in STACK.  The values will be assigned to a STACK input.  Note, inputs can be \"hidden\" from the student.</p> <p>General notes for watched objects</p> <ol> <li>Points, e.g. <code>A</code>, must be an algebraic-input and you must allow floats!</li> <li>You can access <code>A</code> in STACK for feedback as a list of values for points <code>A[1]-&gt;x-value</code>, <code>A[2]-&gt;y-value</code></li> <li>Numbers/angles e.g. <code>b</code> can be an algebraic or numerical input, and you must allow floats!</li> <li>You can access <code>b</code> in STACK as value. If <code>b</code> represents an angle then <code>b</code> is in radians.</li> </ol>"},{"location":"en/Specialist_tools/GeoGebra/Question_block/#minimal-example-watching-point-a","title":"Minimal example watching point A.","text":"<p>Set the question variables to be</p> <pre><code>ta1:[2,3];\n</code></pre> <p>Set the question text:</p> <pre><code>[[geogebra watch=\"A\"]]\nparams[\"material_id\"]=\"seehz3km\";\n[[/geogebra]]\nMove \\(A\\) to be the point \\({@ntupleify(ta1)@}\\)\n[[input:A]][[validation:A]]\n</code></pre> <p>Recall that since the object in <code>watch=\"A\"</code> is written in upper case it must be a point.</p> <p>Then complete the question as follows.</p> <ol> <li>The question expects an input <code>A</code>.  In this input, make the model answer <code>ta1</code>.  This is a list, and has a different name from the watched point..</li> <li>Make sure you set \"forbid floats\" option in the input to be false, if you want to!</li> <li>Complete the default potential response tree <code>prt1</code> as <code>ATAlgEquiv(ntupleify(A), ntupleify(ta1))</code></li> </ol> <p>Once the question is working you can hide the inputs from students, but for testing it is helpful to see the input boxes.</p> <ol> <li>Hide an input with CSS, e.g. <code>&lt;p style=\"display:none\"&gt;[[input:A]] [[validation:A]]&lt;/p&gt;</code> (but probably not while you develop the question!)</li> <li>Turn off the validation (\"Show the validation\") and verification (\"Student must verify\") of the input field. </li> </ol> <p>Extensions to this basic question:</p> <ol> <li>The question can readily be adapted by making <code>ta1</code> a randomly generated object, if required.</li> <li>The answer test requires exact positioning of point <code>A</code> on the required coordinates.  In this GGB sheet we have \"snap to grid\" so it is reasonable to ask for exact positioning of the point <code>A</code> in this case.  An alternative approximate positioning  ||A-ta1||&lt;0.1  can be established using the Num-GT answer test: <code>ATGT(0.1, Distance(A,ta1))</code>.  STACK provides a number of geometry related maxima functions, including <code>Distance</code> which is used here.</li> </ol>"},{"location":"en/Specialist_tools/GeoGebra/Question_block/#using-the-remember-sub-tag","title":"Using the \"remember\" sub-tag","text":"<p>If you do not want to calculate feedback with some of the GeoGebra objects in an applet, but you do want to be able to save and restore the state of an applet, you can use the \"remember\" tag.</p> <p>You still need an input in the question to store these values. The only way STACK can store \"state\" is through inputs. This input must be of type \"string\" (because we store these values as a JSON-string internally). The name \"remember\" is hard-wired (for now).</p>"},{"location":"en/Specialist_tools/GeoGebra/Question_block/#minimal-example-remember-bc","title":"Minimal example remember B,C","text":"<p>In the above example (watch), we want to remember the positions of B and C </p> <p>Set the question text:</p> <pre><code>[[geogebra watch=\"A\" remember=\"B,C\"]]\nparams[\"material_id\"]=\"seehz3km\";\n[[/geogebra]]\nMove \\(A\\) to be the point \\({@ntupleify(ta1)@}\\)\n[[input:A]][[validation:A]]\n[[input:remember]][[validation:remember]]\n</code></pre> <ol> <li>The <code>remember</code> input must be of type string, and can not be used to calculate values in STACK feedback.</li> <li>For the \"model answer\" use the empty string <code>\"\"</code>.</li> <li>The name \"remember\" is hard-wired (in this version).</li> <li>We don't want to show the model answer of \"remember\" as part of the teacher's final answer (if available during the quiz) so hide the input from students with the STACK \"extra option\" <code>hideanswer</code> in the \"remember\" input.</li> <li>Once working, hide the \"remember\" input with CSS, e.g. <code>&lt;p style=\"display:none\"&gt;[[input:remember]][[validation:remember]]&lt;/p&gt;</code> (but probably not while you develop the question!)</li> </ol>"},{"location":"en/Specialist_tools/GeoGebra/Question_block/#minimal-example-watching-an-indirect-ggb-object-eg-angle-k","title":"Minimal example watching an indirect GGB object, e.g. angle k.","text":"<p>In the above example we have angle k.  To watch this value we can add <code>k</code> to the list of watched variables.  E.g.</p> <pre><code>[[geogebra watch=\"A,k\" remember=\"B,C\"]]\nparams[\"material_id\"]=\"seehz3km\";\n[[/geogebra]]\nMove \\(A\\) to be the point \\({@ntupleify(ta1)@}\\), and points \\(B,C\\) so that there is a right angle at \\(B\\).\n[[input:A]][[validation:A]]\n[[input:k]][[validation:k]]\n[[input:remember]][[validation:remember]]\n</code></pre> <ol> <li>Numbers/angles e.g. input <code>k</code> can be an algebraic or numerical input, and you must allow floats!</li> <li>The value of k will come through as a float.  Hence, you need to check if this is sufficiently close to \\pi/2 with a numerical test.  You could add the test <code>ATNumAbsolute(k,%pi/2,0.01)</code> to check |k-\\pi/2|&lt;0.01 as a check the angle is right.</li> </ol> <p>An alternative would be to check this in GeoGebra and create a variable with a value of 0 or 1, and watch this proxy variable.  The advantage of a numerical test is that you could give feedback which includes the angle.</p> <p>Your angle is {@round(k*180/%pi)@} degrees, which is not a right angle!</p>"},{"location":"en/Specialist_tools/GeoGebra/Question_block/#example-using-some-advanced-features","title":"Example: using some advanced features.","text":"<p>This example illustrates some of the advanced features </p> <p>Set the question variables to be</p> <pre><code>A:[-2,0];\nB:[1,0];\n</code></pre> <p>Set the question text to be</p> <pre><code>[[geogebra set=\"A,B\" watch=\"a,b\" remember=\"P\"]]\nparams[\"material_id\"]=\"rukrpcs5\";\n[[/geogebra]]\nMove \\(P\\) so that the angle \\(\\alpha\\) is a right angle.\n[[input:a]][[validation:a]]\n[[input:b]][[validation:b]]\n[[input:remember]][[validation:remember]]\n</code></pre> <p>Notes</p> <ol> <li>This GGB sheet has a variable <code>a</code> (hidden) which stores the angle \\alpha in a way STACK can access the Greek letter.</li> <li>This GGB sheet has a boolean variable <code>b</code>.  This will comes through to STACK as a number, 0 or 1.</li> <li>The use of <code>\"remember\"</code> means we need an string input to store the state of <code>P</code> between attempts.</li> </ol>"},{"location":"en/Specialist_tools/GeoGebra/Question_block/#advanced-use-cases","title":"Advanced use-cases","text":""},{"location":"en/Specialist_tools/GeoGebra/Question_block/#set-double-underscore-tags","title":"set: double-underscore-tags","text":"<p>The set sub-tag allows more control over setting objects using double-underscore-tags.</p>"},{"location":"en/Specialist_tools/GeoGebra/Question_block/#fixed-keyword","title":"\"fixed\" keyword","text":"<p>Using this keyword stops users from moving the point in GeoGebra.  E.g. <code>set = \"A__fixed\"</code>.</p>"},{"location":"en/Specialist_tools/GeoGebra/Question_block/#preserve-keyword","title":"\"preserve\" keyword","text":"<p>If you want to preserve GeoGebra definitions of points or values when setting them add the <code>__preserve</code> keyword to that object.  For example, if a point P lies on a circle then setting <code>P__preserve</code> keeps the point on the circle.</p>"},{"location":"en/Specialist_tools/GeoGebra/Question_block/#common-example-points-on-objects","title":"Common example: \"Points on objects\"","text":"<p>For example, assume \"A\" is a GeoGebra-Point on an object, like A is a point on the circle B. When you set A like: <code>set =\"A\"</code>, the definition of A will be overwritten by default. When you set A like: <code>set=\"A__preserve\"</code> then <code>\"A__preserve\"</code> will preserve that A is a Point on B and tries to set A near to your STACK variable A but on the circle.</p>"},{"location":"en/Specialist_tools/GeoGebra/Question_block/#common-example-sliders","title":"Common example: \"Sliders\"","text":"<p>\"a\" should be a GeoGebra-value controlled by a slider ranging from -5 to 5. When you set a like: <code>set = \"a\"</code>, the definition of a will be overwritten, e.g. if the STACK variable a is 10, after initialization a is 10 in GeoGebra. When you set a like: <code>set = \"a__preserve\"</code> then <code>\"a__preserve\"</code> will preserve that a is in range -5 to 5. If you set a in STACK to 10, a in GeoGebra will be set to the nearest value, in this example a will be 5 in GeoGebra.</p>"},{"location":"en/Specialist_tools/GeoGebra/Question_block/#hide-and-show-keyword","title":"Hide and show keyword","text":"<p>If you want to set and hide a value in GeoGebra add the __hide or __show keyword.</p> <ol> <li><code>set=\"a__hide\"</code> -&gt; set and hide</li> <li><code>set=\"a__show\"</code> -&gt; set and show</li> </ol>"},{"location":"en/Specialist_tools/GeoGebra/Question_block/#multiple-keywords","title":"Multiple keywords","text":"<p>It is possible to use multiple keywords.  E.g. both</p> <ul> <li><code>A__hide__fixed</code></li> <li><code>A__fixed__hide</code></li> </ul> <p>will set A as a fixed point and hide it. Keyword order is not relevant.</p>"},{"location":"en/Specialist_tools/GeoGebra/Question_block/#special-keyword-novalue","title":"Special keyword <code>novalue</code>","text":"<p>The GeoGebra object value should not be set, this keyword is helpful, if you just want to hide or show something, see \"multiple keywords\".</p> <ul> <li><code>set=\"A__hide__novalue\"</code> Hide A but do not set the value for A </li> <li><code>set=\"A__hide__novalue\"</code> watch=\"A\"` Watch A, but hide it and do not set it.</li> </ul>"},{"location":"en/Specialist_tools/GeoGebra/Question_block/#using-commands-inside-geogebrageogebra-blocks","title":"Using commands inside <code>[[geogebra]][[/geogebra]]</code> blocks","text":"<p>You can use the following commands inside the geogebra tag if the sub tags do not fit your task idea:</p> <ul> <li><code>stack_geogebra_bind_point(args)</code></li> <li><code>stack_geogebra_bind_value(args)</code></li> <li><code>stack_geogebra_bind_value_to_remember_JSON(args)</code></li> <li><code>stack_geogebra_bind_point_to_remember_JSON(args)</code></li> </ul>"},{"location":"en/Specialist_tools/GeoGebra/Question_block/#example-of-using-commands-inside-geogebrageogebra-blocks","title":"Example of using commands inside <code>[[geogebra]][[/geogebra]]</code> blocks","text":"<pre><code>[[geogebra input-ref-stateStore=\"stateRef\" set=\"b\" watch=\"B\"]]\nparams[\"material_id\"]=\"AEAVEqPy\";\nparams[\"appletOnLoad\"]=function(){stack_geogebra.bind_point_to_remember_JSON(stateRef,appletObject, 'A');\nstack_geogebra.bind_value_to_remember_JSON(stateRef,appletObject, 'c')};\n[[/geogebra]]\n[[input:stateStore]]\n[[validation:stateStore]]\n[[input:B]][[validation:B]]\n</code></pre> <p>Advanced users might want to look at documentation for common app settings which can be addressed through params[\"nameOfSetting\"] array, as shown in https://wiki.geogebra.org/en/Reference:GeoGebra_App_Parameters.</p>"},{"location":"en/Specialist_tools/GeoGebra/Question_block/#example-of-using-commands-inside-geogebrageogebra-blocks-to-define-geogbra-objects","title":"Example of using commands inside <code>[[geogebra]][[/geogebra]]</code> blocks to define geogbra objects","text":"<p>It is possible to update existing objects, or indeed to create new objects inside GeoGebra.  An example is below.</p> <pre><code> I want to display the function \\(x^3\\) in GeoGebra\n [[geogebra]]\n params[\"appletOnLoad\"]=function(){appletObject.evalCommand(\"f(x):=x^3\")}; \n [[/geogebra]]\n [[input:ans1]] [[validation:ans1]]\n</code></pre> <p>Please note that the STACK and GeoGebra syntax do not match perfectly.  For example, <code>g:%pi*x^3</code> will throw an error in GeoGebra because <code>%pi</code> in Maxima does not match <code>pi</code> in GeoGebra.  (Functionality to match syntax may be supported in the future but matching maxima syntax to GeoGebra syntax is a lot of work.)</p>"},{"location":"en/Specialist_tools/GeoGebra/Question_block/#future-plans","title":"Future plans","text":"<ol> <li>GeoGebra boolean types should come through to STACK as just return true/false (not 0,1).</li> <li>Suppport set/watch of more complex objects.</li> </ol>"},{"location":"en/Specialist_tools/GeoGebra/Question_block/#disclaimer","title":"Disclaimer","text":"<p>The creation of these resources has been (partially) funded by the ERASMUS+ grant program of the European Union under grant No. 2021-1-DE01-KA220-HED-000032031. Neither the European Commission nor the project's national funding agency DAAD are responsible for the content or liable for any losses or damage resulting of the use of these resources.</p>"},{"location":"en/Specialist_tools/JSXGraph/","title":"JSXGraph","text":"<p>This page documents use of JSXGraph to display visuals. This is a somewhat advanced topic. For basic plots and visuals you may prefer to use Maxima to plot graphs.</p> <p>STACK supports inclusion of dynamic graphs using JSXGraph: http://jsxgraph.uni-bayreuth.de/wiki/.</p> <p>Note, we strongly recommend you do not use an HTML-aware editor when using JSXGraph questions.  Instead turn off the editor within Moodle and edit the raw HTML.</p> <pre><code>Site administration &gt; Plugins &gt; Text editors &gt; Manage editors\n</code></pre> <p>Individual users can also set their editor preferences:</p> <pre><code>User Dashboard &gt; Preferences &gt; Editor preferences &gt; Manage editors\n</code></pre> <p>The documentation has many parts.</p> <ol> <li>Using JSXGraph create a plot in a castext field.</li> <li>Using JSXGRaph as an input type: Writing your first question.</li> <li>JSXGraph block: reference documentation</li> <li>Binding JSXGraph to inputs: reference documentation</li> <li>simple binding</li> <li>custom binding</li> <li>advanced custom binding</li> <li>3D JSXGraph authoring example:</li> <li>Examples of interesting JSXGraph plots.</li> <li>Using PRTs to update a JSXGraph plot in the question.</li> </ol>"},{"location":"en/Specialist_tools/JSXGraph/Advanced_JSXGraph/","title":"Advanced JSXGraph: <code>stack_jxg.custom_bind</code>","text":"<p>As stated in the general JSXGraph-block docs binding together STACK inputs and the state of the graph consists of three important things:</p> <ol> <li>We need to turn the state we wish to store into a string when it needs to be stored.</li> <li>We need to be able to restore the state from a string when need be, typically on page     load or during two-way binding style usage.</li> <li>We need to know when those things need to happen, i.e. what interactions with the graph     trigger the first point and when to trigger the second.</li> </ol> <p>As this is almost always the same for all bindings the <code>stack_jxg</code> library provides a general function called <code>custom_bind</code> which when given four things will ensure that those things happen at the correct times. The arguments of that function are as follows:</p> <ol> <li>Reference to the input that will be used to store the value and which will be watched     for external changes, i.e. for two-way binding and for the initial value.</li> <li>A serialiser-function, something that when called will generate a string representation     of the relevant state of the graph. It will be called without any arguments, and will most     likely not be a generally useful function.</li> <li>A deserialiser-function, something that will modify the state of the graph to match     the string given to the function. Again this is probably not a generally useful function.</li> <li>A list of JSXGraph elements, points etc. that when updated should trigger serialisation.     Note that this might be a static value during the time of the call of the <code>custom_bind</code>     function but one can extend this list later, as we will see in an example soon. Also note     that if your state is not directly tied to objects that the user interracts with you may     use a hidden point here and simply trigger <code>\"update\"</code>-events for that point.</li> </ol> <p>Basically, if you can turn the state into a string and back and know the objects you should be able to construct any binding you want.</p>"},{"location":"en/Specialist_tools/JSXGraph/Advanced_JSXGraph/#some-special-notes","title":"Some special notes","text":"<p>There are things that may not be obvious, here are some that are worth noting:</p> <ol> <li>The serialisation string may contain much more than is necessary to restore the state     during deserialisation. For example, if the state is defined by the position of points     that is enough to restore it, but the serialisation could still contain various angles     or other helpful details in addition to those points so that you do not need to calculate     them in Maxima.</li> <li>The counter point to that is that you should never trust anything coming from     the browser and nothing grading related should be calculated in the browser. However,     it is pretty rare to see a student modifying the serialised state stored in the input     so that it would contain wrong grading details, so do what feels natural. What is likely     though is for the student to read the code that generates those grading related details     and if it for example generates boolean values the student may get some hints on what is     required from the code.</li> </ol>"},{"location":"en/Specialist_tools/JSXGraph/Advanced_JSXGraph/#a-complicated-example","title":"A complicated example","text":"<p>Lets construct a custom binding that demonstrates some advanced concepts. For an example lets build a graph construction tool where one can create nodes (i.e. points) and connect and disconnect edges (line segments) between them. We will additionally want to store all of this state into a singular input field, thus mixing two very different things in the same input. The tricky bit here will be the fact that the sets of edges and nodes will not be statically sized and thus the deserialiser-logic will need to be able to recreate and destroy objects if the numbers of default configuration objects and stored state objects do not match.</p> <p>Our objective is to generate the following style of a JSON string, for use on the Maxima side:</p> <pre><code>{\n    \"nodes\": [\n        [1.0,2.0],\n        [0.0,2.0],\n        [1.0,1.0]\n    ],\n    \"edges\": [\n        [1,2],\n        [1,3],\n        [2,3]\n    ]\n}\n</code></pre> <p>The graph will not be directed and we will sort the edge listing for ease of use. We will also use 1-based indexing in the edge listing, and do some padding to keep our JavaScript side indexing of points 1-based as well.</p> <p>For user interface we will use a logic where dragging nodes into a particular area will connect/disconnect them from other nodes within that area. There will also be an area from which one can drag new nodes out of or into which one can drop extra nodes for destruction.</p> <p>Here is the whole code, the comments will include numbering and some parts will have extra details after the code.</p> <pre><code>[[jsxgraph input-ref-ans1=\"state\"]]\n/* A perfectly normal board. */\nconst board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-10, 10, 10, -10]});\n\n/* With some circles representing the UI. */\nconst source = board.create('circle',[board.create('point',[-8,-8],{visible: false}),1.5], {  strokeColor:'black',frozen:true, fixed:true, method:'pointRadius',hasInnerPoints:true, label:'Add/remove nodes'});\nconst connector = board.create('circle',[board.create('point',[-4,-8],{visible: false}),1.5], {  strokeColor:'black',frozen:true, fixed:true, method:'pointRadius',hasInnerPoints:true, label:'Connect nodes'});\nconst disconnector = board.create('circle',[board.create('point',[0,-8],{visible: false}),1.5], {  strokeColor:'black',frozen:true, fixed:true, method:'pointRadius',hasInnerPoints:true, label:'Disconnect nodes'});\n\n/* These represent the graph state. */\nlet nodes = [board.create('point',[0,0], {visible:false})]; /* hidden point as a padding, so that we start indexing nodes from 1. */\nlet edges = {}; /* A map from node to map of node to linesegment\n\n/* A convenience function for finding a node by id. */\nfunction get_node_index(id) {\n    return nodes.findIndex((node) =&gt; node !== null &amp;&amp; node.id == id);\n}\n\n/* Common UI-logic bits. */\nfunction is_node_within(node, circle) {\n    return JXG.Math.Geometry.distance([node.X(),node.Y()],[circle.center.X(),circle.center.Y()]) &lt; circle.Radius();\n}\n\nfunction get_nodes_within(circle) {\n    return nodes.filter((node) =&gt; node !== null &amp;&amp; is_node_within(node, circle));\n}\n\n\n/* 1. The serialiser function. */\nconst serialiser = () =&gt; {\n    let R = {'nodes': [], 'edges': []};\n    for (let i = 1; i &lt; nodes.length; i++) {\n        R.nodes.push([nodes[i].X(), nodes[i].Y()]);\n    }\n\n    for (const [from, others] of Object.entries(edges)) {\n        for (const [to, edge] of Object.entries(others)) {\n            R.edges.push([get_node_index(from), get_node_index(to)]);\n        }\n    }\n    /* Sort that list, for the Maxima side use. */\n    R.edges.sort((a,b) =&gt; {\n        let c = a[0] - b[0];\n        if (c === 0) {\n            c = a[1] - b[1];\n        }\n        return c;\n        });\n\n    return JSON.stringify(R);\n};\n\n/* Before the deserialiser we really need to have the tools for manipulation of\n   the state. The deserialiser may create or delete nodes and edges, and we will\n   be doing that elsewhere as well.\n\n   So here are some basic functions.\n*/\nfunction create_edge(pointA, pointB) {\n    /* This one uses JSXGraph point objects. */\n    /* For consistency we always draw the edges from the node earlier in the node list. */\n    let lowerIndex = get_node_index(pointA.id) &lt; get_node_index(pointB.id) ? pointA : pointB;\n    let higherIndex = lowerIndex === pointA ? pointB : pointA;\n\n    if (!(lowerIndex.id in edges)) {\n        edges[lowerIndex.id] = {};\n    }\n    if (higherIndex.id in (edges[lowerIndex.id])) {\n        /* That edge already exists do not recreate. */\n        return;\n    }\n    /* Create the segment and update the books... */\n    /* Note to keep UI logic easy we disable dragging by the edge. If you want\n       to use this UI logic you would need an `up`-handler also for edges. */\n    let edge = board.create('segment', [lowerIndex, higherIndex], {fixed: true});\n    edges[lowerIndex.id][higherIndex.id] = edge;\n\n    /* Ensure update. The edge was added after any points last moved. */\n    pointA.trigger(['update']);\n}\n\nfunction delete_edge(pointA, pointB) {\n    /* This one uses JSXGraph point objects. */\n    /* For consistency we always draw the edges from the node earlier in the node list. */\n    let lowerIndex = get_node_index(pointA.id) &lt; get_node_index(pointB.id) ? pointA : pointB;\n    let higherIndex = lowerIndex === pointA ? pointB : pointA;  \n\n    if (!(lowerIndex.id in edges)) {\n        /* No such edge. */\n        return;\n    }\n    if (higherIndex.id in (edges[lowerIndex.id])) {\n        /* Remove the edge from the board. */\n        board.removeObject(edges[lowerIndex.id][higherIndex.id]);\n        /* And from the books. */\n        delete edges[lowerIndex.id][higherIndex.id];\n    }\n\n    /* Ensure update. Don't use the ends, they might not exist. */\n    nodes[0].trigger(['update']);\n}\n\nfunction delete_node(point) {\n    const i = get_node_index(point.id);\n    if (i === -1) {\n        return; /* Should not happen */\n    }\n\n    /* Delete edges starting from this node. */\n    if (point.id in edges) {\n        for (const [to, edge] of Object.entries(edges[point.id])) {\n            board.removeObject(edge);   \n        }\n        delete edges[point.id];\n    }\n\n    /* Delete edges ending to this node. */\n    for (const [from, others] of Object.entries(edges)) {\n        for (const [to, edge] of Object.entries(others)) {\n            if (to === point.id) {\n                board.removeObject(edge);\n                delete edges[from][to];\n            }\n        }\n    }\n\n    /* Remove from board. */\n    board.removeObject(point);\n    delete nodes[i];\n\n    /* Ensure update. Note that might have been the last bound node we just removed. */\n    nodes[0].trigger(['update']);\n}\n\nfunction create_node(x,y) {\n    var node = board.create('point',[x,y],{name:''});\n    /* We need to add some UI logic to this node. */\n    node.on('up', () =&gt; {\n        if (is_node_within(node, source)) {\n            /* Returned to source, delete it. */\n            delete_node(node);\n        } else if (is_node_within(node, connector)) {\n            /* In the connector area, connect to all others in the area. */\n            for (let n of get_nodes_within(connector)) {\n                if (n !== node) {\n                    create_edge(n, node);\n                }\n            }\n        }  else if (is_node_within(node, disconnector)) {\n            /* In the disconnector area, disconnect from all others in the area. */\n            for (let n of get_nodes_within(disconnector)) {\n                if (n !== node) {\n                    delete_edge(n, node);\n                }\n            }\n        }\n    });\n    nodes.push(node);\n    /* 2. As this is a new node that we need to track in the binding we need to register it. */\n    stack_jxg.register_object(state, node, serialiser);\n\n    /* Ensure update. Also trigger the up-handler. */\n    node.trigger(['up', 'update']);\n}\n\n/* 3. The deserialiser, i.e. the hard part when we can create elements. */\nconst deserialiser = (value) =&gt; {\n    let newState = JSON.parse(value);\n\n    /* First sync the nodes. That null padding is the reason for the +1. */\n    while (newState.nodes.length + 1 &lt; nodes.length) {\n        /* We have extra nodes present in the current state, delete them. */\n        delete_node(nodes[nodes.length - 1]);\n    }\n    for (let i = 0; i &lt; newState.nodes.length; i++) {\n        if (i+1 &lt; nodes.length) {\n            /* Reposition existing node. */\n            nodes[i+1].setPosition(JXG.COORDS_BY_USER, newState.nodes[i]);\n        } else {\n            /* Create new node. */\n            create_node(newState.nodes[i][0], newState.nodes[i][1]);\n        }\n    }\n\n    /* Then the edges. We basically need to check each existing for deletion\n       and each new for creation. The easy way to get the list of edges in\n       the same format is to get it through the `serialiser`. */\n    const newEdges = newState.edges;\n    const oldEdges = JSON.parse(serialiser()).edges;\n    for (let edge of oldEdges) {\n        if (newEdges.indexOf(edge) &lt; 0) {\n            delete_edge(nodes[edge[0]], nodes[edge[1]]);\n        }\n    }\n    for (let edge of newEdges) {\n        if (oldEdges.indexOf(edge) &lt; 0) {\n            create_edge(nodes[edge[0]], nodes[edge[1]]);\n        }   \n    }\n    board.update();\n};\n\n/* Then lets add a magical point for creating new nodes. If one drags it outside\n   the circle it will create a new node at that place before returning back. */\nconst magicPoint = board.create('point', [source.center.X(), source.center.Y()], {name: 'Place me to create a new node.', size: 0.2, sizeUnit: 'user'});\nmagicPoint.on('up', () =&gt; {\n    if (!is_node_within(magicPoint, source)) {\n        create_node(magicPoint.X(), magicPoint.Y());\n    }\n    /* Always return to the source. */\n    magicPoint.setPosition(JXG.COORDS_BY_USER, [source.center.X(), source.center.Y()]);\n    board.update();\n});\n\n/* 4. In the end lets create the default state, like with all the binding functions\n   we must call the function after the default has been set. */\ncreate_node(1.0,2.0);\ncreate_node(0.0,2.0);\ncreate_node(1.0,1.0);\ncreate_edge(nodes[1], nodes[2]);\ncreate_edge(nodes[1], nodes[3]);\ncreate_edge(nodes[2], nodes[3]);\n\n/* 5. Now in our example the `create_node`-function already registered those points for binding.\n   so the only object we give it is the padding point that we also use as a handle for triggering\n   sync if all other elements have been eliminated. */\nstack_jxg.custom_bind(state, serialiser, deserialiser, [nodes[0]]);\n\n/* After that many changes it may make sense to call board update... */\nboard.update();\n[[/jsxgraph]]\n</code></pre>"},{"location":"en/Specialist_tools/JSXGraph/Advanced_JSXGraph/#specific-comments","title":"Specific comments","text":"<p>At 1. the serialiser is rather simple, if yours is not consider whether the way represent your state is clear enough. Typically, well constructed state is easy to serialise.</p> <p>At 2. the key thing to note is that when we create new elements that need to be bound we need to register them, un-registering is not possible and one should probably not care about that, as extra registered items, while taking room and time during evaluation of logic are not that common and will be dropped during page refresh. Typically, users do not do so many actions that the lag would be noticeable.</p> <p>At 3. like serialisers deserialisers are simpler if the state is formulated suitably. Here we can often use the serialiser-function to our advantage when comparing the current state and incoming state and then do the minimal set of updates. Alternatively, simply throwing everything away and rebuilding from scratch is a valid tactic, maybe not efficient but this is a place where premature optimisation is often pointless.</p> <p>At 4. always do the default state building before binding anything, as the binding function call will at that moment read the current value from the input and if it find something from there it will deserialise it on top of the current state.</p> <p>At 5. Do note the use of that extra point that is hidden. It has two uses, first the padding in the list to help with mapping indices so that they work better in Maxima. But the more important bit is the use as a handle to the binding-logic. In this code we often build extra state, i.e., those edges after the serialisation has already dealt with the movement of points and we thus need to trigger an update for these elements that have not been bound. It is also the backup for a situation where all nodes get removed, in that situation the removal of tha last node would basically be impossible to update to the input as the node would no longer be there to notify about its own demise.</p>"},{"location":"en/Specialist_tools/JSXGraph/Author_quickstart/","title":"Authoring your first JSXGraph question","text":"<p>The purpose of this document is to help you author your first question using JSXGraph as an input.</p>"},{"location":"en/Specialist_tools/JSXGraph/Author_quickstart/#before-we-start","title":"Before we start","text":"<p>This document assumes you have worked through the following sections of the Author quick-start guide.</p> <ul> <li>Authoring quick start 1: A basic question.</li> <li>Authoring quick start 2: Question variables.</li> <li>Authoring quick start 3: Improving feedback.</li> </ul> <p>We strongly recommend you do not use an HTML-aware editor when editing STACK questions containing JSXGraph.  Instead turn off the editor within Moodle and edit the raw HTML.  Individual users can set their editor preferences by following:</p> <pre><code>User Dashboard &gt; Preferences &gt; Editor preferences &gt; Manage editors\n</code></pre> <p>Plain text is a safe choice for an editor, even if it lacks a lot of convenience features. Editing a JSXGraph question in other editors can break the question, especially if it contains <code>&lt;</code>, <code>&gt;</code> and <code>&amp;</code> characters.</p>"},{"location":"en/Specialist_tools/JSXGraph/Author_quickstart/#drawing-a-basic-jsxgraph-plot","title":"Drawing a basic JSXGraph plot","text":"<p>In this guide, we will create an interactive question that gives the student a linear function and asks for a line parallel to the function graph, which the student should input by dragging a point. You can find the complete question here.</p> <p>JSXGraph is a Javascript library and thus plots are written in Javascript. In STACK, the definition of a JSXGraph plot needs to go inside <code>[[jsxgraph]]</code> blocks.</p> <p>Create a new STACK question, and use the content below as question text. (We will initialize the maxima variable <code>expr</code> later.) When previewing the question, you should see a plot with a line.</p> <pre><code>&lt;p&gt;Drag the point \\(A\\) so that the line \\(OA\\) is parallel to the function graph of \\(f(x) = {@expr@}\\).&lt;/p&gt;\n\n[[jsxgraph]]\nvar board = JXG.JSXGraph.initBoard(divid, {\n    axis: true,\n    showCopyright: false,\n    showNavigation: false,\n    boundingbox: [-6, 6, 6, -6],\n    keepaspectratio: true,\n    grid:true\n});\n\nvar pO = board.create('point', [0, 0], {name: 'O', fixed: true, color: \"blue\" });\nvar pA = board.create('point', [2, -1], { name: 'A', snapToGrid:true, snapSizeX:0.2, snapSizeY:0.2 });\nvar line = board.create('line', [pO, pA], { fixed: true });\n[[/jsxgraph]]\n\n&lt;p&gt;[[input:ans1]] [[validation:ans1]]&lt;/p&gt;\n</code></pre> <p>We need to create a board (canvas) to draw on, which is done using the <code>initBoard</code> function. In STACK, the first argument should be <code>divid</code>, the second argument is a dictionary of properties, see documentation for more options.</p> <p>On this board, we can then create other objects, such as points and lines. Each object is created by providing the object type, a definition (e.g., a point has two coordinates; a line is defined using two points), and object properties. In this case, we make one point (A) movable while the origin (O) is fixed using the <code>fixed</code> property. As we later want students to move the point A, we snap the point coordinates to multiples of 0.2 to make it easier for students to move the point to integer coordinates. As the line is defined in terms of A and O, moving A also updates the line.</p> <p>The set of properties of each object type can be looked up in the documentation, e.g. for points; for commonly used objects like points examples are also available on the JSXGraph wiki. The JSXGraph book gives a basic overview over commonly used objects as well. Note that these resources assume JSXGraph is used outside of STACK, so not everything is directly transferable (in particular, the creation of the board is somewhat different).</p>"},{"location":"en/Specialist_tools/JSXGraph/Author_quickstart/#randomization","title":"Randomization","text":"<p>We may want to randomize the function graph of the function f(x) that the line should be parallel to, as well as the initial position of the point A that the student will drag around. We define the following question variables:</p> <pre><code>slope: rand([1/2, 3/2, 2]);\nintercept: rand_with_step(-3, -1, 1);\nexpr: slope*x + intercept;  /* our function f(x) */\nta1: [2, 2 * float(slope)];  /* A correct answer for A with integer coordinates */\n\nxA_init: 1 + rand(3);\nyA_init: -1 - rand(3);\nA_init: [xA_init, yA_init];  /* Initial position of A */\n</code></pre> <p>As our question now has randomization, we also need to choose a question note:</p> <pre><code>\\(f(x) = {@expr@}\\)&lt;br&gt;\n\\(A = {@ta1@}, A_{init} = {@A_init@}\\)\n</code></pre> <p>While the function f(x) does not affect the initial plot (only the correct solution), we now need to update our plot to show the correct initial position of A. For this purpose, we use <code>{# #}</code> to embed values of maxima variables directly into our Javascript code. This is similar to <code>{@ @}</code> but just gives the raw content instead of formatting the content in a pretty way (which would not make for valid Javascript). Update the definition of the JSXGraph point A in the question text as follows:</p> <pre><code>var pA = board.create('point', {# A_init #}, { name: 'A', snapToGrid:true, snapSizeX:0.2, snapSizeY:0.2 });\n</code></pre> <p>Note that instead of <code>{# A_init #}</code>, we could also have used <code>[{# xA_init #}, {# yA_init #}]</code>. Both will give the two coordinates separated by a comma and inside of square brackets, which is valid Javascript syntax for a list of two elements. Be careful when using maxima constants such a <code>%pi</code> and <code>%e</code>, as these are not valid Javascript symbols. If you have numerical maxima expressions containing these, convert the result to float.</p>"},{"location":"en/Specialist_tools/JSXGraph/Author_quickstart/#interactive-input","title":"Interactive input","text":"<p>Our goal is to process the point that the student is dragging around as input. For this purpose, we need to bind the JSXGraph point to a STACK input. To do this, we need to add an input reference to the JSXGraph block, and then bind the point to that reference:</p> <pre><code>[[jsxgraph input-ref-ans1=\"ref_A\"]]\n\n...\n\nstack_jxg.bind_point(ref_A, pA);\n[[/jsxgraph]]\n</code></pre> <p>The first line creates a reference <code>ref_A</code> that is linked to the STACK input <code>ans1</code>. The last line then binds the JSXGraph point <code>pA</code> that we created earlier to this new reference. (It is also possible to bind objects other than points, such as sliders, lists or custom objects, see Binding.)</p> <p>If you preview the question now, you will notice that as you drag the point around, the input field <code>ans1</code> reflects the current coordinates of the point. You will also notice that you get validation errors (\"This answer is invalid. Your answer contains floating point numbers, ...\") if you drag the point to non-integer coordinates.</p> <p>By default, STACK does not allow floating point numbers in algebraic input fields. Go to the properties of the input <code>ans1</code> and set Forbid float to No. In general, as JSXGraph works using floating point numbers rather than exact arithmetics, you'll generally want to allow floating points numbers for JSXGraph-linked input fields.</p>"},{"location":"en/Specialist_tools/JSXGraph/Author_quickstart/#feedback","title":"Feedback","text":"<p>In general, when comparing floating point values (such as points or values derived their coordinates), it is advisable to use a numerical answer test, due to rounding errors intrinsic to floating point numbers. For example, you might have noticed that even with the snap to grid option, the values in the input field looked like <code>[0.8,1.2000000000000002]</code> rather than <code>[0.8,1.2]</code>.</p> <p>For our question, if there was a unique correct answer, we could simply compare the student answer <code>ans1</code> to our teacher answer <code>ta1</code>, both being a point (i.e., a list of two coordinates), using an answer test like <code>NumAbsolute</code> or <code>NumRelative</code>.</p> <p>However, as there are many possible correct answers, we will compute the slope of the student's line and compare it to the slope of our function.</p> <p>So in the feedback variables of PRT1, we define</p> <pre><code>student_slope: ans1[2]/ans1[1];\n</code></pre> <p>and in the PRT1, we compare <code>student_slope</code> and <code>slope</code> using the answer test <code>NumRelative</code> with Test Options 0.02 and Quiet set to Yes.</p>"},{"location":"en/Specialist_tools/JSXGraph/Author_quickstart/#jsxgraph-in-feedback","title":"JSXGraph in feedback","text":"<p>JSXGraph plots can not only be used in the question text, but also in the feedback. For example, in our question, if the student gets the answer incorrect, we could display a plot showing the function f(x) as well as the student answer, for comparsion. Add the following to the false feedback for PRT1:</p> <pre><code>&lt;p&gt;The slope of your line is different from the slope of {@expr@}, see below:&lt;/p&gt;\n\n[[jsxgraph]]\nvar board = JXG.JSXGraph.initBoard(divid, {\n    axis: true,\n    showCopyright: false,\n    showNavigation: false,\n    boundingbox: [-6, 6, 6, -6],\n    keepaspectratio: true,\n    grid:true\n});\n\nvar pO = board.create('point', [0, 0], {name: 'O', fixed: true, color: \"blue\" });\nvar pA = board.create('point', {# ans1 #}, { name: 'A',  fixed: true});\nvar line = board.create('line', [pO, pA], { fixed: true });\nvar graph = board.create('functiongraph', '{#expr#}' , {name:'{#expr#}', withLabel: true});\n[[/jsxgraph]]\n</code></pre> <p>Note how we are using the student answer <code>ans1</code> in our plot, and we're drawing the graph of f(x) using a <code>functiongraph</code> object. Because our function is simple, its maxima string representation works as a definition for the <code>functiongraph</code>, but in general read Basic_plots to see how to plot functions.</p>"},{"location":"en/Specialist_tools/JSXGraph/Author_quickstart/#blank-inputs","title":"Blank inputs","text":"<p>Note that if the student does not move the point, the input field will remain blank and they will not get any feedback. In our question, we made sure in our randomization that the initial position of A is not a correct answer. In general, you'll want to make sure that the initial positions of your interactive objects don't form a correct answer.</p> <p>If you have multiple inputs (points, sliders, etc) and there are correct answers where some of them remain in their initial position, you can define input groups so that if any element of that group is moved by the student, all of them are considered moved and their inputs will get values. In order to do that, after binding the objects using <code>bind_point</code>/<code>bind_slider</code>/etc, add a call to <code>define_group</code> where you pass the list of elements in a group as arguments, similar to this:</p> <pre><code>stack_jxg.define_group([pA, pB, ...]); \n</code></pre>"},{"location":"en/Specialist_tools/JSXGraph/Author_quickstart/#hiding-input-fields","title":"Hiding input fields","text":"<p>While it is useful to see the input field for testing, we probably don't want students to see it. So once we are satisfied with our question, we can hide the input field by putting it into appropriate HTML tags, for example:</p> <pre><code>&lt;p style=\"display:none\"&gt;[[input:ans1]] [[validation:ans1]] &lt;/p&gt;\n</code></pre> <p>You may also want to hide the teacher answer from the student feedback, as by default it is displayed as part of the feedback like \"A correct answer is:\". To do this</p> <ol> <li>Turn off the validation (\"Show the validation\") and verification (\"Student must verify\") of the input field.</li> <li>Use the extra option <code>hideanswer</code> to make sure the teacher's answer is not shown to students.</li> </ol>"},{"location":"en/Specialist_tools/JSXGraph/Author_quickstart/#tips-and-tricks","title":"Tips and tricks","text":"<p>When creating JSXGraph questions in STACK, it is often slow and difficult to find errors in the JSXGraph javascript code. It can be useful to develop the JSXGraph component of the question locally first, and then \"STACKify\" it. For this purpose, create a file with a <code>.html</code> extension on your computer, with the following content:</p> <pre><code>&lt;!DOCTYPE HTML&gt;\n&lt;html lang=\"en\"&gt;\n\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;JSXGraph template&lt;/title&gt;\n    &lt;meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"&gt;\n    &lt;!-- The jsxgraph version is defined in the next 2 lines (eg @1.4.5 defines version 1.4.5) --&gt;\n    &lt;link href=\"https://cdn.jsdelivr.net/npm/jsxgraph@1.4.5/distrib/jsxgraph.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    &lt;script src=\"https://cdn.jsdelivr.net/npm/jsxgraph@1.4.5/distrib/jsxgraphcore.js\" type=\"text/javascript\"\n        charset=\"UTF-8\"&gt;&lt;/script&gt;\n    &lt;script src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml.js\" id=\"MathJax-script\" async&gt;&lt;/script&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;!-- You can define the width and height of your applet here --&gt;\n    &lt;!-- If it's not the standard 600 by 600 then the syntax for STACK is \n        [[jsxgraph height='Apx' width='Bpx']] where A is the height and B\n        is the width --&gt;\n    &lt;div id=\"jxgbox\" class=\"jxgbox\" style=\"width:600px; height:600px;\"&gt;&lt;/div&gt;\n\n\n    &lt;!-- Start your jsxgraph here --&gt;\n    &lt;script&gt;\n        var board = JXG.JSXGraph.initBoard('jxgbox', { // STACK: when moving to STACK change 'jxgboard' for divid\n            boundingbox: [-1, 7, 9, -1],\n            keepaspectratio: true,\n            showCopyright: false,\n            axis: true,\n            showNavigation: true\n        });\n\n\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Now edit your JSXGraph code in between the <code>&lt;script&gt;</code> tags. To preview the question, open in a browser. After each edit, you can simply refresh the page to see the changes. If nothing displays, there is likely an error in your code. To get the relevant error messages, in your browser, go into developer mode (usually Ctrl+Shift+C). Usually, there is a tab for errors, you may be able to find it looking for a red symbol with a cross. Once you have found the list of errors, they usually indicate where in the code the problem is. Once you are happy with your JSXGraph component, copy the content within the <code>&lt;script&gt;</code> tags into a STACK question and change <code>'jxgboard'</code> to <code>divid</code> in the <code>initBoard</code> function call. You can now work on the randomization and interactive parts.</p> <p>When previewing a broken JSXGraph question in STACK, it is still possible to use the browser's developer (Ctrl+Shift+C) mode to find errors, as before. However, you won't get useful on where exactly the error is.</p> <p>In general, it is helpful to keep the inputs visible for debugging, and only hide them once the question is ready.</p>"},{"location":"en/Specialist_tools/JSXGraph/Basic_plots/","title":"Basic JSXGraph plots","text":"<p>This example is based on the documentation for curve and the even simpler function plotter example.</p> <p>To include a basic dynamically-generated sketch into a STACK question, first define the expression of the graph to be plotted in the question variables.  For example</p> <pre><code>a:rand(6)-3;\nfx:sin(x)+a;\n</code></pre> <p>Then include the following question text, which includes a simple <code>[[jsxgraph]]</code> block.  In particular note the lack of <code>&lt;script&gt;</code> tags which you might expect to include.</p> <pre><code>&lt;p&gt;Type in an algebraic expression which has the graph shown below.&lt;/p&gt;\n[[jsxgraph]]\n  /* boundingbox:[left, top, right, bottom] */\n  var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-10, 5, 10, -5], axis: true, showCopyright: false});\n  var f = board.jc.snippet('{#fx#}', true, 'x', true);\n  board.create('functiongraph', [f,-10,10]);\n[[/jsxgraph]]\n&lt;p&gt;\\(f(x)=\\) [[input:ans1]] [[validation:ans1]]&lt;/p&gt;\n</code></pre> <p>Note the code <code>board.jc.snippet('{#fx#}', true, 'x', true);</code> which turns a reasonable expression for a function into the JavaScript function.  You cannot just plot the <code>functiongraph</code> on its own.</p> <p>To make a working question, you will then need to add in <code>fx</code> as the model answer to input <code>ans1</code>, a question note (e.g. <code>\\({@fx@}\\)</code>) and an appropriate potential response tree.</p>"},{"location":"en/Specialist_tools/JSXGraph/Binding/","title":"Binding JSXGraph states to inputs","text":""},{"location":"en/Specialist_tools/JSXGraph/Binding/#manual_binding","title":"General considerations when building interactive graphs","text":"<p>In general you should pay attention on how your graph reacts to the student returning to the page/question later. For example, will your graph reset to display the original situation or will it at least move all movable things to the positions the student last left them? If the student can do things that are not actually considered as part of the answer, e.g. zoom out or pan the view, do you also remember those actions? If your graph is not used for inputting answers then this is not a major issue but if it is then you will need to solve this issue. Basically, storing the state of the interactive graph is a key thing that the author of that graph needs to deal with.</p> <p>The basic structure of such graph logic is as follows:</p> <ol> <li>Load existing state or if not found initialise with defaults.</li> <li>Draw the graph based on that state.</li> <li>Attach listeners to everything that can be changed in the graph and store those changes into the state in those listeners.</li> </ol> <p>The simplest solution for storing state is to add a <code>string</code> type input field to the question.</p> <ol> <li>Create and hide an input with CSS, e.g. <code>&lt;p style=\"display:none\"&gt;[[input:stateStore]] [[validation:stateStore]]&lt;/p&gt;</code> (but probably not while you develop the question!)</li> <li>Make the input a \"string\" type.</li> <li>Turn off the validation (\"Show the validation\") and verification (\"Student must verify\") of the input field.</li> <li>Use the extra option <code>hideanswer</code> to make sure the teacher's answer is not shown to students.</li> <li>That input field should not be connected to any PRTs.</li> <li>You can use the syntax hint feature to pass in a default value but only if that is not parametric (currently the syntax hint is not CASText: see the todo list).</li> </ol> <p>It is possible to store state in other input types, but this input will therefore be subject to validation.  E.g. you could use an algebraic input to store a number but you probably then need to allow floats.</p> <p>You can use that input field to store the state of the graph as a string, for example as a JSON-encoded structure. For example, assuming the name of the String input is named <code>stateStore</code>, we can store the position of a point as follows:</p> <pre><code>[[jsxgraph input-ref-stateStore=\"stateRef\"]]\n  /* Note that the input-ref-X attribute above will store the element identifier of the input X in\n     a variable named in the attribute, you can have multiple references to multiple inputs. */\n\n  /* Create a normal board. */\n  var board = JXG.JSXGraph.initBoard(divid, {axis: true, showCopyright: false});\n\n  /* State represented as a JS-object, first define default then try loading the stored values. */\n  var state = {'x':4, 'y':3};\n  var stateInput = document.getElementById(stateRef);\n  if (stateInput.value &amp;&amp; stateInput.value != '') {\n    state = JSON.parse(stateInput.value);\n  }\n\n  /* Then make the graph represent the state */\n  var p = board.create('point',[state['x'],state['y']]);\n\n  /* And finally the most important thing, update the stored state when things change. */\n  p.on('drag', function() {\n    var newState = {'x':p.X(), 'y':p.Y()};\n    /* Encode the state as JSON for storage and store it */\n    stateInput.value = JSON.stringify(newState);\n    /* Since the STACK-JS system one needs to also remember to tell others\n       about the changed value. Do this by dispatching an event. */\n    stateInput.dispatchEvent(new Event('change'));\n  });\n[[/jsxgraph]]\n</code></pre> <p>Note, in the above example in <code>[[jsxgraph input-ref-stateStore=\"stateRef\"]]</code> the <code>stateStore</code> part of this tag directly relates to, and must match, the name of the input.</p> <p>In that trivial example you only have one point that you can drag around but the position of that point will be stored and it will be where you left it when you return to the page. However, the position has been stored in a String encoded in JSON format and cannot directly be used in STACK-side logic. The JSON format is however very handy if you create objects to store dynamically and want to represent things of more complex nature, but in this example we could have just as well have had two separate Numeric inputs storing just the raw 'x' and 'y' coordinates separately as raw numbers and in that case we could have used them directly in STACK's grading logic.</p> <p>If needed, JSON is not impossible to parse in STACK, but it is not easy (as in JavaScript) because Maxima has no map data-structures and is not object oriented. In any case, the JSON string generated in the previous example would look like this:</p> <pre><code>stateStore:\"{\\\"x\\\":4,\\\"y\\\":3}\";\n</code></pre> <p>To parse and manipulate it you can use STACK's custom JSON parsing functions:</p> <pre><code>tmp:stackjson_parse(stateStore); /* This returns a STACK-map: [\"stack_map\", [\"x\", 4], [\"y\", 3]] */\nx:stackmap_get(tmp,\"x\");         /* 4 */\ny:stackmap_get(tmp,\"y\");         /* 3 */\ntmp:stackmap_set(tmp,\"z\",x*y);   /* [\"stack_map\", [\"x\", 4], [\"y\", 3], [\"z\", 12]] */\njson:stackjson_stringify(tmp);   /* \"{\\\"x\\\":4,\\\"y\\\":3,\\\"z\\\":12}\" */\n</code></pre>"},{"location":"en/Specialist_tools/JSXGraph/Binding/#convenience-tools-for-building-graphs","title":"Convenience tools for building graphs","text":"<p>The previous section covered the general case of storing the state of the graph and acting on it. Typically, you only need to handle a few points and maybe some sliders and for this task we provide ready-made functions that bind those primitive objects to STACK input fields. As these binding functions only deal with singular sliders and points they will also use simpler forms of passing around the values.</p> <p>The example in the previous section about moving the point around and storing the points position as an JSON object can be redone with the convenience functions in much simpler form. The only major differences being that the value is stored as a raw list of float values, and the input field should not be of the String type instead we can store it as Algebraic input and directly access the values, just make sure you allow float values in that input.</p> <pre><code>[[jsxgraph input-ref-stateStore=\"stateRef\"]]\n  /* Create a board like normal. */\n  var board = JXG.JSXGraph.initBoard(divid, {axis: true, showCopyright: false});\n\n  /* Create a point, its initial position will be the default position if no state is present. */\n  var p = board.create('point', [4, 3]);\n\n  /* Bind it to the input and state stored in it. */\n  stack_jxg.bind_point(stateRef, p);\n[[/jsxgraph]]\n</code></pre> <p>For sliders you use the function <code>stack_jxg.bind_slider(inputRef, slider)</code> and it stores the sliders value as a raw float. Sliders will however require that you call <code>board.update()</code> after binding to them, otherwise the graph may not display the stored state after reload.</p> <p>You should check the sample questions about JSXGraph binding for examples of these functions in action.</p> <p>Starting from version 4.3 there are three functions for dealing with pairs of points. Basically, if you want to represent vectors, lines or circles or anything that can be defined with just two points. <code>stack_jxg.bind_point_dual(inputRef, point1, point2)</code> will store the positions of the points into a single input as a list of lists, <code>stack_jxg.bind_point_relative(inputRef, point1, point2)</code> will also generate a list but in it the second point is represented relative to the first, and finally <code>stack_jxg.bind_point_direction(inputRef, point1, point2)</code> will provide the first point as coordinates and the second point as an angle and distance from the first.</p> <p>Starting from 4.4 there is only one new bind function <code>stack_jxg.bind_list_of(inputRef, list)</code> which takes a list of points and/or sliders and stores it into a single input. It only works if the size or order of the list does not change during page loads, however the list can change its shape for variants of the question. The primary use target for this are the vertices of polygons, but one can probably come up with something else as well, it does work as a quick and dirty way of storing the whole graph state if the graph can be defined just by points and sliders.</p> <p>There are also two new functions related to dealing with groups of objects and matching inputs. For situations where the answer consists of multiple elements and it is possible that not all get moved one can use <code>stack_jxg.define_group(list)</code> which takes a list of points and/or sliders and makes it so that touching any one of them will trigger them all to be considered as touched and thus generates inputs. There is also <code>stack_jxg.starts_moved(object)</code> which takes a point or a slider and marks it as touched from the start, this may be of use if the graph is an optional part and the actual grading depends of other parts or if one wants to use PRT feedback as a way for describing the status of the graph and needs the objects to be transferred onto the CAS side without interaction from the student.</p>"},{"location":"en/Specialist_tools/JSXGraph/Binding/#convenience-tools-for-generating-lists-of-values","title":"Convenience tools for generating lists of values.","text":"<p>If you want to output a list of values without Maxima's normal bracket symbols you can use</p> <pre><code>stack_disp_comma_separate([a,b,sin(pi)]);\n</code></pre> <p>This function turns a list into a string representation of its arguments, without braces. Internally, it applies <code>string</code> to the list of values (not TeX!).  However, you might still get things like <code>%pi</code> in the output.</p> <p>You can use this with mathematical input: <code>{@stack_disp_comma_separate([a,b,sin(pi)])@}</code> and you will get the result <code>a, b, sin(%pi/7)</code> (without the string quotes) because when a Maxima variable is a string we strip off the outside quotes and don't typeset this in maths mode.</p>"},{"location":"en/Specialist_tools/JSXGraph/Binding/#custom-binding","title":"Custom binding","text":"<p>In the event that you wish to bind a JSXGraph object that is not a point or a slider (or a group of these), you can build your own binding function using <code>stack_jxg.custom_bind(inputRef, serializer, deserializer, [object(s)])</code>. The <code>serializer</code> function is used to generate the value for the input. The <code>deserializer</code> is used to extract the value in the input and subsequently update the state of the JSXGraph.</p> <p>One use case of this could be tying together a STACK <code>[[input]]</code> with an Input object in JSXGraph. This is probably a rare use case, but one could imagine a scenario where it it useful to have an input box in the graph, such as labelling a probability tree diagram, or wanting a draggable input box for some reason. In any case, this is a particularly simple example of using the <code>custom_bind()</code> function, shown below.</p> <pre><code>&lt;p&gt;Enter \\(\\sin(x)\\)&lt;/p&gt;\n&lt;span hidden=\"\"&gt;[[input:ans1]]&lt;/span&gt;&lt;span&gt;[[validation:ans1]]&lt;/span&gt;&lt;br&gt;\n[[jsxgraph width=\"200px\" height=\"100px\" input-ref-ans1=\"ans1Ref\"]]\n    let board = JXG.JSXGraph.initBoard(divid, {\n      boundingbox: [-1,1,1,-1], axis: false\n    });\n    let inputBox = board.create('input',[0,0,'',''],{}); /*Create input box we want to bind to the STACK input*/\n\n    /* We want to create our own binding function using custom_bind as a base.\n       Our function, inputBinder, will take the reference to the STACK input and the object we want to bind to it as inputs.\n       The serializer function doesn't take any inputs, but will refer to the object given to inputBinder directly.\n       The deserializer function takes exactly one input: the data with which it will update the graph.\n       Lastly, we run the custom_bind function. */\n\n    let inputBinder = function(inputRef, object) {\n        let serializer = function() {return object.Value()} /*Simply returns the value in the inputBox*/\n        let deserializer = function(data) {object.set(data)} /*Given some data, put this data into the inputBox*/\n        stack_jxg.custom_bind(inputRef, serializer, deserializer, [object])\n    }\n\n    /* Now we run the function */\n    inputBinder(ans1Ref, inputBox)\n[[/jsxgraph]]\n</code></pre> <p>In most cases the <code>serializer</code> and <code>deserializer</code> functions will be a bit more complicated, and will probably need to use functions like <code>JSON.stringify</code> or <code>JSON.parse</code> as in the earlier examples on this page.</p> <p>Sometimes you may wish to bind a STACK input to something in the JSXGraph IFRAME that isn't an object, in which case the <code>stack_jxg.custom_bind</code> will not work. One example of this would be asking students to identify or shade in a certain region in a graph, such as part of a Venn diagram, identifying the region of integration for an iterated integral, or showing that (for example), two sixths is equal to one third. In this case, you will need to write the binding more explicitly, using the steps listed above as a framework. An example is given below, in which we ask the student to \"shade\" in one third of a circle divided into six equal segments.</p> <p>Let us first assume that we will hard-code this question to always ask students to shade in one third of a circle divided into sixths. This is not too difficult to generalise, and it keeps the code clean. Then let us define a model answer as the list:</p> <pre><code>ta: [1,1,0,0,0,0];\n</code></pre> <p>We interpret this as two of the six sectors in our eventual graph being shaded, and four of them being unshaded, with 1 representing on and 0 representing off. Our student input, <code>ans1</code>, will then be a normal algebraic input.</p> <p>Now we can create the question text. Firstly, we state the instructions for the student and create the board and associated objects.</p> <pre><code>&lt;p&gt;Shade some regions of the diagram below so that it represents the fraction \\(\\dfrac{1}{3}\\). Click a region to shade it, and click a second time to un-shade it if needed.&lt;/p&gt;\n[[jsxgraph width=\"500px\" height=\"500px\" input-ref-ans1=\"ans1Ref\"]]\n    var board = JXG.JSXGraph.initBoard(divid, {\n        boundingbox: [-1.2,1.2,1.2,-1.2], axis: false,\n        showNavigation: false, showCopyright: false});\n\n    var plotColours = [\"#1f77b4\", \"#ff7f0e\"];\n    var numSectors = 6;\n\n    var origin = board.create('point',[0,0],{visible:false}); /* This will be referenced multiple times as we create the sectors */\n\n    var points = [];\n    var sectors = [];\n\n    /* Create 7 points (doubling up the start and end) and then between each pair of adjacent points, define a sector. */\n\n    var sectorAttr = {strokeColor:plotColours[0],strokeOpacity:0.5,strokeWidth: 2,fillColor:plotColours[1],fillOpacity:0, highlight: false}\n    for(let ii=0;ii&lt;numSectors+1;ii++) {\n        points[ii] = board.create('point',[Math.cos(ii*2*Math.PI / numSectors),Math.sin(ii*2*Math.PI / numSectors)],{visible:false});\n        if (ii&gt;0) {\n            sectors[ii-1] = board.create('sector',[origin,points[ii-1],points[ii]],sectorAttr);\n        }\n    }\n</code></pre> <p>Now that the graph has been drawn, we need to initialise the shading based on existing student input. This means that if a student has given an answer and then refreshed the page, the graph should show the correct sectors shaded or unshaded based on that answer.</p> <pre><code>var shading = [0,0,0,0,0,0];\nvar shadingInput = document.getElementById(ans1Ref);\nif (shadingInput.value &amp;&amp; shadingInput.value != '') { /* If the student has given an input and it is not an empty string: */\n    shading = JSON.parse(shadingInput.value) /* Over-write the current shading array with the student input */\n    for (var ii=0;ii&lt;numSectors;ii++) { /* and then update the shading to match. */\n        sectors[ii].setAttribute({fillOpacity:0.3*shading[ii]})\n    }\n}\n</code></pre> <p>The graph should now have the appropriate shading applied. We have completed the first two out of three steps as outlined above. To accomplish the last step we will write three functions; one that will return the coordinates of a location that is clicked, another that will update the graph given those coordinates, and a third that will listen to a click event and then run these functions.</p> <pre><code>/* The below code is adapted from an example found at https://jsxgraph.org/wiki/index.php/Browser_event_and_coordinates */\n\nvar getMouseCoords = function(e, i) {\n    var cPos = board.getCoordsTopLeftCorner(e, i),\n        absPos = JXG.getPosition(e, i),\n        dx = absPos[0]-cPos[0],\n        dy = absPos[1]-cPos[1];\n\n    var coords = new JXG.Coords(JXG.COORDS_BY_SCREEN, [dx, dy], board);\n    return [coords.usrCoords[1], coords.usrCoords[2]]\n};\n\nvar shadeSectors = function(x,y) { /* Given a coordinate pair x,y */\n    var r = Math.sqrt(x**2 + y**2); /* convert to polar form r,angle */\n    var angle = Math.atan2(y,x);\n    if (angle&lt;0) {angle = angle + 2*Math.PI} /* Ensure argument is from 0 to 2\u03c0 */\n\n    if (r&lt;1) { /* If inside the unit circle */\n        var whichSector = Math.floor(angle*numSectors/(2*Math.PI)); /* read which sextant the coordinates are in */\n        shading[whichSector] = 1 - shading[whichSector]\n        sectors[whichSector].setAttribute({fillOpacity:0.3*shading[whichSector]})\n\n        shadingInput.value = JSON.stringify(shading); /* Update the input value */\n        shadingInput.dispatchEvent(new Event('change')); /* Tell the STACK input outside the JSXGraph to look for this updated value */\n    }\n}\n\nvar onClick = function(e) {\n    var [x, y] = getMouseCoords(e, 0);\n    shadeSectors(x,y)\n}\n\nboard.on('down',onClick);\n[[/jsxgraph]]\n</code></pre> <p>Finally, we finish the question by adding the appropriate answer box inside a hidden div (as well as setting \"Student must verify\" to No).</p> <pre><code>&lt;div hidden=\"\"&gt;[[input:ans1]] [[validation:ans1]]&lt;/div&gt;\n</code></pre> <p>The student's input, <code>ans1</code>, is now exactly a Maxima list of ones and zeros, and to mark the students answer we could check that <code>apply(\"+\",ans1)</code> is exactly equal to 2.</p>"},{"location":"en/Specialist_tools/JSXGraph/Example_plots/","title":"Example JSXGraph plots.","text":""},{"location":"en/Specialist_tools/JSXGraph/Example_plots/#discrete-mathematics-and-graph-theory","title":"Discrete mathematics and graph theory.","text":"<p>A graph can be displayed with JSXGraph, see discrete mathematics for examples.</p> <p>In the question variables define your points and edges.</p> <pre><code>/* A list of points, which are lists of coordinates.*/\npts:[[1.0,0.0],[0.623,0.782],[-0.223,0.975],[-0.901,0.434],[-0.901,-0.434],[-0.223,-0.975],[0.623,-0.782]];\n\n/* A list of edge connections. */\nedges:[[0,1],[0,2],[0,3],[4,5],[4,6],[4,0]];\n</code></pre> <p>Then, you can use this JSXGraph block to create your vertices and edges.  Note, this code uses <code>board.create('arrow', [...])</code>, but you could as well use <code>segment</code> not <code>arrow</code> for an un-directed graph.</p> <pre><code>[[jsxgraph]]\n    /* boundingbox:[left, top, right, bottom] */\n    var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-1.2, 1.2, 1.2, -1.2], axis: false, showCopyright: false});\n\n    /* Notice the syntax STACK uses for putting the _value_ of a variable into the text before display. */\n    var pts = {#pts#};\n    var boardpts = new Array();\n    var arrayLength = pts.length;\n    for (var i = 0; i &lt; arrayLength; i++) {\n        boardpts.push(board.create('point', pts[i]));\n    }\n\n    var edges = {#edges#};\n    var boardedges = new Array();\n    var arrayLength = edges.length;\n    for (var i = 0; i &lt; arrayLength; i++) {\n        boardedges.push(board.create('arrow', [boardpts[edges[i][0]], boardpts[edges[i][1]]]));\n    }\n[[/jsxgraph]]\n</code></pre>"},{"location":"en/Specialist_tools/JSXGraph/Example_plots/#a-catalogue-of-plots","title":"A catalogue of plots","text":"<p>The following CASText gives representative examples of the height, width and aspect ratio options supported by STACK's jsxgraph block  Cut and paste it into the CASchat script.</p> <pre><code>Default options\n[[jsxgraph]]\n  /* boundingbox:[left, top, right, bottom] */\n  var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-3, 1, 3, -1], axis: true, showCopyright: false});\n  var f = board.jc.snippet('sin(x^2)', true, 'x', true);\n  board.create('functiongraph', [f,-3,3]);\n[[/jsxgraph]]\n\nAbsolute units\n[[jsxgraph height='100px' width='200px']]\n  /* boundingbox:[left, top, right, bottom] */\n  var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-3, 1, 3, -1], axis: true, showCopyright: false});\n  var f = board.jc.snippet('sin(x^2)', true, 'x', true);\n  board.create('functiongraph', [f,-3,3]);\n[[/jsxgraph]]\n\nRelative units: 50% width, default height\n[[jsxgraph width='50%']]\n  /* boundingbox:[left, top, right, bottom] */\n  var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-3, 1, 3, -1], axis: true, showCopyright: false});\n  var f = board.jc.snippet('sin(x^2)', true, 'x', true);\n  board.create('functiongraph', [f,-3,3]);\n[[/jsxgraph]]\n\nRelative units: 50% width, 50% height (use vh for relative height: todo why?!)\n[[jsxgraph width='50%' height='50vh']]\n  /* boundingbox:[left, top, right, bottom] */\n  var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-3, 1, 3, -1], axis: true, showCopyright: false});\n  var f = board.jc.snippet('sin(x^2)', true, 'x', true);\n  board.create('functiongraph', [f,-3,3]);\n[[/jsxgraph]]\n\nAbsolute and relative: 300px width, 50% height\n[[jsxgraph width='300px' height='50vh']]\n  /* boundingbox:[left, top, right, bottom] */\n  var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-3, 1, 3, -1], axis: true, showCopyright: false});\n  var f = board.jc.snippet('sin(x^2)', true, 'x', true);\n  board.create('functiongraph', [f,-3,3]);\n[[/jsxgraph]]\n\nRelative and absolute: 50% width, 300px height\n[[jsxgraph width='50%' height='300px']]\n  /* boundingbox:[left, top, right, bottom] */\n  var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-3, 1, 3, -1], axis: true, showCopyright: false});\n  var f = board.jc.snippet('sin(x^2)', true, 'x', true);\n  board.create('functiongraph', [f,-3,3]);\n[[/jsxgraph]]\n\nAspect ratio, and absolute width\n[[jsxgraph width='300px' aspect-ratio='1']]\n  /* boundingbox:[left, top, right, bottom] */\n  var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-3, 1, 3, -1], axis: true, showCopyright: false});\n  var f = board.jc.snippet('sin(x^2)', true, 'x', true);\n  board.create('functiongraph', [f,-3,3]);\n[[/jsxgraph]]\n\nAspect ratio of 3, and absolute width\n[[jsxgraph width='300px' aspect-ratio='3']]\n  /* boundingbox:[left, top, right, bottom] */\n  var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-3, 1, 3, -1], axis: true, showCopyright: false});\n  var f = board.jc.snippet('sin(x^2)', true, 'x', true);\n  board.create('functiongraph', [f,-3,3]);\n[[/jsxgraph]]\n\nAspect ratio of 3, and relative width\n[[jsxgraph width='50%' aspect-ratio='3']]\n  /* boundingbox:[left, top, right, bottom] */\n  var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-3, 1, 3, -1], axis: true, showCopyright: false});\n  var f = board.jc.snippet('sin(x^2)', true, 'x', true);\n  board.create('functiongraph', [f,-3,3]);\n[[/jsxgraph]]\n\nAspect ratio and absolute height\n[[jsxgraph height='500px' aspect-ratio='1']]\n  /* boundingbox:[left, top, right, bottom] */\n  var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-3, 1, 3, -1], axis: true, showCopyright: false});\n  var f = board.jc.snippet('sin(x^2)', true, 'x', true);\n  board.create('functiongraph', [f,-3,3]);\n[[/jsxgraph]]\n\nAspect ratio of 3 and absolute height\n[[jsxgraph height='500px' aspect-ratio='3']]\n  /* boundingbox:[left, top, right, bottom] */\n  var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-3, 1, 3, -1], axis: true, showCopyright: false});\n  var f = board.jc.snippet('sin(x^2)', true, 'x', true);\n  board.create('functiongraph', [f,-3,3]);\n[[/jsxgraph]]\n\nAspect ratio of 3 and relative height\n[[jsxgraph height='50vh' aspect-ratio='3']]\n  /* boundingbox:[left, top, right, bottom] */\n  var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-3, 1, 3, -1], axis: true, showCopyright: false});\n  var f = board.jc.snippet('sin(x^2)', true, 'x', true);\n  board.create('functiongraph', [f,-3,3]);\n[[/jsxgraph]]\n</code></pre>"},{"location":"en/Specialist_tools/JSXGraph/Question_block/","title":"JSXGraph question block","text":"<p>JSXGraph blocks are included with the <code>[[jsxgraph ...]]</code> block.  This page provides reference documentation of all features of that block.</p>"},{"location":"en/Specialist_tools/JSXGraph/Question_block/#block-options","title":"Block options","text":"<p>You can control the size of the JSXGraph board with the <code>width</code> and <code>height</code> options.  E.g.</p> <pre><code>[[jsxgraph width=\"200px\" height=\"200px\"]]\n</code></pre> <p>The option <code>aspect-ratio</code> combined with the ability to use relative dimensions allows for graphs to resize and maintain its shape if the viewport changes. When using <code>aspect-ratio</code> it is necessary to define one and only one of the above lengths.</p> <pre><code>[[jsxgraph width=\"80%\" aspect-ratio=\"3/2\"]]\n</code></pre> <p>If no size is defined the default is to have <code>width=\"500px\" height=\"400px\"</code> and these are also the dimensions used if values are missing and no <code>aspect-ratio</code> has been defined.</p> <p>You can control the CSS style with the <code>style</code> attribute.  This loads CSS files from the <code>corsscripts/jsxgraphstyles</code> directory.  For example, if you would like to remove the default visible boundary box around the graph then choose <code>style='empty'</code>.  This loads <code>corsscripts/jsxgraphstyles/empty.css</code> in place of the default <code>corsscripts/jsxgraph.min.css</code>.  Currently supported styles are</p> <ol> <li><code>empty</code>:  This is identical to the default style, except the visible boundary box is removed.</li> </ol>"},{"location":"en/Specialist_tools/JSXGraph/Question_block/#automatic-identifier-for-the-div-element","title":"Automatic identifier for the div-element","text":"<p>As initialisation of the JSXGraph board requires you to give it a reference to the div-element that will contain the graph you will need to know what that id is. With the JSXGraph-block that identifier is present in a variable named <code>divid</code>. Since, 4.3.3 we also provide that same identifier in a variable named <code>BOARDID</code> to match the behaviour of the JSXGraph Moodle filter. We generate that identifier automatically to allow one to have multiple plots even multiple copies of the same question on the same page without anyone having to worry about accidental identifier clashing.</p>"},{"location":"en/Specialist_tools/JSXGraph/Question_block/#interactive-elements","title":"Interactive elements","text":"<p>In this example define the question variables as</p> <pre><code>fx:int(expand((x-1)*(x+1)*(x-2)),x);\n</code></pre> <p>This question contains an interactive sliding element.</p> <pre><code>&lt;p&gt;A graph, together with the tangent line and its slope, are shown below.  Find an algebraic expression for the graph shown below.&lt;/p&gt;\n[[jsxgraph]]\n  /* boundingbox:[left, top, right, bottom] */\n  var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-5, 10, 5, -10], axis: true, showCopyright: false});\n  var f = board.jc.snippet('{#fx#}', true, 'x', true);\n  var curve = board.create('functiongraph', [f,-10,10], {strokeWidth:2});\n  var dcurve = board.create('functiongraph', [JXG.Math.Numerics.D(f),-10,10], {strokeColor:'#ff0000', strokeWidth:1, dash:2});\n  var p = board.create('glider',[1,0,curve], {name:'Drag me'});\n  board.create('tangent',[p], {name:'Drag me'});\n  var q = board.create('point', [function(){return p.X();}, function(){return JXG.Math.Numerics.D(f)(p.X());} ], {withLabel:false});\n  board.unsuspendUpdate();\n[[/jsxgraph]]\n&lt;p&gt;\\(f(x)=\\) [[input:ans1]] [[validation:ans1]]&lt;/p&gt;\n</code></pre> <p>In this example the student can interact with a dynamic diagram to help them understand what is going on.</p>"},{"location":"en/Specialist_tools/JSXGraph/Question_block/#an-example-with-a-slider","title":"An example with a slider","text":"<p>In this example we provide a simple slider.  Notice in this example we use the JavaScript notation <code>a**x</code> for  and not Maxima's <code>a^x</code>.</p> <pre><code>[[jsxgraph]]\n  /* boundingbox:[left, top, right, bottom] */\n  var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-5, 10, 5, -10], axis: true, showCopyright: false});\n  var a = board.create('slider',[[-3,6],[2,6],[0,2,6]],{name:'a'});\n  var curve = board.create('functiongraph', [function(x) {return a.Value()**x}], {strokeWidth:2});\n  board.unsuspendUpdate();\n[[/jsxgraph]]\n</code></pre>"},{"location":"en/Specialist_tools/JSXGraph/Update_with_PRTs/","title":"Update with PRTs","text":""},{"location":"en/Specialist_tools/JSXGraph/Update_with_PRTs/#reacting-to-feedback-from-the-stack-question-in-jsxgraph","title":"Reacting to feedback from the STACK question in JSXGraph","text":"<p>In some situations, it can be quite useful to change the graph state based on the feedback that students get displayed after submitting the task.</p> <p>With STACK-JS, JSXGraph is contained inside an IFRAME and thus can not directly access DOM elements from the STACK question. So if you want to check whether some feedback is present in the STACK question, you have to use the function  <code>stack_js.get_content(id)</code> from the stack_js namespace. The functions from this namespace can be called in the JavaScript code inside the JSXGraph block just like the binding functions from the <code>stack_jxg</code> namespace.</p> <p>The following steps should be taken to react to feedback inside of the JSXGraph applet:</p> <ol> <li>Include an empty span with a unique identifier inside the feedback of a PRT node, so that JSXGraph can look for that element</li> <li>Call the function <code>stack_js.get_content(id)</code> with the id of the span you placed inside your feedback in the JSXGraph code. As this function is async and returns a promise for the content, make sure to write your code for changing the graph state inside a chained <code>.then()</code>.</li> </ol> <p>A common use case for this could be that you want to make a point fixed so that the user can not drag it anymore after he submitted the question and received a certain feedback. A minimal example for this would then look like this:</p> <p>In one of your PRTs, you place an empty span with an id like for example <code>feedback-1</code></p> <pre><code>[[jsxgraph]]\n\n// A sample board\nvar board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-5, 5, 5, -5], axis: true, showCopyright: false});\n\n// Create a point for demo purpose\nvar a = board.create('point',[1,2],{name:'a'});\n\n// Here we check if there is a certain feedback span present in the STACK question  \nstack_js.get_content('feedback-1').then((content) =&gt; {\n\nif (content !== null) {\n// As the content is not null this means the span is present so feedback is displayed and we can react to it here\na.setAttribute({ fixed: true, highlight: false});\n}\n\n});\n\n[[/jsxgraph]]\n</code></pre> <p>The function <code>stack_js.get_content(id)</code> looks for an element in the DOM of the parent document and returns a promise that will resolve to the content of that element. If the content is not <code>null</code>, that means it found the element somewhere in the question. As this operation is async, you will always have to use a callback using <code>.then()</code>.</p> <p>If you want to know more about STACK-JS and the functions provided for interacting with the STACK question content (change inputs, switch content, toggle the visibility of content), then you can have a look at STACK-JS.</p>"},{"location":"en/Specialist_tools/STACK-JS/","title":"STACK-JS","text":"<p>This page documents the STACK-JS system, used to connect question inputs and outputted content to custom browser side JavaScript logic, typically hosted inside <code>[[jsxgraph]]</code> or <code>[[javascript]]</code>-blocks. Basically, if you need to add dynamic behaviour and cannot find a ready made CASText block for that, you might be able to do it with JavaScript.</p> <p>However, if you use raw JavaScript you may tie yourself down to the behaviour of your current VLE (e.g. Moodle) version and the scripting may break during the next update of that VLE, or during some security crackdown. Currently, STACK allows both raw JavaScript (i.e. the use of <code>&lt;script&gt;</code>-tags) and STACK-JS managed JavaScript executing inside limited sandboxes, the latter provides a limited interface that aims to map logical restricted actions to corresponding features on whatever VLE is currently in use. We strongly recommend the use of the latter option, and may at any point in the future actively limit the ability to use the former.</p> <p>For technical reasoning on why we do not recommend the use of raw JavaScript to our short description of the security issues, related to unknown JavaScript being executed outside secure contexts.</p>"},{"location":"en/Specialist_tools/STACK-JS/#basic-interface-features","title":"Basic interface features","text":"<p>The STACK-JS interface is asynchronic, it communicates whatever you request from it to the VLE side and waits for a response before it can provide any answers. Thus any actions that expect a response will typically provide a Promise as the result. To get the result you will need to provide logic that executes once said promise resolves. For an example, the following bit of logic asks for the contents of a named element on the VLE side:</p> <pre><code>[[javascript]]\n// Ask STACK-JS to fetch the content of a named element.\nlet promise = stack_js.get_content('[[quid id=\"someelement\"/]]');\n\n// When those contents are ready do something.\npromise.then((content) =&gt; {\n  if (content === null) {\n    // No such element was found.\n  } else {\n    stack_js.toggle_visibility('[[quid id=\"otherelement\"/]]', content.length % 2 == 0);\n  }\n});\n[[/javascript]]\n</code></pre> <p>Here the <code>stack_js.get_content()</code>-function promises to return the <code>innerHTML</code> of that element or <code>null</code> if such element can not be found, but it does not give that value now as some parts of logic might still be starting up. On the other hand <code>stack_js.toggle_visibility()</code> returns no promises as it has no sensible thing to return, however even it is asynchronous, the visibility will not be toggled before the connection from this sandbox to the VLE becomes ready.</p>"},{"location":"en/Specialist_tools/STACK-JS/#basic-restrictions","title":"Basic restrictions","text":"<p>The STACK-JS system limits what you can you access on the VLE side as well as what you can send there, the basic rules are as follows:</p> <ol> <li>You can only access things inside questions, not necessarily limited to the question that contains your logic, but you can limit your request to it. Basically, you cannot touch any of the VLE controls or contents that might be present on the page but are not part of the question display area.</li> <li>When sending content to the VLE side, it either goes into an input without filtering or it is being used to replace the <code>innerHTML</code> of a named element in which case that content will be filtered for scripts, event-handlers and remote references. Basically, you cannot move logic from the sandbox to the VLE side.</li> </ol> <p>Do not ask for exceptions to those rules, otherwise the we are happy to make sensible extensions to the interface to selectively access and interact with the questions from sandboxed logic.</p>"},{"location":"en/Specialist_tools/STACK-JS/#function-reference","title":"Function reference","text":""},{"location":"en/Specialist_tools/STACK-JS/#functions-for-inputs","title":"Functions for inputs","text":"<p>With the exception of <code>stack_js.register_external_button_listener()</code> these all target inputs by their name in the STACK question, the exception case targets by element id. Most of these functions also work with non STACK inputs, even manually created ones as long as they have an id-attribute ending with underscore and the name to be searched (<code>..._name</code>). Construction of so called fake-inputs with such names is not uncommon.</p>"},{"location":"en/Specialist_tools/STACK-JS/#stack_jsrequest_access_to_inputname-inputevents-limittoquestion","title":"<code>stack_js.request_access_to_input(name, inputevents, limittoquestion)</code>","text":"<p>This is the primary function to use when one wants to keep track of the value of a given input on the VLE side. This function constructs an input element on the sandbox side and ensures that its value mirrors the value of the VLE side, with certain constraints:</p> <ol> <li>The value updates from the VLE side on <code>change</code>-events happening on the VLE side or if the <code>inputevents</code> argument is <code>true</code> also on <code>input</code>-events. Note that every time the value updates the sandbox side mirror input element will dispatch a <code>change</code>-event that one can track for.</li> <li>The value of the sandbox side element is sent to the VLE side only when a <code>change</code>-event is triggered on the sandbox side, so writing to the input is not enough one needs to dispatch an event. <code>input.dispatchEvent(new Event('change'))</code> is enough.</li> </ol> <p>The function returns a promise that will resolve to the id of the sandbox side input element once the value has been synced with the VLE side. If one uses the <code>[[jsxgraph]]</code> or <code>[[javascript]]</code> block style attributes to provide references to inputs, the whole code of those blocks only starts executing once the promises for those inputs have resolved.</p> <p>The second and third arguments of this function are optional. By default the second one is false and updates are only received on <code>change</code>-events, if one wants to react immediately as the student is typing set this to true. By default the third one is <code>false</code>, i.e., the search for an input with the given <code>name</code> is not limited to the question containing this sandbox, if this question does not have an input of that name then the first matching input on the page will be returned, thus allowing interaction between questions, set this to <code>true</code> if you want to ensure that only the containing question can be the source of the input. Should no input match the name an error will become very visible (assuming execution in non hidden sandbox).</p> <p>Note that matrix inputs are not supported and behaviour for more complicated inputs may be interesting. For example, MCQ inputs are mapped to a basic text-input and checkboxes may prove to be difficult to deal with.</p>"},{"location":"en/Specialist_tools/STACK-JS/#stack_jsregister_external_button_listenerid-callback","title":"<code>stack_js.register_external_button_listener(id, callback)</code>","text":"<p>Should one construct a button on the question side and want to react to it being pressed this function allows attaching a callback-function to that button by the id of that button. Note that pressing that button after this type of a  callback has been connected to it will not trigger form submissions as those will be disabled. Likewise, the return value of the callback does not affect the execution of any other callbacks there might be nor the form.</p> <p>The callback function will receive one argument and that is the id of the button.</p>"},{"location":"en/Specialist_tools/STACK-JS/#stack_jsclear_inputname","title":"<code>stack_js.clear_input(name)</code>","text":"<p>This function will simply clear whatever value or selection a named input has. You do not need to use <code>stack_js.request_access_to_input()</code> before calling this.</p> <p>Note that for now does not work with matrix-inputs.</p>"},{"location":"en/Specialist_tools/STACK-JS/#stack_jsget_input_metadataname","title":"<code>stack_js.get_input_metadata(name)</code>","text":"<p>Etracts metadata about a given input that has previously been connected to the sandbox, either by <code>stack_js.request_access_to_input()</code> or by certain convenience attributes. This metadata describes the type of an input this is on the VLE side as well as details related to syntax. In particular, this can be used to identify which decimal separator is in use.</p>"},{"location":"en/Specialist_tools/STACK-JS/#stack_jsregister_validation_state_listenername-callback-limittoquestion","title":"<code>stack_js.register_validation_state_listener(name, callback, limittoquestion)</code>","text":"<p>Registers a callback function to an input that is assumed to have AJAX/instant validation connected to it. When the state of that validation changes, i.e., when the student starts writing or the validation result comes back the callback function will be called.</p> <p>The callback-function will receive three arguments:</p> <ol> <li>The first will tell if validation is currently in progress (<code>false</code>) or if it has completed (<code>true</code>).</li> <li>The second will tell the validation result, if the validation has not yet been completed will give <code>null</code> otherwise a boolean.</li> <li>The third will be the name of the input.</li> </ol> <p>Do note that the third argument is the same as in <code>stack_js.request_access_to_input()</code> and the third argument of the callback is just the name used in the registration, thus you cannot know whether the input is in this question based on that name.</p> <p>This function errors out if no input matching the search conditions is found, it does not know whether that input actually has any validation connected to it and will not error if no events can ever be generated.</p> <p>Finally, remember that this will only trigger the callback on state change. If you use this to decide when to read something from the validation message you should probably also check if there is something to read on page load.</p> <p>There is an example of this in the STACK library and a description of said example here.</p>"},{"location":"en/Specialist_tools/STACK-JS/#functions-for-content","title":"Functions for content","text":"<p>Content focused functions always target elements by id, in general they do not care what sort of elements they are as long as the access restrictions are respected. When defining ids for elements it is highly recommended to use the <code>[[quid]]</code>-block to generate identifiers that are unique.</p>"},{"location":"en/Specialist_tools/STACK-JS/#stack_jstoggle_visibilityelementid-show","title":"<code>stack_js.toggle_visibility(elementid, show)</code>","text":"<p>Changes the styling of the target element, if <code>show</code> is <code>true</code> will set <code>display:block</code> for <code>false</code> <code>display:none</code>. For this reason this capability is primarily meant for block elements. Should no element of matching id be found an error will be made visible (assuming execution in non hidden sandbox).</p>"},{"location":"en/Specialist_tools/STACK-JS/#stack_jsswitch_contentelementid-newcontent","title":"<code>stack_js.switch_content(elementid, newcontent)</code>","text":"<p>Replaces the <code>innerHTML</code> of the target element with the given string of content. The content will be filtered for scripts and other things previously dicussed. Should no element of matching id be found an error will be made visible (assuming execution in non hidden sandbox).</p>"},{"location":"en/Specialist_tools/STACK-JS/#stack_jsget_contentelementid","title":"<code>stack_js.get_content(elementid)</code>","text":"<p>Returns a promise that resolves to the <code>innerHTML</code> of the target element, or to <code>null</code> if no such element can be found. This function is particularly handy when using the same large dataset in many places or when communicating using notes present in PRT-feedback or input-validation messages.</p>"},{"location":"en/Specialist_tools/STACK-JS/#functions-for-the-sandbox-iframe","title":"Functions for the sandbox iframe","text":""},{"location":"en/Specialist_tools/STACK-JS/#stack_jsresize_containing_framewidth-height","title":"<code>stack_js.resize_containing_frame(width, height)</code>","text":"<p>Allows adjusting the external dimensions of a visible sandbox iframe after its initialisation. Suitable for plots that might automatically adapt their own size to the content. Give the dimensions as strings with units.</p>"},{"location":"en/Specialist_tools/STACK-JS/#stack_jsdisplay_errorerrmesg","title":"<code>stack_js.display_error(errmesg)</code>","text":"<p>Will render a visible error in sandboxes that are visible and also outputs the error to the console. This may be useful when doing debugging.</p>"},{"location":"en/Specialist_tools/STACK-JS/#functions-for-a-possible-submit-button","title":"Functions for a possible submit button","text":"<p>These are fairly specific functions meant for those that want to affect the submit button. For example, disable it before some conditions match. Note that the submit button is only present when using suitable question behaviours.</p> <p>Note that there is no function to trigger that button.</p>"},{"location":"en/Specialist_tools/STACK-JS/#stack_jshas_submit_button","title":"<code>stack_js.has_submit_button()</code>","text":"<p>Will return a promise that will resolve to a boolean signaling whether we even have a submit button.</p>"},{"location":"en/Specialist_tools/STACK-JS/#stack_jsenable_submit_buttonenable","title":"<code>stack_js.enable_submit_button(enable)</code>","text":"<p>Allows disabling the submit button, do remember to re-enable it so that the student can use it.</p>"},{"location":"en/Specialist_tools/STACK-JS/#stack_jsrelabel_submit_buttonlabel","title":"<code>stack_js.relabel_submit_button(label)</code>","text":"<p>Allows changing the text of the submit button.</p>"},{"location":"en/Specialist_tools/STACK-JS/Validation_state_listener/","title":"Validation state listeners and extra validation messages","text":"<p>This page documents the STACK library example Doc-Examples &gt; Specialist-Tools &gt; STACK-JS &gt; Validation state listener. Said example demonstrates a combination of advanced features used in a way that is not very efficient. It is an intentionally built cautionary example that mostly works.</p>"},{"location":"en/Specialist_tools/STACK-JS/Validation_state_listener/#features-of-the-example","title":"Features of the example","text":"<p>The example question uses a JSXGraph to plot a list of (x,y) coordinates as a curve, i.e, it plots a function. However, the thign that it does differently is that it generates those coordinates inside custom validation feedback so that the plotting can happen in response to instant validation. A validation state listener is used to detect when new feedback arrives and then trigger an update of the graph.</p>"},{"location":"en/Specialist_tools/STACK-JS/Validation_state_listener/#bespoke-validation","title":"Bespoke validation","text":"<p>Inputs can have custom validation tests and messages. These so called bespoke validators act on the received input and can generate output visible to the student. In this example the question contains both a validator and a feedback generator, the former tries to detect if the input is a function of x and nothing more so that plotting is even possible, the latter then evaluates the input in 200 points within a predetermined range and outputs a hidden div containing those points encoded as JSON.</p> <p>Both the validator and the feedback generator are defined in question variables and are attached to the input though the inputs extra options. Note, that the generated feedback uses a named <code>&lt;div&gt;</code> and that name has been made question usage level unique using the <code>[[quid]]</code>-block, which is the recommend thing to do when referencing named elements in logic.</p> <p>The primary problem of this question is related to the feedback generator, 200 points takes room in the response message and may slow down the response too much to be considered instant. Furthermore, no validator of sensible execution time exists to check if said function can even be evaluated in those points.</p>"},{"location":"en/Specialist_tools/STACK-JS/Validation_state_listener/#stack-js-in-jsxgraph","title":"STACK-JS in JSXGraph","text":"<p>In this question we use a JSXGraph to do the plotting and in this case we do not connect that JSXGraph to the input, thus we do not use any of the input references or binding-functions one migth normally use. Instead, we use a validation state listener (<code>stack_js.register_validation_state_listener</code>) and react to various states of the validation differently:</p> <ol> <li>When the validation starts we mimic normal validation displays by greying out the plotted curve if present.</li> <li>When the validation completes and states that the input is invalid, or validation fails, we throw the whole curve out.</li> <li>When the validation completes successfully and the input is valid, we do the actual plotting.</li> </ol> <p>Durign the plotting we ask <code>stack_js.get_content</code> to fetch the contents of the named <code>&lt;div&gt;</code> present in the validation output. The content is the parsed as JSON and used to update the curve should it exists or to create a new curve. Any possible greyout is also reset. As the bounding-box was also evaluated on the server side (would be sensible to evaluate on the JSXGraph side) we set that as well.</p>"},{"location":"en/Specialist_tools/STACK-JS/Validation_state_listener/#general-notes","title":"General notes","text":"<p>The methods used here are all valid to use but remember not to overload the validation phase with extraneous tasks, every extra thing there will make it less instant. </p> <p>Note that traditionally, this very same thing has been done through PRT-feedback with either plots in that feedback or with named divs in it, which have been loaded into question-text level plots on page load and no listeners have been needed as page load only happens once and PRT-feedback only updates during page load.</p>"},{"location":"en/Students/","title":"Information for students","text":"<p>STACK is software for setting and automatically marking mathematical questions as part of a Moodle quiz.</p> <p>You are normally expected to type in your answer using a simple linear syntax, details of which are given on the Answer input page. Then you submit your answer and it is assessed.</p> <ul> <li>STACK establishes that your answer is valid.</li> <li>Next it decides if you are correct, and assigns feedback.</li> <li>Multiple attempts at a question are usually encouraged.</li> <li>You will often be given randomly generated questions, so you may be able to practice similar questions.</li> </ul> <p>You can also read about accessibility features and how to use the equivalence reasoning input.</p> <p>There is also page for frequently asked questions, FAQ.</p>"},{"location":"en/Students/Accessibility/","title":"Accessibility","text":""},{"location":"en/Students/Accessibility/#how-do-i-make-the-fonts-bigger","title":"How do I make the fonts bigger?","text":"<p>Warning: do not change the size of the font while taking a quiz.</p> <p>Navigate away from the quiz page first.  Sometimes the browser will \"reload\" the page when you change the font size, and this may cause your work to be submitted or lost!</p> <p>The fonts which STACK uses should be able to scale.  Use the normal options on the browser to change the sizes of the fonts. This changes all the fonts on the page, including the mathematics.</p>"},{"location":"en/Students/Accessibility/#other-accessibility-features","title":"Other accessibility features","text":"<p>As part of Moodle, we are able to take advantage of the work done by that community, detailed in the Moodle policies.</p> <p>The preferred route to displaying mathematics in STACK is to use MathJax.  Details of what accessibility features this support are given on the MathJax website.</p> <p>STACK itself uses very simple CSS and HTML form fields, which present very low barriers to accessibility software.</p>"},{"location":"en/Students/Answer_assessment/","title":"Answer assessment","text":""},{"location":"en/Students/Answer_assessment/#how-are-my-answers-assessed","title":"How are my answers assessed?","text":"<p>A STACK question may have one or more parts. Each part may have one or more inputs, such as typing in a mathematical expression as your answer. An individual mathematical expression you type might be used in more than one part. This sounds complicated, but since there are many possibilities it is difficult to make general statements. The question should be clear.  If not, please ask your teacher.</p> <p>If you need to answer a part but have not then you will be told to do so. You should normally answer all the parts!</p> <p>Your answers are assessed in a two-stage process.</p> <ol> <li>Your answer must be valid.</li> <li>Once all answers relevant to a part are valid the mathematical properties will be established.    What properties are required depends on the question being asked!</li> </ol> <p>Sometimes these processes are done in one step, sometimes you will need to submit a page twice. Therefore you should answer parts of a question and press <code>check</code> to validate your answer. If all parts are valid, then you should press <code>check</code> again to ask for your answer to be assessed.</p> <p>You may change your answer. Just press <code>check</code> to validate and then <code>check</code> again to assess. The system keeps track of any changes you make.</p> <p>You will never lose marks for making a syntax error, e.g. missing a closing bracket.   However, you may type in a valid expression which is not what you meant and which is wrong.  You need to learn how to express yourself using an unambiguous syntax.  This is simple and comes to most students easily with practice.   If you make a mathematical mistake you should try to do the question again!</p> <p>If you have asked for a worked solution then you may not change any of your answers.</p> <p>Mathematical expressions are normally entered using a typed linear syntax. For more details, see input.</p>"},{"location":"en/Students/Answer_assessment/#repeated-attempts","title":"Repeated attempts","text":"<p>STACK encourages repeated attempts if you do not get the correct answer first time. Normally, a small percentage (e.g. 10%) of the marks available for the question are deducted for each valid but incorrect attempt. However, your final mark will be the maximum mark you achieve over all attempts. You are never worse off trying a partially correct question again.</p>"},{"location":"en/Students/Answer_assessment/#why-is-my-answer-invalid","title":"Why is my answer invalid?","text":"<p>Only when all the interaction elements for a question part are valid do we consider assessing your answer to the question. The validation process is designed to help you express your mathematics in the correct form and in an unambiguous way. On paper we might \"know what you meant\" but with the computer you have to \"say what you mean\". You do not lose marks if one of your interaction elements is invalid so do not be afraid of typing in your answer. Feedback is always provided.</p> <p>There are a number of reasons why your answer could be considered to be invalid.</p> <ul> <li>You may have a syntax error in your answer, such as mismatched brackets.</li> <li>Variables in your answers should be single letters only.</li> <li>The range of Maxima functions you are permitted to type in is limited to mathematical ones, not programming, plotting, and so on.</li> <li> <p>Sometimes the teacher may insist your answer is of the correct type. There are lots of types of mathematical objects, such as</p> </li> <li> <p>equations: <code>3*x=x^2-1</code>. These need an equals sign!</p> </li> <li>inequalities: <code>x&lt;=1</code>.</li> <li>sets: <code>{1,2,3}</code>. Sets must be in curly brackets.</li> <li>lists: <code>[1,1,2,3]</code>. List must be in square brackets.</li> <li>matrices.  <code>matrix([1,2],[3,3])</code>.</li> </ul> <p>Think about the form your answer should have before you type it in.</p> <ul> <li>Sometimes the teacher may not let you type in certain strings for educational reasons.</li> <li>Sometimes the teacher may not permit you to use floating point numbers, e.g. .   In this case you should give an exact answer as, e.g. a fraction: <code>1/2</code> or a surd: <code>sqrt(2)</code>.</li> <li>Some expressions make no mathematical sense at all, e.g. one divided by zero. These are also invalid.</li> </ul>"},{"location":"en/Students/Answer_assessment/#what-are-mathematical-properties","title":"What are mathematical properties?","text":"<p>When your answers are all valid you submit them again. This time they are assessed. The outcomes are a mark, and sometimes some written feedback. If you did not obtain full marks then you should try the question again.</p> <p>Assessing your answer is not often a simple case of correct or incorrect. Often we might want your answer to satisfy a number of different mathematical properties. For example:</p> <ul> <li>If your expression algebraically equivalent to the correct expression?</li> <li>Is your expression fully simplified (e.g. have you gathered all like terms or factored your expression)?</li> <li>does your expression satisfy the equation?</li> <li>Is every element of your set a solution? Does your set of solutions contain them all?</li> </ul> <p>Answering the question is all about thinking about what properties your answer should have! If you are unsure then you need to ask the teacher.</p>"},{"location":"en/Students/Answer_input/","title":"Answer input","text":"<p>In STACK you often need to enter an answer which is an algebraic expression. You should type in your answers using the same syntax as that used in the symbolic mathematics package Maxima.</p> <p>The syntax is broadly similar to the syntax used for mathematical formulae in graphical calculators; general programming languages such as Java, C and Basic; and in spreadsheet programs. You will find it useful to master it.</p> <p>For example, to enter  you need to type in</p> <pre><code>e^(-t)*sin(3*t)\n</code></pre> <p>STACK tries quite hard to give helpful information about any syntax errors. It might also forgive some errors you make.</p>"},{"location":"en/Students/Answer_input/#basic-notation","title":"Basic Notation","text":""},{"location":"en/Students/Answer_input/#numbers","title":"Numbers","text":"<p>You should type in numbers without spaces, and use fractions rather than decimals where possible. For example, 1/4 should be entered as <code>1/4</code>, not as <code>0.25</code>. Also,</p> <ul> <li> \\pi is entered as either <code>pi</code> or <code>%pi</code>,</li> <li> e, the base of the natural logarithms, is entered as either <code>e</code> or <code>%e</code>,</li> <li> i is entered as either <code>i</code> or <code>%i</code>.</li> <li> i is also sometimes entered as <code>j</code> if you are an engineer. If in doubt ask your teacher.</li> <li>You could also use <code>sqrt(-1)</code>, or <code>(-1)^(1/2)</code>, being careful with the brackets.</li> <li>STACK modifies Maxima's normal input rules so that you don't get caught out with a variable <code>i</code> when you meant <code>%i</code>.</li> <li>You can also use scientific notation for large numbers, e.g. 1000 can be entered as <code>1E+3</code>.   Note, however, that in many situations floating point numbers are forbidden.</li> </ul>"},{"location":"en/Students/Answer_input/#multiplication","title":"Multiplication","text":"<p>Use a star for multiplication. Forgetting this is by far the most common source of syntax errors. For example,</p> <ul> <li> 3x should be entered as <code>3*x</code>.</li> <li> x(ax+1)(x-1) should be entered as <code>x*(a*x+1)*(x-1)</code>.</li> </ul> <p>STACK does sometimes try to insert stars for you where there is no ambiguity, <code>2x</code> or <code>(x+1)(x-1)</code>. This guessing cannot be perfect since traditional mathematical notation is sometimes ambiguous! Compare f(x+1) and x(t+1).</p>"},{"location":"en/Students/Answer_input/#powers","title":"Powers","text":"<p>Use a caret (^) for raising something to a power: for example, x^2 should be entered as <code>x^2</code>. You can get a caret by holding down the SHIFT key and pressing the 6 key on most keyboards. Negative or fractional powers need brackets:</p> <ul> <li> x^{-2} should be entered as <code>x^(-2)</code>.</li> <li> x^{1/3} should be entered as <code>x^(1/3)</code>.</li> <li>The function <code>root(x,n)</code> can be used for <code>x^(1/n)</code>.  If you omit the second argument you get <code>root(x)=sqrt(x)</code>.</li> </ul>"},{"location":"en/Students/Answer_input/#brackets","title":"Brackets","text":"<p>Brackets are important to group terms in an expression. This is particularly the case in STACK since we use a one-dimensional input rather than traditional written mathematics. Try to consciously develop a sense of when you need brackets and avoid putting in too many.</p> <p>For example,</p> <p> \\frac{a+b}{c+d} </p> <p>should be entered as <code>(a+b)/(c+d)</code>.</p> <p>If you type <code>a+b/(c+d)</code>, then STACK will think that you mean</p> <p> a+\\frac{b}{c+d}. </p> <p>If you type <code>(a+b)/c+d</code>, then STACK will think that you mean</p> <p> \\frac{a+b}{c}+d. </p> <p>If you type <code>a+b/c+d</code>, then STACK will think that you mean</p> <p> a+\\frac{b}{c}+d. </p> <p>Think carefully about the expression <code>a/b/c</code>.  What do you think this means?  There are two options</p> <p> \\frac{a}{b}\\cdot\\frac{1}{c} = \\frac{a}{bc}\\quad\\text{or}\\quad\\frac{a}{\\frac{b}{c}}=\\frac{ac}{b}. </p> <p>Maxima interprets this as \\frac{a}{bc}.  If in doubt use brackets.</p> <p>Note that in this context you should always use ordinary round bracket (like (a+b)), not square or curly ones (like [a+b] or {a+b}).</p> <ul> <li><code>{a+b}</code> means a set,</li> <li><code>[a+b]</code> means a list.</li> </ul>"},{"location":"en/Students/Answer_input/#scientific-units","title":"Scientific units","text":"<p>You may be asked to answer a question in which the answer has units.  E.g.  9.81\\text{m}\\text{s}^{-2} .  To enter units you must use multiplication, so this is entered as either <code>9.81*m/s^2</code> or <code>9.81*m*s^(-2)</code>.  Don't use a space, or another symbol such as <code>+</code>.</p>"},{"location":"en/Students/Answer_input/#subscripts","title":"Subscripts","text":"<p>Use the underscore character to denote a subscript.  For example, a_b should be entered as <code>a_b</code>.</p>"},{"location":"en/Students/Answer_input/#more-examples","title":"More examples","text":"<ul> <li> 2^{a+b} should be entered as <code>2^(a+b)</code></li> <li> 2 \\cos 3x should be entered as <code>2*cos(3*x)</code></li> <li> e^{ax}\\sin(bx) should be entered as <code>exp(a*x)*sin(b*x)</code></li> <li>  (ax^2 + b x + c)^{-1} should be entered as <code>(a*x^2 + b*x + c)^(-1)</code>.</li> </ul>"},{"location":"en/Students/Answer_input/#functions","title":"Functions","text":"<ul> <li>Standard functions: Functions, such as \\sin, \\cos, \\tan, \\exp, \\log and so on   can be entered using their usual names. However, the argument must always be enclosed in brackets:   \\sin x should be entered as <code>sin(x)</code>, \\ln 3 should be entered as <code>ln(3)</code> and so on.</li> <li>Modulus function: The modulus function, sometimes called the absolute value of x,   is written as |x| in traditional notation. This must be entered as <code>abs(x)</code>.</li> </ul>"},{"location":"en/Students/Answer_input/#trigonometrical-functions","title":"Trigonometrical functions","text":"<p>Things to remember:</p> <ul> <li>STACK uses radians for the angles not degrees!</li> <li>The function 1/\\sin(x) should be typed in as <code>csc(x)</code> rather than <code>cosec(x)</code>.   You can type <code>cosec(x)</code> or just call it <code>1/sin(x)</code> if you prefer.</li> <li> \\sin^2x must be entered as <code>sin(x)^2</code> (which is what it really means, after all).   Similarly for \\tan^2(x), \\sinh^2(x) and so on.</li> <li>Recall that \\sin^{-1}(x) traditionally means the number t such that \\sin(t) = x,   which is completely different from the number \\sin(x)^{-1} = 1/\\sin(x).   This traditional notation is really rather unfortunate and is not used by the CAS; instead,   \\sin^{-1}(x) should be entered as <code>asin(x)</code>. Similarly, \\tan^{-1}(x) should be entered as <code>atan(x)</code> and so on.</li> </ul>"},{"location":"en/Students/Answer_input/#exponentials-and-logarithms","title":"Exponentials and Logarithms","text":"<ul> <li>To enter the exponential function type <code>exp(x)</code>. Typing <code>e^x</code> should work in STACK, but gets you into bad habits when using a CAS later!</li> <li>Type <code>ln(x)</code> or <code>log(x)</code> to enter the natural logarithm of x with base e\\approx 2.71\\cdots. Note that both of these start with a lower case l for logarithm, not a capital I (<code>i</code>).</li> <li>The logarithm of x to base 10 is entered as <code>lg(x)</code>.</li> <li>The logarithm of x to base a is entered as <code>lg(x,a)</code>, sometimes written \\log_{a}(x).</li> </ul>"},{"location":"en/Students/Answer_input/#matrices","title":"Matrices","text":"<p>You may be given a grid of boxes to fill in. If not, the teacher may provide a hint as to the correct syntax. Otherwise you will need to use Maxima's notation for entering the matrix.</p> <p>The matrix:</p> <p>  \\left( \\begin{array}{ccc} 1 &amp; 2 &amp; 3 \\\\ 4 &amp; 5 &amp; 6 \\end{array} \\right) </p> <p>must be entered as <code>matrix([1,2,3],[4,5,6])</code>.</p> <p>Each row is entered as a list, and these should be the same length. The function matrix is used to indicate this is a matrix and not a \"list of lists\".</p>"},{"location":"en/Students/Answer_input/#equations-and-inequalities","title":"Equations and Inequalities","text":"<p>Equations can be entered using the equals sign. For example, to enter the equation y=x^2-2x+1 type <code>y=x^2-2*x+1</code>.</p> <p>Inequalities can be entered using the greater than and less than signs on the keyboard. Notice that there are four possibilities for you to choose from: <code>&lt;</code> or <code>&gt;</code> or <code>&lt;=</code> or <code>&gt;=</code>. Note there is no space between these symbols, and the equality must come second when it is used, i.e. you cannot use <code>=&lt;</code>.</p> <p>You can enter \"not equals to\" using the <code>#</code> symbol.  E.g. <code>x#1</code> is interpreted as x\\neq 1.</p> <p>Sometimes you will need to connect inequalities together as <code>x&gt;1 and x&lt;=5</code>.  You must use the logical connectives <code>and</code> and <code>or</code>.  \"Chained inequalities\" such as 1&lt;x&lt;5 are not permitted as input syntax.  You should enter this as <code>1&lt;x and x&lt;5</code>.</p>"},{"location":"en/Students/Answer_input/#reasoning-line-by-line","title":"Reasoning line by line","text":"<p>Sometimes you will be asked to reason line by line.  This is called reasoning by equivalence.</p>"},{"location":"en/Students/Answer_input/#other-notes","title":"Other notes","text":"<ul> <li>Greek letters can be entered using their English names. For example, enter \\alpha+\\beta as <code>alpha+beta</code>, and 2\\pi as <code>2*pi</code>.</li> <li>Sets: To enter a set such as \\{1,2,3\\} in Maxima you could use the function <code>set(1,2,3)</code>, or use curly brackets and type <code>{1,2,3}</code>.</li> <li>Lists: can be entered using square brackets. For example, to enter the list 1,2,2,3 type <code>[1,2,2,3]</code>.</li> <li>Note that you do not need a semicolon at the end, unlike when you are using a CAS directly.</li> </ul> <p>You can also learn about the right syntax by doing tests in practice mode and asking for the solutions; as well as displaying the right answers in ordinary mathematical notation, STACK will tell you how they could be entered. However, there are often several possible ways, and STACK will not always suggest the easiest one.</p> <p>If you have difficulties in entering your answer into STACK you should contact your teacher.</p>"},{"location":"en/Students/Equivalence_reasoning/","title":"Reasoning by Equivalence","text":"<p>Sometimes STACK allows you to work line by line to solve an equation or inequality.  You must work in such a way that adjacent lines are equivalent to each other.</p> <p>Start by typing in the equation in the question. Then work line by line in the text area until you have solved the problem.  Normally some feedback will be available as you type.</p> <p>For example, to solve the quadratic equation  you might reason in the following way.</p> <pre><code>x^2-4*x-5=0\n(x+1)*(x-5)=0\nx=-1 or x=5\n</code></pre> <p>You can copy and paste from one line to the next and modify the line if this helps.</p> <p>This might be displayed as follows</p> <p>  \\begin{array}{ccc} \\  &amp; x^2-4 x-5=0 &amp; \\text{ } \\\\ \\color{green}{\\Leftrightarrow} &amp; \\left(x+1\\right) \\left(x-5\\right)=0 &amp; \\text{ } \\\\ \\color{green}{\\Leftrightarrow} &amp; x=-1\\lor x=5 &amp; \\text{ } \\end{array}  </p> <p>Whether this feedback is available to you or not immediately depends on your question.  This feedback indicates that STACK considers that each line is equivalent to the previous line.  The last line of working is your final answer, although the whole argument is considered as well.</p> <ol> <li>You should use the normal syntax for answer input in STACK, including brackets and <code>*</code> symbols for multiplication.</li> <li>Sets, lists and matrices are not permitted when reasoning by equivalence.</li> <li>Do not enter your answer as a list or set of numbers, use logical notation such as <code>x=-1 or x=5</code>.</li> </ol> <p>You can also work line by line with expressions, not equations.  For example, to expand out  (x-1)(x+4)  you might reason in the following way.</p> <pre><code>(x-1)*(x+4)\n=x^2-x+4*x-4\n=x^2+3*x-4\n</code></pre> <p>This might be displayed as follows</p> <p> \\begin{array}{ll}\\ &amp;\\left(x-1\\right) \\left(x+4\\right) \\cr \\color{green}{\\checkmark}&amp;=x^2-x+4 x-4 \\cr \\color{green}{\\checkmark}&amp;=x^2+3 x-4\\end{array} </p> <p>Here, each new line must start with an equals sign <code>=</code>.</p>"},{"location":"en/Students/Equivalence_reasoning/#what-is-equivalence","title":"What is \"equivalence\"?","text":"<p>Two equations are equivalent if they have the same solutions with the same multiplicities.</p> <p>Two expressions are equivalent if they have the same value when the variables are evaluated.</p> <p>Some general advice for solving equations when reasoning by equivalence is</p> <ol> <li>Factorise expressions, then use  AB=0 \\color{green}{\\Leftrightarrow} A=0 \\lor B=0.  </li> <li>Use the difference of two squares, a^2-b^2=(a-b)(a+b).</li> <li>Complete the square:  e.g.  (x-a)^2+b=0.</li> </ol>"},{"location":"en/Students/Equivalence_reasoning/#avoid-taking-roots","title":"Avoid taking roots.","text":"<p>Do not take the square root of both sides of an equation.  \\text{ If } a=b \\text{ then } a^2=b^2. However,   \\text{ if } a^2=b^2 \\text{ then } a=b \\text{ or } a=-b. So, if you take the square root of both sides of an equation to transform a^2=b^2 into a=b you might miss a root!</p> <p>To avoid this problem use the difference of two squares in the following way.</p> <pre><code>a^2=b^2\na^2-b^2=0\n(a-b)*(a+b)=0\na=b or a=-b\n</code></pre> <p>  \\begin{array}{ccc} \\  &amp; a^2=b^2 &amp; \\text{ } \\\\ \\color{green}{\\Leftrightarrow} &amp; a^2-b^2=0 &amp; \\text{ } \\\\ \\color{green}{\\Leftrightarrow} &amp; \\left(a-b\\right) \\left(a+b\\right)=0 &amp; \\text{ } \\\\ \\color{green}{\\Leftrightarrow} &amp; a=b\\lor a=-b &amp; \\text{ } \\end{array}  </p>"},{"location":"en/Students/Equivalence_reasoning/#edge-cases","title":"Edge cases","text":"<p>Sometimes you will have an equation with no solutions.  You can express the fact there are no solutions in the following ways</p> <ol> <li><code>false</code>.  This is because sometimes you end up with a contradiction such as 1=2, since this equation is false you can type that as the final line in your argument.</li> <li><code>none</code>.  The special keyword <code>none</code> is used to signify that no values of the variables satisfy the equation.</li> <li><code>{}</code>.  The empty set indicates there are no solutions.</li> </ol> <p>Sometimes you will have an equation in which every number is a solution, such as x=x.  You can express the fact every number is a solution in the following ways</p> <ol> <li><code>true</code>.  This is because sometimes you end up with an equation such as x=x, and since this equation is true you can type that as the final line in your argument.</li> <li><code>all</code>.  The special keyword <code>all</code> is used to signify that any values of the variables satisfy the equation.</li> </ol>"},{"location":"en/Students/FAQ/","title":"Frequently asked questions","text":"<p>This page is designed to help student users of STACK, rather than question authors.</p>"},{"location":"en/Students/FAQ/#how-do-i-enter-my-answers","title":"How do I enter my answers?","text":"<p>You often need to enter an answer which is an algebraic expression. Details and examples are given on the answer input page. The short answer to this question is that you should type in your answers using the same syntax as that used in the symbolic mathematics package Maxima (this page is written for teachers, but you may find it interesting).</p>"},{"location":"en/Students/FAQ/#why-is-my-answer-invalid","title":"Why is my answer \"invalid\"?","text":"<p>STACK validates students' answers before they are graded, checking if the answers are in an acceptable syntax and giving the student a chance to confirm their answer is correct. By default, answers not explicitly specifying multiplication (fx.  instead of 2*x) are not accepted. This is linked to a core philosophy of STACK; students should not be penalized for poor computer syntax. It is better to bug students until their answer is unambiguous, than to risk students being marking wrong for typing in \"sinx\" instead of \"sin(x)\" and having the computer interpret it as \"s*i*n*x\".</p> <p>That being said, there are options in STACK to be less strict with student syntax, so that the system may accept \"2x\" as a valid input. The question author has to activate this function, so contact your teacher if you think they should choose this option.</p> <p>There may be other reasons your answer is not allowed. By default, STACK does not allow variables that are longer than two characters, and your teacher may also have forbidden names and functions they do not want you to use in your answer.</p>"},{"location":"en/Students/FAQ/#why-is-my-quiz-acting-differently","title":"Why is my quiz acting differently?","text":"<p>Different quizzes can have different question behaviours. Some quizzes may only accept one answer, others may accept an unlimited amount. Some quizzes may allow you to \"check\" if each question is correct before moving on to the next, others may not include this. Some quizzes may give you feedback immediately, other only after a while. Your teacher may have picked different question behaviours for your different quizzes.</p>"},{"location":"en/Students/FAQ/#how-do-i-change-the-language","title":"How do I change the language?","text":"<p>Click on your profile, and go to <code>Preferences</code>, <code>Preferred language</code> and then select the language. If your language is not available, contact your site administrator - it is likely that they have not installed the relevant language package. Currently, only some languages are supported by STACK. See Language packages for a full list. If the interface is translated, but the question text and feedback is not, it is because your teacher has not added support for multilingual questions when authoring the question.</p>"},{"location":"en/Students/FAQ/#where-can-i-report-bugs","title":"Where can I report bugs?","text":"<p>Depends. Is it an issue in the question authoring? Fx.</p> <ul> <li>The feedback contains strange symbols, like \"@nn@\".</li> <li>My answer was marked \"wrong\", but I think it should be marked \"correct\".</li> <li>My quiz is not open, but I think it should be.</li> <li>There is a spelling error in the question text.</li> </ul> <p>In this case, it is likely your teacher has made an error when authoring the question, so you should contact them first. In general, if you are unsure what is responsible for your bug, the safest option is to contact your teacher, as they are likely to have a better idea of how to categorize the issue.</p> <p>If you think you have found a genuine STACK bug, you should report it in the STACK GitHub.</p> <p>If the bug seems to concern something outside of the question, for example the quiz or the website, you may have found a bug in the learning management system your institution uses. This should be reported to their respective bug report system, for example the one for Moodle.</p>"},{"location":"en/Students/FAQ/#how-do-i-make-the-fonts-bigger","title":"How do I make the fonts bigger?","text":"<p>See the information on Accessibility. </p>"},{"location":"en/Topics/","title":"Mathematical topics","text":"<p>This section of the STACK documentation contains information on how to author questions in particular mathematical topics.  Many topics have different requirements, e.g. physics needs support for scientific units.  These pages contain know-how on linking together features such as inputs, answer tests and options to write questions in particular subject areas.</p> <ul> <li>Curve sketching</li> <li>Differential equations</li> <li>Discrete mathematics</li> <li>String similarity via the Levenshtein distance</li> <li>Linear algebra</li> <li>Propositional Logic</li> <li>Scientific Units</li> <li>Vector Calculus</li> <li>Proof.</li> </ul> <p>There is separate documentation on specialist tools, such as those needed for, drag and drop (Parsons problems), graphical interaction and so on.  Specialist tool documentaion is not linked to a single mathematical topic, but rather to a technical tool.</p> <p>The stack question library contains many examples in directories matching the structure of the documentation.</p>"},{"location":"en/Topics/Curve_sketching/","title":"Curve sketching","text":"<p>At its core, STACK is built to take algebraic input from students. This makes assessing skills regarding curve sketching difficult to implement. This page will take a look at how people have assessed curve sketching in STACK, including some promising projects and alternatives.</p>"},{"location":"en/Topics/Curve_sketching/#geogebra","title":"GeoGebra","text":"<p>GeoGebra is a flexible tool for creating a large number of interactive math applets. Applets like this one (by pirsquared) show that GeoGebra is capable of creating applets that assess at least some competencies of curve sketching (in this case, finding axis intersects).</p> <p></p> <p>GeoGebra has a strong user base and there is a large number of user-created resources that can be used in a course. These can then easily be embedded in a STACK question with an <code>&lt;iframe&gt;</code> environment. Please note that the GeoGebra's license does not match the STACK licence.</p>"},{"location":"en/Topics/Curve_sketching/#jsxgraph","title":"JSXGraph","text":"<p>STACK has native support for the mathematics visualisation system JSXGraph. Recently, there have been attempts to use JSXGraph to assess curve sketching in STACK. In particular, see the work done by Tobias Mai and Alexander Meyer in developing a JSXGraph applet that lets students sketch curves by a trace of points. The applet can determine how accurate the sketch is and provide specific feedback. Future developments include support for randomisation and interface improvements. More information, including contact information, can be found in their paper \"Sketching functions as a digital task with automated feedback\".</p> <p></p>"},{"location":"en/Topics/Curve_sketching/#alternatives-to-curve-sketching","title":"Alternatives to curve sketching","text":"<p>What are the competencies that teachers are looking for when they want to test curve sketching? The answer is not clear. When teaching students about polynomials, let's say you want to give a student a function and ensure they can identify x and y-intercepts, stationary points and the general shapes of its curve. There are ways to assess these competencies without using curve sketching, for example by a multiple choice question like the one below, from \"Fundamentals of Algebra and Calculus\". However, note the limitations of MCQ's as discussed in Philosophy of STACK.</p> <p></p>"},{"location":"en/Topics/Curve_sketching/#contributing","title":"Contributing","text":"<p>We are eager to find a solid way of assessing this competency in STACK. We would appreciate any contributions that help solve this problem. Please contact the developers.</p>"},{"location":"en/Topics/Discrete_mathematics/","title":"Discrete mathematics and graph theory.","text":"<p>A graph in discrete mathematics is a set of edges and vertices.  Maxima has a \"graphs\" package, which we do not currently support (see github issue #572 for a discussion of why).</p>"},{"location":"en/Topics/Discrete_mathematics/#generating-points-for-a-graph","title":"Generating points for a graph","text":"<p>The following question variables produce the complete graph on <code>m</code> vertices.</p> <pre><code>/* Choose the number of points. */\nm:7;\n/* Distribute the points around a circle. */\npts:makelist([decimalplaces(float(cos(2*%pi*k/m)),4),decimalplaces(float(sin(2*%pi*k/m)),4)],k,0,m-1);\n\n/* Create the complete graph of m elements. */\nevery_pair(ex):=block(\n    if length(ex)&lt;2 then return([]),\n    if length(ex)=2 then return([ex]),\n    append(maplist(lambda([ex2],[first(ex),ex2]),rest(ex)), every_pair(rest(ex)))\n);\nedges:every_pair(makelist(k,k,0,m-1));\n</code></pre>"},{"location":"en/Topics/Discrete_mathematics/#displaying-graphs-with-plot","title":"Displaying graphs with <code>plot()</code>","text":"<p>It is possible to plot simple discrete graphs directly using STACK's <code>plot</code> command by building a combination of discrete and line plots.  If you want to do this, we strongly recommend you work offline first in Maxima using <code>plot2d</code> to ensure your Maxima code works.</p> <p>In general it is better to (1) separate connections of points from the coordinates of points, and (2) deal with lists of coordinates.  That way we can pass a connection, or the coordinates of a point into a function more easily.  Create a list of coordinates, where each coordinate is a point [x,y].</p> <pre><code>nk:5;\n/* Position nk coordinates evenly round the unit circle. */\npc1:float(makelist([cos(%pi/(2*nk)+2*k*%pi/nk), sin(%pi/(2*nk)+2*k*%pi/nk)], k, 0, nk));\n/* Extract individual coordinates. */\nx1:maplist(first, pc1); \ny1:maplist(second, pc1); \np1:[discrete,x1,y1];\n</code></pre> <p>Plot must have floating point numbers to deal with.</p> <p>Now use the CASText:</p> <pre><code>{@plot([p1,p1],[x,-1,1],[y,-1,1],[style,points,lines],[box,false],[axes,false])@}\n</code></pre> <p>Notice we plot a list, containing <code>p1</code> twice, once with style <code>points</code> and once with <code>lines</code>.</p> <p>The following takes a list of edge connections, <code>[a,b]</code>, and a list of co-ordinate points of the form <code>[x,y]</code> and produces the discrete plots of the edge connections.  Note the two stage process.</p> <ol> <li>Turn the list of edge connections (<code>edgel</code>) into lists of points to connect. (The inner <code>maplist</code>)</li> <li>Turn two points to connect into a discrete plot of the form <code>[discrete [x1, x2], [y1, y2]]</code>.</li> </ol> <p>The following code could be combined, but two separate <code>maplist</code> applications separate out the processes with more clarity.</p> <pre><code>pedges(edgel, pts):= maplist(lambda([ex], [discrete, maplist(first, ex), maplist(second, ex)]), maplist(lambda([ex], [pts[first(ex)], pts[second(ex)]]), edgel));\n</code></pre> <p>As an example we will create a simple (disconnected) graph as follows.</p> <pre><code>g1:[[2,3], [3,4], [4,2], [1,5]];\n/* Plot this graph, using points in positions pc1. */\np2:pedges(g1, pc1);\n\n/* Set colours. */\npcols2:makelist(red, k, 1, length(p2));\n\n/* Set Style */\npstyle2:makelist(lines, k, 1, length(p2));\n\n/* Add in points, as before. */\np2:append([p1], p2);\npstyle2:append([points], pstyle2);\npcols2:append([blue], pcols2);\n\n/* Create a single plot. */\npcols2:append([color], pcols2);\npstyle2:append([style], pstyle2);\n</code></pre> <p>And add in the castext</p> <pre><code>{@plot(p2,[x,-1,1],[y,-1,1], pstyle2, pcols2, [box,false], [axes,false])@}\n</code></pre> <p>To create a complete graph, we need code to create every pair of edges [a,b], as follows.</p> <pre><code>/* Return a list of edge pairs n1 to a list of points. */\npedgesto(n1, nl) := maplist(lambda([ex], [n1, ex]), nl);\n/* Return every pair of points in nl. */\npalledges(nl) := if is(length(nl)=1) then [] else append(pedgesto(first(nl), rest(nl)), palledges(rest(nl)));\n\n/* The complete graph on nk edges. */\nknk:palledges(makelist(k,k,1,nk));\n\n/* Plot this graph, using points in positions pc1. */\np3:pedges(knk, pc1);\n\n/* Set colours. */\npcols3:makelist(red, k, 1, length(p3));\n\n/* Set Style */\npstyle3:makelist(lines, k, 1, length(p3));\n\n/* Add in points, as before. */\np3:append([p1], p3);\npstyle3:append([points], pstyle3);\npcols3:append([blue], pcols3);\n\n/* Create a single plot. */\npcols3:append([color], pcols3);\npstyle3:append([style], pstyle3);\n</code></pre> <p>And add in the castext</p> <pre><code>{@plot(p3,[x,-1,1],[y,-1,1], pstyle3, pcols3, [box,false], [axes,false])@}\n</code></pre> <p>In the above code I have tried to separate out all the issues into individual steps.  Clearly there is significant scope here for utility/convenience functions.</p>"},{"location":"en/Topics/Levenshtein_distance/","title":"Damerau-Levenshtein distance and strings","text":"<p>The Damerau-Levenshtein (Levenshtein for short) distance is a metric, or edit distance, for measuring the difference between two strings. Informally, the Levenshtein distance is the minimum number of single-character edits (insertions, deletions, transition or substitutions) required to change one string into the other. It is named after Vladimir Levenshtein.  Support for Levenshtein distance was added to STACK in 2022 by Achim Eichhorn and Andreas Helfrich-Schkarbanenko.</p> <p>The use of this distance automatically includes an element of spell checking, which is one of its significant advantages.  Indeed, the Levenshtein distance is widely used for spell checking and auto-complete. (See, e.g., F. J. Damerau, A technique for computer detection and correction of spelling errors, Communications of the ACM (7)3, March 1964 pp 171\u2013176. https://doi.org/10.1145/363958.363994)</p>"},{"location":"en/Topics/Levenshtein_distance/#basic-usage-example","title":"Basic usage example","text":"<p>In STACK <code>levenshtein(s, t)</code> takes strings <code>s</code>, <code>t</code> to compare and returns an integer, the Levensthein distance between <code>s</code> and <code>t</code>.  This is basically the number of single-character edits.  For example <code>levenshtein(\"Add\", \"And\")</code> gives 1, since one letter needs to be changed. <code>levenshtein(\"Add\", \"and\")</code> gives 2, since two leters need to be changed.  Adding or removing letters are each a single edit, so that <code>levenshtein(\"Subtract\", \"Subtraction\");</code> gives 3.</p> <p>Rather than using this \"distance\" a tolerance is defined by the normalised \"Levenshtein similarity\" between 0 (totally different) and 1 (identical).  The Maxima code for this function is simple enough to list here explicitly.</p> <pre><code> levenshtein_plv(s, t) := 1.0-levenshtein(s, t)/max(slength(s), slength(t));\n</code></pre> <p>For example \"Add\" and \"Addition\" have a distance of 5, and the longest string is 8, so <code>levenshtein_plv(\"Add\", \"Addition\")</code> gives similarity of 0.375.</p> <p>These functions are part of STACK, not core Maxima, and so to use them you will need to make use of the Maxima sandbox.</p> <p>In a practical situation a teacher will likely have to specify a range of acceptable strings to ensure the student is sufficiently similar to something acceptable.</p>"},{"location":"en/Topics/Levenshtein_distance/#answer-test","title":"Answer test","text":"<p>STACK provides an answer test based on the Levenshtein distance/similarity.  This test seeks to match the student's answer (a string) with two lists of strings and a numerical tolerance option. The first list (<code>allow</code>) is the list of acceptable strings.  The second list (<code>deny</code>) is the list of unacceptable strings.  By default, the test is case insensitive.</p> <p>When you test the student's answer the test finds the most similar string in <code>allow</code> and the most similar string in <code>deny</code> and the corresponding values of the normalised Levenshtein similarity.  The test seeks to ensure that</p> <ol> <li>the most similar string is within the <code>allow</code> list, and then that</li> <li>the similarity of the student's string to the most similar allow string is better than the specified tolerance.</li> </ol> <p>Notes on using the answer test in STACK.</p> <ol> <li>The first argument to the test (the \"student's answer\") must be a string.</li> <li>The second argument to the test (the \"teacher's answer\") must be a list in the form <code>[allow, deny]</code> where both <code>allow</code> and <code>deny</code> are themselves lists of strings.  The <code>allow</code> list must be non-empty, but the <code>deny</code> list could be empty.</li> <li>The option must be used.  Either give the numerical tolerance as a number, or a list of options.  The numerical tolerance must be the first element of the options list.</li> <li>By default the test is case-insensitive.  If you include the atom <code>CASE</code> in the list of options then the matching is case sensitive, potentially increasing the Levenshtein distance between strings.  E.g. use answer test option <code>[0.9, CASE]</code> for a case-sensitive test with a tolerance of 0.9.</li> <li>By default this test consolidates whitespace, e.g. replaces tab and newline characters with a single space, trims whitespace from each end and separates with at most one space character.  If you include the atom <code>WHITESPACE</code> in the list of options then whitespace is not consolidated.</li> </ol> <p>The current answer test provides feedback indicating which of the allow strings was most similar.  The test does not provide feedback indicating which of the deny strings was most similar, but if you can find a use-case which needs deny based feedback please contact the developers and we will add an option.</p> <p>The answernote records the most similar allow string, the most similar deny string and the corresponding tolerance values.  It is likely that a teacher will need to examine students' answers in the fist use cycle and fine tune the <code>allow</code>, <code>deny</code> and tolerance values (perhaps with a regrade) to reach an acceptable level of test reliability: the use of the tolerance means this test is not as objective as some other STACK assessments.</p> <p>It is likely this test will benefit from a wide range of text pre-processing options prior to the test being executed, e.g. using functions from Maxima's stringproc library.  For example</p> <ul> <li>remove (ignore) accents and diacritical marks</li> </ul> <p>At this point we do not propose to add these as options to the test itself as the pre-processing can be done in the feedback variables as required.  However, pre-processing does affect the feedback given by the test and so test options might be very useful.  If you create such processing functions and have compelling use-cases we would appreciate an opportunity to document, and support them as core functionality: please contact the developers.</p>"},{"location":"en/Topics/Levenshtein_distance/#advice-on-processing-strings-in-this-context","title":"Advice on processing strings in this context.","text":"<ol> <li>To trim whitespace and full stops from each end of a string, you can define <code>sans1:strim(\" .\",ans1);</code> in the feedback variables.</li> <li>STACK provides a function <code>sremove_chars(rem, st)</code> which removes all occurrences of each character in the string <code>rem</code> from the string <code>st</code>.  For example to remove all selected punctuation characters use <code>sremove_chars(\".,!?\", ans1)</code>.</li> <li>STACK provides a function <code>ssquish</code> which changes tabs and newlines to spaces; trips whitespace at the ends; and replaces multiple whitespace characters with a single whitespace.</li> </ol>"},{"location":"en/Topics/Levenshtein_distance/#writing-a-stack-question","title":"Writing a STACK question","text":"<p>Here is a very simple question using the Damerau-Levenshtein distance.  Define the question variables as follows.</p> <pre><code>allow1:[\"Completing the square\", \"Complete the square\"];\ndeny1:[\"Factoring\", \"Factorising\", \"Expanding\", \"Square\"];\np1:(x-1)^2-3;\np0:expand(p1);\nta:first(allow1);\n</code></pre> <p>Define the question text as</p> <pre><code>&lt;p&gt;What is the following transformation called? \\[ {@p0@} \\quad{\\color{blue}\\rightarrow}\\quad {@p1@}\\]&lt;/p&gt;\n&lt;p&gt;[[input:ans1]] [[validation:ans1]]&lt;/p&gt;\n</code></pre> <p>Then:</p> <ol> <li>The input <code>ans1</code> should be a string input, with <code>ta</code> as the teacher's answer.</li> <li>Decide if the students should validate and whether you want validation feedback (probably not).</li> <li>The PRT uses a single node and single answer test: <code>Levenshtein(ans1, [allow1,deny1], 0.8)</code> here 0.8 is the (somewhat arbitrary) similarity.</li> <li>Add in question tests, but remember the test cases should be entered as strings, e.g. <code>\"complete square\"</code>.</li> </ol> <p>With this set of allow strings we have <code>ans1:\"complete square\"</code> gives the following answer note from the potential response tree</p> <pre><code>ATLevenshtein_far: [[0.78947,\"Complete the square\"],[0.4,\"Square\"]].\n</code></pre> <p>The note <code>ATLevenshtein_far</code> means the closest string was in the allow list, but it was too far away.  The rest of the note means that the closest string found in <code>allow1</code> was \"Complete the square\" with similarity 0.78947. The closest string found in <code>deny1</code> was \"Square\" with similarity 0.4.  If you want to accept \"complete square\" as a correct answer you have two choices: (i) add it to <code>allow1</code>, or (ii) reduce the required similarity below 0.789.</p>"},{"location":"en/Topics/Levenshtein_distance/#stack-functions","title":"STACK functions","text":"<p>You can test in other ways using the feedback variables and the following functions.</p> <p><code>levenshtein(s, t)</code> takes strings <code>s</code>, <code>t</code> to compare and returns an integer, the Levensthein distance between <code>s</code> and <code>t</code>.  This is basically the number of single-character edits.</p> <p><code>levenshtein_plv(s, t)</code> weights the levenshtein most similar between 0 (totally different) and 1 (identical).  In Maxima code this function is defined as</p> <pre><code> levenshtein_plv(s, t) := 1.0-levenshtein(s, t)/max(slength(s), slength(t));\n</code></pre> <p><code>levenshtein_compare_strings(needle, haystack)</code> looks for the string <code>needle</code> in the list of stings <code>haystack</code>.  It returns <code>[maxscore, index_haystack_found]</code> where <code>maxscore</code> is the value of the closest match and <code>index_haystack_found</code> is the index to the string found.  The <code>maxscore</code> is rounded to five decimal places to help with comparison of floats later.</p>"},{"location":"en/Topics/Propositional_Logic/","title":"Propositional Logic","text":"<p>STACK loads the \"logic\" package from Maxima.</p>"},{"location":"en/Topics/Propositional_Logic/#boolean-functions","title":"Boolean functions","text":"<p>Maxima has Boolean operators <code>and</code>, <code>or</code>, and <code>not</code>.  These rely on the underlying LISP implementation and as a result the <code>simp:false</code> is ignored. To illustrate the problem, try the following.</p> <pre><code>simp:false$\ntrue and true;\nx=1 or x=2;\n</code></pre> <p>The results respectively (of the second two) are</p> <pre><code>true;\nfalse;\n</code></pre> <p>Note, there is no mechanism in Maxima to represent a list of assignments such as <code>x=1 or x=2</code>, which would be a natural way to express the solution to a quadratic equation.</p> <p>To solve this problem STACK has introduced <code>nounand</code> and <code>nounor</code> which are commutative and associative operators.</p> <p>Students do not need to use <code>nounand</code> and <code>nounor</code> in answers. Any <code>and</code> and <code>or</code> operators occurring in students' answers are always automatically converted into these noun forms.</p> <p>Teachers always need to use <code>nounand</code> and <code>nounor</code> in CAS expressions when they want to write non-simplifying expressions. For example, when defining the \"teacher's answer\" they should use the noun forms as appropriate. Teachers often need to use Boolean logic, and so need to consciously separate the difference between these operators and concepts.</p> <p>Note, the answer tests do not convert noun forms to the Maxima forms. Otherwise both <code>x=1 or x=2</code> and <code>x=1 or x=3</code> would be evaluated to <code>false</code> and a teacher could not tell that they are different! To replace all <code>nounand</code> (etc) operators and replace them with the Maxima equivalent, use <code>noun_logic_remove(ex)</code>.</p>"},{"location":"en/Topics/Propositional_Logic/#operators-and-notes","title":"Operators and notes","text":"<ol> <li><code>and</code> This is a lisp function.  Teachers should use <code>nounand</code> to prevent evaluation of <code>x=1 and x=0</code> to <code>false</code> even without simplification.  Students type <code>and</code> and this is always converted internally to <code>nounand</code>.</li> <li><code>or</code> This is a lisp function.  Teachers should use <code>nounor</code> to prevent evaluation of <code>x=1 or x=0</code> to <code>false</code> even without simplification.  Students type <code>or</code> and this is always converted internally to <code>nounor</code>.</li> <li><code>not</code> This is a lisp function.  Teachers should use <code>nounnot</code> to prevent evaluation.  Students type <code>not</code> and this is always converted internally to <code>nounnot</code>.</li> <li><code>nand</code> is provided by the logic package, which respects the value of <code>simp</code>.</li> <li><code>nor</code> is provided by the logic package, which respects the value of <code>simp</code>.</li> <li><code>xor</code> is provided by the logic package, which respects the value of <code>simp</code>.</li> <li><code>eq</code> is provided by the logic package, but this input syntax is not supported in STACK.  Instead we provide an <code>xnor</code> function.</li> <li><code>implies</code> is provided by the logic package, which respects the value of <code>simp</code>.</li> </ol> <p>Notes</p> <ul> <li>If you would like to accept <code>*</code> for <code>and</code> and <code>+</code> for <code>or</code> then you can use the feedback variables to replace operators.  E.g. by using <code>sa:subst([\"*\"=\"nounand\", \"+\"=\"nounor\",\"!\"=\"nounnot\"], ans1);</code>. Note that students cannot type <code>&amp;</code> or an apostrophe as part of their input.  In the above example we use the post-fix factorial operator <code>!</code> is used for logical negation.</li> <li>There is no existential operator (not that this is propositional logic, but for the record) or an interpretation of '?' as there exits, and there is no universal operator (which some people type in as <code>!</code>).</li> <li>To change between language or symbols for logic, use the Logic symbols option. The default behaviour is to use language.</li> </ul> <p>The function <code>verb_logic(ex)</code> will remove the noun forms such as <code>nounand</code> and substitute in the lisp versions which will enable evaluation of expressions.  The function <code>noun_logic(ex)</code> will replace any remaining lisp but beware that any evaluation (even with <code>simp:false</code>) will evaluate lisp logical expressions.  It is best to use noun forms at the outset, e.g. in the question variables, and only use the lisp forms when calculating, e.g. to evaluate in the PRT.</p>"},{"location":"en/Topics/Propositional_Logic/#answer-tests","title":"Answer tests","text":"<p>The answer tests protect the logical operators.  This behaviour is to prevent evaluation of expressions such as <code>x=1</code> as a boolean predicate function.  I.e. the default behaviour is to give priority to the assumption an arbitrary expression is an algebraic expression, or a set of equations, inequalities etc.</p> <p>The answer test <code>AlgEquiv</code> will establish equivalence of expressions with logical operators.  This re-writes both expressions in a \"normal form\" (e.g. using <code>logic_simplify</code> from Maxima's logic package) and compares the resulting trees.</p> <p>The answer test <code>PropLogic</code> replaces all noun logical expressions with the Maxima versions, re-writes both expressions in a \"normal form\", and then tests two expressions using the functions <code>logic_equiv</code> from Maxima's logic package.  Using <code>logic_equiv</code> is stronger than just comparing the resulting trees.</p> <p>Answer tests do not apply this simplification to sets or lists automatically.  E.g. <code>{not(A) or B,A and B}</code> is not considered equivalent to <code>{A implies B,A and B}</code>.  Instead, apply the function <code>logical_normal</code> to the student's answer and teacher's answer in the feedback variables before applying the answer test.</p> <p>The value of the student's answer will always have <code>nounand</code> etc. inserted.  Before you manipulate the student's answer, e.g. with the logic package functions, you will need to apply <code>noun_logic_remove(ex)</code>.</p>"},{"location":"en/Topics/Propositional_Logic/#truth-tables","title":"Truth tables","text":"<p>STACK provides various functions for creating and dealing with tables.</p> <p><code>truth_table(ex)</code> returns the true table of the expression <code>ex</code>.  The function will throw an error if the number of variables exceeds 5.  The first row of the table is the headings, consisting of a list of variables, and the expression itself.  See the documentation on tables for more functionality.</p>"},{"location":"en/Topics/Statistics/","title":"Statistics in STACK","text":"<p>STACK was originally designed with algebra and calculus in mind, rather than statistics. To assess statistics, we can use the algebraic tools, and standard support for proofs/derivation. However this is not the main concern in statistics education. This is intended as a guide to writing statistics questions in STACK.</p>"},{"location":"en/Topics/Statistics/#assessment-approaches","title":"Assessment approaches","text":""},{"location":"en/Topics/Statistics/#code","title":"Code","text":"<p>Most statistics courses use programming in R or python. It may be tempting to assess code snippets by asking students to input a string, but this is very hard to assess due to different interpretations of what is required, and different variable names.</p> <p>If you wish to assess code using a Moodle quiz, this can be done using the Coderunner question type. This question type allows students to write code which is assessed on its effectiveness on specified examples.</p>"},{"location":"en/Topics/Statistics/#numerics","title":"Numerics","text":"<p>However, we can assess the results of statistical annalysis (such as in ). </p> <p>Most teachers using STACK make use of randomisation, but this relies on Maxima's ability to calculate the correct answer. This section is intended to aid the translation of questions relying on commands in the statistical computing software R into STACK questions using Maxima. You do not need an in depth knowledge of statistics to use this.  </p>"},{"location":"en/Topics/Statistics/#distribution-functions","title":"Distribution functions","text":"<p>STACK loads the \"distrib\" package from maxima by default. Check that your server in the plugin 'STACK' settings has <code>distrib</code> in the box <code>Load optional Maxima libraries</code>.</p>"},{"location":"en/Topics/Statistics/#key-points","title":"Key points:","text":"<p>Mostly, it is simple to figure out the format of the maxima equivalent, however there are some points that may cause issues. (This is especially true if you are less familiar with statistics.)</p> <ul> <li>For the function r in R, or random in Maxima, the order of the inputs is different. </li> <li>Maxima and R have different default settings for the Gamma distribution. Maxima uses the shape and scale parameters, while R uses the shape and rate parameters. As such, be careful to translate.</li> <li>Data is expressed in a list in Maxima, thus <code>c(1,2,3)</code> translates to <code>[1,2,3]</code>.</li> </ul> <p>We denote with a *, where there would be the distribition e.g. normal. </p> R-Code Maxima What is calculated Notes <code>d*</code> <code>pdf_*</code> Probability density function for a distribution. P(X=x) <code>p*</code> <code>cdf_*</code> Cumulative distribution function a distribution. P(X\\leq x) = \\int_{-\\infty}^x P(X=i)\\; \\mathrm{di}  <code>q*</code> <code>quantile_*</code> Inverse of CDF. By inputting y, we calculate the value of x for which the P(X \\leq x)=y. Value at a specified percentile. Useful for confidence intervals. <code>r*</code> <code>random_*</code> A list of normally numbers with the specified distribution. in R, inputs will be (n,[vars]), in maxima inputs are ([vars], n). See normal for example. <p>Let us now see an example; the normal distribution.</p> R-Code Maxima <code>dnorm(x,m,s)</code> <code>pdf_normal(x,m,s)</code> <code>pnorm(x,m,s)</code> <code>cdf_normal(x,m,s)</code> <code>qnorm(x,m,s)</code> <code>quantile_normal(x,m,s)</code> <code>rnorm(n,m,s)</code> <code>random_normal(m,s,n)</code> <p>From this, we can generally estimate what the translation will be, however let us consider a full list of distributions, including the inputs they take. The <code>random_</code> version of these will be reversed.</p> R-Code Maxima <code>*norm(x,m,s)</code> <code>*normal(x,m,s)</code> <code>*t(x,n)</code> <code>*student_t(x,n)</code> <code>*chisq(x,n)</code> <code>*chi2(x,n)</code> <code>*f(x,m,n)</code> <code>*f(x,m,n)</code> <code>*exp(x,m)</code> <code>*exp(x,m)</code> <code>*lnorm(x,m,s)</code> <code>*lognormal(x,m,s)</code> <code>*gamma(x,m,s)</code> <code>*gamma(x,m,1/s)</code> <code>*beta(x,m,n)</code> <code>*beta(x,m,n)</code> <code>*unif(x,m,s)</code> <code>*continuous_uniform(x,m,s)</code> <code>*logis(x,m,s)</code> <code>*logistic(x,m,s)</code> <code>*weibull(x,m,s)</code> <code>*weibull(x,m,s)</code> <code>*cauchy(x,m,s)</code> <code>*cauchy(x,m,s)</code> <code>*geom(x,m)</code> <code>*geometric(x,m)</code> <code>*binom(x,m,s)</code> <code>*binomial(x,m,s)</code> <code>*pois(x,m)</code> <code>*poisson(x,m)</code> <code>*geom(x,m)</code> <code>*geometric(x,m)</code> <code>*nbinom(x,m,s)</code> <code>*negative_binomial(x,m,s)</code> <p>For detailed informaion on this see the distrib package documentation. This also provides information on calculating skewness and kurtosis.</p>"},{"location":"en/Topics/Statistics/#mean-variance-and-standard-deviation","title":"Mean variance and standard deviation","text":""},{"location":"en/Topics/Statistics/#key-points_1","title":"Key points","text":"<ul> <li>R and maxima have different default settings for Variance (and by extension, standard deviation). <code>var(x)</code> in R will calculate the sample variance while maxima calculates the population variance. In maxima, <code>var1(x)</code> would be the equivalent to <code>var(x)</code> in R.</li> <li>In R, if no mean and standard deviation is provided, mean = 0 and standard deviation = 1.</li> <li>In Maxima, the default mean is 0 and standard deviation is 1.</li> </ul> R-Code Maxima What is calculated <code>var(x)</code> <code>var1(x)</code> Sample variance of a dataset s^2=\\frac{\\sum(x_i-\\bar{x})^2}{n-1} <code>var(x)*(n-1)/n</code> <code>var1(x)</code> Population variance of dataset \\sigma^2=\\frac{\\sum(x_i-\\bar{x})^2}{N} <code>sd(x)</code> <code>std1(x)</code> Sample standard deviation \\sqrt(s^2) <code>sd(x)*sqrt((n-1)/n)</code> <code>std(x)</code> Population standard deviation \\sqrt(\\sigma^2) <code>mean(x)</code> <code>mean(x)</code> Mean of the dataset \\frac{\\sum x_i}{n}"},{"location":"en/Topics/Statistics/#linear-regression","title":"Linear regression","text":"<p>Maxima can calculate linear regressions. The function <code>linear_regression(x)</code> takes an argument <code>x</code>, a two column matrix or a list of pairs, and will return a summary of results. The following is a list of the results that can be extracted.</p> <ul> <li>'b_estimation: regression coefficients estimates.</li> <li>'b_covariances: covariance matrix of the regression coefficients estimates.</li> <li>b_conf_int: confidence intervals of the regression coefficients.</li> <li>b_statistics: statistics for testing coefficient.</li> <li>b_p_values: p-values for coefficient tests.</li> <li>b_distribution: probability distribution for coefficient tests.</li> <li>v_estimation: unbiased variance estimator.</li> <li>v_conf_int: variance confidence interval.</li> <li>v_distribution: probability distribution for variance test.</li> <li>residuals: residuals.</li> <li>adc: adjusted determination coefficient.</li> <li>aic: Akaike\u2019s information criterion.</li> <li>bic: Bayes\u2019s information criterion. </li> </ul> <p>Results can be used using the function <code>take_inference(prop, res)</code>. Where prop is the property you want to extract and res is the variable the linear regression is saved to. For example,</p> <pre><code>XY: addcol(matrix(), x, y);\nresults: linear_regression(XY);\ncoeffs: take_inference('b_estimation, results);\n</code></pre> <p>More information can be found in the Maxima documentation for Functions and Variables</p>"},{"location":"en/Topics/Statistics/#useful-other-functions","title":"Useful other functions","text":"<ul> <li><code>binomial(n,k)</code> :=  \\frac{n!}{k!(n-k)!}  </li> <li><code>makelist(f(x),x,a,b)</code>:= list of f(x) from a to b.</li> </ul> <p>Variatations of make list are detailed in the Maxima documentation for lists.</p>"},{"location":"en/Topics/Statistics/#presenting-information","title":"Presenting information","text":"<p>In statistics education, we may want to display R code or data. It can be tempting to take a screenshot and upload this, but it is better to use the <code>&lt;pre&gt;</code> environment to display this code as formatted in a code editor. Alternatively, you can upload a file of data using the Moodle link feature or serving out data.</p> <p>It may be difficult for students to input some statistical notation, so try to keep things simple or use an input type other than algebraic expression. STACK uses <code>\\var&lt;LETTER&gt;{}</code> for Greek letters, as such it is logical to use these versions in your question to ensure the validation a student view matches the question. </p>"},{"location":"en/Topics/Statistics/#general-tips","title":"General tips","text":"<p>STACK may simplify when not appropriate for statistics. For instance, while \\sigma^2 is in fact the standard deviation squared, it is often not desired to simplify this in an expression. Consider this when writing algebraic questions or using question variables with <code>simp:true</code> on.</p> <p>If you feel that you cannot randomise questions using Maxima, consider writing the questions in your chosen programming language, then copying the question and changing the values, and then make use of the Moodle random question function. </p> <p>It is worth being careful with using <code>i</code> as a sum index. Maxima may interpret this as the imaginary number <code>i</code>.  </p>"},{"location":"en/Topics/Statistics/#example","title":"Example","text":"<p>In this example, the student is asked find a confidence interval. We will randomly generate a data set for the student. This also includes serving out data.</p>"},{"location":"en/Topics/Statistics/#question-variables","title":"Question variables","text":"<p>For our example, the Question variables field looks as follows.</p> <pre><code>/*function to round to a number of decimal points*/\nrnd(x,dp):=float((round(x*10^dp)/10^dp));\n/* Randomise a mean and standard deviation*/\nme:rand([48,49,50,51]);\nsd:1+rand(2);\nnn:50;\n/*randomise dataset*/\nAA:rnd(random_normal(me,sd,nn),2);\nBB:rnd(random_normal(50,2,nn),2);\nCC:rnd(random_normal(51,5,nn),2);\n/*format data*/\nlab: [\"A\",\"B\",\"C\"];\ndata: makelist([AA[i],BB[i],CC[i]],i,1,nn);\n/*find confidence interval 95%*/\ntme: mean(AA);\ntsd: std1(AA);\ntse: float(quantile_normal(0.975,0,1)*tsd/sqrt(nn));\nLB:tme-tse;\nUB:tme+tse;\nta:[LB,UB];\n</code></pre>"},{"location":"en/Topics/Statistics/#question-text","title":"Question text","text":"<pre><code>&lt;p&gt;Download &lt;a href=\"[[textdownload name=\"data.csv\"]]\n{@stack_csv_formatter(data,lab)@}[[/textdownload]]\"&gt; \nthis normal dataset&lt;/a&gt; from lab work, and calculate \nthe 95% confidence interval of dataset A.\nGive your answer to an appropriate number of significant figures.&lt;/p&gt;\n&lt;p&gt;\\([\\)[[input:ans1]]\\(,\\) [[input:ans2]] \\(]\\)[[validation:ans1]][[validation:ans2]]&lt;/p&gt;\n</code></pre>"},{"location":"en/Topics/Statistics/#question-note","title":"Question note","text":"<pre><code>{@dispsf(ta,4)@}\n</code></pre>"},{"location":"en/Topics/Statistics/#input-ans1","title":"Input: ans1","text":"<ol> <li>The Input type field should be Numerical.</li> <li>The Model answer field should be \"dispsf(LB,4)\".</li> <li>Set the option Forbid float to \"no\".</li> <li>Set the option Show the validation to \"Yes, compact\".(Optional)</li> </ol>"},{"location":"en/Topics/Statistics/#input-ans2","title":"Input: ans2","text":"<ol> <li>The Input type field should be Numerical.</li> <li>The Model answer field should be \"dispsf(UB,4)\".</li> <li>Set the option Forbid float to \"no\".</li> <li>Set the option Show the validation to \"Yes, compact\".(Optional)</li> </ol>"},{"location":"en/Topics/Statistics/#potential-response-tree-prt1","title":"Potential response tree: prt1","text":""},{"location":"en/Topics/Statistics/#node1","title":"Node1","text":"<p>Answer test: NumAbsolute SAns: ans1 TAns: LB Test options: 0.01 Node 1 when true: Mod = Score 0.5 Node 1 false feedback: Your lower bound is incorrect.</p>"},{"location":"en/Topics/Statistics/#node2","title":"Node2","text":"<p>Answer test: NumAbsolute SAns: ans2 TAns: UB Test options: 0.01 Node 1 when true: Mod + Score 0.5</p> <p>Node 1 false feedback: Your upper bound is incorrect.</p>"},{"location":"en/Topics/Units/","title":"Scientific Units","text":"<p>It is quite common in science subjects to need to accept an answer which has units, for example using .</p> <p>Currently STACK only support SI units.   See International Bureau of Weights and Measures (2006), (The International System of Units (SI)) PDF (8th ed.), ISBN 92-822-2213-6.</p>"},{"location":"en/Topics/Units/#maxima-packages-for-the-support-of-scientific-units","title":"Maxima packages for the support of scientific units","text":"<p>In Maxima there are a number of separate packages which enable a user to manipulate physical units.</p> <ol> <li><code>load(unit);</code> the code is in <code>...\\share\\contrib\\unit\\unit.mac</code></li> <li><code>load(units);</code> the code is in <code>...\\share\\physics\\units.mac</code></li> <li><code>load(ezunits);</code> the code is in <code>...\\share\\ezunits\\ezunits.mac</code></li> </ol> <p>WE DO NOT USE THESE PACKAGES as they are too slow to load and have a variety of side effects.  Instead we have a lightweight package of our own.</p> <p>By default in Maxima, letters such as <code>k</code> are unbound variables.  If you would like to give these prefix values 10^3 so that <code>km</code> literally means <code>10^3*m</code> then you will need to add the following to the question variables field.</p> <pre><code>stack_unit_si_declare(true);\n</code></pre> <p>The units input and units answer test automatically execute this command.  More details are given below.</p> <p>Internally numbers can be separated from units using the following inert Maxima function.</p> <pre><code>stackunits(num, units)\n</code></pre> <p>where <code>num</code> is the part interpreted to be the numerical portion, and <code>units</code> is the portion considered to be the units.  For example, in the expression <code>10*m/s</code> the internal value from this input will be <code>stackunits(10,m/s)</code>.  Essentially the function <code>stackunits</code> is inert, but does subtly modify the display.  However, having STACK split the student's answer this way is more reliable than teachers trying to find the \"numerical part\" themselves on a question by question basis.  It essentially creates a single object representing a dimensional numerical quantity.  If you are using the units answer tests then you need not worry about these internals.</p>"},{"location":"en/Topics/Units/#examples","title":"Examples","text":"<p>An example question is given in the stacklibrary <code>Topics\\Topics_units_basic.xml</code></p>"},{"location":"en/Topics/Units/#example-1","title":"Example 1","text":"<p>Let us assume that the correct answer is <code>12.1*m/s^2</code>.</p> <ol> <li>Students type this value into STACK exactly as it is above. Note the multiplication sign between    the number and units. There are options to condone a missing star, or to accept a space.</li> <li>In entry, the numerical part is bound to the units part with multiplication.  Using multiplication in this way is ambiguous.  To create, and to disambiguate, a dimensional numerical quantity from a number multiplied by units (a subtle distinction at best) STACK has a mostly inert function <code>stackunits(12.1,m/s^2)</code>.  Students do not need to use this, but teachers can use it in question variables etc.</li> <li>STACK converts the student's answer to SI base units only.    This function also handles the number coefficients automatically (e.g. <code>1*km = 1000*m</code> etc.).</li> <li>STACK has answer tests which compare dimensional numbers. These tests use (share code with) one of the existing numerical answer tests, such as <code>NumSigFigs</code>.</li> </ol>"},{"location":"en/Topics/Units/#Input_type","title":"Input type","text":"<p>Stack provides an input type to enable teachers to support students in entering answers with scientific units.</p> <p>The goal of this input is to validate against the pattern <code>number * units</code>.  </p> <ol> <li>The input type will check both the teacher's answer and the student's answer for units.  The input will require the student's answer to have units if and only if the teacher's answer also has units.  This normally forces the student to use units.  Also, students sometimes add units to dimensionless quantities (such as pH) and this input type will also enable a teacher to reject such input as invalid when the teacher does not use units.</li> <li>In validating against the pattern <code>number * units</code> we do not accept complex expressions which might simplify to this with some additional calculations.  For example, an answer such as <code>9.4*m-53*cm</code> is not considered valid by this input.</li> <li>This input type always accepts floating-point numbers, regardless of the option set on the edit form.  The input type should display the same number of significant figures as typed in by the student.  Note that all other input types truncate the display of unnecessary trailing zeros in floating point numbers, loosing information about significant figures.  If you want to specifically test for significant figures, use this input type, with the teacher's answer having no units.</li> <li>The student must type a number of some kind.  Entering units on their own will be invalid.  If you want to ask a student for units, then use the algebraic input type.  Units on their own are a not valid expression for this input.</li> <li>If the teacher shows the validation, \"with variable list\" this will be displayed as \"the units found in your answer are\"...</li> <li>The student is permitted to use variable names in this input type.</li> <li>The \"insert stars\" option is unchanged.  You may or may not want your students to type a <code>*</code> or space between the numbers and units for implied multiplication.</li> <li>You may want the single letter variable names options here.  Note that since <code>km</code> literally means <code>k*m=1000*m</code> this is not a problem with most units.</li> <li>The input type checks for units in a case sensitive way.  If there is more than one option then STACK suggests a list.  E.g. if the student types <code>mhz</code> then STACK suggests <code>MHz</code> or <code>mHz</code>.</li> <li>You can require numerical accuracy at validation by using the <code>mindp</code>, <code>maxdp</code>, <code>minsf</code> and <code>maxsf</code> extra options, as documented in the numerical input.</li> </ol> <p>There are surprisingly few ambiguities in the units set up, but there will be some that the developers have missed (correctly dealing with ambiguous input is by definition an impossible problem!).  Please contact us with suggestions for improvements.</p> <p>Note, the input does not currently support a situation where you want to accept as valid a purely numerical quantity and then use the PRT to deduct marks for failing to use units, rather than rejecting it as invalid.</p>"},{"location":"en/Topics/Units/#extra-options","title":"Extra Options","text":"<p>The extra options to the input should be a comma separated list of tags.  This input type makes use of the additional options in two ways:</p> <ol> <li>Units can be displayed using inline fractions \\frac{m}{s} (by default fractions are displayed, not inline) or negative powers m\\,s^{-1}.  Add <code>negpow</code> to the Extra Options field to use negative powers.</li> </ol> <p>See the question options entry on inline and displayed fractions.</p>"},{"location":"en/Topics/Units/#answer-tests","title":"Answer tests","text":"<p>STACK provides a number of answer tests for dealing with units.  These are designed to accept an answer which is a dimensional numerical quantity, that is a floating-point number with units such as <code>12.3*m/s</code>.  This will not work with sets, lists, matrices, equations, etc.</p> <p>The answer tests require the teacher's answer (second argument to the function) to have units.  If the teacher does not specify units then the test will fail.  This decision is to help question authors write robust questions e.g. just specifying a number would be problematic.  The input will accept an answer as valid if and only if the teacher's answer has units, so you should know in advance if you have units.  If you want to compare numbers (i.e. no units), just use the numerical test.</p> <p>The units answer tests will happily accept a <code>stackunits</code> expression.  Otherwise, the answer test splits up both arguments into this form first.</p> <p>There are three decisions to be made:</p> <ol> <li>Does the written precision matter?  I.e. should the student use certain significant figures?  If so, should we take a strict interpretation of significant figures (100 has 1 sig fig, 1.00e2 has 3) or not (100 has somewhere between 1 and 3 sig figs)?  See the <code>NumSigFigs</code> and <code>SigFigsStrict</code> answer tests.</li> <li>How does numerical precision matter?  A number might be written using significant figures, but is it the right number?  See the <code>NumSigFigs</code>, <code>NumRelative</code> and <code>NumAbsolute</code> answer tests.</li> <li>Do we convert to compatible units, or require strict units which match those given by the teacher exactly?</li> </ol> <p>Essentially, the teacher has to make three decisions.  These could always be done in a potential response tree with three nodes, but this is a common task.  For legacy reasons, some of the answer tests (e.g. <code>NumSigFigs</code>, <code>UnitsSigFigs</code>) combine answering two or more of these questions in one answer test.</p> <p>For scientific units (Q3.) there are two families of answer tests.</p> <ol> <li><code>Units[...]</code> gives feedback if the student has the wrong units, but number is equivalent on conversion,</li> <li><code>UnitsStrict[...]</code> expects the student's answer to use exactly the units which appear in the teacher's answer.  There is no conversion here.  However, answer notes will record whether the conversion would have worked.</li> </ol> <p>The two issues related to the numerical part are tested with one of the numerical answer tests which are documented elsewhere. Units answer tests share code with these functions.  Use the appropriate options for the chosen test.</p> <p>Notes</p> <ol> <li>All variables are considered to be units.</li> <li>The numerical part is compared using the one of the three numerical answer tests.  Each requires various options, e.g. the number of significant figures, or the numerical accuracy.  These answer tests use identical options to the numerical tests.</li> <li>The units system accepts both <code>l</code> and <code>L</code> for litres, and the display respects the way they are typed in.</li> <li>Only abbreviations are accepted, not full names.  I.e. students may not use <code>meter</code>, instead they must use <code>m</code>.</li> <li>Currently there is no localisation (i.e. language support) for unit names/spellings.</li> <li>The letter <code>u</code> is the prefix for micro, and is displayed as \\mu when the student validates.</li> <li>The string <code>xi</code> is the Greek letter \\xi.  If you assume single variable letter names this might clash with <code>x*i</code> which is a relatively common pattern.</li> </ol>"},{"location":"en/Topics/Units/#conversion-to-base-units-and-numerical-accuracy","title":"Conversion to base units and numerical accuracy","text":"<p>This only applies to the \"non-strict\" versions of the tests.  If the units in the student's answer do not match those of the teacher, then both the student's and teacher's answer is converted to base scientific units and the numerical test applied again.  Note, the student's answer is not converted to the units used by the teacher.</p> <p>For example, in order to make a numerical comparison between <code>1.1*Mg/10^6</code> and <code>1.2*kN*ns/(mm*Hz)</code> both expressions are converted to base units of <code>kg</code>. The numerical test is then applied.</p> <p>For the <code>NumRelative</code> test the option gives the required percentage tolerance within which a student's answer should be.  Literally we test the following <code>|sa-ta| &lt; |ta*tol|</code>.  Here <code>sa</code> and <code>ta</code> are the numerical value of the student's and teacher's answer respectively.  The same <code>tol</code> is used both when the units match and once they have been converted to base units.</p> <p>Similarly, for <code>NumAbsolute</code> the option is an absolute difference, (expressed in units).  Literally we test <code>|sa-ta| &lt; |tol|</code>. Here <code>sa</code> and <code>ta</code> are the numerical value of the student's and teacher's answer respectively once they have been converted to base units.  If <code>tol</code> has no units, then STACK will use the units supplied by the teacher.</p> <p>If the teacher uses units in the option then the option units must be identical to the units in the teacher's answer. </p>"},{"location":"en/Topics/Units/#dealing-with-units-in-maxima-functions-eg-question-variables-and-prts","title":"Dealing with units in Maxima functions, e.g. question variables and PRTs","text":"<p>STACK uses an inert function to represent dimensional numerical quantities.</p> <pre><code>stackunits(num, units)\n</code></pre> <p>In particular, if we just represented scientific units as a product there would be no way to distinguish between <code>stackunits(0, m)</code> and <code>stackunits(0, s)</code>.  As a product both would evaluate to <code>0</code>, which would appear dimensionless.  A teacher is still likely to want to make comments on units when the numerical part is zero.</p> <p>The function <code>stack_unit_si_declare(true)</code> declares variables as units.  (Note the argument to this function is not used.)  For example, this changes the TeX output of <code>m</code> to Roman \\mathrm{m} and not the normal m.  (That units are displayed in Roman is lost to most students!).  Note that the symbols are only declared to be units by using <code>stack_unit_si_declare(true)</code> first somewhere else in the question, or feedback variables.</p> <ul> <li><code>unitsp(ex)</code> is a predicate which decides if STACK considers the expression to represent a dimensional numerical quantity <code>stackunits</code>.</li> <li><code>listofnonunits(ex)</code> lists all variables in the expression <code>ex</code> considered not to be units however they appear.  Use of this function auto-loads <code>stack_unit_si_declare(true)</code>.</li> <li><code>listofunits(ex)</code> lists all variables in the expression <code>ex</code> considered to be units however they appear. Use of this function auto-loads <code>stack_unit_si_declare(true)</code>.</li> <li>If you do not declare <code>stack_unit_si_declare(true)</code> in the question variables you may need to do so in the feedback text itself.</li> <li>If you are manipulating two expressions and you want to ensure they both use the same units use <code>stack_unit_si_to_si_base(ex)</code> on each.  This ensures only the base units of SI are used.  E.g. <code>stack_unit_si_to_si_base(stackunits(12.1,km))</code> gives <code>stackunits(12100.0,m)</code>.</li> </ul> <p>This function declares all units in one go, and there is no way to declare only a subset. Indeed, using only a subset would disrupt the conversion logic.  Defining all the units restricts the number of variable names available in a particular question, e.g. F is assumed to represent Farad, and all units are typeset in Roman type, e.g.  \\mathrm{F}  rather than the normal  F . If you need to fine-tune the display how do to so if explained in the atoms and subscripts section of the more general Maxima documentation.</p> <p>The function <code>stackunits_make(ex)</code> takes the expression <code>ex</code> and, if this is a product of numbers and units, it returns an inert function <code>stackunits</code> with arguments <code>stackunits(numbers, symbols)</code>.  Note, symbols will include a mix of variables, and symbols which are considered to be units. Use of this function autoloads <code>stack_unit_si_declare(true)</code>.</p> <p>The function <code>stackunits_to_product(ex)</code> turns a <code>stackunits</code> object into a product of number and units.</p> <p>It might be helpful in the feedback variables field to separate units from numerical parts prior to building your own potential response tree.  However, do not do the following.</p> <pre><code>n:float(100+rand(300)/10);\nu:m/s\nta:stackunits_make(n*u)\n</code></pre> <p>Instead just call <code>stackunits</code> directly</p> <pre><code>n:float(100+rand(300)/10);\nu:m/s\nta:stackunits(n,u)\n</code></pre> <p>If you regularly find yourself building a particular tree to test for some property please contact the developers who will consider adding this functionality to the core.  </p> <p>The functions</p> <pre><code>stack_units_units(ex);\nstack_units_nums(ex);\n</code></pre> <p>try to split the expression into units and numbers, and the return the units and numbers found.  If there are no numbers, <code>stack_units_nums(ex)</code> returns <code>NULLNUM</code>. If there are no numbers, <code>stack_units_units(ex)</code> returns <code>NULLUNITS</code>.  These are special tags, but note they are displayed by LaTeX as empty strings.  (You could also use <code>first(args(ans1))</code> or <code>second(args(ans1))</code> respectively to access the numerical and units parts.)</p> <p>The reason for having <code>NULLNUM</code> is so that we can tell the difference between <code>m/s</code> and <code>1m/s</code>.  If you want to use the value in an answer test and don't care about the difference (or want <code>NULLNUM=1</code>) then use <code>ev(stack_units_nums(ex),NULLNUM=1)</code>.</p> <p>The function <code>stack_units_split</code> is deprecated.  DO NOT USE.</p>"},{"location":"en/Topics/Units/#fine-tuning-the-display","title":"Fine-tuning the display","text":"<p>By default STACK's TeX function prints out <code>stackunits(10,m/s)</code> as  10\\, m/s.  That is, without any multiplication sign between the numerical part and the units.  In some edge cases you might want to add this multiplication sign in.  To do this, use</p> <pre><code>texput(multsgnstackunits, \"\\\\cdot\");\n</code></pre> <p>in the question variables.  In castext you can use, e.g. <code>{@(texput(multsgnstackunits, \"\\\\cdot \"), stackunits(1, s^-1))@}</code> to create output {1\\cdot s^ {- 1 }}.</p>"},{"location":"en/Topics/Units/#custom-units","title":"Custom units","text":"<p>The teacher may want to use their own units. For example, the core <code>unit</code> package in Maxima does not include <code>mm</code> (millimetre), it is defined there as a word <code>millimetre</code>.  This is one reason for creating our own custom units package.</p> <p>For advanced users and developers only</p> <p>Currently there is no way to create custom sets of units.  This feature may be added in the future.  The following may be helpful for now, but this does not fully work and the mechanism will change in the future when proper support is added for custom units.</p> <p>Add the following to the question variables and feedback variables.</p> <pre><code>stack_unit_si_declare(true);\ndeclare(diamonds, units);\ntexput(diamonds, \"\\\\diamond\");\n</code></pre> <p>The symbol <code>diamonds</code> will then be treated as units in code such as <code>unitsp(ex)</code> and displayed with the TeX \\diamond symbol.</p> <p>You will need to put <code>diamonds</code> in the allow words of the input in the question.</p>"},{"location":"en/Topics/Units/#tips-for-dealing-with-units-in-stack","title":"Tips for dealing with units in STACK","text":"<p>CAS variables are tricky.</p> <ul> <li>When creating worked solutions etc. try <code>12.3m*s^(-1)</code> not <code>12.3m/s</code>.  The display is better.  The answer test accepts either as equivalent.</li> <li>Which units are supported?  It is probably best to look at the code.  This is contained in <code>qtype_stack\\stack\\cas\\casstring_units_class.php</code>.  Comments and additions are welcome.</li> </ul>"},{"location":"en/Topics/Vector_Calculus/","title":"Vector Calculus in STACK","text":"<p>Setting vector calculus problems using STACK does not require too much more thinking than setting regular calculus or linear algebra problems. There are a few extra additions, but a passing familiarity with Maxima's notation for derivatives, integrals and vectors will usually suffice.</p>"},{"location":"en/Topics/Vector_Calculus/#calculus-with-more-than-one-variable","title":"Calculus with more than one variable","text":"<p>To find derivatives of functions of more than one variable you can use the normal <code>diff(f,x)</code> function, which returns the partial derivative of  with respect to x. To find the gradient vector, you might choose to put all the partial derivatives in a list or matrix using something like</p> <pre><code>grad(f,vars):= block(\n  grad_vec: map(lambda([ex], 'diff(f,vars[ex])), ev(makelist(ii,ii,1,length(vars)), simp)),\n  return(transpose(matrix(grad_vec)))\n);\n</code></pre> <p>Then <code>grad(f,[x,y,z])</code> would return   \\left[\\begin{array}{c} \\frac{\\mathrm{d} f}{\\mathrm{d} x} \\\\ \\frac{\\mathrm{d} f}{\\mathrm{d} y} \\\\ \\frac{\\mathrm{d} f}{\\mathrm{d} z} \\end{array}\\right]  Setting Maxima's <code>derivabbrev:true</code> changes the display of derivatives to subscripts.  Now <code>grad(f,[x,y,z])</code> would return  \\left[\\begin{array}{c} f_{x} \\\\ f_{y} \\\\ f_{z} \\end{array}\\right]  </p> <p>If you would like to work with differentials, using <code>diff(f)</code> without specifying a variable will return <code>del(f)</code>. For example, </p> <pre><code>(%i1) f: x*y*z;\n(%o1) x y z;\n(%i2) diff(f);\n(%o2) x y del(z) + x z del(y) + y z del(x)\n</code></pre> <p>The Maxima differentials will display as d(x).  If you prefer notation such as \\mathrm{d}x you might like to redfine the tex function associated with <code>del</code> e.g.</p> <pre><code>texput(del,lambda([ex],sconcat(\"\\\\mathrm{d}\",tex1(first(ex)))));\n</code></pre> <p>If you need to assert that one or more variables are constant, you can use <code>declare([a,b,c],constant)</code> means that, using the previous example, <code>diff(f*c)</code> would return <code>c x y del(z) + c x z del(y) + c y z del(x)</code> rather than <code>c x y del(z) + c x z del(y) + c y z del(x) + x y z del(c)</code>.</p> <p>If you want to assert that one variable depends on the other, you can use <code>depends([f,g],[x,y])</code> to mean that f and g both depend on x and y. If you just want to note that y depends on x, then <code>depends(y,x)</code> is sufficient. This is useful when asking students to perform implicit partial differentiation and solve for the given derivative. Here is an example that wants students to find a partial derivative of one variable with respect to another, holding another variable constant: </p> <pre><code>declare([a,b,c,d],constant);\neqn1: x*y = a*t^b*z;\neqn2: c*z*y^d*t = sin(x);\n[eqn1, eqn2]: random_permutation([eqn1, eqn2]);\n\n[dep1,dep2,indep,const]: random_permutation([x, y, z, t]);\ndepends([dep1,dep2],indep);\n\neqn1d: diff(eqn1,indep);\neqn2d: diff(eqn2,indep);\n\nta: rhs(flatten(solve([eqn1d,eqn2d],['diff(dep1,indep),'diff(dep2,indep)]))[1]);\n</code></pre> <p>This example generates two equations in x, y, z and t, assigns each variable a role as either a dependent variable, independent variable, or a variable being held constant (also independent, but behaving differently in this context), differentiates both equations implicitly with respect to the independent variable, and then solves the equations simultaneously for the desired derivative. The original question had values assigned to a, b, c and d, but it is interesting to declare them constant here. </p> <p>Note that these questions can be a bit volatile, as Maxima simply cannot establish equality when various substitutions are made. It may be prudent to make rearrangement difficult, and/or tell students to not substitute values in their answer. </p>"},{"location":"en/Topics/Vector_Calculus/#using-vectors","title":"Using vectors","text":"<p>Maxima does not distinguish between vectors and matrices, with both being defined using the <code>matrix</code> command. You can put whatever you like in a matrix, so like the example above with a gradient vector, you can easily define a vector function as a matrix with expressions as elements. Some key points: </p> <ol> <li>Lists are treated very similarly to row vectors (which means that things like the dot product operator work on them). It also means that it is sufficient to use <code>transpose([a,b,c])</code> to get a column vector.</li> <li><code>*</code> is used for element-wise multiplication of lists and matrices, whereas <code>.</code> is used as both a dot product and matrix product. This leads to slightly confusing behaviour for vectors, where <code>[x,y] . [z,t]</code>, <code>[x,y] . transpose([z,t])</code> and <code>transpose([x,y]) . transpose([z,t])</code> will all return <code>x*z + y*t</code>, but <code>transpose([x,y]) . [z,t]</code> will return the outer product matrix <code>matrix([x*z, t*x], [y*z, t*y])</code>.</li> <li>Matrices are indexed as <code>A[i,j]</code>, which means that when dealing with vectors you must be careful to index both the row and the column. For example, <code>matrix([1],[2],[3])[1]</code> will return the list <code>[1]</code> rather than the value <code>1</code>, and <code>matrix([1,2,3])[1]</code> will return the whole row <code>[1,2,3]</code>. One way around this is to use the <code>list_matrix_entries</code> function to return the list of all matrix entries, which is often easier to work with when considering vectors. Note that this function returns an error when given a list. </li> <li>The function <code>crossproduct(a,b)</code> is defined in STACK (not core Maxima), but must take two 3 by 1 column vectors as the input, not lists or row vectors. </li> <li>The function <code>jacobian([f1,f2],[x,y])</code> is defined, and takes two lists as arguments. The first is the vector function, and the second is the list of variables. </li> </ol> <p>Some useful functions that are not defined in core Maxima are defined in STACK's contributed <code>vectorcalculus.mac</code> file in the contrib directory.</p> <ol> <li>divergence <code>div(u, vars)</code>. Accepts u as either a matrix or a list.</li> <li>curl <code>curl(u, vars)</code>.  Accepts u as either a matrix or a list.</li> </ol> <p>These functions can be included with <code>stack_include</code>.</p>"},{"location":"en/Topics/Vector_Calculus/#lagrange-multipliers","title":"Lagrange Multipliers","text":"<p>Finding critical points using the method of Lagrange multipliers is as simple as finding the stationary points to the system of equations given by f - \\lambda c where f is the multivariable function you are investigating and c is a constraint curve. There are a few new considerations that come along with questions like this, such as what input type to use and how to account for a variable number of solutions.  </p> <p>Here is some example code that shows how you might procedurally generate solutions to a problem like this, where <code>func</code> is our function f and <code>cons</code> is our constraint curve c given as a single algebraic expression to be set to zero. </p> <pre><code>equations: [diff(func, x) = L*diff(cons, x), diff(func, y) = L*diff(cons, y), cons = 0];\nsolns: map(lambda([ex],map(rhs,firstn(radcan(ex),2))),solve(equations, [x, y, L]));\nta: sublist(solns,lambda([ex],real_numberp(first(ex)) and real_numberp(second(ex))));\n</code></pre> <p>This code will generate all correct solutions, trim out the value of \\lambda which typically does not concern us, removes any complex solutions, and returns the final answer as a list of ordered pairs. This is useful because it allows us to use the TextArea input type. To enter their answers, students can give as many or as ordered pairs as they like.</p> <p>To mark this question, we could use some code like the following:</p> <pre><code>ans1_set: setify(map(simplify, ans1));\nta_set: setify(map(simplify, ta));\n\nnum_correct: length(intersection(ans1_set, ta_set));\nprop_correct: num_correct/length(ta);\n</code></pre> <p>Now we can compare the two sets directly in the PRT using AlgEquiv or Sets. If this test fails, we might like to award <code>prop_correct</code> marks as the score (so that if a student found 3 out of 4 critical points they would be awarded 0.75 marks). We might also find it prudent to award a flat penalty for any superfluous answers in this case too, or perhaps only if the student gives more answers than expected (to avoid double-penalising typos), though this is now a discussion of grading. </p>"},{"location":"en/Topics/Vector_Calculus/#vector-plots","title":"Vector Plots","text":"<p>Newer versions of JSXGraph provide support for vector plots natively, but STACK currently does not use this version of JSXGraph. However, it is not too difficult to create a bespoke vector plot function that can be adapted to a variety of circumstances.</p> <p>There are several considerations when creating a vector plot:</p> <p>1) How densely packed should the vectors be?  2) How long should the vectors be, and how much variation in length should there be?  3) What aesthetic choices are important to aid readability?  4) How should function information be passed from Maxima to JSXGraph?</p> <p>There is no single answer to these, and your answer will likely differ per question. Below is one approach to creating a vector plot question. Note that it assumes you are working with a plaintext editor and so <code>&lt;</code>, <code>&gt;</code>, and <code>&amp;&amp;</code> are all viable options. If you work in a different editor (such as a the Moodle default) you may like to define your own functions to prevent conversion to <code>&amp;lt;</code>, <code>&amp;gt;</code> or <code>&amp;amp;</code> upon saving. </p> <p>Let us first assume a general vector function, called <code>F</code>. In the question variables, we could define <code>fx</code> and <code>fy</code> and then define <code>F: [fx,fy]</code>. If we were wanting to instead plot a gradient, we could define a function <code>f</code> and then define its gradient as <code>F: [diff(f,x),diff(f,y)]</code>. We will also need a version of <code>F</code> that uses valid JavaScript syntax. You might like to convert manually using something like <code>fx_jsx: ssubst(\"**\",\"^\",string(fx))</code>, though this relies on you knowing the form of the function and can cause problems with the unary minus. A better option could be to use JXG.JessieCode. Lastly, we want a JavaScript function to output the direction at a given point. Something like the the following suffices.</p> <pre><code>var F = function(x,y) { return [{@fx_jsx@},{@fy_jsx@}] };\n</code></pre> <p>Next, we want to know where we are plotting. Keeping everything in terms of the plotting axes and number of vectors will prove convenient. If we choose the number of vectors in the x-direction to be <code>num_x</code> and similarly for y to be <code>num_y</code>, we can set up the following: </p> <pre><code>var xi = -2, yf = 2, xf = 2, yi = -2\nvar axes = [xi, yf, xf, yi]\nvar num_x = 20, num_y = 20\nvar dx = 1/num_x*(xf - xi)\nvar dy = 1/num_y*(yf - yi)\n</code></pre> <p>Our goal will be to plot vectors at every grid point defined by these steps in x and y called <code>dx</code> and <code>dy</code>.</p> <p>Before we iterate through this, we need to define the function that will actually plot the vectors.</p> <pre><code>var createVector = function(px, py) {\n    var vec = F(px,py) /* Compute the value of the function here */\n    var vecScaler = 1/Math.sqrt(vec[0]**2 + vec[1]**2)\n    var plotVec = [dx*vec[0]*vecScaler, dy*vec[1]*vecScaler]\n    var tip = [px + plotVec[0], py + plotVec[1]]\n    board.create('arrow',[[px,py],tip],{\n        color: \"#1f77b4\", opacity: 0.66, lastArrow: {type: 2, size: 4},\n        fixed: true, highlight: false\n    });\n    board.create('point',[px,py],{\n        color: \"#1f77b4\", size: 0.1, strokeOpacity: 0.66, fillOpacity: 0.75,\n        highlight: false, fixed: true, withLabel: false\n    });\n}\n</code></pre> <p>A couple of things to note: Firstly, the variable <code>vecScaler</code> is always equal to the reciprocal of the length of the vector, which means that in this example it will always plot a \"unit\" vector (where a unit here is the grid size). This can (and perhaps should) be changed unless you wish to use colour to denote different vector length (which is poor accessibility practice on its own). Secondly, these vectors are eminating from the grid point, which is plotted itself with a transparent dot. In fact, everything is partially transparent to avoid excessive busyness in the plot. You could easily set this up to instead plot with the centre of the arrow being the location, or could tweak any of the other visual settings. In general, it is good to indicate where the vector originates for clarity. </p> <p>Now we can finally plot the vectors. </p> <pre><code>var i, j;  \nfor (i = xi/dx - 1; i &lt;= xf/dx + 1; i++) {\n  for (j = yi/dy - 1; j &lt;= yf/dy + 1; j++) {\n    createArrow(i*dx,j*dy);\n  }\n}\n</code></pre> <p>Note that the vectors are being plotted from just outside the desired area so that they can enter the plot from outside if needed. Now we have a vector plot! </p> <p>The scaling factor <code>vecScaler</code> is the last thing to consider seriously. It is often important to distinguish between different vector lengths, but just setting <code>vecScaler = 1</code> will usually render the plot illegible with huge vectors shooting all over the place. There is no shortage of ways to scale, but one way the author has found helpful is to use a sigmoidal curve like \\tan^{-1}(x). Here is one option: </p> <pre><code>var myScaler = function(vec,a,b) { return a*(Math.PI/2 - Math.atan(a/b*Math.sqrt(vec[0]**2 + vec[1]**2))) }\n</code></pre> <p>for some tuning constants a and b. Note that this function produces a multiplying factor, not the desired length directly. b is the maximum length of the vector relative to the grid size, which is often set to either 1 or 1.414 (the former being good for vectors that tend to point along gridlines and the latter being good for vectors that tend to point in the direction of the diagonals, or if you like a little bit of overlap). a is a measure of how fast the vector reaches the maximum length. You could tweak the values of a and b for each question, or you could pair up functions and scaling factors in the question variables when randomising. Regardless, it might be a good idea to copy-paste the graphing code into the question note so that you can check the scaling when deploying variants.</p>"},{"location":"en/Topics/Chemistry/","title":"Support for chemistry","text":"<p>STACK provides a comprehensive chemical data sheet for use in numerical problems.</p> <p>To include chemical data use the following within your STACK question (question variables).</p> <pre><code>stack_include_contrib(\"chemistry.mac\");\n</code></pre> <p>Developer notes: </p> <ul> <li>During development to load the code local to your development server use <code>stack_include(\"contribl://chemistry.mac\");</code></li> </ul>"},{"location":"en/Topics/Chemistry/#using-chemical-data","title":"Using chemical data","text":"<p>Chemical data is stored in a (large) associative array <code>%_STACK_CHEM_ELEMENTS</code> using the standard chemical symbols as keys in the array. (See https://en.wikipedia.org/wiki/Chemical_symbol.)</p> <p>For example, the entry for <code>\"H\"</code>, hydrogen, is</p> <pre><code>[\"H\", [\n        [\"Name\", [ [\"en\", \"hydrogen\"], [\"fi\", \"vety\"] ]],\n        [\"AtomicNumber\", 1],\n        [\"AtomicMass\", 1.008]\n ]]\n</code></pre> <p>There are convenience functions which access this data.</p> <ul> <li><code>chem_units(dp)</code> Returns the units addociated with <code>dp</code>. E.g. <code>chem_units(\"AtomicMass\")</code> gives <code>g*mol^(-1)</code>.</li> <li><code>chem_data_all(element)</code> returns all the data associated with <code>element</code>.  E.g. <code>chem_data_all(\"H\")</code>.</li> <li><code>chem_data(element, dp)</code> returns the data <code>dp</code> associated with <code>element</code>.  E.g. <code>chem_data(\"H\", \"AtomicMass\")</code> gives <code>1.008</code>.</li> <li><code>chem_data_units(element, dp)</code> returns the data <code>dp</code> associated with <code>element</code> using the <code>stackunits</code> function.  E.g. <code>chem_data_units(\"H\", \"AtomicMass\")</code> gives <code>stackunits(1.008,g*mol^(-1))</code>.</li> </ul> <p>Notes.</p> <ol> <li>Names of elements are always given as strings.  E.g. to access data for hydrogen use <code>\"H\"</code>.</li> <li>Field names are always given as strings, e.g. <code>\"AtomicMass\"</code> is a string (not an atom <code>AtomicMass</code>).</li> <li>The utility functions filter the <code>\"Name\"</code> field to give the name of the element with the local language selection.  STACK uses the global <code>%_STACK_LANG</code> variable.  If no local name is defined the <code>\"Name\"</code> in English is returned.   If you really want all the data, just use <code>assoc(element, %_STACK_CHEM_ELEMENTS)</code> rather than <code>chem_data_all(element)</code>.</li> </ol> <p>TODO: write a maxima function which gives an annotated atomic symbol in LaTeX, based on the chemical data e.g. .</p>"},{"location":"en/Topics/Chemistry/#display-of-chemical-formula-in-latex","title":"Display of chemical formula in LaTeX","text":"<p>For pure display of chemical formula in LaTeX, the <code>mhcem</code> package is already available in MathJaX.  Here is a minial example:</p> <pre><code>\\(\\require{mhchem}\\)\n\\(\\ce{C6H5-CHO}\\),\n\\(\\ce{SO4^2- + Ba^2+ -&gt; BaSO4 v}\\)\n</code></pre>"},{"location":"en/Topics/Differential_equations/","title":"Differential Equations","text":"<p>This section provides guidance on questions involving differential equations. It covers the following topics:</p> <ul> <li>Notation and representation of differential equations in STACK</li> <li>Using and maniplulating differential equations in STACK</li> <li>Assessing solutions to differeniial equations</li> </ul>"},{"location":"en/Topics/Differential_equations/Assessing_Responses/","title":"Differential Equations","text":"<p>This page provides examples of how to assess the solutions to ordinary differential equations (ODEs) using the potential response tree when writing STACK questions.</p>"},{"location":"en/Topics/Differential_equations/Assessing_Responses/#assessing-answers","title":"Assessing answers","text":"<p>ODEs provide a good example of the principle that we should articulate the properties we are looking for in ordinary differential equations.  These properties are</p> <ol> <li>The answer satisfies the differential equation.</li> <li>The answer satisfies any initial/boundary conditions.</li> <li>The answer is general.</li> <li>The answer is in the required form.</li> </ol> <p>Hence, for ODE questions we need a potential response tree which establishes a number of separate properties. On the basis of the properties satisfied, we then need to generate outcomes.</p>"},{"location":"en/Topics/Differential_equations/Assessing_Responses/#satisfying-the-differential-equation","title":"Satisfying the differential equation","text":"<p>When marking this kind of question, it is probably best to take the student's answer and substitute this into the ODE. The student's answer should satisfy the equation. Just \"looking like the model answer\" isn't as robust. How else does the teacher avoid the problem of knowing which letter the student used to represent an arbitrary constant?</p> <p>E.g. in Maxima code</p> <pre><code>ode:x^2*'diff(y,x) + 3*y*x = sin(x)/x;\nans: (c - cos(x))/x^3; /* The student's (correct) answer */\nsa1:subst(y=ans,ode);\nsa2:ev(sa1,nouns);\nsa3:fullratsimp(expand(sa2));\n</code></pre> <p><code>sa1</code>, <code>sa2</code> and <code>sa2</code> can be used as part of the feedback when a student doesn't get the right answer.</p>"},{"location":"en/Topics/Differential_equations/Assessing_Responses/#satisfying-any-initialboundary-conditions","title":"Satisfying any initial/boundary conditions","text":"<p>If the student's answer is <code>ans</code> then we can check initial/boundary conditions at a point <code>x=x0</code> simply by using</p> <pre><code>ev(ans,x=x0);\nblock([ds],ds:diff(ans,x),ev(ds,x=x0));\n</code></pre> <p>Notice in the second example the need to calculate the derivative of the student's answer before it is evaluated at the point <code>x=x0</code>. These values can be compared with answer tests in the usual way.</p>"},{"location":"en/Topics/Differential_equations/Assessing_Responses/#arbitrary-constants","title":"Arbitrary constants","text":"<p>Further tests are needed to ensure the student's solution is non-trivial, satisfies any initial conditions, or is suitably general.</p> <p>To find which constants are present in an expression use Maxima's <code>listofvars</code> command. In particular, to find if <code>c</code> appears in an expression <code>ans</code> we can use the predicate <code>member</code></p> <pre><code>member(c,listofvars(ans))\n</code></pre> <p>However, it is unusual to want to specify the name of a constant.  A student may choose another name.  The example below may be helpful here.</p> <p>Sometimes students use the  operator, e.g. instead of typing in  Ae^{\\lambda t}  they type in  \\pm Ae^{\\lambda_1 t}  as <code>+-A*e^(lambda*t)</code>.  The \\pm has a somewhat ambiguous status in mathematics, but it is likely that many people will want to condone its use here.</p> <p>Internally, the \\pm operator is represented with an infix (or prefix) operation <code>#pm#</code>, which is part of STACK but not core Maxima.  Instead of <code>a+-b</code> teachers must type <code>a#pm#b</code>.  Students' answers get translated into this format. Mostly when dealing with expressions you need to remove the \\pm operator.  To remove the \\pm operator STACK provides the function <code>pm_replace(ex)</code> which performs the re-write rules  a\\pm b \\rightarrow (a+b) \\vee (a-b)   \\pm a \\rightarrow a \\vee -a  (actually using STACK's <code>nounor</code> operator to prevent evaluation).</p> <p>If you simply want to implement the re-write rule  a\\pm b \\rightarrow a+b,  i.e. ignore the \\pm operator, then you can use <code>subst( \"+\",\"#pm#\", ex)</code>.  For example, this substitution can be done in the feedback variables on a student's answer.  If you would like to test code offline with <code>#pm#</code> then you will need to make use of the Maxima sandbox.</p>"},{"location":"en/Topics/Differential_equations/Assessing_Responses/#second-order-linear-differential-equations-with-constant-coefficients","title":"Second order linear differential equations with constant coefficients","text":"<p>One important class of ODEs are the second order linear differential equations with constant coefficients.</p> <p>Generating these kinds of problems is relatively simple: we just need to create a quadratic with the correct sort of roots.</p> <p>Let us assume we have two real roots.  We might expect an answer  Ae^{\\lambda_1 t}+Be^{\\lambda_2 t} . We might have an unusual, but correct, answer such as   Ae^{\\lambda_1 t}\\left(1+Be^{\\lambda_2 t}\\right) .  Hence, we can't just \"look at the answer\".</p> <p>Take question variables.</p> <pre><code>sa1 : subst(y(t)=ans1,ode);\nsa2 : ev(sa1,nouns);\nsa3 : fullratsimp(expand(sa2));\nl   : delete(t,listofvars(ans1));\nlv  : length(l);\n\nb1  : ev(ans1,t=0,fullratsimp);\nb2  : ev(ans1,t=1,fullratsimp);\nm   : float(if b2#0 then fullratsimp(b1/b2) else 0);\n</code></pre> <ol> <li>Here <code>sa1</code>, <code>sa2</code> and <code>sa3</code> are used to ensure the answer satisfies the ODE and if not to provide feedback.</li> <li>To ensure we have two constants we count the number of variables using <code>listofvars</code>, not including <code>t</code>. We are looking for two constants.</li> <li>To ensure the solution is suitably general, we confirm y(1)\\neq 0 and calculate y(0)/y(1).     If this simplifies to a number then the constants have cancelled out and we don't have a general solution consisting of two linearly independent parts.</li> </ol> <p>These are the properties a correct answer should have.  If the teacher has a preference for the form, then a separate test is required to enforce it. For example, you might like the top operation to be a +, i.e. sum.   This can be confirmed by</p> <pre><code>aop : is(equal(op(ans1),\"+\"));\n</code></pre> <p>Then test <code>aop</code> is <code>true</code> with another answer test.  Note that the arguments to answer tests cannot contain double quotes, so a question variable is needed here.</p> <p>Next, let us assume we have complex root, e.g. in the equation</p> <p>  \\ddot{y}+2\\dot{y}+5=0  </p> <p>we have \\lambda = -1 \\pm 2i.</p> <p>We potentially have quite a variety of solutions.</p> <p>  y=e^{-t}(A\\sin(2t)+B\\cos(2t)) </p> <p>  y=Ae^{-t}\\sin(2t+B) </p> <p>  y=Ae^{(-1+2i)t}+Be^{(-1-2i)t} </p> <p>The advantage is that the same code correctly assesses all these forms of the answer.</p>"},{"location":"en/Topics/Differential_equations/Assessing_Responses/#separating-the-general-from-particular-solution","title":"Separating the general from particular solution.","text":"<p>Consider the differential equation  \\ddot{y}+4\\dot{y}=8\\tan(t)  with corresponding general solution</p> <pre><code>ode:'diff(y,t,2)+4*y-8*tan(t);\nans1:-2*sin(2*t)-4*t*cos(2*t)+4*log(cos(t))*sin(2*t)+c_1*cos(2*t)+c_2*sin(2*t);\n</code></pre> <p>The solution of such an equation consists of the sum y(t) = c_1\\ y_1(t)+c_2\\ y_2(t)+y_p(t).   The general solution is the term c_1\\ y_1(t)+c_2\\ y_2(t) and the particular solution is the part y_p(t).  It is useful to separate these.  Run the above code, which should work.  Then we execute the following, which checks the general solution part is made up of two linearly independent parts.</p> <pre><code>/*\u00a0Calculate the \"Particular integral\", (by setting both constants to zero) and then separate out the \"general solution\".*/\nansPI:ev(ans1,maplist(lambda([ex],ex=0), l));\nansGS:ans1-ansPI;\ng1  : ev(ansGS,t=0,fullratsimp);\ng2  : ev(ansGS,t=1,fullratsimp);\nm   : float(if g2#0 then fullratsimp(g1/g2) else 0);\n</code></pre> <p>Notice to calculate y_p(t) we set the constants c_1=c_2=0, but using the variables in the list <code>l</code> which is defined above as the list of constants without t.</p>"},{"location":"en/Topics/Differential_equations/Assessing_Responses/#first-order-exact-differential-equations","title":"First order exact differential equations","text":"<p>An important class of differential equations are the so-called first order exact differential equations of the form</p> <p>  p(x,y)\\cdot \\dot{y}(x) + q(x,y) = 0. </p> <p>Assume that h(x,y)=c gives an implicit function, which satisfies this equation.  Then</p> <p>  \\frac{\\mathrm{d}h}{\\mathrm{d}x}=\\frac{\\partial h}{\\partial y}\\cdot \\frac{\\mathrm{d}y}{\\mathrm{d}x}+\\frac{\\partial h}{\\partial x}=0 </p> <p>and so</p> <p>  \\frac{\\partial h}{\\partial y} = p(x,y), \\quad \\frac{\\partial h}{\\partial x}=q(x,y). </p> <p>Differentiating once further (and assuming sufficient regularity of h) we have</p> <p>  \\frac{\\partial p}{\\partial x} = \\frac{\\partial^2 h}{\\partial x\\partial y}=\\frac{\\partial q}{\\partial y}. </p> <p>Note that this condition on p and q is necessary and sufficient for the ODE to be exact. In search of such a function h(x,y) we may define</p> <p>  h_1 = \\int q(x,y)\\mathrm{d}x + c_1(y), </p> <p>  h_2 = \\int p(x,y)\\mathrm{d}y + c_2(x). </p> <p>Notice here that c_1 and c_2 are arbitrary functions of integration.  To evaluate these we differentiate again, for example taking the first of these we find</p> <p>  \\frac{\\mathrm{d}h_1}{\\mathrm{d}y}=\\frac{\\mathrm{d}}{\\mathrm{d}y}\\left(\\int q(x,y)\\mathrm{d}x \\right) + \\frac{\\mathrm{d}c_1}{\\mathrm{d}y} = p(x,y) </p> <p>where this last equality arises from the differential equation.  Rearranging this and solving we have</p> <p>  c_1(y) = \\int\\left( p(x,y)- \\frac{\\mathrm{d}}{\\mathrm{d}y}\\left(\\int q(x,y)\\mathrm{d}x \\right)\\right) \\mathrm{d}y. </p> <p>Similarly we may solve for  c_2(x) = \\int\\left( q(x,y)- \\frac{\\mathrm{d}}{\\mathrm{d}x}\\left(\\int p(x,y)\\mathrm{d}y \\right)\\right) \\mathrm{d}x. If h_1=h_2 then we have an exact differential equation, and h=h_1=h_2 given the integral of our ODE.</p>"},{"location":"en/Topics/Differential_equations/Assessing_Responses/#example-xdotyy40","title":"Example x\\dot{y}+y+4=0","text":"<p>As an example consider</p> <p>  x\\dot{y}+y+4=0. </p> <p>Then p=x and q=y+4.</p> <p>  c_1(y) = \\int\\left( p(x,y)- \\frac{\\mathrm{d}}{\\mathrm{d}y}\\left(\\int q(x,y)\\mathrm{d}x \\right)\\right) \\mathrm{d}y = \\int\\left( x- \\frac{\\mathrm{d}}{\\mathrm{d}y}\\left(\\int y+4\\mathrm{d}x \\right)\\right) \\mathrm{d}y </p> <p>  = \\int\\left( x- \\frac{\\mathrm{d}}{\\mathrm{d}y}\\left(xy+4x\\right)\\right) \\mathrm{d}y=0 </p> <p>And so</p> <p>  h_1 = \\int q(x,y)\\mathrm{d}x + c_1(y) = \\int y+4 \\mathrm{d}x = x(y+4)+c. </p> <p>Now,</p> <p>  c_2(x) = \\int\\left( q(x,y)- \\frac{\\mathrm{d}}{\\mathrm{d}x}\\left(\\int p(x,y)\\mathrm{d}y \\right)\\right) \\mathrm{d}x = \\int (y+4) - \\frac{\\mathrm{d}}{\\mathrm{d}x}\\left(\\int x\\mathrm{d}y \\right) \\mathrm{d}x  </p> <p>  = \\int (y+4) - y \\mathrm{d}x = 4x. </p> <p>And so,</p> <p>  h_2 = \\int p(x,y)\\mathrm{d}y + c_2(x) = \\int x \\mathrm{d}y +4x = xy+4x+c </p> <p>In both cases we obtain the same answer for h(x,y)=xy+4x.</p>"},{"location":"en/Topics/Differential_equations/Assessing_Responses/#maxima-code","title":"Maxima code","text":"<p>The following Maxima code implements this method, and provides further examples of how to manipulate ODEs.</p> <pre><code>/* Solving exact differential equations in Maxima */\n(kill(all),load(\"format\"))$\n\nODE:x*'diff(y,x)+y+4$\n\n/* Ensure we have an expression, not an equation */\nif op(ODE)=\"=\" then ODE:lhs(ODE)-rhs(ODE);\n\n/* This should write the ODE in the form\n   p*'diff(y,x)+q\n   which we can then sort out to get the coefficients*/\nODE:format(ODE,%poly('diff(y,x)))$\nODEc:coeffs(ODE,'diff(y,x));\nq:ODEc[2][1];\np:ODEc[3][1];\n\n/* Check our condition for an exact ODE */\nif fullratsimp(diff(p,x)-diff(q,y))=0 then print(\"EXACT\") else print(\"NOT EXACT\")$\n\n/* Next we need to solve\n   [diff(h,x)=q,diff(h,y)=p]\n   to find the integral of our ODE */\nh1:integrate(q,x);\nh2:integrate(p,y);\n\nH1:h1+integrate(p-diff(h1,y),y);\nH2:h2+integrate(q-diff(h2,x),x);\n/* Note, H1 and H2 should be the same! */\n\n/* Hence the solution is, in terms of y=...+c*/\nsolve(H1=c,y);\n</code></pre> <p>Further examples are     / Non-exact equations /     ODE:y=x*'diff(y,x);</p> <pre><code>/* Exact equations */\nODE:2*y*x*'diff(y,x)+y^2-2*x=0$\nODE:sin(x)*cosh(y)-'diff(y,x)*cos(x)*sinh(y)=0$\nODE:(3*x^2*cos(3*y)+2*y)*'diff(y,x)=-2*x*sin(3*y)$\nODE:x*'diff(y,x)+y+4$\n</code></pre>"},{"location":"en/Topics/Differential_equations/Notation/","title":"Differential Equations","text":""},{"location":"en/Topics/Differential_equations/Notation/#notation","title":"Notation","text":"<p>This page provides examples of how to represent ordinary differential equations (ODEs) in Maxima when writing STACK questions.</p>"},{"location":"en/Topics/Differential_equations/Notation/#representing-odes","title":"Representing ODEs","text":"<p>In a Maxima session we can represent an ODE as</p> <pre><code>ODE: x^2*'diff(y,x) + 3*y*x = sin(x)/x;\n</code></pre> <p>Notice the use of the <code>'</code> character in front of the <code>diff</code> function to prevent evaluation. Applied to a function call, such as <code>diff</code>, the single quote prevents evaluation of the function call, although the arguments of the function are still evaluated (if evaluation is not otherwise prevented). The result is the noun form of the function call.</p>"},{"location":"en/Topics/Differential_equations/Notation/#entering-des","title":"Entering DEs","text":"<p>The syntax to enter a derivative in Maxima is <code>diff(y,x,n)</code>.  Teachers need to use an apostrophe<code>'</code> character in front of the <code>diff</code> function to prevent evaluation in question variables (etc). E.g. to type in  you need to use <code>'diff(y,x,2)</code>.</p> <p>Students' answers always have noun forms added. If a student types in <code>diff(y,x)</code> then this is protected by a special function <code>noundiff(y,x)</code> (etc), and ends up being sent to answer test as <code>'diff(y,x,1)</code>. If a student types in (literally) <code>diff(y,x)+1 = 0</code> this will end up being sent to answer test as <code>'diff(y,x,1)+1 = 0</code>.</p> <p>The answer test <code>AlgEquiv</code> evaluates all nouns.   This has a (perhaps) unexpected side-effect that <code>noundiff(y,x)</code> will be equivalent to <code>0</code>, and <code>noundiff(y(x),x)</code> is not.  For this reason we have an alternative answer test <code>AlgEquivNouns</code> which does not evaluate all the nouns. The <code>ATEqualComAss</code> also evaluates its arguments but does not \"simplify\" them.  So, counter-intuitively perhaps, we currently do have <code>ATEqualComAss(diff(x^2,x), 2*x);</code> as true.</p> <p>Students might expect to enter expressions like  y' ,  \\dot{y}  or  y_x  (especially if you are using <code>derivabbrev:true</code>, see below).   The use by Maxima of the apostrophe which affects evaluation also has a side-effect that we can't accept <code>y'</code> as valid student input.  Input <code>y_x</code> is an atom.  Individual questions could interpret this as <code>'diff(y,x)</code> but there is no systematic mechanism for interpreting subscripts as derivatives.  Input <code>dy/dx</code> is the division of one atom <code>dy</code> by another <code>dx</code> and so will commute with other multiplication and division in the expression as normal.  There is no way to protect input <code>dy/dx</code> as  \\frac{\\mathrm{d}y}{\\mathrm{d}x}.  The only input which is interpreted by STACK as a derivative is Maxima's <code>diff</code> function, and students must type this as input.</p> <p>The expression <code>diff(y(x),x)</code> is not the same as <code>diff(y,x)</code>.  In Maxima <code>diff(y(x),x)</code> is not evaluated further.  Getting students to type <code>diff(y(x),x)</code> and not <code>diff(y,x)</code> will be a challenge.  Hence, if you want to condone the difference, it is probably best to evaluate the student's answer in the feedback variables as follows to ensure all occurrences of <code>y</code> become <code>y(x)</code>.</p> <pre><code>ans1:'diff(y(x),x)+1 = 0;\nansyx:subst(y,y(x),ans1);\n</code></pre> <p>Trying to substitute <code>y(x)</code> for <code>y</code> will throw an error.  Don't use the following, as if the student has used <code>y(x)</code> then it will become <code>y(x)(x)</code>!</p> <pre><code>ans1:'diff(y,x)+1 = 0;\nansyx:ev(ans1,y=y(x));\n</code></pre> <p>Further work is needed to better support partial derivatives (input, display and evaluation).</p>"},{"location":"en/Topics/Differential_equations/Notation/#displaying-odes","title":"Displaying ODEs","text":"<p>Maxima has two notations to display ODEs.</p> <p>If <code>derivabbrev:false</code> then<code>'diff(y,x)</code> is displayed in STACK as  \\frac{\\mathrm{d}y}{\\mathrm{d}x}.   Note this differs from Maxima's normal notation of  \\frac{\\mathrm{d}}{\\mathrm{d}x}y.</p> <p>If <code>derivabbrev:true</code> then <code>'diff(y,x)</code> is displayed in STACK and Maxima as  y_x .</p> <ul> <li>Extra brackets are sometimes produced around the differential.</li> <li>You must have <code>simp:true</code> otherwise the display routines will not work.</li> </ul>"},{"location":"en/Topics/Differential_equations/Notation/#next","title":"Next","text":"<ul> <li>Using and maniplulating differential equations in STACK</li> </ul>"},{"location":"en/Topics/Differential_equations/Notation/#see-also","title":"See also","text":"<p>Maxima reference topics </p>"},{"location":"en/Topics/Differential_equations/Question_Variables/","title":"Differential Equations","text":""},{"location":"en/Topics/Differential_equations/Question_Variables/#question-variables","title":"Question Variables","text":"<p>This page provides examples of how to manipulate ordinary differential equations (ODEs) in Maxima when writing STACK questions.</p>"},{"location":"en/Topics/Differential_equations/Question_Variables/#manipulating-odes-in-maxima","title":"Manipulating ODEs in Maxima","text":"<p>This can be solved with Maxima's <code>ode2</code> command and initial conditions specified.  Below is an example of Maxima's output.</p> <pre><code>(%i1) ODE: x^2*'diff(y,x) + 3*y*x = sin(x)/x;\n                      2 dy           sin(x)\n(%o1)                x  -- + 3 x y = ------\n                        dx             x\n(%i2) ode2(ODE,y,x);\n                             %c - cos(x)\n(%o2)                    y = -----------\n                                  3\n                                 x\n(%i3) ic1(%o2,x=%pi,y=0);\n                              cos(x) + 1\n(%o3)                   y = - ----------\n                                   3\n                                  x\n</code></pre> <p>Further examples and documentation are given in the Maxima manual</p> <p>Note that by default STACK changes the value of Maxima's <code>logabs</code> variable.  This changes the way  is integrated.  If you want the default behaviour of Maxima you will need to restore <code>logabs:false</code> in the question variables.</p>"},{"location":"en/Topics/Differential_equations/Question_Variables/#laplace-transforms","title":"Laplace Transforms","text":"<p>Constant coefficient ODEs can also be manipulated in STACK using Laplace Transforms. An example of a second-order constant coefficient differential equation is given below with initial conditions set and the result of the Laplace Transform is stored.</p> <pre><code>ode: 5*'diff(x(t),t,2)-4*'diff(x(t),t)+7*x(t)=0;\nsol: solve(laplace(ode,t,s), 'laplace(x(t), t, s));\nsol: rhs(sol[1]);\nsol: subst([x(0)=-1,diff(x(t), t)=0],sol);\n</code></pre> <p>The <code>laplace</code> command will Laplace Transform the ode (more information in maxima docs), but it will still be in terms of the Laplace Transform of <code>x(t)</code>, which is symbolic. The <code>solve</code> command then solves the algebraic equation for this symbolic Laplace Transformed function, and on the right-hand side of the equals sign, the desired answer is obtained using the <code>rhs</code> command. Lastly, the initial conditions need to be specified for <code>x(t)</code>. The Laplace Transform symbolically specifies values for <code>x(0)</code> and <code>x'(0)</code> and these can be replaced with the <code>subst</code> command as shown above.</p>"},{"location":"en/Topics/Differential_equations/Question_Variables/#randomly-generating-ode-problems","title":"Randomly generating ODE problems","text":"<p>When randomly generating questions we could easily generate an ODE which cannot be solved in closed form, so that in particular using ode2 may be problematic. It is much better when setting any kind of STACK question to start with the method and work backwards to generate the question. This ensures the question remains valid over a whole range of parameters. It also provides many intermediate steps which are useful for a worked solution.</p>"},{"location":"en/Topics/Differential_equations/Question_Variables/#Solve_and_ode2","title":"% characters from solve and ode2","text":"<p>Maxima functions such as <code>solve</code> and <code>ode2</code> add arbitrary constants, such as constants of integration.  In Maxima these are indicated adding constants which begin with percentage characters.  For example,</p> <pre><code>assume(x&gt;0);\neq1:x^2*'diff(y,x) + 3*y*x = sin(x)/x;\nsol:ode2(eq1,y,x);\n</code></pre> <p>results in</p> <pre><code>y = (%c-cos(x))/x^3;\n</code></pre> <p>Notice the <code>%c</code> in this example. We need a function to strip out the variables starting with <code>%</code>, especially as these are sometimes numbered and we want to use a definite letter, or sequence for the constants.</p> <p>The function <code>stack_strip_percent(ex,var)</code> replaces all variable names  starting with <code>%</code> with those in <code>var</code>. There are two ways to use this.</p> <ol> <li>if <code>var</code> is a list then take the variables in the list in order.</li> <li>if <code>var</code> is a variable name, then Maxima returns unevaluated list entries,</li> </ol> <p>For example</p> <pre><code>stack_strip_percent(y = (%c-cos(x))/x^3,k);\n</code></pre> <p>returns</p> <pre><code>y = (k[1]-cos(x))/x^3;\n</code></pre> <p>This is displayed in STACK using subscripts, which is natural. The unevaluated list method also does not need to know how many % signs appear in the expression. The other usage is to provide explicit names for each variable, but the list must be longer than the number of constants in <code>ex</code>, e.g.</p> <pre><code>stack_strip_percent(y = (%c-cos(x))/x^3,[c1,c2]);\n</code></pre> <p>which returns</p> <pre><code>y = (c1-cos(x))/x^3;\n</code></pre> <p>The following example question variables can be used within STACK.</p> <pre><code>assume(x&gt;0);\node : x^2*'diff(y,x) + 3*y*x = sin(x)/x;\nsol : stack_strip_percent(ode2(ode,y,x),[k]);\nta  : rhs(ev(sol,nouns));\n</code></pre> <p>Note, you may need to use the Option \"assume positive\" to get ODE to evaluate the integrals formally and hence \"solve correctly\".</p> <p>If you need to create a list of numbered variables use</p> <pre><code>vars0:stack_var_makelist(k, 5);\nvars1:rest(stack_var_makelist(k, 6));\n</code></pre>"},{"location":"en/Topics/Differential_equations/Question_Variables/#next","title":"Next","text":"<ul> <li>Assessing solutions to differeniial equations</li> </ul>"},{"location":"en/Topics/Linear_algebra/","title":"Setting linear algebra questions in STACK","text":"<p>Linear algebra, next to calculus, is one of the pillars of modern mathematics and an important application in STACK is supporting questions which test understanding of linear algebra.</p> <p>Core functionality.</p> <ol> <li>General matrix manipulations in Maxima.</li> <li>Core vector/matrix functions defined by STACK in the core code.</li> <li>Using vectors.</li> <li>Assessment of matrices with answer tests.</li> </ol> <p>Reference documentation for contributed libraries.</p> <ol> <li>Creating random matrices in contributed <code>rand_matrix.mac</code>.</li> <li>Matrix functions in contributed <code>matrix.mac</code>.</li> <li>Vector and vector space functions in contributed <code>vectorspaces.mac</code>.</li> <li>Vector geometry functions in contributed <code>vectorgeometry.mac</code>.</li> <li>Eigenvalue/vector functions in contributed <code>eigenlib.mac</code>.</li> <li>Matrix factorisations in contributed <code>matrixfactorizations.mac</code></li> </ol> <p>If using an earlier version of STACK than 4.9.0, 2. through 6. above require an extra inclusion (see the linear algebra page).</p>"},{"location":"en/Topics/Linear_algebra/#solving-systems-of-linear-equations","title":"Solving systems of linear equations","text":"<p>Using solve can throw errors, so use <code>linsolve</code> instead.  For example.</p> <pre><code>/* Decide if a vector is in W */\npoint_in_space(W, wx):= linsolve(flatten(args(W))-first(args(transpose(wx))), listofvars(W));\n</code></pre> <p>If the above is the empty list, there is no solution.  Otherwise a solution is returned.</p> <pre><code>/* Calculate the canonical form of a column space of a system. */\ncspace(ex):= block([M],\n  M: coefmatrix(flatten(args(ex)), listofvars(ex)),\n  ev(transpose(rref(transpose(M))), simp)\n);\n</code></pre>"},{"location":"en/Topics/Linear_algebra/Answer_tests/","title":"Answer tests","text":""},{"location":"en/Topics/Linear_algebra/Answer_tests/#matrices-and-answer-tests","title":"Matrices and answer tests","text":"<p>Some answer tests accept matrices as arguments. E.g. algebraic equivalence (<code>ATAlgEquiv</code>) will accept matrices, even of different sizes, and return feedback underlining which elements are different.  This is a rather blunt tool, since it is all or nothing.  And, it's often necessary to apply other answer tests to corresponding elements of matrices.</p> <ol> <li>Every answer test in STACK has a corresponding function in Maxima.  The Maxima function name of AlgEquiv is <code>ATAlgEquiv</code>, et.</li> <li>The Maxima code for every answer in STACK returns a list of four elements.  The second element is the result of the test.  See the documentation for details of the other elements.  For example <code>second(ATComAss(x+y,y+x))</code> is <code>true</code> because  up to commutativity etc (using <code>ATComAss</code>).</li> <li>Some answer tests take an optional agument, e.g. numerical accuracy.  to use <code>zip_with_matrix</code> we need to create an un-named (lambda) function of two arguments.  E.g. <code>lambda([ex1,ex2], ATNumAbsolute(ex1,ex2,0.01)</code> can be used to test corresponding matrix elements are within 0.01 of each other.</li> </ol> <p>Once you have a matrix <code>M</code> of boolean values, you could count the number which are false.</p> <pre><code>n:length(sublist(flatten(args(M)),lambda([ex],not(ex))));\n</code></pre> <p>Or you could locate the false elements and give specific feedback.</p>"},{"location":"en/Topics/Linear_algebra/Answer_tests/#example-1","title":"Example 1.","text":"<p>Here we test two matrices with elements with <code>ATEqualComAss</code>.  This returns a matrix <code>M</code> of boolean values.</p> <pre><code>M1:matrix([x*(x+1),sqrt(x^2)],[2/3,1/2]);\nM2:matrix([x^2+x,abs(x)],[0.666,0.5]);\nM:matrixmap(second,zip_with_matrix(ATEqualComAss, M1, M2));\n</code></pre>"},{"location":"en/Topics/Linear_algebra/Answer_tests/#example-2","title":"Example 2.","text":"<p>Here we test two matrices with elements with <code>ATNumAbsolute</code>, and argument 0.01.  This returns a matrix <code>M</code> of boolean values.</p> <pre><code>M1:matrix([3.1415,10.0]);\nM2:matrix([%pi,%pi^2]);\nM:matrixmap(second,zip_with_matrix(lambda([ex1,ex2], ATNumAbsolute(ex1,ex2,0.01)), M1, M2));\n</code></pre>"},{"location":"en/Topics/Linear_algebra/Eigen/","title":"Eigenvalue/vector functions","text":"<p>STACK has a contributed library for eigenvector/value functions.  To use this library you must load it into the question variables.</p> <ul> <li>To use the latest code from github: <code>stack_include_contrib(\"eigenlib.mac\");</code></li> <li>Loading this library automatically declares <code>stack_linear_algebra_declare(true);</code> to provide context. See the documentation on the core linear algebra for more information. </li> </ul> <p>This page contains reference documentation on functions in this library.</p>"},{"location":"en/Topics/Linear_algebra/Eigen/#predicates-for-eigenvector-eigenvalue-problems","title":"Predicates for eigenvector-eigenvalue problems","text":"<p><code>eigenlib.mac</code> provides two functions for checking whether a given vector or scalar is an eigenvector or eigenvalue respectively. </p> <ul> <li><code>eigenvectorp(v,M)</code> tests whether the vector <code>v</code> is an eigenvector of the matrix <code>M</code>. The zero vector is not considered an eigenvector. <code>v</code> can be a matrix, list or ntuple.</li> <li><code>eigenvectorp(v,M,L)</code> will run the above function, but specifically checks that <code>v</code> is an eigenvector that corresponds to the eigenvalue <code>L</code>.</li> <li><code>eigenvaluep(L,M)</code> tests whether <code>L</code> is an eigenvalue of <code>M</code>.</li> <li><code>eigenvaluep(L,M,v)</code> will run the above function, but specifically checks that <code>L</code> is the eigenvalue corresponding the eigenvector <code>v</code>. <code>v</code> can be a matrix, list or ntuple.</li> </ul> <p>There are some more helpful functions in the contributed vector spaces library such as <code>unit_vecp</code>, <code>lin_indp</code> and <code>subspace_equivp</code> to test whether a given vector is a unit vector, whether a given collection of vectors are linearly independent, and whether two given sets of vectors span the same subspace. These may be helpful when examining eigenspaces or orthogonal decomposition (among other topics). </p>"},{"location":"en/Topics/Linear_algebra/Eigen/#extracting-eigenvectors-and-eigenvalues","title":"Extracting eigenvectors and eigenvalues","text":"<p>Maxima provides the functions <code>eigenvectors</code> and <code>eigenvalues</code> to extract the eigenvectors and eigenvalues of a square matrix. </p> <ul> <li><code>eigenvalues(M)</code> will return a list of two elements. The first element is a list containing all of the eigenvalues of <code>M</code>. The second element is a list of the algebraic multiplicities of these eigenvalues (in order).</li> <li>For example, <code>eigenvalues(matrix([3,1,0],[0,5,0],[0,0,5]))</code> will return <code>[[3,5],[1,2]]</code> because the eigenvalue  has an algebraic multiplicity of 1 and the eigenvalue 5 has an algebraic multiplicity of 2.</li> <li><code>eigenvectors(M)</code> will also return a list of two elements. The first element is exactly the output of <code>eigenvalues(M)</code>. The second element is a list, where each element is a list containing the linearly independent eigenvectors corresponding to the eigenvalues from <code>eigenvalues(M)</code>. The eigenvectors are given as lists, not matrices.</li> <li>For example, <code>eigenvalues(matrix([3,1,0],[0,5,0],[0,0,5]))</code> will return <code>[[[3,5],[1,2]],[[[1,0,0]],[[1,2,0],[0,0,1]]]]</code>. The first sublist is the same as above. The second is a list with two entries; the former is <code>[[1,0,0]]</code> indicating that the eigenvalue 3 has exactly one eigenvector, <code>[1,0,0]</code>; the latter is <code>[[1,2,0],[0,0,1]]</code> indicating that the eigenvalue 5 has two linearly independent eigenvectors, <code>[1,2,0]</code> and <code>[0,0,1]</code>.</li> </ul> <p>These are useful for getting all relevant eigenvalue or eigenvector information, but they are a bit cumbersome to use if you only need a small piece of that information. <code>eigenlib.mac</code> provides some extra functions to help with this. </p> <ul> <li><code>get_eigenvalue(v,M)</code> will return the corresponding eigenvalue of eigenvector <code>v</code> for matrix <code>M</code>. If <code>v</code> is not an eigenvector of <code>M</code>, this function returns <code>false</code>.</li> <li><code>get_eigenvector(L,M)</code> will return a basis for the eigenspace of <code>M</code> corresponding to eigenvalue <code>L</code>. It will always return a list of linearly independent column vectors unless <code>L</code> is not an eigenvalue of <code>M</code>, in which case it will return the empty list <code>[]</code>.</li> <li><code>get_eigenvector(L,M,true)</code> indicates that the basis should be orthonormalised. This is likely to produce some ugly vectors if used on a random matrix and you are not using floats.</li> <li><code>alg_mult(M,L)</code> gives the algebraic multiplicity of eigenvalue <code>L</code> for matrix <code>M</code>. If <code>L</code> is not an eigenvalue of <code>M</code>, returns 0.</li> <li><code>geo_mult(M,L)</code> gives the geometric multiplicity of eigenvalue <code>L</code> for matrix <code>M</code>. If <code>L</code> is not an eigenvalue of <code>M</code>, returns 0.</li> </ul>"},{"location":"en/Topics/Linear_algebra/Eigen/#diagonalisation","title":"Diagonalisation","text":"<p>The contributed <code>matrixfactorizations.mac</code> file contains functions for diagonalising matrices or computing Jordan normal forms. Check the documentation for more details. </p>"},{"location":"en/Topics/Linear_algebra/Eigen/#miscellaneous-useful-functions","title":"Miscellaneous useful functions","text":"<p>The contributed function <code>Rayleigh(M,v)</code> computes the Rayleigh quotient of a matrix <code>M</code> and <code>v</code>: \\displaystyle \\frac{\\underline{\\mathbf{v}}^{*}\\,M\\,\\underline{\\mathbf{v}}}{\\underline{\\mathbf{v}}^{*}\\,\\underline{\\mathbf{v}}}. This is an eigenvalue estimate for approximate eigenvector <code>v</code> and is sometimes used in power method calculations.</p>"},{"location":"en/Topics/Linear_algebra/Eigen/#some-suggestions-for-writing-eigenvector-eigenvalue-questions","title":"Some suggestions for writing eigenvector-eigenvalue questions","text":"<p>These functions provide teachers with the ability to work with eigenvectors and eigenvalues of arbitrary matrices, but this is perhaps not best practice when expecting students to work by hand. STACK also provides a library of matrix randomisation functions that can help to generate sensible problems. In particular, teachers may find <code>rand_diag</code> and <code>rand_integer_invertible</code> useful to generate P and D such that A = PDP^{-1} has reasonably well-controlled eigenvectors and eigenvalues. <code>rand_diagonalizable</code> and <code>rand_defective</code> may also be good options. As usual, check your deployed variants carefully! </p> <p>If you like to keep numbers simple to work with, consider using the STACK function <code>scale_nicely</code> to remove fractions or common factors from eigenvector elements. </p>"},{"location":"en/Topics/Linear_algebra/Linear_algebra_core/","title":"Vector/matrix functions defined by STACK in the core code","text":"<p>STACK extends Maxima's functionality with a number of very useful functions for manipulating matrices. The functions documented here are loaded by default and are available in every question. </p> <p>A key feature are convenience functions <code>c</code> and <code>r</code> which convert their arguments into column and row matrices respectively.</p> <ul> <li><code>stack_linear_algebra_declare(true)</code> Provides a linear algebra context, including TeX support for <code>c</code> and <code>r</code>.</li> <li><code>vec_convert(ex)</code> Converts <code>c</code> and <code>r</code> convenience functions into matrices.</li> <li><code>un_vec_convert(ex)</code> Given a row or column vector, convert it to <code>c()</code> or <code>r()</code> form.</li> </ul> <p>For more detail, see the page on Vectors.</p> <p>In STACK 4.9.0 this functionality was moved into the core of STACK.  For earlier versions of STACK you can use the latest code from github: <code>stack_include_contrib(\"linearalgebra_contrib.mac\");</code></p>"},{"location":"en/Topics/Linear_algebra/Linear_algebra_core/#predicate-functions-for-vectors","title":"Predicate functions for vectors","text":"<ul> <li><code>vec_convertedp(ex)</code> A predicate to determine whether an expression has been converted to matrix form.</li> <li><code>col_vecp(ex)</code> Predicate for determining whether a given object is an  matrix (a column vector). Note: does not consider <code>c</code> a column vector. Use <code>vec_convert</code> before <code>col_vecp</code>.</li> <li><code>row_vecp(ex)</code> Predicate for determining whether a given object is a 1\\times N matrix (a row vector). Note: does not consider <code>r</code> a row vector. Use <code>vec_convert</code> before <code>row_vecp</code>.</li> <li><code>vectorp(ex):= col_vecp(ex) or row_vecp(ex);</code></li> </ul>"},{"location":"en/Topics/Linear_algebra/Linear_algebra_core/#predicate-functions-for-matrices","title":"Predicate functions for matrices","text":"<ul> <li><code>squarep(M)</code> Is a given object a square matrix?</li> <li><code>diagp(M)</code> Predicate to determine whether a matrix is diagonal. <code>M</code> need not be square. </li> </ul>"},{"location":"en/Topics/Linear_algebra/Linear_algebra_core/#functions-to-manipulate-matrices-and-solve-systems-of-linear-equations","title":"Functions to manipulate matrices and solve systems of linear equations","text":"<p>Note, the Maxima functions <code>addrow</code> and <code>addcol</code> appends rows/columns onto the matrix.  For row operations use</p> <ul> <li><code>rowswap(M,i,j)</code> Swaps rows <code>i</code> and <code>j</code>.</li> <li><code>rowadd(M,i,j,k)</code> Returns matrix <code>M</code> where <code>M[i]: M[i] + k * M[j]</code>.</li> <li><code>rowmul(M,i,k)</code> Returns matrix <code>M</code> where <code>M[i]: k * M[i]</code>.</li> <li><code>rref(M)</code> Returns the reduced row echelon form of <code>M</code>.</li> </ul> <p>For more functions that can be used to perform matrix operations, see the documentation for the contributed matrices library.</p> <p><code>linsolve(eqns,vars)</code> is a Maxima function that will solve a list of linear equations <code>eqns</code> for variables 'vars'. It returns a list of equations in the form <code>var = solution</code> and will utilise free variables if needed. If expressions are given instead of equations, Maxima will assume that the expression is equal to zero.</p> <p>Some examples are: * <code>linsolve([x+y,x-y=2],[x,y])</code> will produce <code>[x = 1, y = -1]</code> * <code>linsolve([x+y,2*y+2*x=0],[x,y])</code> will produce <code>[x = -%r1,y = %r1]</code> * <code>linsolve([x+y,x+y=1],[x,y])</code> will produce <code>[]</code></p> <p>You can remove any percent variables using <code>stack_strip_percent</code>, documented in more detail in the section on differential equations</p> <p><code>mat_solve(A,b,[lstsq])</code> is a STACK-provided function that is mostly just a wrapper for <code>linsolve</code> that expects matrices instead of lists of equations.   * Input: <code>A</code> An m\\times n matrix  * Input: <code>b</code> A m\\times 1 matrix (or a list with m entries)  * Optional input: <code>lstsq</code> if given true then a least squares solution will be obtained. If <code>false</code> or omitted, only exact solutions obtained.  * Output: The general solution to Ax = b. If no solution exists and lstsq is not true, then matrix([]) is returned.</p> <p>Some examples are: * <code>mat_solve(matrix([1,2],[3,4]),[3,7])</code> returns the unique solution <code>matrix([1],[1])</code> * <code>mat_solve(matrix([1,-1],[1,-1]),[0,0])</code> returns a general solution <code>matrix([%r1],[%r1])</code> * <code>mat_solve(matrix([1,-1],[1,-1]),[1,0])</code> returns <code>matrix([])</code>, indicating that there was no solution. * <code>mat_solve(matrix([1,-1],[1,-1]),[1,0],true)</code> returns <code>matrix([(2*%r1+1)/2],[%r1])</code>, because a least squares solution was requested.</p> <p>If the unique minimal least squares solution to A\\mathbf{x} = \\mathbf{b} is desired, then \\tilde{\\mathbf{x}} = A^{+}\\mathbf{b} can be computed using <code>pinv(A) . b</code>. <code>pinv</code> calls the <code>moore_penrose_pseudoinverse</code> function</p>"},{"location":"en/Topics/Linear_algebra/Linear_algebra_core/#operations-for-vectors","title":"Operations for Vectors","text":"<p>STACK provides the <code>scale_nicely(v)</code> function. Given a vector or list, it will return the smallest possible parallel vector or list with integer entries. It will leave zero vectors untouched, and vectors that contain all negative values will be negated. This is useful in a number of situations, including: * Eigenvector problems where the length of the vector is not important information and keeping the numbers small makes it easier for students to work by hand * Simplifying expressions for lines or planes with coefficients like <code>-2*x - 2*y = -4</code> to <code>x + y = 2</code> * Scaling a whole list of fractions by their smallest common denominator</p>"},{"location":"en/Topics/Linear_algebra/Linear_algebra_core/#vector-cross-product","title":"Vector cross product","text":"<p>The wedge product operator is denoted by the tilde <code>~</code>.  This is the <code>itensor</code> package.  This package is not normally loaded by STACK, and in any case the package takes lists and not matrices.  For convenience, the following function has been added which requires 3\\times 1 matrices.</p> <p><code>crossproduct(a,b)</code> returns the vector cross product of <code>a</code> and <code>b</code>.</p> <p>Another advantage of this function is the ability to return an un-simplified version with <code>simp:false</code>.</p>"},{"location":"en/Topics/Linear_algebra/Linear_algebra_core/#utility-functions-to-convert-objects-into-standard-forms","title":"Utility functions to convert objects into standard forms","text":"<p>Several contrib libraries rely on either a list of lists or a matrix as a \"canonical form\" when analysing vector spaces etc. There are several functions included in core STACK to allow for these transformations between forms. For more details see linearalgebra_core.mac</p> <ul> <li><code>matrix_to_cols(M)</code> Takes a matrix and returns a list of its column vectors.</li> <li><code>make_list_of_lists(ex)</code> Takes a collection (a list, set, ntuple, span, matrix) of vectors (as lists, matrices, sets, ntuples, <code>c</code> or <code>r</code>) and returns a list of lists</li> <li>If given a matrix, it returns a list of its column vectors, which are given as lists.</li> <li><code>convert_to_colvec(ex)</code> Tries to convert a given object, e.g. list, matrix, <code>c</code> or <code>r</code>, ntuples, etc. to a column vector. Returns <code>matrix([null])</code> if input is invalid.</li> <li><code>cols_to_matrix(L)</code> Tries to create a matrix with a given list of columns. The columns can be a variety of different objects determined by <code>convert_to_colvec</code>. Returns <code>matrix([null])</code> if input is invalid.</li> <li><code>cols_to_cols(L)</code> Tries to convert a collection of potential columns to a list of Maxima matrices. Returns <code>[]</code> if input is invalid.</li> </ul>"},{"location":"en/Topics/Linear_algebra/Matrix_factorisation/","title":"Matrix factorisation functions","text":"<p>STACK has a contributed library for matrix factorisation functions.  To use this library you must load it into the question variables.</p> <ul> <li>To use the latest code from github: <code>stack_include_contrib(\"matrixfactorizations.mac\");</code></li> <li>Loading this library automatically declares <code>stack_linear_algebra_declare(true);</code> to provide context.</li> </ul> <p>This page contains reference documentation on functions in this library.</p>"},{"location":"en/Topics/Linear_algebra/Matrix_factorisation/#some-comments-on-question-design","title":"Some comments on question design","text":"<p>This package provides functions that find factorisations of arbitrary matrices. In practical applications, these sorts of computations are performed with floating point operations and utilise highly optimised algorithms. Firstly, <code>matrixfactorizations.mac</code> makes no claims to optimisation or efficiency. On matrices much bigger than 4\u00d74, you might notice significant slowdowns when using some of these functions. Secondly, if you are using STACK to assess numerical linear algebra techniques, then this author suggests you might look elsewhere, such as to CodeRunner.</p> <p>However, toy problems are a very useful way to get students engaged with basic concepts of linear algebra, and so it still important to provide support for things like matrix factorisations. For small matrices (that is, matrices that one can tackle when working by hand), these functions work nicely. </p> <p>It is still worth being careful when generating toy problems, though. Running the code <code>SVD(matrix([1,2],[3,4]))</code> will correctly give you two orthogonal and one diagonal matrix, but it is not nice to find these by hand. It is often sensible to begin randomising a question by generating the answer and working back to create the question. In this regime, these factorisation functions are mostly useful for checking answers, or for generating answers when using matrices that are already known to be \"nice\". </p> <p>The <code>rand_matrix.mac</code> library has some functions that might be useful for generating sensible matrices. </p>"},{"location":"en/Topics/Linear_algebra/Matrix_factorisation/#diagonalisation","title":"Diagonalisation","text":"<p>The Maxima package <code>diag</code> (included in STACK by default) provides some useful functions for diagonalisation of matrices and functions of matrices. <code>matrixfactorizations.mac</code> utilises these to create some easy-to-use factorisation functions.</p> <ul> <li><code>[P, D]: diagonalize(M)</code> will construct an invertible matrix <code>P</code> and diagonal matrix <code>D</code> such that <code>M</code> is equal to <code>P . D . P^^-1</code>.</li> <li><code>diagonalize(M)</code> explicitly returns a list containing these two matrices.</li> <li>If <code>M</code> is a symmetric matrix, then an orthogonal <code>P</code> will be chosen.</li> <li>If <code>M</code> is defective (not diagonalisable) then an empty list <code>[]</code> is returned instead.</li> <li><code>[P, J]: get_Jordan_form(M)</code> will construct an invertible matrix <code>P</code> and \"almost diagonal\" matrix <code>J</code> in Jordan normal form such that <code>M</code> is equal to <code>P . J . P^^-1</code>.</li> <li>If <code>M</code> is diagonalisable, this is equivalent to <code>diagonalize(M)</code>.</li> </ul> <p>In particular, the <code>rand_diag</code>, <code>rand_integer_invertible</code>, <code>rand_diagonalizable</code> and <code>rand_defective</code> functions in <code>rand_matrix.mac</code> might be useful for generating these problems. </p>"},{"location":"en/Topics/Linear_algebra/Matrix_factorisation/#gaussian-elimination-and-plu-decomposition","title":"Gaussian Elimination and PLU Decomposition","text":"<p>The Maxima library <code>linearalgebra.mac</code> provides many useful functions, including <code>lu_factor</code> and <code>get_lu_factors</code>.  The former will compute the  decomposition of a square matrix and return a list of which the first element is a packed LU decomposition and the second is a permutation. The latter converts the output of the former into the list <code>[P, L, U]</code> where <code>P</code> is a permutation matrix, <code>L</code> is lower triangular, <code>U</code> is upper triangular, and <code>P . L . U</code> is equal to the original matrix. It is often convenient to run something like: </p> <pre><code>[P, L, U]: get_lu_factors(lu_factor(matrix([1,2,3],[2,4,6],[3,6,9])))\n</code></pre> <p>Be careful with this function. The above example (at time of writing) generates an incorrect <code>U</code> matrix (with 9 in row 2, column 3) such that <code>P . L . U</code> is no longer equal to the original matrix. </p> <p>For other basic row and column operations, Maxima provides several useful functions, and STACK's core provides more. See the documentation on core linear algebra functions for more information. The contributed library <code>matrix.mac</code> provides even more functions. </p> <p>In particular, the <code>rand_diag</code>, <code>rand_triu</code>, <code>rand_tril</code> and <code>rand_perm_matrix</code> functions in <code>rand_matrix.mac</code> might be useful for generating these problems. </p>"},{"location":"en/Topics/Linear_algebra/Matrix_factorisation/#gram-schmidt-orthogonalisation-and-qr-factorisation","title":"Gram-Schmidt Orthogonalisation and QR Factorisation","text":"<p>Maxima provides the function <code>gramschmidt</code> to perform Gram-Schmidt orthogonalisation on either a matrix or a list. Notably, if given a matrix, the function will orthogonalise the rows rather than the columns of the matrix. Optionally, a non-standard inner product can be provided as a second argument, which allows for use on function spaces. </p> <ul> <li><code>gramschmidt(matrix([1,2,3],[4,5,6],[7,8,9]))</code> produces <code>[[1,2,3],[12/7,3/7,\u22126/7],[0,0,0]]</code></li> <li><code>gramschmidt([1,x,x^2],lambda([f,g],int(f*g,x,0,1)))</code> produces <code>[1,(2*x-1)/2,(6*x^2-6*x+1)/6]</code></li> </ul> <p><code>matrixfactorizations.mac</code> also provides <code>QR(M)</code> to perform QR factorisation. The provided matrix must have full column rank or the function will return <code>[]</code>. Otherwise it will return <code>[Q, R]</code> where <code>Q</code> has orthonormal columns that span the column space of <code>M</code>, <code>R</code> is upper triangular, and <code>Q . R</code> is equal to <code>M</code>. </p> <p>In particular, the <code>rand_orthcols</code> and <code>rand_triu</code> functions in <code>rand_matrix.mac</code> might be useful for generating these problems. </p>"},{"location":"en/Topics/Linear_algebra/Matrix_factorisation/#singular-value-decomposition","title":"Singular Value Decomposition","text":"<p><code>matrixfactorizations.mac</code> provides two SVD functions: </p> <ul> <li><code>[U, S, VT]: SVD_red(M)</code> will give three matrices such that <code>U . S . VT</code> is equal to <code>M</code>, <code>U</code> has orthonormal columns, <code>VT</code> has orthonormal rows, and <code>S</code> is non-negative, invertible and diagonal. This is a reduced SVD.</li> <li><code>[U, S, VT]: SVD(M)</code> will perform a full SVD, where <code>U</code> and <code>VT</code> are now orthogonal matrices and <code>S</code> is non-negative and diagonal, but not necessarily invertible (or even square).</li> </ul> <p>In particular, the <code>rand_orth</code> and <code>rand_diag</code> functions in <code>rand_matrix.mac</code> might be useful for generating these problems. </p>"},{"location":"en/Topics/Linear_algebra/Matrix_library/","title":"Matrix manipulation and matrix predicate functions for STACK","text":"<p>STACK has a contributed library for matrix manipulation and matrix predicate functions for STACK.  To use this library you must load it into the question variables.</p> <ul> <li>To use the latest code from github: <code>stack_include_contrib(\"matrix.mac\");</code></li> <li>Loading this library automatically declares <code>stack_linear_algebra_declare(true);</code> to provide context.</li> </ul> <p>This page contains reference documentation on functions in this library.</p>"},{"location":"en/Topics/Linear_algebra/Matrix_library/#working-with-matrices","title":"Working with matrices","text":"<p>You can find more information on how Maxima handles matrices in the Matrix section of the documentation. There is more discussion in the Vectors and Linear Algebra pages with more of a focus on writing questions or dealing with student input.</p> <p>The <code>matrix.mac</code> contributed library adds even more functions to help manipulate matrices. </p>"},{"location":"en/Topics/Linear_algebra/Matrix_library/#row-and-column-operations","title":"Row and column operations","text":"<p>The Maxima library <code>linearalgebra</code> (loaded by default in STACK) provides the <code>rowop</code>, <code>rowswap</code>, <code>columnop</code> and <code>columnswap</code> functions, and STACK adds <code>rowadd</code> and <code>rowmul</code>. These are described in the matrix page. <code>matrix.mac</code> introduces <code>rowscale</code> and <code>columnscale</code>. When <code>simp:true</code>, <code>rowscale</code> is identical to <code>rowmul</code>, but <code>rowscale</code> also works when <code>simp:false</code>, which could be useful for making model answers. </p> <ul> <li><code>(simp:false, rowscale(matrix([1,2,3],[4,5,6],[7,8,9]),2,100))</code> will return <code>matrix([1,2,3],[100*4,100*5,100*6],[7,8,9])</code></li> </ul>"},{"location":"en/Topics/Linear_algebra/Matrix_library/#changing-the-entries-of-a-matrix","title":"Changing the entries of a matrix","text":"<p>Maxima provides the <code>setelmx</code> function to change an element of a matrix and return the adjusted matrix. This is described in the matrix page. <code>matrix.mac</code> provides a set of complementary functions to replace multiple entries at once.</p> <ul> <li><code>setrowmx(r,i,M)</code> will replace row <code>i</code> of matrix <code>M</code> with <code>r</code> and return the resulting matrix. <code>r</code> can be a matrix, a list, or a single variable/number. In the latter case, <code>r</code> will populate every entry of the designated row.</li> <li><code>M[i]: r</code> will do the same thing, but returns the row <code>r</code> instead of the matrix. Also, <code>r</code> must be a literal list in this case.</li> <li>Unlike <code>setelmx</code>, this does not change the original matrix. Users may wish to use code such as <code>M: setrowmx(r,i,M)</code> to achieve this. </li> <li><code>setcolmx(c,i,M)</code> does the equivalent thing for columns</li> <li>There is no way to set the values of a column directly like for rows. Users may prefer to take the transpose of the matrix, adjust the row, and then transpose the result.</li> <li><code>setdiagmx(L,M,k)</code> will replace the diagonal of matrix <code>M</code> with the list or number <code>L</code>. If <code>L</code> is a list, the function will do its best to insert <code>L</code> appropriately. i.e. if <code>L</code> is too long, it will ignore overhanging entries, and if <code>L</code> is too short it will leave remaining entries untouched. <code>k</code> indicates which diagonal to replace, where the main diagonal is <code>k=0</code>, the immediate superdiagonal is <code>k=1</code> and immediate subdiagonal is <code>k=-1</code>. If <code>k</code> is omitted, the main diagonal is assumed. Some examples:</li> <li><code>setdiagmx(1,zeromatrix(2,3))</code> will return <code>matrix([1,0,0],[0,1,0])</code></li> <li><code>setdiagmx(1,zeromatrix(2,3),1)</code> will return <code>matrix([0,1,0],[0,0,1])</code></li> <li><code>setdiagmx([1,2,3,4,5],ident(3),-1)</code> will return <code>matrix([1,0,0],[1,1,0],[0,2,1])</code></li> </ul> <p><code>matrix.mac</code> also provides some functions to shape a given matrix.</p> <ul> <li><code>triu(M)</code> will create a matrix that is the same as <code>M</code> with all entries below the main diagonal set to zero. This does not edit the original matrix.</li> <li><code>tril(M)</code> will create a matrix that is the same as <code>M</code> with all entries above the main diagonal set to zero. This does not edit the original matrix.</li> <li><code>diagonal(M)</code> will create a matrix that is the same as <code>M</code> with all off-diagonal entries set to zero. This does not edit the original matrix.</li> </ul> <p>These functions could be useful for setting  decomposition questions. </p> <ul> <li><code>diag_entries(M)</code> will extract the elements on the diagonal of <code>M</code> and return them as a list.</li> <li><code>diagmatrix_like(L,m,n)</code> will create an m\\times n diagonal matrix with list <code>L</code> as the diagonal entries. The list <code>L</code> behaves much like the list <code>L</code> in <code>setdiagmx</code> above, except it must be a list.</li> </ul>"},{"location":"en/Topics/Linear_algebra/Matrix_library/#predicate-functions-for-matrices","title":"Predicate functions for matrices","text":"<ul> <li><code>triup(M)</code> tests whether <code>M</code> is an upper triangular matrix. That is: is every below-diagonal entry of <code>M</code> exactly equal to 0?</li> <li><code>trilp(M)</code> tests whether <code>M</code> is a lower triangular matrix. That is: is every above-diagonal entry of <code>M</code> exactly equal to 0?</li> <li>Core STACK provides <code>diagp</code> to check whether <code>M</code> is diagonal.</li> </ul> <p>Note that all of these predicates are checking whether the relevant entries are exactly equal to zero. That produces the following behaviour:</p> <ul> <li><code>(simp: false, trilp(matrix([1,1-1],[2,3])))</code> returns <code>false</code></li> <li><code>(simp: true, trilp(matrix([1,1-1],[2,3])))</code> returns <code>true</code></li> </ul> <p>This is intentional. After all, it is slightly ambiguous whether the matrix {\\left[\\begin{array}{cc} 1 &amp; 1-1 \\\\ 2 &amp; 3 \\end{array}\\right]} is lower triangular, and this ambiguity gets worse with more complicated expressions than simply <code>1-1</code>. This allows teachers to check whether students have simplified their answers.</p> <p><code>REFp(M)</code> tests whether a given matrix is in row echelon form. There is some disagreement about exactly what constitutes row echelon form. For clarity, <code>REFp</code> tests the following properties: </p> <ul> <li>Do all non-zero rows appear above any zero rows (that is, have all the redundant rows been moved to the bottom?)</li> <li>Does the pivot in each row appear strictly to the right of the pivot in the above row?</li> <li><code>REFp</code> does not check whether the pivots are equal to 1 by default, but <code>REFp(M, true)</code> will additionally require this property.</li> </ul> <p>There is no <code>RREFp</code> function because this is unique for each matrix. Users can use <code>is(M = rref(M))</code> to test this. </p> <p>Note: question authors may like to pair <code>REFp</code> with <code>row_equivp</code> from the <code>vectorspaces.mac</code> contributed library when writing questions on row reduction. Alternatively, <code>REFp(ans1) and is(rref(ans1) = rref(ta))</code> would be sufficient. </p> <ul> <li><code>symp(M)</code> tests whether <code>M</code> is a symmetric matrix. That is, is <code>M</code> a square matrix such that <code>transpose(M)</code> is equal to <code>M</code>?</li> <li><code>symmetricp(M,n)</code> can check whether the n\\times n submatrix of <code>M</code> is symmetric.</li> <li><code>invertiblep(M)</code> tests whether <code>M</code> is an invertible matrix. </li> <li><code>diagonalizablep(M)</code> tests whether <code>M</code> is a diagonalisable matrix. That is, is <code>M</code> an n\\times n matrix with n linearly independent eigenvectors?</li> <li><code>orthogonal_columnsp(M)</code> tests whether the columns of <code>M</code> are orthogonal to each other. That is, is <code>transpose(M) . M</code> a diagonal matrix?</li> <li><code>orthonormal_columnsp(M)</code> tests whether the columns of <code>M</code> form an orthonormal set. That is, are the columns all orthogonal to each other, and do the columns all have a Euclidean length of 1? Or: is <code>transpose(M) . M</code> the identity matrix?</li> <li><code>orth_matrixp(M)</code> tests whether <code>M</code> is an orthogonal matrix. That is, are <code>transpose(M) . M</code> and <code>M . transpose(M)</code> both equal to the identity matrix?</li> </ul> <p>The last three predicates above will all accept an optional argument, <code>sp</code>, that defines a scalar product. This can either be a bilinear function (takes two vectors and returns a scalar), or a symmetric positive definite matrix. If given, the checks for orthogonality and length will utilise this scalar product instead of the standard inner product (dot product). </p>"},{"location":"en/Topics/Linear_algebra/Matrix_library/#functions-for-displaying-matrices-and-systems-of-equations","title":"Functions for displaying matrices and systems of equations","text":""},{"location":"en/Topics/Linear_algebra/Matrix_library/#augmented-matrices","title":"Augmented matrices","text":"<p>It is sometimes convenient to be able to display an augmented matrix. <code>matrix.mac</code> adds some limited support for this. </p> <p>Perhaps you have a question in which students are asked to solve the matrix equation A\\underline{\\mathbf{x}} = \\underline{\\mathbf{b}} using Gaussian elimination and you wanted to display this problem as an augmented matrix. Then, with matrix <code>A</code> and right hand side vector (really a matrix) <code>b</code> already defined, you could use <code>aug(addcol(A,b))</code> to display</p> <p> {\\left[\\begin{array}{cc} 1 &amp; 2 \\\\ 4 &amp; 5 \\end{array}\\right|\\left.\\begin{array}{c} 3 \\\\ 6 \\end{array}\\right]} </p> <p>Really what is happening here is that <code>aug</code> is converting a matrix with concatenated columns <code>A</code> and <code>b</code> to an <code>aug_matrix</code>, which then displays as a matrix with its final column separated by a vertical bar. <code>aug_matrix</code> is an inert function that exists only in this library for display purposes. You can save this to a variable, perhaps <code>Ab</code>, but Maxima doesn't know that this is a matrix at all and so matrix operations won't work on it. To turn it back into a matrix, you can use <code>de_aug(Ab)</code>. </p>"},{"location":"en/Topics/Linear_algebra/Matrix_library/#systems-of-equations","title":"Systems of equations","text":"<p>Sometimes it is nice to have a system of equations with all the variables and coefficients vertically aligned appropriately whilst still allowing for randomisation. <code>matrix.mac</code> provides some support for this. </p> <p><code>disp_eqns(eqns, vars)</code> will display the system of linear equations <code>eqns</code> with variables <code>vars</code> (in order!) with everything vertically aligned. It will omit variables with a coefficient of 0, omit unitary coefficients, use negative signs appropriately, and can handle parameters. An example is probably the easiest way to show this. </p> <pre><code>`disp_eqns([2*x+y-z+(-3)*w = 7,-x-2*y+(-7)*w = -1,3*z = 0,x+w = 0,0 = 0],[x,y,z,w])`\n</code></pre> <p>  \\begin{array} {rcrcrcrcr}2x&amp; + &amp; y&amp; - &amp; z&amp; - &amp; 3w&amp; = &amp;7\\\\-x&amp; - &amp; 2y&amp; &amp; &amp; - &amp; 7w&amp; = &amp;-1\\\\&amp; &amp; &amp;  &amp; 3z&amp; &amp; &amp; = &amp;0\\\\x&amp; &amp; &amp; &amp; &amp; + &amp; w&amp; = &amp;0\\\\&amp; &amp; &amp; &amp; &amp; &amp; 0&amp; = &amp;0\\end{array}  </p> <p>The function <code>mat_disp_eqns(A,b,vars)</code> will produce the same output using coefficient matrix <code>A</code>, right-hand side vector <code>b</code>, and list of variables <code>vars</code>. The below produces the same output as the above. </p> <pre><code>`mat_disp_eqns(matrix([2,1,-1,-3],[-1,-2,0,-7],[0,0,3,0],[1,0,0,1],[0,0,0,0]),matrix([7],[-1],[0],[0],[0]),[x,y,z,w])`\n</code></pre> <p>Both functions also work with variables. For example:</p> <pre><code>`mat_disp_eqns(matrix([-2, k-1, -1],[0, 2*k+2, 0], [-1, k, -2]),matrix([k-1],[1],[-1]),[x,y,z])`\n</code></pre> <p>  \\begin{array} {rcrcrcr}-2x&amp; + &amp; \\left(k-1\\right)y&amp; - &amp; z&amp; = &amp;k-1\\\\&amp; &amp; \\left(2\\, k+2\\right)y&amp; &amp; &amp; = &amp;1\\\\-x&amp; + &amp; ky&amp; - &amp; 2z&amp; = &amp;-1\\end{array}  </p>"},{"location":"en/Topics/Linear_algebra/Random_Matrices/","title":"Random Matrices","text":"<p>The paper Setting linear algebra problems by John Steele (2003) provides interesting mathematical background.</p> <p>STACK has a contributed library for creating structured random matrices.  The code is online in the contributed library.  To use this library you must load it into the question variables.</p> <ul> <li>To use the latest code from github: <code>stack_include_contrib(\"rand_matrix.mac\");</code></li> </ul>"},{"location":"en/Topics/Linear_algebra/Random_Matrices/#structured-random-matrices","title":"Structured Random Matrices","text":"<p><code>rand_matrix.mac</code> includes a set of functions that will generate random matrices of a certain size and shape.</p> <ul> <li><code>rand_matrix(m, n, k)</code> will generate an  matrix with entries chosen from integers between -k and k (inclusive).</li> <li><code>rand_diag(m, n, k)</code> will generate an m \\times n diagonal matrix with diagonal entries chosen from integers between -k and k (inclusive). All off-diagonal entries are set to zero.</li> <li><code>rand_triu(m, n, k)</code> will generate an m \\times n upper triangular matrix with entries chosen from -k to k (inclusive). All entries below the diagonal are set to zero.</li> <li><code>rand_tril(m, n, k)</code> will generate an m \\times n lower triangular matrix with entries chosen from -k to k (inclusive). All entries above the diagonal are set to zero.</li> </ul> <p>Notes.</p> <ol> <li>You may omit the third argument, <code>k</code>, and STACK will assume k = 1.</li> <li> 0 may appear as a matrix entry in any of the above functions, so you cannot guarantee properties like invertibility even with <code>rand_diag</code>. </li> <li>For non-negative entries apply <code>abs</code>, e.g. use <code>abs(rand_matrix(m, n, k))</code>.</li> </ol> <p>The above functions have <code>_list</code> and <code>_list_no_replacement</code> varieties. </p> <ul> <li><code>rand_matrix_list(m, n, L)</code> will generate an m \\times n matrix with entries selected from provided list <code>L</code>. Items in <code>L</code> may appear more than once in the resulting matrix.</li> <li><code>rand_matrix_list_no_replacement(m, n, L)</code> will generate an m \\times n matrix with entries selected from provided list <code>L</code>. Items in <code>L</code> will not appear more than once. If <code>L</code> is too short to fill the resulting matrix, <code>matrix([null])</code> is returned instead.</li> </ul> <p>You can also use <code>rand_diag_list</code>, <code>rand_triu_list</code>, <code>rand_tril_list</code>, <code>rand_diag_list_no_replacement</code>, <code>rand_triu_list_no_replacement</code> and <code>rand_tril_list_no_replacement</code> as expected. </p>"},{"location":"en/Topics/Linear_algebra/Random_Matrices/#random-matrices-with-certain-properties","title":"Random Matrices with Certain Properties","text":"<p><code>rand_matrix.mac</code> also includes functions for matrices with useful properties. e.g. <code>rand_invertible(n)</code> will generate an invertible n \\times n matrix.</p> <p>In many of these functions you can optionally add an extra input, <code>k</code>, which can be read as a \"level of complexity\". It defaults to <code>1</code>. For example, <code>rand_invertible(3)</code> might produce something like \\left[\\begin{array}{ccc} 1 &amp; -1 &amp; 1 \\\\ 0 &amp; -1 &amp; -1 \\\\ -1 &amp; 0 &amp; -3 \\end{array}\\right] <code>whilst rand_invertible(3,5)</code> might produce something like \\left[\\begin{array}{ccc} 20 &amp; -20 &amp; 8 \\\\ 5 &amp; -9 &amp; 2 \\\\ -15 &amp; 11 &amp; -22 \\end{array}\\right].</p> <ul> <li><code>rand_invertible(n, k)</code> will generate an integer n \\times n invertible matrix. <code>k</code> is the optional \"level of complexity\" and defaults to 1.</li> <li><code>rand_integer_invertible(n, k)</code> will generate an integer n \\times n invertible matrix whose inverse is also an integer matrix. <code>k</code> is the optional \"level of complexity\" and defaults to 1.</li> <li><code>rand_orth(n, k)</code> will generate an n \\times n orthogonal matrix. <code>k</code> is the optional \"level of complexity\" and defaults to 1.</li> <li><code>rand_orthcols(m, n, k)</code> will generate an m \\times n matrix whose columns are an orthonormal set. If <code>m</code> is less than <code>n</code>, then it instead returns <code>matrix([null])</code>. <code>k</code> is the optional \"level of complexity\" and defaults to 1.</li> <li><code>rand_diagonalizable(n, k)</code> will generate an integer n \\times n diagonalizable matrix. <code>k</code> is the optional \"level of complexity\" and defaults to 1. <code>k</code> determines both the level of complexity for eigenvalues and eigenvectors, so finer control can be achieved with <code>D: rand_diag(...)</code> in conjunction with <code>P: rand_integer_invertible(...)</code> and then <code>M: P . D . P^^-1</code>.</li> <li><code>rand_defective(n, k)</code> will generate an integer n \\times n defective matrix. <code>k</code> is the optional \"level of complexity\" and defaults to 1. <code>k</code> determines both the level of complexity for eigenvalues and generalised eigenvectors.</li> <li><code>rand_perm_matrix(n)</code> will generate a random n \\times n permutation matrix.</li> </ul> <p>Under the hood, all of these functions with optional <code>k</code> are produced by first multiplying two triangular matrices with non-zero diagonal entries. <code>k</code> plays the same role in the generation of those matrices as it does in the similar function <code>rand_triu</code>.</p>"},{"location":"en/Topics/Linear_algebra/Random_Matrices/#some-advice-on-the-use-of-these-functions","title":"Some advice on the use of these functions","text":"<p>Careful use of deployed variants are key to success here. The \"level of complexity\" <code>k</code> is quite volatile, and unexpectedly complicated or simple matrices can appear with some regularity. In general, the author believes it is better to err on the side of higher <code>k</code> and then aggressively trim the variants. </p> <p>Don't forget to check that intermediate steps of working are appopriate too! It's quite common in linear algebra to generate a problem that has \"nice\" numbers at the beginning and \"nice\" numbers in the final answer, but with some horrid working in the middle.</p> <p>A good general principle is to work backwards from a solution.  E.g. if you want to randomly generate a linear system with \"nice\" row-reduction steps, consider randomly generating elementary matrices and multiplying the answer by these. This ensures an answer with the desired properties (e..g unique integer solutions), finely controls the steps needed, and the intermediate working complexity.</p>"},{"location":"en/Topics/Linear_algebra/Vector_geometry/","title":"Vector geometry functions for STACK","text":"<p>STACK has a contributed library for vector geometry functions.  To use this library you must load it into the question variables.</p> <ul> <li>To use the latest code from github: <code>stack_include_contrib(\"vectorgeometry.mac\");</code></li> <li>Loading this library automatically declares <code>stack_linear_algebra_declare(true);</code> to provide context.</li> </ul> <p>This page contains reference documentation on functions in this library.</p>"},{"location":"en/Topics/Linear_algebra/Vector_geometry/#lines-and-planes","title":"Lines and planes","text":"<p>Problem: the student has been asked to represent a subspace in parametric form; we want to decide if these spaces are equivalent.</p>"},{"location":"en/Topics/Linear_algebra/Vector_geometry/#student-vector-input","title":"Student vector input","text":"<p>If we want students to input an answer such as  we have some choices. </p> <p>One option is to have each component of this answer have its own answer box, with matrix input for the vectors and (perhaps) an algebraic input for the parameter. A disadvantage of this is that it gives the student the exact form of the answer.</p> <p>Another option is to ask the student to type in their answer using matrix notation. Students tend to find this cumbersome, and the answer boxes need to be quite large to fit the whole answer.</p> <p><code>vectorgeometry.mac</code> supports <code>c()</code> and <code>r()</code> notation, which allows a student to type in the above function as <code>c(1,2) + t*c(3,4)</code>. Including this library will provide this functionality. See Vectors for more information about post-processing answers of this form. </p>"},{"location":"en/Topics/Linear_algebra/Vector_geometry/#converting-from-parametric-form-to-vector-form","title":"Converting from parametric form to vector form","text":"<p>Now, let us start with an answer that has already been processed into matrix form such as</p> <pre><code>ta:transpose(matrix([s+2*t,3+t,w]));\nta:expand(ta);\nlv:listofvars(ta);\n\n/* Sanity check: make sure the student's answer is linear in its parameters. */\ndeg:apply(max, maplist(lambda([ex], hipow(ta, ex)), lv));\n</code></pre> <p>The first thing is to note Maxima's </p> <pre><code>cm:coefmatrix(flatten(args(ta)), lv);\nam:augcoefmatrix(flatten(args(ta)), lv);\n</code></pre> <p>We will turn this into vector form explicitly as follows.</p> <pre><code>/* Remove any constant vectors (setting all parameters to zero). */\n cv:ev(ta, maplist(lambda([ex], ex=0), lv), simp);\n\n/* Calculate the direction vectors. */\ndvs:maplist(lambda([ex], col(cm,ex)), makelist(k,k,1,length(lv)));\n\n/* Create vector form. */\nsimp:false;\nvf:apply(\"+\", zip_with(\"*\", lv, dvs))+cv;\n</code></pre> <p>Note, this last line assumes <code>simp:false</code> (otherwise we simplify back to the original <code>ta</code>!), and uses STACK's <code>zip_with</code> function which is not a core part of Maxima.</p> <p>Now we have the direction vectors we can answer a number of questions.</p> <p>Turn the direction vectors into a single matrix.</p> <pre><code>simp:true;\ncm:transpose(apply(matrix, maplist(lambda([ex], first(transpose(ex))), dvs)));\n/* Takes us back to ta.... */\ncm.transpose(matrix(lv))+cv;\n</code></pre> <p>Does <code>ta</code> pass through the origin?  This amounts to solving </p> <pre><code>solve(flatten(args(ta)), lv);\n</code></pre> <p>But, solve can throw errors when we have dependent equations (as we might well do...).</p>"},{"location":"en/Topics/Linear_algebra/Vector_geometry/#functions-in-vectorgeometrymac","title":"Functions in <code>vectorgeometry.mac</code>","text":"<p><code>vectorgeometry.mac</code> codifies much of this into a set of functions. These functions make certain assumptions of form, but may make the above marking code a bit simpler. </p>"},{"location":"en/Topics/Linear_algebra/Vector_geometry/#is-an-expression-in-the-expected-form","title":"Is an expression in the expected form?","text":"<p><code>linear_combinationp(ex)</code> is a predicate function that tests whether a given input <code>ex</code> is exactly a linear combination of column vectors with a linear offset.</p> <p>This function is specifically expecting something of the form \\underline{\\mathbf{r}}_0 + t_1\\underline{\\mathbf{d}}_1 + t_2\\underline{\\mathbf{d}}_2 + \\dots + t_n\\underline{\\mathbf{d}}_n, and can handle either <code>c</code> or <code>matrix</code> notation (not <code>r</code>). It is primarily useful as a sanity check before running the functions below. It will reject any expression with non-linear terms, and respects declarations like <code>declare(k,constant)</code>.</p> <ul> <li><code>linear_combinationp(c(1,2) + t*c(3,4))</code> returns <code>true</code></li> <li><code>linear_combinationp(c(1,2) + t^2*c(3,4))</code> returns <code>false</code></li> <li><code>linear_combinationp(c(1,2) + t*c(k,4))</code> returns <code>false</code></li> <li><code>linear_combinationp(c(1,k) + t*c(3,4))</code> returns <code>true</code>, because the expression is interpreted as <code>c(1,0) + k*c(0,1) + t*c(3,4)</code></li> <li><code>(declare(k, constant), linear_combinationp(c(1,2) + t*c(k,4))</code> returns <code>true</code>.</li> </ul>"},{"location":"en/Topics/Linear_algebra/Vector_geometry/#extracting-the-components-of-a-vector-parametric-expression","title":"Extracting the components of a vector parametric expression","text":"<p><code>constant_term(ex)</code> extracts the constant term(s) of an expression that is linear in all of its parameters. Specifically, it sets all variables to 0 and returns the result, so it will work on polynomial expressions but not on expressions containing terms like <code>cos(x)</code> or <code>%e^x</code>. If these edge cases are something that you are worried about, then first using <code>linear_combinationp(ex)</code> to filter out expressions that are not linear in their parameters might be sensible.</p> <p><code>constant_term(ex,[constant_vars])</code> will do the same, but assumes that any variable in <code>[constant_vars]</code> is constant.</p> <p>For example, <code>constant_term(c(1,2) + t*c(3,4))</code> returns <code>matrix([1],[2])</code>, and <code>constant_term(c(1,2) + t*c(3,4),[t])</code> returns <code>matrix([3*t+1],[4*t+2])</code>.</p> <p><code>vector_parametric_parts(ex)</code> will break down the expression into its constant part, direction vectors, and parameters (variables). This may behave unexpectedly if <code>linear_combinationp(ex)</code> returns false, as it assumes that the expression is linear in its parameters. </p> <p>It returns a list with three components. The first is the constant term/linear offset (extracted with <code>constant_term</code>). The second is a list of column vectors; the direction vectors of this affine subspace. The third is a list of variable names; the parameters of this expression. Some examples:</p> <ul> <li><code>vector_parametric_parts(c(1,2) + t*c(3,4))</code> gives <code>[matrix([1],[2]), [matrix([3],[4])], [t]]</code>.</li> <li><code>vector_parametric_parts(c(1,2,3) + t*c(1,1,1) + s*c(1,0,1))</code> gives <code>[matrix([1],[2],[3]),[matrix([1],[0],[1]),matrix([1],[1],[1])],[s,t]]</code></li> <li><code>vector_parametric_parts(matrix([p+3*q-4],[2+2*p-q],[p+q+1]))</code> gives <code>[matrix([-4],[2],[1]),[matrix([1],[2],[1]),matrix([3],[-1],[1])],[p,q]]</code></li> </ul> <p>Just like in <code>constant_term</code>, adding a list of variable names to the input will instruct the function to treat them as constants. </p> <ul> <li><code>vector_parametric_parts(c(1,2,3) + t*c(1,1,1) + s*c(1,0,1), [s])</code> gives <code>[matrix([s+1],[2],[s+3]),[matrix([1],[1],[1])],[t]]</code></li> <li><code>vector_parametric_parts(matrix([p+3*q-4],[2+2*p-q],[p+q+1]),[p,q])</code> gives <code>[matrix([3*q+p-4],[-q+2*p+2],[q+p+1]),[],[]]</code></li> </ul> <p>The output of this function can be a bit cumbersome with its nested lists, but the intention is to use the output directly in the functions below. You might like to use code such as the following to more easily handle these variables in a PRT. </p> <pre><code>ta_parts: vector_parametric_parts(ta);\n[ta_cons, ta_dirvecs, ta_vars]: ta_parts;\ncheck_form: linear_combinationp(ans1);\nif check_form then block(\n    sa_parts: vector_parametric_parts(ans1),\n    [sa_cons, sa_dirvecs, sa_vars]: sa_parts\n);\n</code></pre>"},{"location":"en/Topics/Linear_algebra/Vector_geometry/#displaying-these-expressions","title":"Displaying these expressions","text":"<p><code>vector_parametric_display(parts)</code> will produce a string of the TeX code to display the expression in the expected format. This is nice for showing students how their answer has been processed. </p> <p>The function is set up to take exactly the output of <code>vector_parametric_parts</code>. That means that <code>vector_parametric_display(vector_parametric_parts(ex))</code> will produce a formatted expression for <code>ex</code>.</p> <p>For example, using the above example, <code>vec: vector_parametric_display(vector_parametric_parts(matrix([p+3*q-4],[2+2*p-q],[p+q+1])))</code> will produce a string such that <code>\\({@vec@}\\)</code> displays as: </p> <p>  \\left[\\begin{array}{c} -4 \\\\ 2 \\\\ 1 \\end{array}\\right]+p\\, \\left[\\begin{array}{c} 1 \\\\ 2 \\\\ 1 \\end{array}\\right]+q\\, \\left[\\begin{array}{c} 3 \\\\ -1 \\\\ 1 \\end{array}\\right]  </p> <p>It is worth emphasising that this is just a string, and cannot be interacted with algebraically.</p> <p>Continuing with the above example, you might like include in the PRT an expression such as: </p> <p>\"Your answer was interpreted as {@vector_parametric_display(sa_parts)@}\"</p> <p>so that the student can see how their answer has been interpreted. </p>"},{"location":"en/Topics/Linear_algebra/Vector_geometry/#testing-equivalence-of-answers","title":"Testing equivalence of answers","text":"<p>Finally, there are two predicate functions provided to help test equivalence of these parametric expressions. </p> <p><code>point_in_affine_spacep(p, parts)</code> tests whether a point <code>p</code> is in the affine subspace described by the list <code>parts</code>. Again, <code>parts</code> is exactly the output of <code>vector_parametric_parts</code>. <code>p</code> must be a matrix with only one column.</p> <p>The intended use case is testing whether a student's linear offset does lie in the correct plane. Using the above variable names (<code>sa</code> for student answers and <code>ta</code> for teacher's answers), it may be convenient to check</p> <pre><code>point_in_affine_spacep(sa_cons, ta_parts);\n</code></pre> <p><code>vector_in_spacep(v,dir_vecs)</code> tests whether a given non-zero vector <code>v</code> is in the vector subspace spanned by the list of column vectors <code>dir_vecs</code>. Like above, this is intended to be used to check whether a student's direction vectors are actually in the affine subspace (accounting for the linear offset). It may be convenient to test</p> <pre><code>vector_in_spacep(first(sa_dirvecs), ta_dirvecs);\nvector_in_spacep(second(sa_dirvecs), ta_dirvecs);\n</code></pre> <p>and so on for each vector. To test them all at once, <code>subspace_equivp</code> from <code>vectorspaces.mac</code> might prove useful.</p> <p><code>vector_in_spacep(v,dir_vecs,true)</code> will change the behaviour such that the zero vector is considered to be in the space. Without this third argument, zero vectors will always return false. This is not particularly mathematically accurate, as zero vectors will be members of any appropriately-dimensioned vector subspace. However, in the context of vector geometry we certainly do not want to accept the zero vector as a correct direction vector. </p>"},{"location":"en/Topics/Linear_algebra/Vector_geometry/#an-example-question","title":"An example question","text":"<p>This question is included as a sample question, \"Find vector parametric equation for plane given three points\".</p> <p>Find a vector parametric equation for the plane that goes through \\mathcal{P}_1, \\mathcal{P}_2 and \\mathcal{P}_3. Our answer will be \\mathbf{r} = \\mathcal{P}_1 + t\\cdot \\left(\\mathcal{P}_2 - \\mathcal{P}_1\\right) + s\\cdot \\left(\\mathcal{P}_3 - \\mathcal{P}_1\\right), but the student could very reasonably choose any of the three points as their linear offset (or others!), and can construct alternative direction vectors and use different parameter names. In the question variables we can include: </p> <pre><code>/* Can be deleted if using STACK 4.9.0 or later: */\nstack_include_contrib(\"linearalgebra_contrib.mac\");\n%_stack_preamble_end;\n\nstack_include_contrib(\"vectorgeometry.mac\")\n\np1: transpose(rand_selection([-4,-3,-2,-1,0,1,2,3,4],3));\np2: scale_nicely(crossproduct(p1,transpose([1,0,0])));\np3: scale_nicely(crossproduct(p1,transpose([0,1,1])));\n\nta: un_vec_convert(p1) + t*un_vec_convert(p2 - p1) + s*un_vec_convert(p3 - p1);\n</code></pre> <p>Then in the feedback variables we can include: </p> <pre><code>ta_parts: vector_parametric_parts(vec_convert(ta));\n[ta_cons, ta_dirvecs, ta_vars]: ta_parts;\ncheck_form: linear_combinationp(ans1);\nif check_form then block(\n   sa_parts: vector_parametric_parts(vec_convert(ans1)),\n   [sa_cons, sa_dirvecs, sa_vars]: sa_parts,\n   check_form: check_form and is(length(sa_dirvecs)=2)\n);\n</code></pre> <p>Note that in this case we have included the requirement that the answer has two direction vectors as part of the \"form\" of the answer. Then each of the PRT nodes will be, in order: </p> <pre><code>1.    ATAlgEquiv(check_form,true)\n2.    ATAlgEquiv(point_in_affine_spacep(sa_cons,ta_parts),true)\n3.    ATAlgEquiv(vector_in_spacep(first(sa_dirvecs), ta_dirvecs),true)\n4.    ATAlgEquiv(vector_in_spacep(second(sa_dirvecs), ta_dirvecs),true)\n</code></pre> <p>This is sufficient to determine that the student's plane equation is equivalent to the teacher's. </p>"},{"location":"en/Topics/Linear_algebra/Vector_space/","title":"Vector space functions for STACK","text":"<p>STACK has a contributed library for vector space functions.  To use this library you must load it into the question variables.</p> <ul> <li>To use the latest code from github: <code>stack_include_contrib(\"vectorspaces.mac\");</code></li> <li>Loading this library automatically declares <code>stack_linear_algebra_declare(true);</code> to provide context. See the documentation on the core linear algebra for more information. </li> </ul> <p>This page contains reference documentation on functions in this library.</p>"},{"location":"en/Topics/Linear_algebra/Vector_space/#student-vector-input","title":"Student vector input","text":"<p><code>vectorspaces.mac</code> allows students to use the notation <code>c()</code> and <code>r()</code> to easily input column or row vectors. For more information, see the page on vectors</p>"},{"location":"en/Topics/Linear_algebra/Vector_space/#unit-vectors-and-scalar-products","title":"Unit vectors and scalar products","text":"<p><code>vectorspaces.mac</code> provides a few functions to manipulate vectors. </p> <ul> <li><code>unit_vecp(ex)</code> is a predicate function that tests whether a given input is a unit vector. <code>ex</code> must be a matrix (not <code>c</code> or <code>r</code>) with exactly one row or one column.</li> </ul> <p>The following functions have the optional argument <code>sp</code>. If this argument is omitted then the standard inner product (dot product) is used. Otherwise, <code>sp</code> must be the name of a function that performs a scalar product of two vectors; i.e. it takes two vector inputs and outputs a scalar. If given, this scalar product function will be used in place of the standard inner product.</p> <ul> <li><code>proj(u, v, [sp])</code> will compute the projection of <code>u</code> onto <code>v</code> using scalar product <code>sp</code> (dot product if omitted).</li> <li><code>orthogonalize(L, [sp])</code> will orthogonalize a list of vectors <code>L</code> with respect to scalar product <code>sp</code> (dot product if omitted)</li> <li><code>normalize(L, [sp])</code> will normalize a list of vectors <code>L</code> with respect to scalar product <code>sp</code> (dot product if omitted)</li> </ul>"},{"location":"en/Topics/Linear_algebra/Vector_space/#equivalence-functions","title":"Equivalence functions","text":"<ul> <li><code>lin_indp(ex)</code> is a predicate function that tests whether a set of vectors is linearly independent. It can take many forms of input (see <code>cols_to_matrix</code> in the core linear algebra documentation). If given a matrix, it tests whether it has full column rank.</li> <li><code>row_equivp(ex,ta)</code> checks whether matrix <code>ex</code> is row equivalent to matrix <code>ta</code>. Literally, this checks whether the row-reduced echelon form of each matrix are exactly equal.</li> <li><code>col_equivp(ex,ta)</code> does the same for column equivalence.</li> <li><code>subspace_equivp(ex,ta)</code> checks whether two collections of column vectors span the same subspace. i.e. Is each element of <code>ex</code> linearly dependent on <code>ta</code> and vice versa? Like <code>lin_indp(ex)</code>, this function accepts many forms of input. It does not check whether each set of vectors is linearly independent. To check whether two bases are equivalent, use this function in conjunction with <code>lin_indp</code>.</li> </ul>"},{"location":"en/Topics/Linear_algebra/Vector_space/#manipulating-subspaces","title":"Manipulating subspaces","text":"<p>Maxima provides <code>columnspace</code> and <code>nullspace</code> functions natively. This will return a <code>span</code> object, where <code>span</code> is an inert function. <code>vectorspaces.mac</code> also provides <code>rowspace</code> and <code>nullTspace</code> functions to extract that row space and cokernel (left null space or null space of the transpose). Literally, these functions just call <code>columnspace</code> and <code>nullspace</code> on the transpose matrix.</p> <ul> <li><code>columnspace(matrix([1,2,3],[4,5,6],[7,8,9]))</code> gives <code>span(matrix([1],[4],[7]),matrix([2],[5],[8]))</code></li> <li><code>rowspace(matrix([1,2,3],[4,5,6],[7,8,9]))</code> gives <code>span(matrix([1],[2],[3]),matrix([4],[5],[6]))</code></li> <li><code>nullspace(matrix([1,2,3],[4,5,6],[7,8,9]))</code> gives <code>span(matrix([-3],[6],[-3]))</code></li> <li><code>nullTspace(matrix([1,2,3],[4,5,6],[7,8,9]))</code> gives <code>span(matrix([-3],[6],[-3]))</code></li> </ul> <p><code>vectorspaces.mac</code> also provides functions to \"trim out\" linearly dependent vectors from a set and to extend a basis to .</p> <ul> <li><code>remove_dep(ex)</code> takes exactly a list of lists or a matrix (it is not flexible like <code>lin_indp</code>) and removes any linearly dependent vectors (or columns if given a matrix). It works from left to right but keeps the left-most vector when comparing vectors.</li> <li>For example, <code>remove_dep(matrix([1,2,3],[1,2,4],[1,2,5]))</code> gives <code>matrix([1,3],[1,4],[1,5])</code></li> <li><code>basisify(ex)</code> will generate a basis for \\mathbb{R}^m where each vector in <code>ex</code> has m elements. This will first remove any dependent vectors using <code>remove_dep</code> and then attempt to extend the basis by adding \\mathbf{\\hat{e}}_i for i from 1 to m one at a time.</li> <li>It will take an optional argument that, when true, orthonormalises the basis, i.e. <code>basisify(ex, true)</code>. This is only really useful when <code>ex</code> is already orthonormal (or at least orthogonal), because if not Gram Schmidt orthogonalisation will remove most of the original vectors anyway.</li> <li> <p>For example, <code>basisify(matrix([1,1],[1,-1],[0,1]))</code> will give</p> <p> {\\left[\\begin{array}{ccc} 1 &amp; 1 &amp; 1 \\\\ 1 &amp; -1 &amp; 0 \\\\ 0 &amp; 1 &amp; 0 \\end{array}\\right]} </p> <p>but <code>basisify(matrix([1,1],[1,-1],[0,1]),true)</code> will give</p> <p> {\\left[\\begin{array}{ccc} \\frac{1}{\\sqrt{2}} &amp; \\frac{1}{\\sqrt{3}} &amp; \\frac{1}{\\sqrt{2}\\cdot \\sqrt{3}} \\\\ \\frac{1}{\\sqrt{2}} &amp; -\\frac{1}{\\sqrt{3}} &amp; -\\frac{1}{\\sqrt{2}\\cdot \\sqrt{3}} \\\\ 0 &amp; \\frac{1}{\\sqrt{3}} &amp; -\\frac{\\sqrt{2}}{\\sqrt{3}} \\end{array}\\right]} </p> </li> <li> <p>The intended use of this function is for making the Q in QR factorisations orthogonal or for computing a full SVD</p> </li> </ul>"},{"location":"en/Topics/Linear_algebra/Vector_space/#projection-matrices","title":"Projection matrices","text":"<ul> <li><code>projection_matrix(A)</code> will produce the symmetric, idempotent matrix that orthogonally projects vectors in \\mathbb{R}^m onto the column space of m\\times n matrix <code>A</code>. </li> </ul>"},{"location":"en/Topics/Linear_algebra/Vectors/","title":"Vectors","text":""},{"location":"en/Topics/Linear_algebra/Vectors/#student-input","title":"Student input","text":"<p>Students do find typing in matrices very tedious.  The convenient notation</p> <pre><code>c(1,2,3)\n</code></pre> <p>for column vectors and</p> <pre><code>r(1,2,3,4)\n</code></pre> <p>for row vectors is provided.  By default, these will display as  and r(1,2,3,4), but TeX support (e.g. for student input) is provided by the <code>stack_linear_algebra_declare(true)</code> function. If this function is included in the question variables, either by a teacher including it directly or by including one of the linear algebra contributed libraries, they will instead display as column or row vectors as expected. </p> <p>Once converted into matrices, the student's answer will be evaluated by PRTs as matrices.  Of course, this will not be reflected in the valuation.</p> <ul> <li><code>vec_convert(ex)</code> Attempts to convert <code>c</code> and <code>r</code> convenience functions into matrices. If the expression contains multiple <code>c</code> and <code>r</code> terms that do not conform, the original expression is returned.</li> <li><code>vec_convertedp(ex)</code> A predicate function that checks whether <code>c</code> or <code>r</code> is present. This is useful in a PRT to ensure that an earlier conversion was successful (i.e. everything conforms) before continuing.</li> <li><code>un_vec_convert(ex)</code> Given a row or column vector, convert it to <code>c()</code> or <code>r()</code> form.</li> </ul>"},{"location":"en/Topics/Linear_algebra/Vectors/#vectors-as-single-entities","title":"Vectors as single entities","text":"<p>It is very useful to treat vectors as a single entity.  The vector <code>stackvector(a)</code> and the atom <code>a</code> are different, and are not considered algebraically equivalent.  While students may type in <code>stackvector(a)</code> as an answer, they are likely to type in <code>a</code>.  The teacher can either (1) add in <code>stackvector</code> ephemeral forms to the student's answer in the feedback variables using <code>texboldatoms</code> or (2) remove all <code>stackvector</code> forms from the teacher's answer by using the <code>destackvector(ex)</code> function on their answer.  In the future we may have an option in the input to apply texboldatoms to student's expressions.</p> <p>The display of the ephemeral form of <code>stackvector</code> is controlled by the function <code>stackvectortex</code>, e.g. you can display vectors differently using the following examples.</p> <pre><code>stackvectortex(ex):= block(sconcat(\"{\\\\bf \\\\vec{\", tex1(first(args(ex))), \"}}\"));\nstackvectortex(ex):= block(sconcat(\"{\\\\bf \\\\underline{\", tex1(first(args(ex))), \"}}\"));\n</code></pre> <p>which should go in the question variables.</p> <p>Any <code>texput</code> commands in the question variables now become \"context variables\" and will be available to the inputs. So, if in the context of your question you would like a variable such as <code>x</code> to be considered as a vector and displayed as a vector you can add one of the following to the question variables.</p> <pre><code>texput(x, \"\\\\mathbf{\\\\vec{x}}\");\ntexput(x, \"\\\\mathbf{\\\\underline{x}}\");\n</code></pre> <p>Whenever <code>x</code> is then displayed in any part of the question, including the student's input validation or feedback generated by the answer tests, we will have the updated tex for this atom.  E.g.</p> <pre><code>texput(x, \"\\\\mathbf{\\\\vec{x}}\");\ntexput(y, \"\\\\mathbf{\\\\vec{y}}\");\n</code></pre> <p>and a student types in <code>a*x+b*y</code> then the tex output will be a\\cdot \\mathbf{\\vec{x}}+b\\cdot \\mathbf{\\vec{y}}.</p> <ul> <li><code>texboldatoms(ex)</code> Displays all non-numeric atoms in bold.  Useful for vector questions.</li> </ul>"},{"location":"en/Topics/Linear_algebra/Vectors/#inline-ijk-notation","title":"Inline i,j,k notation","text":"<p>If you are trying to use the vector notation such as 3i+4j you will probably want to redefine i to be an abstract symbol, not a complex number. More information on this is given under Numbers.  In particular, use the question level option \"Meaning and display of sqrt(-1)\" value <code>symi</code> to stop interpreting <code>i</code> with <code>i^2=-1</code> and return it to being an abstract symbol.</p> <p>Another way to do this is to create matrices as follows:</p> <pre><code>ordergreat(i,j,k);\n%_stack_preamble_end;\np:matrix([-7],[2],[-3]);\nq:matrix([i],[j],[k]);\n</code></pre> <p>Now we can use the dot product to create the vector.  The STACK function <code>texboldatoms</code> wraps all atomic variable names in the ephemeral function <code>stackvector</code>, which is typeset in bold.</p> <pre><code>v:texboldatoms(dotproduct(p,q));\n</code></pre> <p>If you turn the option \"Multiplication sign\" to none, this should display as -7\\,{\\bf{i}}+2\\,{\\bf{j}}-3\\,{\\bf{k}} Notice the use of the function <code>ordergreat</code>.  <code>ordergreat</code> can only be used once at the beginning of the question.</p> <p>If you use the special constant <code>%_stack_preamble_end;</code> then anything before this constant will be available everywhere in the question, including the inputs.</p>"},{"location":"en/Topics/Proof/","title":"Support for proof in STACK","text":"<p>In STACK the basic assumption is that a student's answer will be a mathematical expression, e.g. a polynomial or an equation.  While the facilities for assessing a student's free-form proof is limited (in any online assessment system), teachers can create materials for assessing students' understanding of proof in general, and of particular mathematical proofs.</p> <p>Simple algebraic reasoning by equivalence is a simple/early form of proof, but not what most people think of as \"proof\".</p> <p>A discussion of Practical Online Assessment of Mathematical Proof was given by Sangwin, C.J. and Bickerton, R. (2023), International Journal of Mathematical Education in Science and Technology}, 53(10) doi:10.1080/0020739X.2021.1896813.  This included more structured questions making use of</p> <ul> <li>faded worked examples,</li> <li>reading comprehension questions.</li> <li>Fill in the blanks.  E.g. in the question library see <code>Topics/LinearAlgebra/Diagonalizable-proof-comprehension.xml</code>.</li> </ul> <p>Such questions can be written in STACK.  In addition </p> <ol> <li>The topics page on using Parson's problems to assess proof.</li> <li>Reference documentation on CAS libraries for representing text-based proofs.</li> <li>Reference documentation on CSS Styles for displaying proof.</li> <li>Advice on workflow for authoring Parson's problems.</li> </ol> <p>Colleagues assessing proof might also consider semi-automatic marking.</p>"},{"location":"en/Topics/Proof/#the-nature-of-mathematical-proof","title":"The nature of mathematical proof","text":"<p>Mathematical writing, especially for students, commonly takes two forms.</p> <ol> <li>A mathematical proof, which is a deductive justification of a claim.  A proof is a \"checkable record of reasoning\".</li> <li>A mathematical recipe, which is a set of instructions for carrying out a procedure.</li> </ol>"},{"location":"en/Topics/Proof/#presentation-of-proof-in-stack","title":"Presentation of proof in STACK","text":"<p>STACK supports representation and display of mathematical proof as trees, with string nodes for the individual sentences/clauses in the proof.  The goals of representing proofs as trees of text-based strings are as follows.</p> <ol> <li>Manage strings forming part of a traditional written proof;</li> <li>Separate the macro tree-structure of the proof from the details of each step.</li> <li>Separate the content from presentation (following well-established principles in both LaTeX and HTML).</li> <li>Separate the content from justification, explanation and narrative.</li> <li>Help teachers present proof in a consistent way within their course.</li> <li>Make it simpler for teachers to write correct proofs.</li> <li>Provide mechanisms for dynamically altering the level of detail, e.g. hiding or revealing steps and narrative.</li> <li>Provide mechanisms for assessing solutions to Parson's problems and provide feedback to students.</li> </ol> <p>The goals do not include automatic proof checking.</p> <p>By separating out these issues we provide more control, and wider opportunities for choice in when and how to generate the right level of cognitive load for students. Traditional presentation of proofs often confound all these issues, confusing students.</p>"},{"location":"en/Topics/Proof/#case-study-proof-by-induction","title":"Case study: proof by induction","text":"<p>Consider the following theorem:  . A traditional proof is shown below. This proof was published by DeMorgan in 1838.  According to Cajori (1918) this is the first use of the name \"mathematical induction\", although DeMorgan calls it \"successive induction\".</p> <p>The sum of any number of successive odd numbers, beginning from unity, is a square number, namely the square of half the even number which follows the last odd number. Let this proposition be true in any one single instance; that is, n being some whole number, let 1,\\, 3,\\, 5,\\, \\ldots up to 2n+1 put together give (n+1)^2. Then the next odd number being 2n+3, the sum of all the odd numbers up to 2n+3 will be (n+1)^2+2n+3, or n^2+4n+4, or (n+2)^2.  But n+2 is half of the even number next following 2n+3: consequently, if the proposition be true of any one set of odd numbers, it is true of one more.  But it is true of the first odd number 1, for this is the square of half the even number next following.  Consequently, being true of 1, it is true of 1+3; being true of 1+3, it is true of 1+3+5; being true of 1+3+5, it is true of 1+3+5+7, and so on, {\\em ad infinitum}.</p> <p>This is the original version.</p> <p></p> <p>This proof is dense, difficult to read and lacks structure.  Since DeMorgan's day, proof by induction is a slightly more formal method of proof consisting of four parts, (i) a statement to be proved, (ii) a base case, (iii) the induction step, and (iv) the conclusion.  Here is a modern version.</p> <p>Let P(n) be the statement \"\\sum_{k=1}^n (2k-1) = n^2\".</p> <p>Since \\sum_{k=1}^1 (2k-1) = 1 = 1^2 we see P(1) is true.</p> <p>Assume P(n) is true. Then  \\sum_{k=1}^{n+1} (2k-1) = \\sum_{k=1}^n (2k-1) + (2(n+1)-1) = n^2 + 2n +1 = (n+1)^2. Hence P(n+1) is true.</p> <p>Since P(1) is true and P(n+1) follows from P(n) we conclude that P(n) is true for all n by the principle of mathematical induction.</p> <p>The above proof contains all the detail, and an expert might choose to omit some of the formality and abbreviate the proof.  This is an example of the expert-reversal affect.  However, it is still written in paragraph mode, we could do a lot more to highlight the structure using styles, e.g.</p> <p>To represent this proof in STACK we define the following</p> <pre><code>proof_steps: [\n    [\"defn_p\",     \"Let \\\\(P(n)\\\\) be the statement \\\"\\\\(\\\\sum_{k=1}^n (2k-1) = n^2\\\\)\\\".\"],\n\n    [\"base_hyp\",   \"Note that \\\\(\\\\sum_{k=1}^1 (2k-1) = 1 = 1^2\\\\)\"],\n    [\"base_conc\",  \"Hence \\\\(P(1)\\\\) is true.\"],\n\n    [\"ind_hyp\",    \"Assume \\\\(P(n)\\\\) is true.\"],\n    [\"ind_1\",      \"Then \\\\(\\\\sum_{k=1}^{n+1} (2k-1)\\\\)\"],\n    [\"ind_2\",      \"\\\\( = \\\\sum_{k=1}^n (2k-1) + (2(n+1)-1)\\\\)\"],\n    [\"ind_3\",      \"\\\\( = n^2 + 2n +1 = (n+1)^2.\\\\)\"],\n    [\"ind_conc\",   \"Hence \\\\(P(n+1)\\\\) is true.\"],\n\n    [\"concp\",      \"Since \\\\(P(1)\\\\) is true and \\\\(P(n+1)\\\\) follows from \\\\(P(n)\\\\) we conclude that \\\\(P(n)\\\\) is true for all \\\\(n\\\\) by the principle of mathematical induction.\"]\n];\n\n/****************************************************************/\nP0:proof_ind(1,proof(2,3),proof(5,6,7,8),9);\nP1:proof_ind(\"defn_p\",proof(\"base_hyp\",\"base_conc\"),proof(\"ind_1\",\"ind_2\",\"ind_3\",\"ind_conc\"),\"concp\");\n</code></pre> <p>Note that the variable <code>proof_steps</code> is a list of lists:  <code>[ [\"key\", \"step\"], ...</code></p> <ol> <li>The first element is a <code>key</code>. This is a string, or integer, which is used to refer to the <code>step</code>.</li> <li>The <code>key</code> can be an integer position in the proof_steps, a string <code>key</code>, or a string.</li> <li>The variables <code>P0</code> and <code>P1</code> represent the proof structure. <code>proof_ind</code> represents a proof by induction.  Notice the base case and induction steps are themselves <code>proof</code> representations, giving identity to these blocks.</li> </ol> <p>See the reference documentation on CAS libraries for representing text-based proofs for more types of proofs and functions for dealing with them.</p>"},{"location":"en/Topics/Proof/Proof_CAS_library/","title":"CAS libraries for representing text-based proofs","text":"<p>STACK provides libraries to represent and manage lines of a text-based proof in a tree structure.  This page is reference documentation for these CAS libraries.  For examples of how to use these see the topics page on using Parson's problems.</p> <p>To use these functions you have to load an optional library into each question.</p> <p>E.g. <code>stack_include_contrib(\"prooflib.mac\")</code> will include the library published in the master branch on github, which will be at or just ahead of an official release.</p>"},{"location":"en/Topics/Proof/Proof_CAS_library/#proof-construction-functions-and-their-manipulation","title":"Proof construction functions, and their manipulation","text":"<p>Proofs are represented as \"proof construction functions\" with arguments.  For example, an if and only if proof would be represented as <code>proof_iff(A,B)</code>, where both <code>A</code> and <code>B</code> are sub-proofs. Proof construction functions don't typically modify their arguments, but some proof construction functions have simplification properties.  For example <code>proof_iff(A,B)</code> is normally equivalent to <code>proof_iff(B,A)</code>.</p> <p>STACK supports the following types of proof construction functions.  The following are general proofs</p> <ul> <li><code>proof()</code>: general, unspecified proof.</li> <li><code>proof_c()</code>: general proof, with commutative arguments.  Typically each argument will be another proof block type.</li> <li><code>proof_opt()</code>: steps in a proof which are optional.  It assumes a single step.  Wrap each optional step individually.</li> </ul> <p>The following represent particular types of proof.</p> <ul> <li><code>proof_iff()</code>.  This proof must have two arguments.  These arguments are assumed to commute.</li> <li><code>proof_cases()</code>. In proof by exhaustive cases, the first element is fixed, and it typically used to describe/justify the cases.  E.g. \" is either odd or even\".  The remaining cases commute, and typically each argument will be another proof block type.</li> <li><code>proof_goal()</code>. This proof seeks to establish the goal.  The last element is fixed, and it typically used to describe/justify the goal.  E.g. \"f is continuously differentiable\".  The remaining cases commute, and typically each argument will be another proof block type.</li> <li><code>proof_ind()</code>.  A proof by induction must have four arguments.  The 1st and 4th are fixed position (defining the statement and conclusion), whereas the 2nd and 3rd commute (for the base case, and induction step).</li> </ul> <p>It is relatively easy to add in new functions to represent a particular type of proof.</p> <p>The variable <code>proof_types</code> is a list holding the names of all proof construction functions.   E.g. this list is used by the predicate <code>proofp</code> to decide if the operator represents a proof.</p> <p><code>proof_validatep</code> is a validation function: the argument must be a tree built from proof construction functions as operators (with the right number of arguments in some cases) or atoms which are integer or strings.</p> <p><code>proof_flatten</code> turns a proof-tree into a list of steps.  E.g. <code>proof_flatten(proof_iff(A,B))</code> is just <code>[A, B]</code>.  This function is useful when the teacher creates a structured tree, but a student's proof is a flat list.</p> <p><code>proof_normal</code> returns a normalised proof-tree, e.g. sorting arguments of commutative proof construction functions.  Note, this function does not change keys, so will not match proofs using integer keys with a proof using string keys.</p> <p><code>proof_alternatives</code> returns a list of all proof trees which are alternatives to its argument.  E.g. <code>proof_iff(A,B))</code> has two alternatives:  <code>[proof_iff(A,B),proof_iff(B,A)]</code>.  This function recurses over all sub-proofs to generate any tree which might be equivalent.  Note, if a student is correct then using <code>proof_normal</code> will match their answer with the teacher's.  However, when trying to identify possible mistakes we need to find the tree which is closest to one of the acceptable proof trees.  Use this function sparingly, as it is computationally expensive on deeply nested trees with many commutative elements.</p>"},{"location":"en/Topics/Proof/Proof_CAS_library/#using-a-proof_steps-list","title":"Using a <code>proof_steps</code> list","text":"<p>The design relies on a list of <code>proof_steps</code>.   Consider this example:\"n is odd if and only if n^2 is odd.\";</p> <pre><code>proof_steps: [\n    [\"assodd\",     \"Assume that \\\\(n\\\\) is odd.\"],\n    [\"defn_odd\",   \"Then there exists an \\\\(m\\\\in\\\\mathbb{Z}\\\\) such that \\\\(n=2m+1\\\\).\"],\n    [\"alg_odd\",    \"\\\\[ n^2 = (2m+1)^2 = 2(2m^2+2m)+1.\\\\]\"],\n    [\"def_M_odd\",  \"Define \\\\(M=2m^2+2m\\\\in\\\\mathbb{Z}\\\\) then \\\\(n^2=2M+1\\\\).\"],\n    [\"conc_odd\",   \"Hence \\\\(n^2\\\\) is odd.\"],\n\n    [\"contrapos\",  \"We reformulate \\\"\\\\(n^2\\\\) is odd \\\\(\\\\Rightarrow \\\\) \\\\(n\\\\) is odd \\\" as the contrapositive.\"],\n    [\"assnotodd\",  \"Assume that \\\\(n\\\\) is not odd.\"],\n    [\"even\",       \"Then \\\\(n\\\\) is even, and so there exists an \\\\(m\\\\in\\\\mathbb{Z}\\\\) such that \\\\(n=2m\\\\).\"],\n    [\"alg_even\",   \"\\\\[ n^2 = (2m)^2 = 2(2m^2).\\\\]\"],\n    [\"def_M_even\", \"Define \\\\(M=2m^2\\\\in\\\\mathbb{Z}\\\\) then \\\\(n^2=2M\\\\).\"],\n    [\"conc_even\",  \"Hence \\\\(n^2\\\\) is even.\"]\n];\n\nP1:proof_iff(proof(\"assodd\",\"defn_odd\",\"alg_odd\",\"def_M_odd\",\"conc_odd\"),proof(\"contrapos\",\"assnotodd\",\"even\",\"alg_even\",\"def_M_even\",\"conc_even\"));\n</code></pre> <p>Note that the variable <code>proof_steps</code> is a list of lists:  <code>[ [\"key\", \"step\", (\"comment\")], ...</code></p> <ol> <li>The first element is a <code>key</code>. This is a string, or integer, which is used to refer to the <code>step</code>.</li> <li>The <code>key</code> can be an integer position in the proof_steps, a string <code>key</code>, or a string.</li> <li>Using integers: <code>proof_iff(proof(1,2,3,4,5),proof(6,7,8,9,10,11))</code>;</li> <li>Using keys: <code>proof_iff(proof(\"assodd\",\"defn_odd\",\"alg_odd\",\"def_M_odd\",\"conc_odd\"),proof(\"contrapos\",\"assnotodd\",\"even\",\"alg_even\",\"def_M_even\",\"conc_even\"))</code></li> <li>The <code>proof_steps</code> list can contain an optional string argument <code>\"comment\"</code>.  This string can be used to store justification, explanation and narrative.  Some display functions use this argument, when it exists.  To prune out the comments use <code>proof_steps_prune(proof_steps)</code> as an argument to the display function.</li> <li>Note that the backslash must be protected when defining these strings.</li> <li>The strings can contain HTML, including <code>&lt;img&gt;</code> tags for including images within draggable elements.</li> </ol> <p><code>proof_keys_sub(ex, proof_steps)</code> takes a proof built from numbered indexes, and translate this into string keys.  In the above example, it might be easier to author a proof as <code>proof(1,2,3,4,5)</code> rather than type in <code>proof(\"assodd\",\"defn_odd\",\"alg_odd\",\"def_M_odd\",\"conc_odd\")</code>. The whole design could be built on numbered keys (and these are valid), but string keys are easier to remember and easier to interpret when looking at students' attempts.  Also, string keys can be inserted later without the need to re-number existing numerical keys. Do not use numerical keys if you intend to randomly permute the strings in the proof!</p> <p><code>proof_keys_int(ex, proof_steps)</code> takes a proof built from string keys, and translate this into numbered indexes.</p> <p><code>proof_getstep(key, proof_steps)</code> looks for the key <code>key</code> in the <code>proof_steps</code> list.  They key can be either a numerical, or string key.  If found then the function returns the full string, otherwise the key is returned without an error.  One advantage of this approach is that the teacher can define abbreviated, alternative proofs using some of the strings in <code>proof_steps</code>, e.g. using the above example the following omits all the detail in the sub-proofs, focusing on the structure and hypothesis/conclusion of each block.</p> <pre><code>P2:proof_iff(proof(\"assodd\",\"\\\\(\\\\cdots\\\\)\",\"conc_odd\"), proof(\"contrapos\",\"assnotodd\",\"\\\\(\\\\cdots\\\\)\",\"conc_even\"));\n</code></pre> <p>When displayed, the keys <code>\"\\\\(\\\\cdots\\\\)\"</code> do not occur in <code>proof_steps</code>, so are returned unchanged.  (Alteratively a teacher could add keys to <code>proof_steps</code> for such situations.)</p> <p><code>proof_parsons_key_json(ta, proof_steps)</code> is used to construct the model answer in an input.  This function separates the keys in <code>proof_steps</code> into those used in <code>ta</code> and those which are unused.  This enables the model_answer to construct a Parson's block as the teacher might leave it, with both the model answer and some strings unused.  Use <code>proof_parsons_key_json(ta, [])</code> to omit displaying any unused steps when showing the model answer.</p>"},{"location":"en/Topics/Proof/Proof_CAS_library/#displaying-whole-proof-and-proof-step-pairs","title":"Displaying whole proof and proof-step pairs","text":"<p>To display a whole proof whole proof using proof-step lists use <code>proof_display(P1, proof_steps)</code>.  E.g. add <code>{@proof_display(P1, proof_steps)@}</code> to the appropriate castext.  This will (1) replace all keys in the proof <code>P1</code> with the corresponding strings in <code>proof_steps</code> (if they exist) and (2) display the structure using the nested <code>&lt;div class=\"proof-block\"&gt;</code> from the CSS Styles for displaying proof, (3) display any narrative.</p> <p><code>proof_display_para(P1, proof_steps)</code> displays a complete proof, but using HTML paragraphs to split blocks.  This is a more traditional presentation of proof.</p> <p>To prume out the optional comments use <code>proof_steps_prune(proof_steps)</code> as an argument to the display function.  E.g. use the following castext <code>{@proof_display(P1, proof_steps_prune(proof_steps))@}</code></p>"},{"location":"en/Topics/Proof/Proof_CAS_library/#example-proofs","title":"Example proofs","text":"<p>Example proofs are distributed with STACK in a <code>proofsamples</code> sub-folder of the maxima \"contrib\" folder: https://github.com/maths/moodle-qtype_stack/tree/master/stack/maxima/contrib.  These proofs can be loaded with <code>stack_include</code> in the normal way.  Each file contains</p> <ol> <li>A string variable <code>thm</code> showing the Theorem to be proved.</li> <li>A proof steps list <code>proof_steps</code></li> <li>A variable <code>proof_ans</code> which contains one proof the teacher considers correct.</li> </ol>"},{"location":"en/Topics/Proof/Proof_Parsons_workflow/","title":"Workflow for authoring Parsons Problems","text":"<p>This page suggests a workflow for authoring Parsons problems effectively.  In particular, to author the <code>proof_steps</code> lists you have to protect LaTeX backslashes in Maxima strings.  This is tedious, tricky and error prone!</p> <p>For example, you have to define Maxima strings such as <code>\"\\\\( f(n)=\\\\sin(n\\\\pi) \\\\)\"</code>.</p> <p>This suggested workflow provides a tool to automatically add in these extra slashes as a one-off process.</p> <ol> <li>Load a basic working Parsons problem from a template from the library page as a starting point.  This guarantees a simple working Parsons problem.</li> <li>From the question dashboard, choose the \"Send general feedback to the CAS\" link, which takes you to the caschat page.</li> <li>Write the full proof, in simple LaTeX, as the worked solution and confirm the LaTeX works within the CAStext (without extra slashes).</li> <li>Move your lines from the worked solution to the question variables and form the <code>proof_steps</code> list.  Do not add extra slashes!</li> <li>At the bottom of the page, choose the \"Protect slashes within Maxima string variables\" option. This is a one-off conversion and it will add slashes.</li> <li>Now, define the teacher's answer using your <code>proof_steps</code> and the <code>proof()</code> functions which STACK provides.  Make sure your worked solution displays properly, e.g. by using the <code>{@proof_display(ta, proof_steps)@}</code> command.  Once you are happy, save these values (question variables and general feedback) back to your question.</li> </ol> <p>The \"Protect slashes within Maxima string variables\" option will add slashes every time the option is selected, so this is effectively a one-off process.  However, you can write the full proof in normal LaTeX before converting to Maxima strings.</p> <p>Clearly, you can also use this option on fragments and copy/paste back to a question (without \"save back to question\" which replaces the question variables etc.).</p>"},{"location":"en/Topics/Proof/Proof_assessment/","title":"Assessing Parson's problems and proofs","text":""},{"location":"en/Topics/Proof/Proof_assessment/#general-remarks","title":"General remarks","text":"<p>This document explains how to assess Parson's problems.  There are three sets of tools available in STACK.</p> <ol> <li>When a tree is used to represent the structure of a teacher's proof, we can automatically create all alternative proofs.  Then we can establish whether a student's proof is one of these.  If not we automatically provide feedback explaining how to modify the student's proof to transform it to the closest correct proof.  E.g. swap two lines.  Generating alternatives and feedback is fully automated.  However, we assume a proof can be fully represented as a tree.</li> <li>Generally we have a directed graph representing dependencies of lines in a proof.  We have general tools for recording these dependencies, establishing if a student's proof satisfies them, and if not generating automatic feedback based on dependencies specified in a dependency graph.  The teacher has to create a dependency graph for each proof, but feedback is automatic.</li> <li>Teachers can encode specific dependency checks, and provide specific feedback when a student's proof meets/fails to meet certain criteria.  E.g. \"This line uses the variable  but you have not yet introduced it in your proof\".</li> </ol> <p>Each option above independent, and any/all could be used with a particular proof.</p>"},{"location":"en/Topics/Proof/Proof_assessment/#1-automatic-assessment-of-proof-defined-as-a-tree","title":"1. Automatic assessment of proof defined as a tree","text":"<p>The Damerau-Levenshtein distance is a metric for measuring the difference between two strings. Informally, this is the edit distance measuring  the minimum number of single-character edits (insertions, deletions, transition or substitutions) required to change one string into the other. STACK uses this metric to assess answers which are text strings.  The problem of assessing Parson's problems is very similar.</p> <ol> <li>We want to establish the distance between the student's proof and a teacher's proof, and identify the closest proof from a list deemed acceptable by the teacher.</li> <li>We want to automatically provide feedback detailing which edits will transform the student's proof into a \"correct\" proof, e.g. \"Swap these two lines\", \"Insert a line here\".</li> </ol> <p>Rather than a string of characters, we apply the metric to a list of <code>keys</code> tags in the <code>proof_steps</code> list, as defined in the CAS library for representing text-based proofs.  Further, by tracking the steps in the algorithm we can provide automatic feedback about which edits are required to transform one list into another.</p> <p>We assume that the teacher's answer is <code>ta</code> is expressed using \"proof construction functions\" e.g.</p> <pre><code>ta:proof_iff(\"A\",\"B\");\n</code></pre> <p>where the keys are part of a <code>proof_steps</code> list.</p> <p>Define <code>tal</code> to be the list of teacher's answers.  This can be created automatically, e.g. <code>tal:proof_alternatives(ta)</code> or a teacher can define a bespoke list of proofs.</p> <p>The assessment function <code>proof_assessment(sa, tal)</code> takes a proof provided by a student and a list of acceptable proofs and does the following.</p> <ol> <li>All proofs are flattened to lists of keys.  The Damerau-Levenshtein distance only applies to lists, not trees.</li> <li>Calculate the distance between the student's proof and each of the teacher's proofs (in <code>tal</code>), and identify the closest proof.</li> <li>Return a list <code>[d, [edits]]</code>, where <code>d</code> is the shortest distance and <code>edits</code> is the list of edits (if any) needed for each step.</li> </ol> <p>To provide feedback the list of edits can be sent directly to a display function.</p> <p>To use this in practice define the following feedback variables.</p> <pre><code>sa:parsons_decode(ans1);\n[pd, saa]:proof_assessment(sa, proof_alternatives(ta));\n</code></pre> <p>The variable <code>pd</code> now contains the edit distance from the student's proof to the closest teacher's.  The teacher can decide if this is close enough (zero, of course means exact match) and whether to display the feedback.  For example, use <code>ATAlgEquiv(pd,0)</code> to check if the student's proof matches one of the teacher's proofs.  If the number of edits required is at least the length of the teacher's proof then everything needs editing and there is little point displaying feedback!</p> <p>To display feedback use <code>{@proof_assessment_display(saa, proof_steps)@}</code> in a PRT feedback (or other castext).</p>"},{"location":"en/Topics/Proof/Proof_assessment/#2-proof-assessment-when-steps-within-separate-sub-hypotheses-can-be-interleaved","title":"2. Proof assessment when steps within separate sub-hypotheses can be interleaved","text":"<p>Proofs often contain sub-proofs, in blocks.  In our design for the representation of proofs as tree structures, a teacher might decide one block precedes another, or that the order of these blocks is interchangeable. In some situations it is possible to interleave parts of two or more blocks without invalidating the proof from a strictly logical point of view. For example, in the teacher's proof we might have separate blocks such as</p> <p>Assume n is odd.    There exists j such that n=2j-1.</p> <p>...</p> <p>Assume m is even.    There exists k such that m=2k.</p> <p>...</p> <p>However, a student might choose to interleave these clauses without a loss of strict logical correctness.</p> <p>Assume n is odd.    Assume m is even.</p> ... <p>This section explains general tools to assess proofs which allows steps to be interleaved.</p> <p>Consider the following proof.</p> <p>H1. Assume that \\(3 \\cdot 2^{172} + 1\\) is a perfect square.</p> <p>S2. There is a positive integer \\(k\\) such that \\(3 \\cdot 2^{172} + 1 = k^2\\).</p> <p>S3. Since \\(3 \\cdot 2^{172} + 1 &gt; 2^{172} = (2^{86})^2 &gt; 172^2\\), we have \\(k &gt; 172\\).</p> <p>S4. We have \\(k^2 = 3 \\cdot 2^{172} + 1 &lt; 3 \\cdot 2^{172} + 173\\).</p> <p>S5. Also, \\(3 \\cdot 2^{172} + 173 = (3 \\cdot 2^{172} + 1) + 172 &lt; k^2 + k\\). Further, \\(k^2 + k &lt; (k + 1)^2\\).</p> <p>C6. Since \\(3 \\cdot 2^{172} + 173\\) is strictly between two successive squares \\(k^2\\) and \\((k + 1)^2\\), it cannot be a perfect square.</p> <p>In this proof has the following dependency structure.</p> <pre>\n     S1\n      |\n     S2\n    / |\n  S3  |\n  |   S4\n  S5  |\n  |  /\n  C6\n</pre> <p>In particular, we have the following options for \"correct\" answers.</p> <ol> <li><code>[S1, S2, S3, S4, S5, C6]</code></li> <li><code>[S1, S2, S4, S3, S5, C6]</code></li> <li><code>[S1, S2, S3, S5, S4, C6]</code></li> </ol> <p>This graph dependency cannot be inferred from a proof tree type structure.  While it is considerably simpler for a teacher to write a proof as a tree, interleaved steps in a student's proof may not be wrong.</p> <p>Therefore we provide a function which takes (a) the student's list (of Parsons keys), and (b) a representation of the directed graph and uses the teacher's graph to conduct assessment.</p> <p>To author the graph we create lists of key-lists in Maxima as follows.  This is a list of lists, representing the edges of the graph..</p> <pre><code>tdag: [\n       [\"S1\", \"S2\"],\n       [\"S2\", \"S3\", \"S5\"],\n       [\"S2\", \"S4\"],\n       [\"S4\", \"C6\"],\n       [\"S5\", \"C6\"]\n      ];\n</code></pre> <ol> <li>Each key used in the teacher's proof must occur in the student's list.  Missing keys (i.e. steps) will be flagged.</li> <li>Only keys used in the teacher's proof should occur in the student's list.  Extra keys (i.e. steps) will be flagged.</li> <li>For each list, we check that the keys occur in the specified order in the student's proof.  E.g in the first list <code>[\"S1\", \"S2\"]</code> we check that <code>\"S1\"</code> comes before <code>\"S2\"</code> in the student's proof. In the second list <code>[\"S2\", \"S3\", \"S5\"]</code> we check that <code>\"S2\"</code> comes before <code>\"S3\"</code>, and <code>\"S3\"</code> comes before <code>\"S4\"</code>.  Note, by allowing lists with more than two keys we reduce the complexity of expressing long chains of steps.</li> <li>We do not specify that nothing can be between steps.  That's a separate property which this test does not establish.  (Separate tools are needed to establish, e.g. \"No other steps should occur between X and Y\".)</li> </ol> <p>Hence, we could also write this graph as follows.</p> <pre><code>tdag: [\n       [\"S1\", \"S2\", \"S3\", \"S5\", \"C6\"],\n       [\"S2\", \"S4\", \"C6\"]\n      ];\n</code></pre> <p>Writing a graph is considerably more complex for a teacher than using the <code>proof()</code> functions, but of course it gives the teacher more flexibility with what to accept.  The two approaches can be combined.  If a student's answer is found to be incorrect, then we can still establish the closest distance to a proof the teacher considers to be correct to give automatic feedback on how a student should change their proof.</p> <p>STACK provides functions to support assessment where the teacher specified a dependency graph.</p> <p><code>saprob: proof_assessment_dag(sa, tdag)</code> takes (1) the student's answer (a list of tags) and (2) a graph specified as lists of key-lists and returns a list of \"problems\".  Problems with a student's graph can take three forms.</p> <ol> <li><code>proof_step_missing({\"C6\"})</code> indicates the set of steps <code>{\"C6\"}</code> is missing from <code>sa</code>.</li> <li><code>proof_step_extra({\"H0\"})</code> indicates the set of steps <code>{\"H0\"}</code> are not needed in <code>sa</code>.</li> <li><code>proof_step_must(\"S1\", \"S2\")</code> indicates that the step <code>\"S1\"</code> must come before step <code>\"S2\"</code> in the proof specified by the graph, but does not in <code>sa</code>.</li> </ol> <p>If the result of <code>proof_assessment_dag</code> is an empty list, the <code>sa</code> matches with the graph in <code>tdag</code>.</p> <p>If, for any reason, you don't want all three checks, then you can filter the list to retain only the relevant properties from that listed above.  E.g. if you only want <code>proof_step_must</code> to be established then use</p> <pre><code>sa:parsons_decode(ans1);\nsaprob: proof_dag_check(sa, tdag);\nsaprob:sublist(saprob, lambda([ex], op(ex)=proof_step_must));\n</code></pre> <p>To use this in a potential response tree, check if <code>saprob</code> is empty.  If not, you can display feedback based on the properties described above using the following in the feedback.</p> <pre><code>{@proof_dag_problem_display(saprob, poof_steps)@}\n</code></pre> <p>An example question illustrating these features is given in the sample questions library under <code>Topics/Parsons-DAG.xml</code>.</p>"},{"location":"en/Topics/Proof/Proof_assessment/#3-general-tools-in-buildermac-to-provide-bespoke-feedback","title":"3. General tools in <code>builder.mac</code> to provide bespoke feedback","text":"<p>The last option is to encode specific dependencies, with feedback for each.  The advantage is that teachers can mange meaningful feedback for individual steps, but of course that is more work than using the auto-generated feedback.</p> <p>You can load the optional library <code>builder.mac</code> to use tools to manage bespoke feedback.</p> <p>An example question is given in the stacklibrary <code>Doc-Examples\\Parsons-3-builder.xml</code></p> <p>This example combines both the automatic feedback in Section 1 where the proof is defined as a tree (a list in our example), with the bespoke feedback for many of the steps.</p>"},{"location":"en/Topics/Proof/Proof_samples/","title":"Sample mathematical proofs","text":"<p>STACK is distributed with sample proofs (in English) in the source code within the maxima contrib directory.</p>"},{"location":"en/Topics/Proof/Proof_samples/#currently-available-proofs","title":"Currently available proofs","text":"<p>The proofs currently available are...</p>"},{"location":"en/Topics/Proof/Proof_samples/#using-these-proofs-via-the-sample-parsons-question","title":"Using these proofs via the sample Parsons question","text":""},{"location":"en/Topics/Proof/Proof_styles/","title":"CSS Styles for displaying proof","text":"<p>We support the following CSS styles to enable consistent display of mathematical proof, and arguments in general.  General style was also introduced with the HELM materials.</p> <p>Note, the precise style will also depend on the styles in your learning environment.  The <code>class=\"proof\"</code> styles focus on block structure and layout, e.g. indenting blocks and column layout.  Colour and typeface are generally not specified in the proof styles (although a white background is defined).  Styles are defined in <code>styles.css</code> of the top-level of the STACK plugin.</p>"},{"location":"en/Topics/Proof/Proof_styles/#div-classproof","title":"<code>&lt;div class=\"proof\"&gt;</code>","text":"<p>This class is a general high level container.</p>  This is typical question style, from the Moodle theme, containing the following proof.  <p>Let P(n) be the statement [...] </p> <p>From which we see that.</p>  Back to the typical Moodle style.  <p>Note, the proof container is minimal, and subtle and does not intrude too much but contains a proof as a distinct entity.</p>"},{"location":"en/Topics/Proof/Proof_styles/#div-classproof-block","title":"<code>&lt;div class=\"proof-block\"&gt;</code>","text":"<p>This class allows the teacher to highlight sub-components of a proof.  It is intended to be a nested sub-proof block of a main proof.</p>  This is typical question style, from the Moodle theme, containing the following proof.  This proof has two cases.  <p>If n is odd then we have</p> <p>[...]</p> <p>and so ...</p> <p>If n is even then we have</p> <p>a. even more subcases.</p> <p>b. even more subcases.</p> <p>and so ...</p> <p>From which we see that in all cases the proof holds.</p>  Back to the typical Moodle style."},{"location":"en/Topics/Proof/Proof_styles/#div-classproof-line-div-classproof-num-div-classproof-step-div-classproof-comment","title":"<code>&lt;div class=\"proof-line\"&gt;</code>, <code>&lt;div class=\"proof-num\"&gt;</code>, <code>&lt;div class=\"proof-step\"&gt;</code>, <code>&lt;div class=\"proof-comment\"&gt;</code>","text":"<p>Greater typeset structure can be gained by marking up the proof in more detail, if so desired.</p> <p>A typical proof consists of individual lines. Each line is numbered, so we can refer to them later.  The main \"meat\" of the line is the \"proof step\" and there is an optional comment.  The proof comment is designed for a comment, to allow an input to ask a question or to act as the second column in a two column proof.</p>  Consider the following proof by induction. \\(P(n)\\)  1. Let P(n) be the statement The first block of an induction proof must be a clear statement of the \"induction hypothesis\". 2. .... some maths .... Notice, in this case, we have a purely algebraic induction hypothesis. 3. Since This block is known as the \"base case\". 4. Something profound and something else 5. it follows that P(1) is true. 6. Assume that P(n) is true. This block is known as the \"induction step\". 7. .... lots of complex working .... We just consider the sum which occurs in P(n+1) and start to rearrange this. 8. More working We are assuming P(n) is true, and here we use this fact. 9. More working. 10. Which gives us what we want Notice we have rearranged the algebra to give us the right hand side of P(n+1). 11. Hence P(n+1) is true. This block is the conclusion of the proof. 12. Since P(1) and P(n) implies P(n+1) it follows that P(n) is true for all n by the principal of mathematical induction."},{"location":"en/Topics/Proof/Proof_styles/#div-classproof-column-div-classproof-column-2","title":"<code>&lt;div class=\"proof-column\"&gt;</code>, <code>&lt;div class=\"proof-column-2\"&gt;</code>","text":"<p>Alternatively, you can use columns, which are fixed at a width of 48%.  The design assumes two columns and line numbers.</p> <p>Additionally, <code>proof-column-2</code> has a different visual style for emphasis.</p>  Here is a proof of the great and wonderful theorem.     The proof has two cases.    1. The proof itself is in the first column. The second column can contain comments, here in <code>proof-column-2</code> style.  2. The proof continues. With further comments. 3. The second case of the proof. The second column can contain comments, here in <code>proof-column</code> style.  4. The proof continues. With further comments. 5. The proof continues. With further comments. 6. The proof continues, without comment."},{"location":"en/Topics/Proof/Proof_styles/#div-classproof-column","title":"<code>&lt;div class=\"proof-column\"&gt;</code>","text":"Lines don't need to have <code>proof-num</code> or <code>proof-block</code> With further comments. The proof continues. With further comments. This concludes the proof. <p>It is possible to use <code>proof-column-2</code> style in the first column, but this looks odd and is not recommended.  The <code>proof-column-2</code> style is intended for only the second column.  The <code>proof-column</code> style is intended to be used in both columns.</p> <p>Here is a proof by induction.</p>  Consider the following proof by induction. \\(P(n)\\)  1. Let P(n) be the statement The first block of an induction proof must be a clear statement of the \"induction hypothesis\". 2. .... some maths .... Notice, in this case, we have a purely algebraic induction hypothesis. 3. Since This block is known as the \"base case\". 4. Something profound and something else 5. it follows that P(1) is true. 6. Assume that P(n) is true. This block is known as the \"induction step\". 7. .... lots of complex working .... We just consider the sum which occurs in P(n+1) and start to rearrange this. 8. More working We are assuming P(n) is true, and here we use this fact. 9. More working. 10. Which gives us what we want Notice we have rearranged the algebra to give us the right hand side of P(n+1). 11. Hence P(n+1) is true. This block is the conclusion of the proof. 12. Since P(1) and P(n) implies P(n+1) it follows that P(n) is true for all n by the principal of mathematical induction."},{"location":"en/Topics/Proof/Proof_styles/#ol-classproof-steps","title":"<code>&lt;ol class=\"proof-steps\"&gt;</code>","text":"<p>This class enables ordered lists to have connected numbered statements.</p> <ol> <li>Let A be an n by n matrix and let R be the reduced row echelon form of A.</li> <li>We will show first that det(A) is not zero if and only if det(R) is not zero.</li> <li>Let <ol> <li>E1,</li> <li>E2,</li> </ol> ... Er be the elementary matrices corresponding to the elementary row operations that reduce A to R.</li> <li>Then Er ... E1 A = [[input:ans1]]]</li> <li>Taking determinants of both sides, we obtain: det(Er) ... det(E_1) det(A) = det(R).</li> <li>The determinants of all the elementary matrices are all [[input:ansdropdown]]]</li> <li>We conclude that det(A) is not zero if and only if det(R) is not zero.</li> <li>Now suppose that A is invertible.  <ol> <li>Then R =  [[input:ans4]]</li> <li>Thus, det(R) = [[input:ans3]] and hence det(A) is not zero.</li> </ol></li> <li>Conversely, if det(A) is not zero then det(R) is not zero, so R cannot have a zero row.</li> <li>Thus R = I and A is invertible as required. </li> </ol>"},{"location":"ja/","title":"STACK","text":"<p>STACK\u306f\uff0c\u6570\u5b66\uff0c\u79d1\u5b66\uff0c\u304a\u3088\u3073\u95a2\u9023\u5206\u91ce\u306e\u305f\u3081\u306e\uff0c\u4e16\u754c\u3092\u30ea\u30fc\u30c9\u3059\u308b\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\uff08GPL\uff09\u306e\u6570\u5f0f\u81ea\u52d5\u63a1\u70b9\u30b7\u30b9\u30c6\u30e0\u3067\uff0c\u4ee5\u4e0b\u306e\u7279\u5fb4\u304c\u3042\u308a\u307e\u3059\uff0e</p> <ul> <li>\u5b66\u751f\u306f\u6570\u5f0f\u3092\u5165\u529b\u3057\uff0c\u591a\u80a2\u9078\u629e\u5f0f\u306b\u5236\u9650\u3055\u308c\u308b\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\uff0e</li> <li>\u5f62\u6210\u7684\u8a55\u4fa1\u306b\u91cd\u70b9\u3092\u7f6e\u3044\u305f\uff0c\u78ba\u8a8d \u3068 \u8a55\u4fa1 \u306e\u5206\u96e2\uff0e</li> <li>\u30e9\u30f3\u30c0\u30e0\u306a\u554f\u984c\u751f\u6210\uff0e</li> <li>\u884c\u5358\u4f4d\u3067\u306e\u8a55\u4fa1\u3092\u542b\u3080\uff0c\u591a\u69d8\u306a\u5165\u529b\u30bf\u30a4\u30d7\uff0e</li> <li>\u30de\u30eb\u30c1\u30d1\u30fc\u30c8\u554f\u984c\u306e\u30b5\u30dd\u30fc\u30c8\uff0e</li> <li>SI\u5358\u4f4d\u3068\u6709\u52b9\u6570\u5b57\u306e\u30b5\u30dd\u30fc\u30c8\uff0e</li> </ul> <p>\u3053\u308c\u306fSTACK\u306e\u516c\u5f0f\u30e6\u30fc\u30b6\u30fc\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u3059\uff0e</p> <ul> <li>STACK\u306e\u30e1\u30a4\u30f3\u306e\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u30b5\u30a4\u30c8\uff1a https://stack-assessment.org/</li> <li>\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u30b5\u30fc\u30d0\uff08\u30a8\u30c7\u30a3\u30f3\u30d0\u30e9\u5927\u5b66\uff09\uff1a https://stack-demo.maths.ed.ac.uk/demo/</li> <li>\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u306e\u8b70\u8ad6\uff1a https://stack-assessment.zulipchat.com/</li> </ul>"},{"location":"ja/#_1","title":"\u554f\u984c\u4f5c\u6210","text":"<p>\u554f\u984c\u4f5c\u6210\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u306f\u4ee5\u4e0b\u306e\u3082\u306e\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\uff1a</p> <ul> <li>\u554f\u984c\u4f5c\u6210\u30af\u30a4\u30c3\u30af\u30fb\u30b9\u30bf\u30fc\u30c8\u30fb\u30ac\u30a4\u30c9\uff1a\"STACK\u3053\u3068\u59cb\u3081\" \u30ac\u30a4\u30c9\u3068\u4e00\u7dd2\u306b\u5229\u7528\u3067\u304d\u307e\u3059\uff0e</li> <li>\u69d8\u3005\u306a\u554f\u984c\u4f5c\u6210\u30c8\u30d4\u30c3\u30af\u306b\u95a2\u3059\u308b\u60c5\u5831:\u8a55\u4fa1\u95a2\u6570, \u5165\u529b, \u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u30fb\u30ec\u30b9\u30dd\u30f3\u30b9\u30fb\u30c4\u30ea\u30fc\uff0c\u7ffb\u8a33.</li> <li>FAQ.</li> <li>\u6570\u5f0f\u51e6\u7406\u30b7\u30b9\u30c6\u30e0Maxima\u306b\u95a2\u3059\u308b\u60c5\u5831\uff1a\u30e9\u30f3\u30c0\u30e0\u5316, \u30b0\u30e9\u30d5\u4f5c\u6210, \u6570\u5f0f\u7c21\u7565\u5316\uff0e</li> </ul>"},{"location":"ja/#_2","title":"\u5b66\u751f\u5411\u3051\u60c5\u5831","text":"<p>STACK\u3092\u5229\u7528\u3059\u308b\u5b66\u751f\u5411\u3051\u60c5\u5831\uff1a</p> <ul> <li>\u6570\u5f0f\u5165\u529b.</li> <li>\u89e3\u7b54\u306e\u8a55\u4fa1.</li> <li>FAQ.</li> </ul>"},{"location":"ja/#_3","title":"\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb","text":"<ul> <li>\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5.</li> </ul>"},{"location":"ja/#_4","title":"\u958b\u767a\u8005\u5411\u3051\u60c5\u5831","text":"<p>\u958b\u767a\u8005\u5411\u3051\u306e\u30c8\u30d4\u30c3\u30af\uff1a</p> <ul> <li>\u958b\u767a\u306e\u6b74\u53f2.</li> <li>STACK\u306e\u7ffb\u8a33.</li> <li>\u5165\u529b\u30bf\u30a4\u30d7\u306e\u958b\u767a.</li> </ul>"},{"location":"ja/AbInitio/","title":"\u554f\u984c\u4f5c\u6210\u30af\u30a4\u30c3\u30af\u30fb\u30b9\u30bf\u30fc\u30c8","text":"<p>STACK\u3092\u521d\u3081\u3066\u5229\u7528\u3059\u308b\u969b\u306f\u3001\u554f\u984c\u4f5c\u6210\u30af\u30a4\u30c3\u30af\u30b9\u30bf\u30fc\u30c8\u30ac\u30a4\u30c9\u304b\u3089\u59cb\u3081\u308b\u3053\u3068\u3092\u304a\u52e7\u3081\u3057\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u30ac\u30a4\u30c9\u306f\u554f\u984c\u4f5c\u6210\u306e\u6700\u3082\u91cd\u8981\u306a\u30c8\u30d4\u30c3\u30af\u3092\u30ab\u30d0\u30fc\u3057\u3001\u5404\u9805\u76ee\u306b\u3064\u3044\u3066\u306e\u89e3\u8aac\u52d5\u753b\u3092\u542b\u307f\u307e\u3059\u3002</p> <ul> <li>\u554f\u984c\u4f5c\u6210\u30af\u30a4\u30c3\u30af\u30fb\u30b9\u30bf\u30fc\u30c8\u30fb\u30ac\u30a4\u30c9 1: \u57fa\u672c\u7684\u306a\u554f\u984c</li> <li>\u554f\u984c\u4f5c\u6210\u30af\u30a4\u30c3\u30af\u30fb\u30b9\u30bf\u30fc\u30c8\u30fb\u30ac\u30a4\u30c9 2: \u554f\u984c\u5909\u6570</li> <li>\u554f\u984c\u4f5c\u6210\u30af\u30a4\u30c3\u30af\u30fb\u30b9\u30bf\u30fc\u30c8\u30fb\u30ac\u30a4\u30c9 3: \u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u3092\u6539\u5584\u3059\u308b</li> <li>\u554f\u984c\u4f5c\u6210\u30af\u30a4\u30c3\u30af\u30fb\u30b9\u30bf\u30fc\u30c8\u30fb\u30ac\u30a4\u30c9 4: \u30e9\u30f3\u30c0\u30e0\u5316</li> <li>\u554f\u984c\u4f5c\u6210\u30af\u30a4\u30c3\u30af\u30fb\u30b9\u30bf\u30fc\u30c8\u30fb\u30ac\u30a4\u30c9 5: \u554f\u984c\u306e\u30c6\u30b9\u30c8</li> <li>\u554f\u984c\u4f5c\u6210\u30af\u30a4\u30c3\u30af\u30fb\u30b9\u30bf\u30fc\u30c8\u30fb\u30ac\u30a4\u30c9 6: \u8907\u6570\u89e3\u7b54\u6b04\u554f\u984c</li> <li>\u554f\u984c\u4f5c\u6210\u30af\u30a4\u30c3\u30af\u30fb\u30b9\u30bf\u30fc\u30c8\u30fb\u30ac\u30a4\u30c9 7: \u6570\u5f0f\u7c21\u7565\u306e\u7121\u52b9\u5316</li> <li>\u554f\u984c\u4f5c\u6210\u30af\u30a4\u30c3\u30af\u30fb\u30b9\u30bf\u30fc\u30c8\u30fb\u30ac\u30a4\u30c9 8: \u554f\u984c\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\u3068\u5c0f\u30c6\u30b9\u30c8</li> </ul>"},{"location":"ja/AbInitio/#_2","title":"\u95a2\u9023\u8a18\u4e8b","text":"<ul> <li>\u554f\u984c\u4f5c\u6210</li> </ul>"},{"location":"ja/AbInitio/Authoring_quick_start_1/","title":"\u554f\u984c\u4f5c\u6210\u30af\u30a4\u30c3\u30af\u30fb\u30b9\u30bf\u30fc\u30c8 1: \u52d5\u4f5c\u3059\u308b\u6700\u5c0f\u9650\u306e\u554f\u984c","text":"<p>1 - \u57fa\u672c\u7684\u306a\u554f\u984c | 2 - \u554f\u984c\u5909\u6570 | 3 - \u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u3092\u6539\u5584\u3059\u308b | 4 - \u30e9\u30f3\u30c0\u30e0\u5316 | 5 - \u554f\u984c\u306e\u30c6\u30b9\u30c8 | 6 - \u8907\u6570\u89e3\u7b54\u6b04\u554f\u984c | 7 - \u6570\u5f0f\u7c21\u7565\u306e\u7121\u52b9\u5316 | 8 - \u554f\u984c\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\u3068\u5c0f\u30c6\u30b9\u30c8</p> <p>\u554f\u984c\u4f5c\u6210\u30af\u30a4\u30c3\u30af\u30fb\u30b9\u30bf\u30fc\u30c8\u30fb\u30ac\u30a4\u30c9\u306fSTACK\u3067\u306e\u554f\u984c\u306e\u4f5c\u6210\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002 \u30d1\u30fc\u30c81\u3067\u306f\u52d5\u4f5c\u3059\u308b\u6700\u5c0f\u9650\u306e\u554f\u984c\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u6b21\u306e\u30d3\u30c7\u30aa\u3067\u305d\u306e\u3084\u308a\u65b9\u3092\u8aac\u660e\u3057\u307e\u3059\uff1a</p>"},{"location":"ja/AbInitio/Authoring_quick_start_1/#_1","title":"\u59cb\u3081\u306b","text":"<p>\u4ee5\u4e0b\u3092\u4eee\u5b9a\u3057\u307e\u3059:</p> <ol> <li>STACK\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u305f\u30b3\u30fc\u30b9\u306b\u6559\u5e2b\u3068\u3057\u3066\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3053\u3068\u3002</li> <li>\u7c21\u5358\u306a\u6570\u5f0f\u306e\u8a18\u6cd5\u306b\u6163\u308c\u3066\u3044\u308b\u3053\u3068\u3002 \u3044\u304f\u3064\u304b\u306e\u57fa\u672c\u7684\u306a\u4f8b\u306f\uff0cCASText \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u8a18\u8f09\u3055\u308c\u3066\u3044\u307e\u3059\u3002</li> </ol>"},{"location":"ja/AbInitio/Authoring_quick_start_1/#_2","title":"\u6700\u5c0f\u9650\u306e\u554f\u984c\u3092\u4f5c\u6210\u3059\u308b","text":"<p>\u3042\u306a\u305f\u306e\u30b3\u30fc\u30b9\u306b\u79fb\u52d5\u3057\uff0c\u554f\u984c\u30d0\u30f3\u30af\u3067\uff0c\u300c\u65b0\u3057\u3044\u554f\u984c\u3092\u4f5c\u6210\u3059\u308b\u300d\u304b\u3089\u300cSTACK\u300d\u554f\u984c\u30bf\u30a4\u30d7\u3092\u9078\u629e\u3057\u3066\u300c\u8ffd\u52a0\u300d\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p>\u305f\u304f\u3055\u3093\u306e\u8a2d\u5b9a\u9805\u76ee\u304c\u3042\u308a\u307e\u3059\u304c\uff0c\u5fc5\u9808\u306a\u9805\u76ee\u306f\u307b\u3093\u306e\u4e00\u90e8\u3067\u3059\u3002</p> <ol> <li>\u300c\u554f\u984c\u540d\u300d</li> <li>\u751f\u5f92\u306b\u8868\u793a\u3055\u308c\u308b\u300c\u554f\u984c\u30c6\u30ad\u30b9\u30c8\u300d</li> <li>\u300c\u6b63\u89e3\u300d\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u554f\u984c\u3067\u306f\u300c\u89e3\u7b54\u6b04: ans1\u300d\u306b\u3042\u308a\u307e\u3059\uff09</li> <li>\u89e3\u7b54\u306e\u8a55\u4fa1\u65b9\u6cd5</li> </ol> <p>\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\uff0c\u65b0\u3057\u3044\u554f\u984c\u306f\u81ea\u52d5\u7684\u306b1\u3064\u306e\u5165\u529b\u3068\uff0c\u89e3\u7b54\u3092\u8a55\u4fa1\u3059\u308b\u305f\u3081\u306e1\u3064\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u307e\u3059\u3002</p>"},{"location":"ja/AbInitio/Authoring_quick_start_1/#_3","title":"\u554f\u984c\u540d","text":"<p><code>\u554f\u984c1</code>\u306e\u3088\u3046\u306a\u554f\u984c\u540d\u3092\u8a2d\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"ja/AbInitio/Authoring_quick_start_1/#_4","title":"\u554f\u984c\u30c6\u30ad\u30b9\u30c8","text":"<p> (x-1)^3\u3092x\u306b\u3064\u3044\u3066\u5fae\u5206\u3059\u308b\u554f\u984c\u306b\u3064\u3044\u3066\u8003\u3048\u307e\u3057\u3087\u3046\u3002 \u307e\u305a\u306f\u554f\u984c\u6587\u305d\u306e\u3082\u306e\u3092\u66f8\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u4ee5\u4e0b\u3092\u554f\u984c\u30c6\u30ad\u30b9\u30c8\u306e\u5165\u529b\u30dc\u30c3\u30af\u30b9\u306b\u30b3\u30d4\u30fc\u3057\u3066\u304f\u3060\u3055\u3044\uff082\u884c\u76ee\u306f\u6700\u521d\u304b\u3089\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\uff09\u3002</p> <pre><code>\\((x-1)^3\\)\u3092 \\(x\\) \u306b\u3064\u3044\u3066\u5fae\u5206\u3057\u306a\u3055\u3044\u3002\n[[input:ans1]] [[validation:ans1]]\n</code></pre> <p>\u88dc\u8db3:</p> <ul> <li>Moodle \u306b\u306f\u5e45\u5e83\u3044\u30c6\u30ad\u30b9\u30c8\u30a8\u30c7\u30a3\u30bf\u306e\u9078\u629e\u80a2\u304c\u3042\u308b\u305f\u3081\uff0c\u3053\u306e\u30af\u30a4\u30c3\u30af\u30fb\u30b9\u30bf\u30fc\u30c8\u30fb\u30ac\u30a4\u30c9\u306e\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8\u306f\u3042\u306a\u305f\u304c\u4f7f\u7528\u3059\u308b Moodle \u3068\u306f\u82e5\u5e72\u8868\u793a\u304c\u7570\u306a\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u307e\u305f\uff0c\u30b3\u30d4\u30fc\u3059\u308b\u30c6\u30ad\u30b9\u30c8\u306f\u6574\u5f62\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002</li> <li>\u30c6\u30ad\u30b9\u30c8\u306f LaTeX \u306e\u6570\u5f0f\u74b0\u5883\u3092\u542b\u307f\u307e\u3059\u3002\u6570\u5f0f\u74b0\u5883<code>$..$</code>\u3068<code>$$..$$</code>\u306f\u4f7f\u7528\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002 \u4ee3\u308f\u308a\u306b\uff0c\u30a4\u30f3\u30e9\u30a4\u30f3\u6570\u5f0f\u3068\u5225\u884c\u7acb\u3066\u6570\u5f0f\u306b\u306f\u305d\u308c\u305e\u308c<code>\\(..\\)</code>\u3068 <code>\\[..\\]</code>\u3092\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002(\u53e4\u3044\u6559\u6750\u304c\u305f\u304f\u3055\u3093\u3042\u308b\u5834\u5408\uff0cMoodle qtype_stack\u30d7\u30e9\u30b0\u30a4\u30f3\u30da\u30fc\u30b8\u306b\u81ea\u52d5\u4e00\u62ec\u5909\u63db\u6a5f\u80fd\u304c\u3042\u308a\u307e\u3059)</li> <li>\u5185\u90e8\u7684\u306b\u306f\u751f\u5f92\u306e\u89e3\u7b54\u306f\u5909\u6570 <code>ans1</code> \u306b\u4ee3\u5165\u3055\u308c\u307e\u3059\u3002</li> <li>\u30bf\u30b0<code>[[input:ans1]]</code>\u306f\u751f\u5f92\u304c\u89e3\u7b54\u3092\u5165\u529b\u3059\u308b\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u306e\u4f4d\u7f6e\u3092\u8868\u3057\u307e\u3059\u3002</li> <li>\u30bf\u30b0<code>[[validation:ans1]]</code>\u306f\uff0c\u5165\u529b<code>ans1</code>\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306b\u95a2\u3059\u308b\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u306b\u7f6e\u304d\u63db\u3048\u3089\u308c\u307e\u3059\u3002\u4f8b\uff1a\u62ec\u5f27\u306e\u6b20\u843d\u306b\u3088\u308b\u69cb\u6587\u30a8\u30e9\u30fc</li> <li>\u3053\u308c\u3089\u306e\u30bf\u30b0\u306f\u554f\u984c\u30c6\u30ad\u30b9\u30c8\u306e\u3069\u3053\u306b\u3067\u3082\u914d\u7f6e\u3067\u304d\u307e\u3059\u3002</li> </ul>"},{"location":"ja/AbInitio/Authoring_quick_start_1/#ans1","title":"\u89e3\u7b54\u6b04: ans1","text":"<p>\u4e0b\u306b\u30b9\u30af\u30ed\u30fc\u30eb\u3059\u308b\u3068\uff0c\u5165\u529b\u30bb\u30af\u30b7\u30e7\u30f3\u306e\u7de8\u96c6\u30d5\u30a9\u30fc\u30e0\u304c\u3042\u308a\u307e\u3059\u3002\u898b\u51fa\u3057<code>\u89e3\u7b54\u6b04: ans1</code>\u3092\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068\uff0c\u95a2\u9023\u3059\u308b\u8a2d\u5b9a\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002</p> <p>\u6700\u5c0f\u9650\u306e\u554f\u984c\u306e\u305f\u3081\u306b\uff0c\u6b63\u89e3 \u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u300c\u6b63\u89e3\u300d\u6b04\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8a2d\u5b9a\u3057\u307e\u3057\u3087\u3046\u3002</p> <pre><code>3*(x-1)^2\n</code></pre> <p>\u88dc\u8db3</p> <ol> <li>\u751f\u5f92\u306e\u89e3\u7b54\u306f\u89e3\u7b54\u5909\u6570 ans1 \u306b\u683c\u7d0d\u3055\u308c\u307e\u3059\u3002</li> <li>\u6b63\u89e3\u306fLaTeX\u3067\u306f\u306a\u304f\uff0cCAS\uff08Maxima\uff09\u306e\u69cb\u6587\u3067\u6709\u52b9\u306a\u5f0f\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u7279\u306b\uff0c\u4e57\u7b97\u306f <code>*</code> \u3092\u4f7f\u3063\u3066\u660e\u793a\u7684\u306b\u6307\u5b9a\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002</li> <li>\u5165\u529b\u306f\uff0c\u69d8\u3005\u306a\u89e3\u7b54\u5f62\u5f0f\u3092\u30c9\u30ed\u30c3\u30d7\u30c0\u30a6\u30f3\u30e1\u30cb\u30e5\u30fc\u304b\u3089\u9078\u629e\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306f \u6570\u5f0f \u3067\uff0c\u4eca\u56de\u306f\u3053\u308c\u3092\u5229\u7528\u3057\u307e\u3059\u3002</li> <li>\u554f\u984c\u306f\u8907\u6570\u306e\u89e3\u7b54\u6b04\u3092\u6301\u3064\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u306b\u3064\u3044\u3066\u306f\u5f8c\u306e\u30d1\u30fc\u30c8\u3067\u8aac\u660e\u3057\u307e\u3059\u3002</li> </ol>"},{"location":"ja/AbInitio/Authoring_quick_start_1/#-prt","title":"\u89e3\u7b54\u306e\u6b63\u3057\u3055\u3092\u8a55\u4fa1\u3059\u308b - \u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u30fb\u30ec\u30b9\u30dd\u30f3\u30b9\u30fb\u30c4\u30ea\u30fc (PRT)","text":"<p>\u6b21\u306f\uff0c\u5b66\u751f\u306e\u89e3\u7b54\u304c\u6b63\u3057\u3044\u304b\u3069\u3046\u304b\u3092\u5224\u65ad\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p> <p>\u751f\u5f92\u306e\u89e3\u7b54\u3092\u63a1\u70b9\u3059\u308b\u306b\u306f\uff0c\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u30fb\u30ec\u30b9\u30dd\u30f3\u30b9\u30fb\u30c4\u30ea\u30fc\u3068\u547c\u3070\u308c\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f7f\u3063\u3066\uff0c\u89e3\u7b54\u306e\u6570\u5b66\u7684\u6027\u8cea\u3092\u8a55\u4fa1\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p> <p>\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\uff0c\u65b0\u3057\u3044\u554f\u984c\u306f<code>prt1</code>\u3068\u3044\u3046\u540d\u524d\u306e\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u30fb\u30ec\u30b9\u30dd\u30f3\u30b9\u30fb\u30c4\u30ea\u30fc\u3092\u6301\u3061\u307e\u3059\u3002\u30c4\u30ea\u30fc\u306b\u3088\u3063\u3066\u751f\u6210\u3055\u308c\u305f\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u306f\u9069\u5207\u306a\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u30bf\u30b0<code>[[feedback:prt1]]</code>\u3092\u7f6e\u304d\u63db\u3048\u307e\u3059\u3002</p>"},{"location":"ja/AbInitio/Authoring_quick_start_1/#_5","title":"\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u30fb\u30ec\u30b9\u30dd\u30f3\u30b9\u30fb\u30ce\u30fc\u30c9\u306e\u8a2d\u5b9a","text":"<p>\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u30fb\u30ec\u30b9\u30dd\u30f3\u30b9\u30fb\u30c4\u30ea\u30fc\u306f\uff0c\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u30fb\u30ec\u30b9\u30dd\u30f3\u30b9\u30fb\u30ce\u30fc\u30c9 \u304b\u3089\u306a\u308b\u7a7a\u3067\u306a\u3044\u975e\u5faa\u74b0\u6709\u5411\u30b0\u30e9\u30d5\u3067\uff0c\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\uff0c\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u30fb\u30ec\u30b9\u30dd\u30f3\u30b9\u30fb\u30ce\u30fc\u30c9\u306f1\u3064\u3067\u3059\u3002\u300c\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u30fb\u30ec\u30b9\u30dd\u30f3\u30b9\u30fb\u30c4\u30ea\u30fc:prt1\u300d\u306e\u30ce\u30fc\u30c91\u306e\u57fa\u672c\u7684\u306a\u8aac\u660e\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002</p> <ol> <li><code>\u8a55\u4fa1\u5bfe\u8c61</code>\u306f\u8a55\u4fa1\u95a2\u6570\u306b\u3088\u3063\u3066<code>\u8a55\u4fa1\u57fa\u6e96</code>\u3068\u6bd4\u8f03\u3055\u308c\u307e\u3059\u3002\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u3064\u3051\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002</li> <li>\u3082\u3057<code>\u771f</code>\u306a\u3089\u771f\u306e\u5834\u5408\u306e\u5206\u5c90\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002</li> <li>\u3082\u3057<code>\u507d</code>\u306a\u3089\u507d\u306e\u5834\u5408\u306e\u5206\u5c90\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002</li> </ol> <p>\u5404\u5206\u5c90\u3067\u306f\u4ee5\u4e0b\u306e\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p> <ul> <li>\u70b9\u6570\u3092\u5272\u308a\u5f53\u3066/\u66f4\u65b0\u3059\u308b\u3002</li> <li>\u5b66\u751f\u306b\u5f62\u6210\u7684\u8a55\u4fa1\u3092\u5272\u308a\u5f53\u3066\u308b\u3002</li> <li>\u7d71\u8a08\u30ec\u30dd\u30fc\u30c8\u7528\u306b\u89e3\u7b54\u8a18\u9332\u3092\u6b8b\u3059\u3002</li> <li>\u6b21\u306e\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u30fb\u30ec\u30b9\u30dd\u30f3\u30b9\u30fb\u30ce\u30fc\u30c9\u306b\u9032\u3080\u304b\uff0c<code>[stop]</code>\u3067\u51e6\u7406\u3092\u7d42\u4e86\u3059\u308b\u3002</li> </ul> <p>\u751f\u5f92\u304c\u6b63\u3057\u304f\u632f\u308a\u5206\u3051\u3089\u308c\u305f\u3069\u3046\u304b\u3092\u5224\u65ad\u3059\u308b\u305f\u3081\u306b\uff0c\u6700\u521d\u306e\u30ce\u30fc\u30c9\uff08\u30ce\u30fc\u30c91\uff09\u3092\u69cb\u6210\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p> <ol> <li><code>\u8a55\u4fa1\u5bfe\u8c61</code>\u306b\u5909\u6570<code>ans1</code>\u3092\u6307\u5b9a\u3059\u308b\u3002</li> <li><code>\u8a55\u4fa1\u57fa\u6e96</code>\u306b\u6b63\u3057\u3044\u89e3\u7b54\uff0c\u3059\u306a\u308f\u3061<code>3*(x-1)^2</code>\u3092\u8a2d\u5b9a\u3059\u308b\u3002</li> <li>\u8a55\u4fa1\u95a2\u6570 \u306e\u30c9\u30ed\u30c3\u30d7\u30c0\u30a6\u30f3\u30e1\u30cb\u30e5\u30fc\u306b<code>\u4ee3\u6570\u7b49\u4fa1</code>\u304c\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u3002(\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u307e\u3059\u3002)</li> </ol>"},{"location":"ja/AbInitio/Authoring_quick_start_1/#_6","title":"\u554f\u984c\u3092\u4fdd\u5b58\u3059\u308b","text":"<p>\u30da\u30fc\u30b8\u3092\u4e00\u756a\u4e0b\u307e\u3067\u30b9\u30af\u30ed\u30fc\u30eb\u3057\uff0c<code>[\u5909\u66f4\u3092\u4fdd\u5b58\u3057\u3066\u7de8\u96c6\u3092\u7d9a\u3051\u308b]</code>\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u8cea\u554f\u306e\u4fdd\u5b58\u306b\u5931\u6557\u3057\u305f\u5834\u5408\u306f\uff0c\u9593\u9055\u3044\u304c\u306a\u3044\u304b\u3088\u304f\u78ba\u8a8d\u3057\uff0c\u4fee\u6b63\u3057\u3066\u518d\u5ea6\u4fdd\u5b58\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p>\u3053\u308c\u3067\u6700\u5c0f\u9650\u306e\u554f\u984c\u304c\u5b8c\u6210\u3057\u307e\u3057\u305f\u3002</p> <p>\u8981\u7d04\u3059\u308b\u3068\uff0c\u4ee5\u4e0b\u3092\u8a2d\u5b9a\u3057\u307e\u3057\u305f</p> <ol> <li>\u300c\u554f\u984c\u540d\u300d</li> <li>\u300c\u554f\u984c\u30c6\u30ad\u30b9\u30c8\u300d</li> <li>\u6a21\u7bc4\u89e3\u7b54\u3067\u3042\u308b\u300c\u6b63\u89e3\u300d</li> <li>\u89e3\u7b54\u306e\u8a55\u4fa1\u65b9\u6cd5</li> </ol> <p>\u6b21\u306b\uff0c\u30da\u30fc\u30b8\u306e\u4e0b\u90e8\u306b\u3042\u308b\u300c\u30d7\u30ec\u30d3\u30e5\u30fc\u300d\u3092\u62bc\u3057\u3066\uff0c\u554f\u984c\u3092\u30c6\u30b9\u30c8\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p> <p> </p>"},{"location":"ja/AbInitio/Authoring_quick_start_1/#_7","title":"\u554f\u984c\u306e\u30d7\u30ec\u30d3\u30e5\u30fc","text":"<p>\u30c6\u30b9\u30c8\u3092\u30b9\u30d4\u30fc\u30c9\u30a2\u30c3\u30d7\u3059\u308b\u305f\u3081\uff0c\u30d7\u30ec\u30d3\u30e5\u30fc\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u30b9\u30af\u30ed\u30fc\u30eb\u3057\uff0c\u300cAttempt options\u300d\u307e\u305f\u306f\u300c\u30d7\u30ec\u30d3\u30e5\u30fc\u30aa\u30d7\u30b7\u30e7\u30f3\u300d (moodle\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u4f9d\u5b58\u3057\u307e\u3059) \u306e\u4e2d\u306b\u3042\u308b\uff0c\u300c\u554f\u984c\u52d5\u4f5c\u300d\u304c\u300c\u30a2\u30c0\u30d7\u30c6\u30a3\u30d6\u30e2\u30fc\u30c9\u300d\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u305d\u3057\u3066\uff0c\u300c\u3053\u308c\u3089\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u518d\u958b\u3059\u308b\u300d\u3092\u5b9f\u884c\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u308c\u306b\u3088\u308a\uff0c\u300c\u9001\u4fe1\u3057\u3066\u7d42\u4e86\u3059\u308b\u300d\u3068\u300c\u518d\u958b\u3059\u308b\u300d\u3092\u7e70\u308a\u8fd4\u3059\u3053\u3068\u306a\u304f\uff0c\u3042\u306a\u305f\u306e\u89e3\u7b54\u3092\u78ba\u8a8d\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p> <p>\u30d7\u30ec\u30d3\u30e5\u30fc\u3092\u958b\u3044\u305f\u72b6\u614b\u3067\uff0c\u6b21\u306e\u3088\u3046\u306b\u89e3\u7b54\u6b04\u306b\u5165\u529b\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002</p> <pre><code>3*(x-1)^2\n</code></pre> <p>\u30b7\u30b9\u30c6\u30e0\u306f\u307e\u305a\uff0c\u3053\u306e\u89e3\u7b54\u306e\u69cb\u6587\u7684\u59a5\u5f53\u6027\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002</p> <p><code>\u30c1\u30a7\u30c3\u30af</code>\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u307e\u3059\u3002</p> <p>\u30b7\u30b9\u30c6\u30e0\u306f\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u30fb\u30ec\u30b9\u30dd\u30f3\u30b9\u30fb\u30c4\u30ea\u30fc\u3092\u5b9f\u884c\u3057\uff0c\u3042\u306a\u305f\u306e\u89e3\u7b54\u304c\u6a21\u7bc4\u89e3\u7b54 <code>3*(x-1)^2</code> \u3068\u7b49\u4fa1\u304b\u3069\u3046\u304b\u3092\u78ba\u5b9a\u3057\u307e\u3059\u3002</p>"},{"location":"ja/AbInitio/Authoring_quick_start_1/#_8","title":"\u5b66\u751f\u306e\u89e3\u7b54\u306e\u8a55\u4fa1","text":"<p>\u5b66\u751f\u304c\u89e3\u7b54\u306e\u8a55\u4fa1\u306b\u306f\uff0c2\u6bb5\u968e\u306e\u30d7\u30ed\u30bb\u30b9\u304c\u3042\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p>\u7b2c\u4e00\u6bb5\u968e\u306f\u300c\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u300d\u3067\u3059\u3002\u901a\u5e38\uff0c\u30b5\u30fc\u30d0\u30fc\u306f\u300c\u30a4\u30f3\u30b9\u30bf\u30f3\u30c8\u691c\u8a3c\u300d\u3092\u6709\u52b9\u306b\u3057\u3066\u3044\u307e\u3059\u3002 \u5f0f\u304c\u69cb\u6587\u7684\u306b\u6709\u52b9\u306a\u5834\u5408\uff0cSTACK\u306f\u751f\u5f92\u306b\u300c\u3042\u306a\u305f\u306e\u5165\u529b\u3057\u305f\u6570\u5f0f\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059 :\u300d\u3068\u8868\u793a\u3057\uff0c\u305d\u306e\u5f0f\u3092\u8868\u793a\u3057\u307e\u3059\u3002 \u7121\u52b9\u306a\u56de\u7b54\u306f\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8868\u793a\u3057\u307e\u3059\u3002</p> <p>\u7b2c2\u6bb5\u968e\u306f\u6709\u52b9\u306a\u5f0f\u304c\u9001\u4fe1\u3055\u308c\u305f\u3068\u304d\u306b\u5b9f\u884c\u3055\u308c\uff0c\u5b66\u751f\u306e\u89e3\u7b54\u304c\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u30fb\u30ec\u30b9\u30dd\u30f3\u30b9\u30fb\u30c4\u30ea\u30fc\u306b\u3088\u3063\u3066\u8a55\u4fa1\u3055\u308c\u307e\u3059\u3002</p> <p>\u3053\u306e2\u6bb5\u968e\u306e\u30d7\u30ed\u30bb\u30b9\u306fSTACK\u306b\u56fa\u6709\u306e\u4e0d\u53ef\u6b20\u306a\u7279\u5fb4\u3067\u3059\u3002 \u5b66\u751f\u3092\u52a9\u3051\u308b\u305f\u3081\u306b\uff0c\u691c\u8a3c\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u305f\u304f\u3055\u3093\u3042\u308a\u307e\u3059\u3002 \u4f8b\u3048\u3070\uff0c\u4e0a\u8a18\u306e\u4f8b\u984c\u3067\u306f\uff0c\u3059\u3079\u3066\u306e\u5f0f\u306f\u53b3\u5bc6\u306a\u69cb\u6587\u306b\u5f93\u3063\u3066\u3044\u307e\u3059\u3002\u4f8b\u3048\u3070<code>3*(x-1)^2</code>\u306e\u3088\u3046\u306a\u5f0f\u3092\u7528\u3044\uff0c\u8a18\u53f7<code>*</code>\u3067\u639b\u3051\u7b97\u3092\u8868\u3057\u307e\u3057\u305f\u3002\u751f\u5f92\u304c <code>3(x-1)^2</code> \u306e\u3088\u3046\u306a\u5f0f\u3092\u5165\u529b\u3057\u305f\u3068\u304d\uff0c\u6697\u9ed9\u306e\u639b\u3051\u7b97\u3092\u89e3\u91c8\u3059\u308b\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u3057\u304b\u3057\uff0c\u300c\u6b63\u89e3\u300d\u306e\u5165\u529b\u306f\u66d6\u6627\u3055\u3092\u907f\u3051\u308b\u305f\u3081\u306b\u5e38\u306b\u53b3\u5bc6\u3067\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u308c\u3089\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u95a2\u3059\u308b\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f\u5165\u529b\u30bb\u30af\u30b7\u30e7\u30f3\u306b\u3042\u308a\u307e\u3059\u3002</p>"},{"location":"ja/AbInitio/Authoring_quick_start_1/#_9","title":"\u6b21\u306e\u30b9\u30c6\u30c3\u30d7","text":"<p>\u3053\u308c\u3067STACK\u3067\u7c21\u5358\u306a\u554f\u984c\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002</p>"},{"location":"ja/AbInitio/Authoring_quick_start_1/#_10","title":"\u554f\u984c\u4f5c\u6210\u30af\u30a4\u30c3\u30af\u30fb\u30b9\u30bf\u30fc\u30c8\u30fb\u30ac\u30a4\u30c9\u306e\u6b21\u306e\u30d1\u30fc\u30c8\u3067\u306f\uff0c\u554f\u984c\u5909\u6570\u306e\u4f7f\u7528\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059","text":""},{"location":"ja/AbInitio/Authoring_quick_start_2/","title":"\u554f\u984c\u4f5c\u6210\u30af\u30a4\u30c3\u30af\u30fb\u30b9\u30bf\u30fc\u30c8\u30fb\u30ac\u30a4\u30c92\uff1a\u554f\u984c\u5909\u6570","text":"<p>1 - \u57fa\u672c\u7684\u306a\u554f\u984c | 2 - \u554f\u984c\u5909\u6570 | 3 - \u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u3092\u6539\u5584\u3059\u308b | 4 - \u30e9\u30f3\u30c0\u30e0\u5316 | 5 - \u554f\u984c\u306e\u30c6\u30b9\u30c8 | 6 - \u8907\u6570\u89e3\u7b54\u554f\u984c | 7 - \u6570\u5f0f\u7c21\u7565\u306e\u7121\u52b9\u5316 | 8 - \u554f\u984c\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\u3068\u5c0f\u30c6\u30b9\u30c8</p> <p>\u554f\u984c\u4f5c\u6210\u30af\u30a4\u30c3\u30af\u30fb\u30b9\u30bf\u30fc\u30c8\u30fb\u30ac\u30a4\u30c9\u306e\u3053\u306e\u90e8\u5206\u3067\u306f\u554f\u984c\u5909\u6570\u306e\u4f7f\u7528\u306b\u3064\u3044\u3066\u6271\u3044\u307e\u3059\u3002\u6b21\u306e\u30d3\u30c7\u30aa\u3067\u305d\u306e\u30d7\u30ed\u30bb\u30b9\u3092\u8aac\u660e\u3057\u3066\u3044\u307e\u3059\u306e\u3067,\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\uff1a</p>"},{"location":"ja/AbInitio/Authoring_quick_start_2/#_1","title":"\u4f8b\u984c","text":"<p>\u3053\u306e\u4f8b\u3067\u306f,\u7c21\u5358\u306a\u7a4d\u5206\u306e\u554f\u984c\u3092\u6271\u3044\u307e\u3059\u3002\u4e0b\u8a18\u306f\u5178\u578b\u7684\u306a\u7df4\u7fd2\u554f\u984c\u3067\u3059\u3002</p> <p></p> <p>( Advanced Mathematics for AS and A level 2 (A-level mathematics), Haese Mathematics (2018) 978-1-925489-32-3 \u3088\u308a\u8a31\u53ef\u3092\u5f97\u3066\u8ee2\u8f09)</p> <p> \u3092\u6c42\u3081\u308b\u554f\u984c\u3092\u4f5c\u6210\u3057\u307e\u3057\u3087\u3046\u3002\u65b0\u3057\u3044STACK\u554f\u984c\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u524d\u3068\u540c\u3058\u3088\u3046\u306b,\u554f\u984c\u306b\u300c\u7a4d\u5206\u306e\u4f8b\u300d\u306e\u3088\u3046\u306a\u554f\u984c\u540d\u3092\u4ed8\u3051\u307e\u3059\u3002</p>"},{"location":"ja/AbInitio/Authoring_quick_start_2/#_2","title":"\u554f\u984c\u5909\u6570\u306e\u4f7f\u7528","text":"<p>\u6b21\u306e\u30b9\u30c6\u30c3\u30d7\u306f\u554f\u984c\u6587\u3092\u8ffd\u52a0\u3057,\u6559\u5e2b\u306e\u7b54\u3048 <code>-1*(x-1)^(-3)+c</code> \u3092 <code>\u6b63\u89e3</code> \u30d5\u30a3\u30fc\u30eb\u30c9\u3068 <code>\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u30fb\u30ec\u30b9\u30dd\u30f3\u30b9\u30fb\u30c4\u30ea\u30fc</code> \u306b\u8ffd\u52a0\u3059\u308b\u3053\u3068\u3067\u3059\u3002\u3057\u304b\u3057,\u5f0f\u3068\u6a21\u7bc4\u89e3\u7b54\u306f\u901a\u5e38\u8907\u6570\u56de\u53c2\u7167\u3055\u308c\u307e\u3059\u306e\u3067,\u30aa\u30d7\u30b7\u30e7\u30f3\u306e \u554f\u984c\u5909\u6570 \u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u4f7f\u7528\u3057\u3066\u300c\u554f\u984c\u5909\u6570\u300d\u306b\u5272\u308a\u5f53\u3066\u308b\u306e\u304c\u6700\u3082\u7c21\u5358\u3067\u3059\u3002</p> <p>\u554f\u984c\u5909\u6570\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044</p> <pre><code>exp: 3*(x-1)^(-4)\uff1b\nta: int(exp,x)+c\uff1b\n</code></pre> <p>\u554f\u984c\u5909\u6570\u306e\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u306fMaxima\u306e\u6587\u6cd5\u306b\u57fa\u3065\u3044\u3066\u3044\u307e\u3059\u3002\u7279\u306b,\u30b3\u30ed\u30f3 <code>:</code> \u306f\u5909\u6570\u306b\u5024\u3092\u4ee3\u5165\u3059\u308b\u305f\u3081\u306b\u4f7f\u308f\u308c\u307e\u3059\u3002\u3064\u307e\u308a,<code>a1</code> \u306b <code>5</code> \u3068\u3044\u3046\u5024\u3092\u4ee3\u5165\u3059\u308b\u306b\u306f,<code>a1:5</code> \u3068\u3044\u3046\u69cb\u6587\u3092\u4f7f\u3044\u307e\u3059\u3002\u4e00\u822c\u7684\u306b,1\u6587\u5b57\u306e\u5909\u6570\u540d\u306f\u751f\u5f92\u304c\u5165\u529b\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3042\u308b\u305f\u3081,\u8907\u6570\u6587\u5b57\u306e\u5909\u6570\u540d\u3092\u3064\u3051\u308b\u3068\u3088\u3044\u3067\u3059\u3002\u306a\u305c\u306a\u3089,\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u8907\u6570\u6587\u5b57\u306e\u5909\u6570\u306f\u751f\u5f92\u304c\u5165\u529b\u3067\u304d\u306a\u3044\u304b\u3089\u3067\u3059\u3002\u3055\u3089\u306b,\u5404\u884c\u306e\u6700\u5f8c\u306b\u30bb\u30df\u30b3\u30ed\u30f3\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u306f\u4efb\u610f\u3067\u3059\u304c,\u3064\u3051\u3066\u304a\u304f\u3053\u3068\u3092\u304a\u52e7\u3081\u3057\u307e\u3059\u3002</p> <p>\u4e0d\u5b9a\u7a4d\u5206\u3092\u6c42\u3081\u308b\u305f\u3081\u306b<code>int()</code>\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u3066\u6a21\u7bc4\u89e3\u7b54\u3092\u6c7a\u5b9a\u3059\u308b\u305f\u3081\u306bCAS\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002CAS\u304c\u4e0d\u5b9a\u7a4d\u5206\u3092\u6c7a\u5b9a\u3059\u308b\u3068\u304d,\u7a4d\u5206\u5b9a\u6570\u306f\u542b\u307e\u308c\u306a\u3044\u306e\u3067,\u81ea\u5206\u3067\u8ffd\u52a0\u3057\u3066\u304a\u304d\u307e\u3059\u3002</p> <p>\u3053\u308c\u3067\uff0c\u554f\u984c\u6587\u306e\u5165\u529b\u304c\u304b\u306a\u308a\u901f\u304f\u306a\u308a\u307e\u3059\uff0e\u554f\u984c\u30c6\u30ad\u30b9\u30c8\u306b\u6b21\u306e\u3088\u3046\u306b\u66f8\u304d\u52a0\u3048\u3066\u304f\u3060\u3055\u3044\uff1a</p> <pre><code>\u7a4d\u5206 \\(\\int{@exp@} \\mathrm{d}x\\)\u3000\u3092\u8a08\u7b97\u305b\u3088\u3002\n[[input:ans1]] [[validation:ans1]]\n</code></pre> <p>\u5909\u6570 <code>exp</code> \u3092\u5b9a\u7fa9\u3057,\u554f\u984c\u30c6\u30ad\u30b9\u30c8\u3067\u4f7f\u3063\u3066\u307e\u3059\u3002LaTeX\u306e\u6570\u5f0f\u306e<code>\\(..\\)</code>\u8a18\u53f7\u3068 <code>{@..@}</code> \u8a18\u53f7\u306e\u9055\u3044\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u3082\u542b\u3081,\u554f\u984c\u7de8\u96c6\u5185\u306e\u30c6\u30ad\u30b9\u30c8\u30d9\u30fc\u30b9\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306f\u3059\u3079\u3066CAS text\u3067\u3059\u3002\u3053\u308c\u306f\u6570\u5b66\u304c\u633f\u5165\u3067\u304d\u308bHTML\u3067\u3059\u3002LaTeX\u306f <code>\\(.. \\)</code> \u306e\u9593\u306b\u8a18\u8ff0\u3055\u308c,CAS\u306e\u8a18\u8ff0\uff08\u5909\u6570\u3082\u542b\u3080\uff09\u306f <code>{@..@}</code>\u306e\u9593\u306b\u8a18\u8ff0\u3057\u307e\u3059\u3002CAS\u306e\u8a18\u8ff0\u306f\u554f\u984c\u5909\u6570\u3092\u53c2\u7167\u3057\u3066\u8a55\u4fa1\u3055\u308c,LaTeX\u3068\u3057\u3066\u8868\u793a\u3055\u308c\u307e\u3059\u3002</p> <p>\u3053\u3053\u3067\u306f<code>{@exp@}</code>\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u305f\u3081,\u554f\u984c\u304c\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3055\u308c\u305f\u3068\u304d,\u753b\u9762\u4e0a \u306b<code>exp</code>\u306f\u8868\u793a\u3055\u308c\u305a\uff0c<code>exp</code>\u306e\u5024\u3067\u3042\u308b \\frac{3}{(x-1)^{-4}} \u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002</p> <p>\u89e3\u7b54\u6b04\uff1a<code>ans1</code> \u3067,<code>\u6b63\u89e3</code> \u306b\u5909\u6570 <code>ta</code> \u306b\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p>\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u30fb\u30ec\u30b9\u30dd\u30f3\u30b9\u30fb\u30c4\u30ea\u30fc\u3067\u306f,<code>\u8a55\u4fa1\u95a2\u6570</code> \u3092 <code>\u4ee3\u6570\u7b49\u4fa1</code>, <code>\u8a55\u4fa1\u5bfe\u8c61</code> \u3092 <code>ans1</code>, <code>\u8a55\u4fa1\u57fa\u6e96</code> \u3092 <code>ta</code> \u306b\u8a2d\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p>\u554f\u984c\u5909\u6570\u306e\u4f7f\u7528\u306f\u6642\u9593\u306e\u7bc0\u7d04\u306b\u306a\u308a,\u5c06\u6765\u7684\u306b\u8cea\u554f\u306e\u5185\u5bb9\u3092\u7c21\u5358\u306b\u5909\u66f4\u3067\u304d\u308b\u306e\u3067,\u983b\u7e41\u306b\u4f7f\u7528\u3059\u308b\u3053\u3068\u3092\u304a\u52e7\u3081\u3057\u307e\u3059\u3002</p>"},{"location":"ja/AbInitio/Authoring_quick_start_2/#_3","title":"\u6b21\u306e\u30b9\u30c6\u30c3\u30d7","text":"<p>\u3053\u308c\u3067STACK\u3067\u554f\u984c\u5909\u6570\u3092\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002</p>"},{"location":"ja/AbInitio/Authoring_quick_start_2/#_4","title":"\u30aa\u30fc\u30b5\u30ea\u30f3\u30b0\u30af\u30a4\u30c3\u30af\u30b9\u30bf\u30fc\u30c8\u30ac\u30a4\u30c9\u306e\u6b21\u306e\u30d1\u30fc\u30c8\u3067\u306f,\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u306e\u6539\u5584\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002","text":""},{"location":"ja/AbInitio/Authoring_quick_start_3/","title":"\u554f\u984c\u4f5c\u6210\u30af\u30a4\u30c3\u30af\u30fb\u30b9\u30bf\u30fc\u30c8\u30fb\u30ac\u30a4\u30c9 3\uff1a\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u3092\u6539\u5584\u3059\u308b","text":"<p>1 - \u57fa\u672c\u7684\u306a\u554f\u984c | 2 - \u554f\u984c\u5909\u6570 | 3 - \u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u3092\u6539\u5584\u3059\u308b | 4 - \u30e9\u30f3\u30c0\u30e0\u5316 | 5 - \u554f\u984c\u306e\u30c6\u30b9\u30c8 | 6 - \u8907\u6570\u89e3\u7b54\u6b04\u554f\u984c | 7 - \u6570\u5f0f\u7c21\u7565\u306e\u7121\u52b9\u5316 | 8 - \u554f\u984c\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\u3068\u5c0f\u30c6\u30b9\u30c8</p> <p>\u554f\u984c\u4f5c\u6210\u30af\u30a4\u30c3\u30af\u30fb\u30b9\u30bf\u30fc\u30c8\u30fb\u30ac\u30a4\u30c9\u306e\u3053\u306e\u30d1\u30fc\u30c8\u3067\u306f\u3001\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u306e\u6539\u5584\u306b\u3064\u3044\u3066\u6271\u3044\u307e\u3059\u3002\u6b21\u306e\u30d3\u30c7\u30aa\u3067\u305d\u306e\u3084\u308a\u65b9\u3092\u8aac\u660e\u3057\u307e\u3059\uff1a</p>"},{"location":"ja/AbInitio/Authoring_quick_start_3/#_1","title":"\u306f\u3058\u3081\u306b","text":"<p>\u76f4\u524d\u306e\u30d1\u30fc\u30c8\u3067\u306f,\u554f\u984c\u5909\u6570\u3092\u6271\u3044\u307e\u3057\u305f\u3002\u5177\u4f53\u7684\u306b\u306f,\u88ab\u7a4d\u5206\u95a2\u6570\u3092\u8868\u3059\u5909\u6570<code>exp</code>\u3092\u5b9a\u7fa9\u3057,\u6b63\u7b54\u3092\u8868\u3059\u5909\u6570ta\u3092\u5b9a\u7fa9\u3057\u307e\u3057\u305f\u3002\u305d\u3057\u3066,\u3092\u6c42\u3081\u3055\u305b\u307e\u3057\u305f\u3002</p> <p>\u3053\u306e\u554f\u984c\u306e\u30d7\u30ec\u30d3\u30e5\u30fc\u3092\u8868\u793a\u3057, <code>-1*(x-1)^(-3)+c</code>\u306e\u89e3\u7b54\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u30b7\u30b9\u30c6\u30e0\u306f\u3053\u306e\u89e3\u7b54\u3092\u6b63\u89e3\u3068\u5224\u5b9a\u3057\u307e\u3059\u3002\u6b21\u306b, <code>-1*(x-1)^(-3)+C</code>\uff08<code>C</code>\u304c\u5927\u6587\u5b57\uff09\u306e\u89e3\u7b54\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u6b63\u7b54\u306e<code>-1*(x-1)^(-3)+c</code>\u3068\u6bd4\u8f03\u3057, \u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u30fb\u30ec\u30b9\u30dd\u30f3\u30b9\u30fb\u30c4\u30ea\u30fc\u306e\u8a55\u4fa1\u95a2\u6570\u3067\u300c\u4ee3\u6570\u7b49\u4fa1\u300d\u3092\u6307\u5b9a\u3057\u3066\u3044\u305f\u306e\u3067\uff0c\u6b63\u7b54\u3068\u306f\u307f\u306a\u3055\u308c\u307e\u305b\u3093\u3002\u7406\u7531\u306f<code>c</code>\u3068<code>C</code>\u306f\u7570\u306a\u308b\u304b\u3089\u3067\u3059\u3002\u901a\u5e38\uff0c\u5b9a\u6570\u306e\u6587\u5b57\u306b\u4f55\u304c\u7528\u3044\u3089\u308c\u308b\u304b\u306f\u554f\u308f\u306a\u3044\u3067\u3057\u3087\u3046\u3002\u3053\u306e\u554f\u984c\u3092\u89e3\u6c7a\u3057\u307e\u3059\u3002</p>"},{"location":"ja/AbInitio/Authoring_quick_start_3/#_2","title":"\u8a55\u4fa1\u95a2\u6570: \u7a4d\u5206","text":"<p>\u3088\u308a\u826f\u3044\u300c\u8a55\u4fa1\u95a2\u6570\u300d\u3092\u7528\u3044\u308b\u3088\u3046\u306b\uff0c\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u30fb\u30ec\u30b9\u30dd\u30f3\u30b9\u30fb\u30c4\u30ea\u30fc\u3092\u4fee\u6b63\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u554f\u984c\u306e\u7de8\u96c6\u753b\u9762\u306b\u623b\u308a\uff0c\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u30fb\u30ec\u30b9\u30dd\u30f3\u30b9\u30fb\u30c4\u30ea\u30fc\u306e\u300c\u8a55\u4fa1\u95a2\u6570\u300d\u306e\u30d7\u30eb\u30c0\u30a6\u30f3\u30e1\u30cb\u30e5\u30fc\u3067\u3001\u300c\u4ee3\u6570\u7b49\u4fa1\u300d\u304b\u3089\u300c\u7a4d\u5206\u300d\u306b\u5909\u66f4\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u305d\u3057\u3066\uff0c\u30aa\u30d7\u30b7\u30e7\u30f3\u6b04\u306b<code>x</code>\uff08\u5909\u6570\uff09\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u300c\u5909\u66f4\u3092\u4fdd\u5b58\u3057\u3066\u7de8\u96c6\u3092\u7d9a\u3051\u308b\u300d\u3092\u30af\u30ea\u30c3\u30af\u3057\uff0c\u3082\u3046\u4e00\u5ea6\u30d7\u30ec\u30d3\u30e5\u30fc\u3092\u5b9f\u884c\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p> <p>\u8a55\u4fa1\u95a2\u6570\u300c\u7a4d\u5206\u300d\u3067\u306f\uff0c\u7a4d\u5206\u5b9a\u6570\u306b\u3069\u306e\u3088\u3046\u306a\u6587\u5b57\u3067\u3082\u6b63\u7b54\u3068\u5224\u5b9a\u3057\u307e\u3059\u3002\u4f8b\u3048\u3070,<code>-(x-1)^(-3)+k</code> \u3068\u5165\u529b\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\u6b63\u7b54\u3068\u5224\u5b9a\u3055\u308c\u307e\u3059\u3002\u307e\u305f,\u5b66\u751f\u304c\u7a4d\u5206\u306e\u5b9a\u6570\u3092\u5fd8\u308c\u305f\u308a,\u8aa4\u3063\u3066\u7a4d\u5206\u306e\u4ee3\u308f\u308a\u306b\u5fae\u5206\u3057\u305f\u5834\u5408\uff0c\u6a19\u6e96\u7684\u306a\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u3092\u4e0e\u3048\u307e\u3059\u3002\u3053\u308c\u3092\u8a66\u3059\u306b\u306f,<code>-12*(x-1)^(-5)</code>\u3068\u5165\u529b\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u3092\u5b66\u751f\u306b\u898b\u305b\u305f\u304f\u306a\u3044\u5834\u5408\u306f,\u300c\u6291\u5236\u300d\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u300cYes\u300d\u3092\u9078\u629e\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p><code>\u89e3\u7b54\u8a18\u9332</code>\u306f\u8a55\u4fa1\u7d50\u679c\u306b\u5bfe\u3057\u4ed8\u3051\u3089\u308c\u308b\u540d\u524d\u3067\u3059\u3002STACK\u306f\u3053\u306e\u540d\u524d\u3092\uff0c\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u30fb\u30ec\u30b9\u30dd\u30f3\u30b9\u30fb\u30c4\u30ea\u30fc\u306e\u540d\u524d\uff0c\u30ce\u30fc\u30c9\u756a\u53f7\uff0c\u30ce\u30fc\u30c9\u306e\u7d50\u679c\u306b\u304b\u3089\u81ea\u52d5\u7684\u306b\u751f\u6210\u3055\u308c\u307e\u3059\u3002</p>"},{"location":"ja/AbInitio/Authoring_quick_start_3/#_3","title":"\u8003\u5bdf","text":"<p>STACK\u3067\u5b66\u751f\u306e\u89e3\u7b54\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3068\u304d,\u6559\u5e2b\u306f \"\u5b66\u751f\u306e\u7b54\u3048\u3092\u6b63\u89e3/\u4e0d\u6b63\u89e3\u306b\u3059\u308b\u6570\u5b66\u7684\u7279\u6027\u306f\u4f55\u304b\"\u3092\u554f\u308f\u306a\u3051\u308c\u3070\u3044\u3051\u307e\u305b\u3093\u3002\u4eca\u56de\u306e\u5834\u5408,\u3053\u306e\u554f\u306f\u4ee5\u4e0b\u3092\u542b\u307f\u307e\u3059:</p> <ul> <li>\u89e3\u7b54\u306f\u88ab\u7a4d\u5206\u95a2\u6570\u306e\u4e0d\u5b9a\u7a4d\u5206\u304b?</li> <li>\u89e3\u7b54\u306b\u306f\u7a4d\u5206\u5b9a\u6570\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u304b\uff1f</li> </ul> <p>\u8a55\u4fa1\u95a2\u6570<code>\u7a4d\u5206</code>\u304c\u3053\u308c\u3089\u306e\u554f\u306b\u7b54\u3048,\u6559\u5e2b\u3053\u306e\u554f\u306b\u5bfe\u5fdc\u3059\u308b\u305f\u3081\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002</p> <p>\u6b21\u306b,\u6559\u5e2b\u306f \"\u5b66\u751f\u304c\u4f55\u3092\u9593\u9055\u3046\u53ef\u80fd\u6027\u304c\u3042\u308a,\u305d\u306e\u7d50\u679c\u3069\u306e\u3088\u3046\u306a\u89e3\u7b54\u3068\u306a\u308b\u306e\u304b\uff1f\"\u3092\u554f\u308f\u306a\u3051\u308c\u3070\u3044\u3051\u307e\u305b\u3093\u3002\u3053\u306e\u8cea\u554f\u306f\u3088\u308a\u96e3\u3057\u3044\u3067\u3059\u3002\u305d\u308c\u306b\u5bfe\u3059\u308b\u56de\u7b54\u306f,\u7d4c\u9a13\u3092\u901a\u3058\u3066,\u307e\u305f\u306f\u524d\u3082\u3063\u3066\u8a3a\u65ad\u7684\u306a\u8cea\u554f\u3092\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u5f97\u3089\u308c\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u5e74\u5ea6\u3054\u3068\u306bSTACK\u306e\u554f\u984c\u3067\u306e\u5b66\u751f\u306e\u89e3\u7b54\u3092\u898b\u76f4\u3057,\u7d4c\u9a13\u306b\u7167\u3089\u3057\u3066\u3088\u308a\u826f\u3044\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u3092\u7d44\u307f\u5165\u308c\u308b\u3068\u826f\u3044\u3067\u3057\u3087\u3046\u3002</p>"},{"location":"ja/AbInitio/Authoring_quick_start_3/#_4","title":"\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u3092\u3055\u3089\u306b\u6539\u826f\u3059\u308b","text":"<p>\u5b66\u751f\u304c\u72af\u3057\u305d\u3046\u306a\u30df\u30b9\u3054\u3068\u306b,\u89e3\u7b54\u4f8b\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u4f8b\u3048\u3070,\u5b66\u751f\u304c\u89e3\u7b54\u306e\u6570\u5f0f\u3092\u5c55\u958b\u3057\u305f\u307e\u307e\u306b\u3057\u3066\u304a\u304f\u3068\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u3082\u3061\u308d\u3093\u6b63\u3057\u3044\u7b54\u3048\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\uff0c\u4e0d\u5fc5\u8981\u306b\u7b54\u3048\u3092\u5c55\u958b\u3057\u306a\u3044\u3088\u3046\u306b\u5b66\u751f\u3092\u6307\u5c0e\u3057\u305f\u3044\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u3002\u5b66\u751f\u304c\u6700\u7d42\u7684\u306a\u89e3\u7b54\u3092\u56e0\u6570\u5206\u89e3\u3057\u305f\u5f62\u3067\u6b8b\u3057\u305f\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u5225\u306e\u30ce\u30fc\u30c9\u3092\u4f5c\u6210\u3057\uff0c\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u30fb\u30ec\u30b9\u30dd\u30f3\u30b9\u30fb\u30c4\u30ea\u30fc\u306e\u65b0\u305f\u306a\u30ce\u30fc\u30c9\u3068\u3057\u3066\u8ffd\u52a0\u3057\u307e\u3059\u3002</p> <p></p> <p>\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u30fb\u30ec\u30b9\u30dd\u30f3\u30b9\u30fb\u30c4\u30ea\u30fc\u306b\u79fb\u52d5\u3057,<code>[\u65b0\u3057\u3044\u30ce\u30fc\u30c9\u3092\u8ffd\u52a0\u3059\u308b]</code>\u3092\u30af\u30ea\u30c3\u30af\u3057\u307e\u3059\u3002\u6b21\u306b\u30ce\u30fc\u30c9 1 \u306e <code>\u771f\u306e\u5834\u5408</code>\u306e\u30d6\u30e9\u30f3\u30c1\u3067 <code>\u6b21\u306e\u30ce\u30fc\u30c9</code> \u3092 <code>\u30ce\u30fc\u30c92</code>\u306b\u5909\u66f4\u3057\u307e\u3059\u3002\u30ce\u30fc\u30c92\u306b\u5165\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u306f\uff0c\u5b66\u751f\u306e\u89e3\u7b54\u306f\u6b63\u7b54\u3067\u3042\u308b\u3053\u3068\u306f\u308f\u304b\u3063\u3066\u3044\u308b\u306e\u3067\uff0c\u89e3\u7b54\u304c\u56e0\u6570\u5206\u89e3\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002\u3053\u308c\u3092\u5b9f\u73fe\u3059\u308b\u305f\u3081\u306b\u8a55\u4fa1\u95a2\u6570\u300c\u56e0\u6570\u5206\u89e3\u300d\u3092\u4f7f\u7528\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u8a55\u4fa1\u5bfe\u8c61\u3068\u8a55\u4fa1\u57fa\u6e96\u304c\u7b49\u4fa1\u3067\u3042\u308b\u3053\u3068\u3068,\u8a55\u4fa1\u5bfe\u8c61\u304c\u56e0\u6570\u5206\u89e3\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u306e\u4e21\u65b9\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\u3002\u3053\u306e\u554f\u984c\u306e\u5834\u5408,\u6211\u3005\u306f\u3059\u3067\u306b\u5b66\u751f\u306e\u89e3\u7b54\u304c\u6b63\u7b54\u3068\u7b49\u4fa1\u3067\u3042\u308b\u3053\u3068\u3092\u77e5\u3063\u3066\u3044\u307e\u3059\uff08\u8a55\u4fa1\u95a2\u6570\u300c\u7a4d\u5206\u300d\u3092\u4f7f\u7528\uff09\u3002\u3057\u305f\u304c\u3063\u3066,\u5b66\u751f\u306e\u89e3\u7b54\u81ea\u8eab\u306b\u5bfe\u3057\u3066\u30c6\u30b9\u30c8\u3059\u308b\u3060\u3051\u3067\u826f\u3044\u306e\u3067\u3059\u3002</p> <p>\u30ce\u30fc\u30c92\u306e\u30d5\u30a9\u30fc\u30e0\u3092\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002</p> <pre><code>\u8a55\u4fa1\u95a2\u6570 = \u56e0\u6570\u5206\u89e3\n\u8a55\u4fa1\u5bfe\u8c61 = strip_int_const(ans1,x)\n\u8a55\u4fa1\u57fa\u6e96 = strip_int_const(ans1,x)\n\u30aa\u30d7\u30b7\u30e7\u30f3 = x\n</code></pre> <p>STACK\u3067\u306f,\u5b66\u751f\u304c\u4f7f\u7528\u3057\u305f\u7a4d\u5206\u5b9a\u6570\u3092\u524a\u9664\u3059\u308bstrip_int_const\u95a2\u6570\u304c\u63d0\u4f9b\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u306a\u304a\uff0c\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u5909\u6570\u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p> <p><code>\u771f</code>\u3068<code>\u507d</code>\u306e\u7d50\u679c\u3067\u70b9\u6570\u3092\u5909\u3048\u306a\u3044\u3088\u3046\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u305d\u308c\u305e\u308c+0\u3068-0\u306b\u8a2d\u5b9a\u3055\u308c\u307e\u3059\u3002\u70b9\u6570\u3092\u5909\u66f4\u3057\u306a\u3044\u3053\u3068\u3067\uff0c\u5b66\u751f\u306e\u89e3\u7b54\u304c\u5c55\u958b\u3055\u308c\u3066\u3044\u3066\u3082\u3001\u6e1b\u70b9\u3055\u308c\u306a\u3044\u3088\u3046\u306b\u3057\u307e\u3059\u3002</p> <p>\u8a55\u4fa1\u95a2\u6570\u300c\u56e0\u6570\u5206\u89e3\u300d\u306f\u81ea\u52d5\u7684\u306b\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u3092\u8fd4\u3057\u307e\u3059\u304c\uff0c\u81ea\u5206\u3067\u66f8\u304d\u305f\u3044\u5834\u5408\u306f\uff0c\u300c\u6291\u5236\u300d\u3092Yes\u306b\u8a2d\u5b9a\u3057\uff0c\u30ce\u30fc\u30c92\u306e\u507d\u306e\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u306b\u6b21\u306e\u3088\u3046\u306b\u5165\u529b\u3057\u307e\u3059\uff1a</p> <pre><code>\u3042\u306a\u305f\u306e\u89e3\u7b54\u306f\u56e0\u6570\u5206\u89e3\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\u6b63\u89e3\u3067\u3059\u304c,\u62ec\u5f27\u3092\u5c55\u958b\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n</code></pre> <p>\u591a\u304f\u306e\u4e00\u822c\u7684\u306a\u9593\u9055\u3044\u306b\u5bfe\u3057\u3066\uff0c\u3044\u304f\u3089\u3067\u3082\u30c1\u30a7\u30c3\u30af\u3057\u306a\u304c\u3089\uff0c\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u30fb\u30ec\u30b9\u30dd\u30f3\u30b9\u30fb\u30c4\u30ea\u30fc\u3092\u62e1\u5927\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u305d\u306e\u4ed6\u306e\u8a55\u4fa1\u95a2\u6570\u306b\u3064\u3044\u3066\u306f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"ja/AbInitio/Authoring_quick_start_3/#_5","title":"\u4e00\u822c\u7684\u306a\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u3092\u8ffd\u52a0\u3059\u308b","text":"<p>\u4e00\u822c\u7684\u306a\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u306f\u554f\u984c\u306e\u6b63\u8aa4\u306b\u95a2\u308f\u3089\u305a,\u3059\u3079\u3066\u306e\u5b66\u751f\u306b\u8868\u793a\u3055\u308c\u307e\u3059\u3002\u3053\u3053\u306f\u6a21\u7bc4\u89e3\u7b54\u3092\u8ffd\u52a0\u3059\u308b\u3068\u304d\u306b\u6d3b\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"ja/AbInitio/Authoring_quick_start_3/#_6","title":"\u6b21\u306e\u30b9\u30c6\u30c3\u30d7","text":"<p>\u4ee5\u4e0a\u3067\uff0cSTACK\u3067\u69d8\u3005\u306a\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u3092\u4f5c\u6210\u3067\u304d\u308b\u306f\u305a\u3067\u3059\u3002</p>"},{"location":"ja/AbInitio/Authoring_quick_start_3/#_7","title":"\u554f\u984c\u4f5c\u6210\u30af\u30a4\u30c3\u30af\u30fb\u30b9\u30bf\u30fc\u30c8\u30fb\u30ac\u30a4\u30c9\u306e\u6b21\u306e\u30d1\u30fc\u30c8\u306f\u30e9\u30f3\u30c0\u30e0\u5316\u306b\u3064\u3044\u3066\u3067\u3059\u3002","text":""},{"location":"ja/AbInitio/Authoring_quick_start_4/","title":"\u554f\u984c\u4f5c\u6210\u30af\u30a4\u30c3\u30af\u30fb\u30b9\u30bf\u30fc\u30c8\u30fb\u30ac\u30a4\u30c94\uff1a\u30e9\u30f3\u30c0\u30e0\u5316","text":"<p>1 - \u57fa\u672c\u7684\u306a\u554f\u984c | 2 - \u554f\u984c\u5909\u6570 | 3 - \u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u3092\u6539\u5584\u3059\u308b | 4 - \u30e9\u30f3\u30c0\u30e0\u5316 | 5 - \u554f\u984c\u306e\u30c6\u30b9\u30c8 | 6 - \u8907\u6570\u56de\u7b54\u6b04\u554f\u984c | 7 - \u6570\u5f0f\u7c21\u7565\u306e\u7121\u52b9\u5316 | 8 - \u554f\u984c\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\u3068\u5c0f\u30c6\u30b9\u30c8</p> <p>\u554f\u984c\u4f5c\u6210\u30af\u30a4\u30c3\u30af\u30b9\u30bf\u30fc\u30c8\u30ac\u30a4\u30c9\u306e\u3053\u306e\u30d1\u30fc\u30c8\u3067\u306f,\u554f\u984c\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u51fa\u984c\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002 \u6b21\u306e\u30d3\u30c7\u30aa\u3067\u305d\u306e\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u3066\u3044\u307e\u3059:</p>"},{"location":"ja/AbInitio/Authoring_quick_start_4/#_1","title":"\u306f\u3058\u3081\u306b","text":"<p>\u524d\u306e\u30d1\u30fc\u30c8\u3067\u306f,\u3092x\u306b\u3064\u3044\u3066\u7a4d\u5206\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3057\u305f\u3002\u3057\u304b\u3057\uff0c\u5b66\u751f\u9593\u3067\u306e\u89e3\u7b54\u5171\u6709\u3092\u907f\u3051\u308b\u305f\u3081,\u3053\u306e\u3088\u3046\u306a\u30b7\u30b9\u30c6\u30e0\u3067\u3059\u3079\u3066\u306e\u5b66\u751f\u306b\u5168\u304f\u540c\u3058\u554f\u984c\u3092\u51fa\u984c\u3059\u308b\u3053\u3068\u306f\u907f\u3051\u305f\u3044\u3067\u3059\u3002\u3053\u306e\u8ab2\u984c\u3092\u89e3\u6c7a\u3059\u308b\u305f\u3081,\u554f\u984c\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u51fa\u984c\u3059\u308b\u3053\u3068\u304c\u5fc5\u8981\u3067\u3059\u3002</p>"},{"location":"ja/AbInitio/Authoring_quick_start_4/#_2","title":"\u554f\u984c\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u51fa\u984c\u3059\u308b","text":"<p>\u5148\u307b\u3069\u306e\u554f\u984c\u306e\u5909\u6570\u3092\u3082\u3046\u4e00\u5ea6\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046:</p> <pre><code>exp: 3*(x-1)^(-4);\nta: int(exp,x)+c;\n</code></pre> <p>\u79c1\u305f\u3061\u306f2\u3064\u306e \u30ed\u30fc\u30ab\u30eb\u5909\u6570 <code>exp</code> \u3068 <code>ta</code>\u3092\u5b9a\u7fa9\u3057, \u554f\u984c\u30c6\u30ad\u30b9\u30c8,\u5165\u529b,\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u30fb\u30ec\u30b9\u30dd\u30f3\u30b9\u30fb\u30c4\u30ea\u30fc\u306a\u3069\u306e\u4ed6\u306e\u5834\u6240\u3067\u3053\u308c\u3089\u306e\u5024\u3092\u4f7f\u7528\u3057\u307e\u3057\u305f\u3002</p> <p>\u3067\u306f\uff0c\u4eca\u304b\u3089\u30e9\u30f3\u30c0\u30e0\u306a\u554f\u984c\u3092\u4f5c\u6210\u3057\u307e\u3057\u3087\u3046\u3002\u305d\u306e\u305f\u3081\u306b, \u554f\u984c\u5909\u6570 \u3092\u6b21\u306e\u3088\u3046\u306b\u8a2d\u5b9a\u3057\u307e\u3059\u3002</p> <pre><code>a1 : 1+rand(6);\na2 : 1+rand(6);\nnn : 1+rand(4);\nexp : a1*(x-a2)^(-nn);\nta: int(exp, x)+c;\n</code></pre> <p>\u3053\u306e\u65b0\u305f\u306a\u554f\u984c\u3067,\u79c1\u305f\u3061\u306f\u751f\u5f92\u306b, a_1(x-a_2)^{-nn} \u306e\u7a4d\u5206\u3092\u6c42\u3081\u3066\u3082\u3089\u3044\u307e\u3059\u3002 <code>a1</code>, <code>a2</code> , <code>nn</code> \u306f\u3059\u3079\u3066\u30e9\u30f3\u30c0\u30e0\u306a\u6b63\u306e\u6574\u6570\u304c\u4ee3\u5165\u3055\u308c\u305f\u5909\u6570\u3067\u3059\u3002 \u3053\u308c\u3089\u306f\u554f\u984c\u3067\u5229\u7528\u3055\u308c\u308b\u5909\u6570 <code>exp</code>\u3092\u5b9a\u7fa9\u3059\u308b\u305f\u3081\u306b\u4f7f\u308f\u308c\u307e\u3059\u3002\u307e\u305f,CAS\u306b\u5f0f <code>exp</code> \u3092\u7a4d\u5206\u3055\u305b,\u305d\u306e\u7d50\u679c\u3092\u5909\u6570 <code>ta</code> \u306b\u683c\u7d0d\u3057\u307e\u3059\u3002x\u306e\u3088\u3046\u306a1\u6587\u5b57\u306e\u5909\u6570\u306f\u751f\u5f92\u306e\u5165\u529b\u3092\u610f\u5473\u3059\u308b\u305f\u3081\u3001\u554f\u984c\u4f5c\u6210\u6642\u306b\u5b9a\u7fa9\u3059\u308b\u5909\u6570\u306b\u306f2\u6587\u5b57\u4ee5\u4e0a\u5229\u7528\u3059\u308b\u3053\u3068\u3092\u63a8\u5968\u3057\u307e\u3059\u3002</p> <p>STACK\u3067\u30e9\u30f3\u30c0\u30e0\u306b\u51fa\u984c\u3055\u308c\u308b\u554f\u984c\u3092\u4f5c\u6210\u3059\u308b\u3068\u304d,\u79c1\u305f\u3061\u306f_\u4e71\u6570_\u3092\u6271\u3044\u307e\u3059\u304c,\u672c\u5f53\u306f_\u64ec\u4f3c\u4e71\u6570_\u3067\u3042\u308b\u3053\u3068\u3092\u899a\u3048\u3066\u304a\u3044\u3066\u304f\u3060\u3055\u3044\u3002\u3069\u306e\u4e71\u6570\u304c\u5404\u30e6\u30fc\u30b6\u30fc\u306e\u305f\u3081\u306b\u751f\u6210\u3055\u308c\u305f\u304b\u3092\u8ffd\u8de1\u3059\u308b\u305f\u3081\u306b,STACK\u306b\u306f\u7279\u5225\u306a <code>rand</code> \u30b3\u30de\u30f3\u30c9\u304c\u3042\u308a,Maxima \u306e <code>random</code> \u30b3\u30de\u30f3\u30c9\u306e\u4ee3\u308f\u308a\u306b\u4f7f\u7528\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 <code>rand</code> \u30b3\u30de\u30f3\u30c9\u306f\u4e00\u822c\u7684\u306a\u300c\u30e9\u30f3\u30c0\u30e0\u306a\u3082\u306e\u300d\u3092\u751f\u6210\u3057\u307e\u3059\u3002\u8a73\u3057\u304f\u306f\u30e9\u30f3\u30c0\u30e0\u751f\u6210 \u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002<code>rand</code> \u306f\u4e71\u6570\u3092\u751f\u6210\u3059\u308b\u3060\u3051\u3067\u306a\u304f\u3001\u30ea\u30b9\u30c8\u304b\u3089\u9078\u3076\u3053\u3068\u306b\u3082\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002 <code>rand(n)</code>\u306f0\u4ee5\u4e0a<code>n</code>\u672a\u6e80\u306e\u6574\u6570\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u629e\u3057\u307e\u3059\u3002 \u3064\u307e\u308a\u3001 <code>rand(3)</code> \u3068\u5165\u529b\u3057\u305f\u5834\u5408\u3001\u30ea\u30b9\u30c8<code>[0,1,2]</code>\u304b\u3089\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u629e\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059 .</p>"},{"location":"ja/AbInitio/Authoring_quick_start_4/#_3","title":"\u554f\u984c\u8a18\u9332","text":"<p>\u554f\u984c\u306b\u4e71\u6570\u304c\u542b\u307e\u308c\u308b\u5834\u5408,\u5404\u5b66\u751f\u306b\u51fa\u984c\u3055\u308c\u305f\u554f\u984c\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u8a18\u9332\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002<code>rand</code> \u95a2\u6570\u3092\u5229\u7528\u3057\u305f\u5834\u5408,STACK \u306f\u5fc5\u305a \u554f\u984c\u8a18\u9332 \u3092\u5229\u7528\u3059\u308b\u3088\u3046\u306b\u8981\u6c42\u3057\u3066\u304d\u307e\u3059\u3002  \u554f\u984c\u8a18\u9332 \u3092\u6b21\u306e\u3088\u3046\u306b\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044</p> <pre><code>\\[ \\int {@exp@} \\mathrm{d}x = {@ta@}.\\]\n</code></pre> <p>2\u3064\u306e\u554f\u984c\u306f\u554f\u984c\u8a18\u9332\u304c\u5b8c\u5168\u306b\u4e00\u81f4\u3059\u308b\u5834\u5408\u306e\u307f\u540c\u3058\u554f\u984c\u3067\u3042\u308b\u3068\u307f\u306a\u3055\u308c\u307e\u3059\u3002\u554f\u984c\u4f5c\u6210\u8005\u306f\u554f\u984c\u8a18\u9332\u3092\u6b63\u78ba\u306b\u8a2d\u5b9a\u3059\u308b\u3088\u3046\u6c17\u3092\u4ed8\u3051\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"ja/AbInitio/Authoring_quick_start_4/#_4","title":"\u30e9\u30f3\u30c0\u30e0\u306a\u554f\u984c\u306e\u30c7\u30d7\u30ed\u30a4","text":"<p>\u5b66\u751f\u304c\u554f\u984c\u3092\u898b\u308b\u524d\u306b,\u30e9\u30f3\u30c0\u30e0\u306a\u554f\u984c\u3092\u30c7\u30d7\u30ed\u30a4\u3059\u308b\u3053\u3068\u306f\u8ce2\u660e\u3067\u3059\u3002\u3053\u308c\u306b\u3088\u308a,\u5b66\u751f\u306b\u8868\u793a\u3055\u308c\u308b\u554f\u984c\u3092\u9069\u5207\u306b\u5236\u5fa1\u3057,\u30e9\u30f3\u30c0\u30e0\u5316\u304c\u6b63\u5e38\u306b\u884c\u308f\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\u554f\u984c\u3092\u4fdd\u5b58\u3057\u305f\u5f8c\uff0c\u554f\u984c\u306e\u4e00\u756a\u4e0a\u307e\u3067\u30b9\u30af\u30ed\u30fc\u30eb\u3057,<code>\u3053\u306e\u554f\u984c\u3067\u306f\u5909\u5f62\u304c\u30c7\u30d7\u30ed\u30a4\u3055\u308c\u3066\u3044\u307e\u305b\u3093</code> \u3068\u3044\u3046\u30ea\u30f3\u30af\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u3053\u306e\u30ea\u30f3\u30af\u306f\u3001\u53e4\u3044\u30d0\u30fc\u30b8\u30e7\u30f3\u306eSTACK\u3067\u306f <code>\u554f\u984c\u306e\u30c6\u30b9\u30c8\u3068\u30c7\u30d7\u30ed\u30a4</code> \u3068\u8868\u793a\u3055\u308c\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002</p> <p>STACK\u3067\u305f\u304f\u3055\u3093\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u554f\u984c\u3092\u4f5c\u6210\u3059\u308b\u306b\u306f,<code>\u6b21\u306e\u500b\u6570\u306e\u5909\u5f62\u3092\u30c7\u30d7\u30ed\u30a4\u3059\u308b</code>\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u304c\u5fc5\u8981\u3067\u3059\u3002\u4f8b\u3048\u3070,<code>10</code>\u3092\u5165\u529b\u3057,<code>\u6b21\u306e\u500b\u6570\u306e\u5909\u5f62\u3092\u30c7\u30d7\u30ed\u30a4\u3059\u308b</code>\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u3059\u308b\u306810\u500b\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u554f\u984c\u304c\u8868\u793a\u3055\u308c\u308b\u306f\u305a\u3067\u3059\u3002\u5b66\u751f\u306b\u306f\u3053\u308c\u3089\u306e\u3046\u30611\u3064\u304c\u30e9\u30f3\u30c0\u30e0\u306b\u8868\u793a\u3055\u308c\u307e\u3059\u3002</p> <p>\u307e\u305f,\u5229\u7528\u3057\u305f\u304f\u306a\u3044\u5909\u5f62\u3092\u524a\u9664\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3082\u3042\u308a\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001nn=1 \u306e\u5909\u6570\u306f\u5bfe\u6570\u3092\u542b\u3080\u7b54\u3048\u304c\u3042\u308b\u306e\u3067\u5229\u7528\u3057\u305f\u304f\u306a\u3044\u3068\u8003\u3048\u308b\u5834\u5408\u3082\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u5834\u5408,\u5229\u7528\u3057\u305f\u304f\u306a\u3044\u5909\u6570\u3092\u9078\u629e\u7684\u306b\u524a\u9664\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3068\u3053\u308d\u3067\u3053\u306e\u5834\u5408\u306e\u3088\u308a\u3088\u3044\u89e3\u6c7a\u7b56\u306f,<code>\u554f\u984c\u5909\u6570</code>\u306b\u623b\u3063\u3066,<code>nn</code>\u3092<code>2+rand(4)</code>\u306b\u5909\u66f4\u3059\u308b\u3053\u3068\u3067\u3059\u3002\u4fdd\u5b58\u5f8c\u306b <code>\u6b21\u306e\u500b\u6570\u306e\u5909\u5f62\u3092\u30c7\u30d7\u30ed\u30a4\u3059\u308b</code> \u306b\u623b\u308b\u3068\u3001\u5909\u5f62\u304c\u5909\u66f4\u3055\u308c\u3066\u3044\u308b\u306e\u304c\u308f\u304b\u308b\u3067\u3057\u3087\u3046\u3002\u3053\u308c\u306f\u4e71\u6570\u3092\u5229\u7528\u3059\u308b\u969b\u306e\u91cd\u8981\u306a\u30dd\u30a4\u30f3\u30c8\u3067\u3042\u308b,\u30e9\u30f3\u30c0\u30e0\u5316\u306e\u610f\u56f3\u3057\u306a\u3044\u7d50\u679c\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u65b9\u6cd5\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002</p>"},{"location":"ja/AbInitio/Authoring_quick_start_4/#_5","title":"\u30d7\u30ec\u30d3\u30e5\u30fc","text":"<p>\u554f\u984c\u3092\u30d7\u30ec\u30d3\u30e5\u30fc\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\u30af\u30a4\u30c3\u30af\u30b9\u30bf\u30fc\u30c8\u30ac\u30a4\u30c9\u306e\u30d1\u30fc\u30c81\u3067\u8ff0\u3079\u305f\u3088\u3046\u306b\u3001<code>\u30d7\u30ec\u30d3\u30e5\u30fc\u30aa\u30d7\u30b7\u30e7\u30f3</code>\u306e\u4e0b\u306b\u3001\u554f\u984c\u52d5\u4f5c\u3092\u5909\u66f4\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u3042\u308a\u307e\u3059\u3002<code>\u30a2\u30c0\u30d7\u30c6\u30a3\u30d6\u30e2\u30fc\u30c9</code>\u306f\u554f\u984c\u3092\u7e70\u308a\u8fd4\u3057<code>\u78ba\u8a8d</code>\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u305f\u3081\uff0c\u554f\u984c\u3092\u30c6\u30b9\u30c8\u3059\u308b\u969b\u306b\u6700\u3082\u4fbf\u5229\u306a\u30e2\u30fc\u30c9\u3067\u3059\u3002\u554f\u984c\u52d5\u4f5c\u306b\u3064\u3044\u3066\u306f\u5f8c\u3067\u8a73\u3057\u304f\u8aac\u660e\u3057\u307e\u3059\u3002</p> <p>\u3053\u3053\u3067\u3001\u30c7\u30d7\u30ed\u30a4\u3055\u308c\u305f\u3069\u306e <code>\u5909\u5f62</code> \u3092\u89e3\u7b54\u3059\u308b\u304b\u3092\u9078\u629e\u3067\u304d\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u308c\u306f\u7279\u5b9a\u306e\u5909\u5f62\u3092\u30c6\u30b9\u30c8\u3057\u305f\u3044\u5834\u5408\u306b\u4fbf\u5229\u3067\u3059\u3002</p>"},{"location":"ja/AbInitio/Authoring_quick_start_4/#_6","title":"\u6b21\u3078","text":"<p>\u3053\u308c\u3067STACK\u3067\u30e9\u30f3\u30c0\u30e0\u306a\u554f\u984c\u3092\u4f5c\u6210,\u51fa\u984c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002</p>"},{"location":"ja/AbInitio/Authoring_quick_start_4/#_7","title":"\u30aa\u30fc\u30b5\u30ea\u30f3\u30b0\u30af\u30a4\u30c3\u30af\u30b9\u30bf\u30fc\u30c8\u30ac\u30a4\u30c9\u306e\u6b21\u306e\u7ae0\u3067\u306f,\u554f\u984c\u306e\u30c6\u30b9\u30c8\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002","text":""},{"location":"ja/AbInitio/Authoring_quick_start_5/","title":"\u554f\u984c\u4f5c\u6210\u30af\u30a4\u30c3\u30af\u30fb\u30b9\u30bf\u30fc\u30c8\u30fb\u30ac\u30a4\u30c95\uff1a\u554f\u984c\u306e\u30c6\u30b9\u30c8","text":"<p>1 - \u57fa\u672c\u7684\u306a\u554f\u984c | 2 - \u554f\u984c\u5909\u6570 | 3 - \u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u3092\u6539\u5584\u3059\u308b |\u30004 - \u30e9\u30f3\u30c0\u30e0\u5316 | 5 - \u554f\u984c\u306e\u30c6\u30b9\u30c8 | 6 - \u8907\u6570\u89e3\u7b54\u554f\u984c | 7 - \u6570\u5f0f\u7c21\u7565\u306e\u7121\u52b9\u5316 | 8 - \u554f\u984c\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\u3068\u5c0f\u30c6\u30b9\u30c8</p> <p>\u554f\u984c\u4f5c\u6210\u30af\u30a4\u30c3\u30af\u30fb\u30b9\u30bf\u30fc\u30c8\u30fb\u30ac\u30a4\u30c9\u306e\u3053\u306e\u90e8\u5206\u3067\u306f\u554f\u984c\u306e\u30c6\u30b9\u30c8\u306b\u3064\u3044\u3066\u6271\u3044\u307e\u3059\u3002\u6b21\u306e\u30d3\u30c7\u30aa\u3067\u305d\u306e\u30d7\u30ed\u30bb\u30b9\u3092\u8aac\u660e\u3057\u3066\u3044\u307e\u3059\u306e\u3067,\u3054\u89a7\u304f\u3060\u3055\u3044\uff1a</p>"},{"location":"ja/AbInitio/Authoring_quick_start_5/#_1","title":"\u306f\u3058\u3081\u306b","text":"<p>\u3053\u3053\u6570\u56de\u3067,\u79c1\u305f\u3061\u306f\u30b7\u30f3\u30d7\u30eb\u306a\u7a4d\u5206\u306e\u554f\u984c\u3092\u6271\u3044\u307e\u3057\u305f\u3002\u30af\u30a4\u30c3\u30af\u30b9\u30bf\u30fc\u30c8\u3092\u7d9a\u3051\u308b\u524d\u306b,\u554f\u984c\u5909\u6570\u304c\u6b21\u306e\u3088\u3046\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\uff1a</p> <pre><code>a1 : 1+rand(6)\uff1b\na2 : 1+rand(6)\uff1b\nnn : 2+rand(4)\uff1b\nexp : a1*(x-a2)^(-nn)\uff1b\nta: int(exp, x)+c\uff1b\n</code></pre> <p>\u554f\u984c\u306e\u30c6\u30b9\u30c8\u306f\u6642\u9593\u304c\u304b\u304b\u308a\u9762\u5012\u3067\u3059\u304c,\u554f\u984c\u304c\u78ba\u5b9f\u306b\u52d5\u4f5c\u3059\u308b\u305f\u3081\u306b\u306f\u91cd\u8981\u3067\u3059\u3002\u3053\u306e\u30d7\u30ed\u30bb\u30b9\u3092\u652f\u63f4\u3059\u308b\u305f\u3081\u306b,STACK\u3067\u306f\u6559\u5e2b\u304c\u300c\u554f\u984c\u30c6\u30b9\u30c8\u300d\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u539f\u7406\u306f\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u5de5\u5b66\u306b\u304a\u3051\u308b\u300c\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u300d\u3068\u540c\u3058\u3067\u3059\u3002</p>"},{"location":"ja/AbInitio/Authoring_quick_start_5/#_2","title":"\u554f\u984c\u30c6\u30b9\u30c8","text":"<p>\u554f\u984c\u30d0\u30f3\u30af\u306e\u30c6\u30b9\u30c8\u3057\u305f\u3044\u554f\u984c\u306e\u300c\u64cd\u4f5c\u300d\u5217\u306e\u30d7\u30eb\u30c0\u30a6\u30f3\u30e1\u30cb\u30e5\u30fc\u304b\u3089\uff0c<code>\u554f\u984c\u306e\u30c6\u30b9\u30c8\u3068\u30c7\u30d7\u30ed\u30a4</code>\u3092\u9078\u629e\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p><code>\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3092\u8ffd\u52a0\u3059\u308b</code> \u3092\u30af\u30ea\u30c3\u30af\u3057\u3066,\u554f\u984c\u306b\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u306f\u5b66\u751f\u306e\u5165\u529b\u3092\u53d7\u3051\u53d6\u308a,\u305d\u306e\u5165\u529b\u306b\u5bfe\u3057\u3066\u70b9\u6570,\u6e1b\u70b9,\u89e3\u7b54\u8a18\u9332\u3092\u6307\u5b9a\u3057\u3066\u6b63\u3057\u304f\u52d5\u4f5c\u3057\u3066\u3044\u308b\u304b\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002</p> <p>\u6e1b\u70b9\u306f\u5b66\u751f\u304c\u9593\u9055\u3063\u305f\u89e3\u7b54\u3092\u3059\u308b\u305f\u3073\u306b\u5408\u8a08\u70b9\u304b\u3089\u5dee\u3057\u5f15\u304b\u308c\u308b\u6570\u5024\u3067\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f0.1\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u6e1b\u70b9\u306f<code>\u4e00\u822c</code>\u306e <code>\u6e1b\u70b9</code> \u3067\u5909\u66f4\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u6a5f\u80fd\u306f\u554f\u984c\u52d5\u4f5c <code>\u8907\u6570\u53d7\u9a13\u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6</code> \u304a\u3088\u3073 <code>\u30a2\u30c0\u30d7\u30c6\u30a3\u30d6\u30e2\u30fc\u30c9</code> \u3067\u306e\u307f\u4f7f\u7528\u3055\u308c\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u554f\u984c\u52d5\u4f5c\u306b\u3064\u3044\u3066\u306f\u5f8c\u307b\u3069\u8aac\u660e\u3057\u307e\u3059\u3002<code>\u89e3\u7b54\u8a18\u9332</code> \u306f\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u30fb\u30ec\u30b9\u30dd\u30f3\u30b9\u30fb\u30c4\u30ea\u30fc\u4e0a\u3067\u6c7a\u3081\u305f\u7279\u5b9a\u306e\u7d50\u679c\u306e\u540d\u524d\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002</p> <p>\u300c\u8aac\u660e\u300d\u306b\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u306e\u540d\u524d\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u4f8b\u3048\u3070\u300c\u6b63\u89e3\u306e\u30c6\u30b9\u30c8\u300d\u3068\u3057\u307e\u3057\u3087\u3046\u3002\u307e\u305f\uff0c\u4ee5\u4e0b\u306e\u5024\u3092\u5165\u529b\u3042\u308b\u3044\u306f\u9078\u629e\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <pre><code>ans1 : ta\n\u70b9\u6570 : 1\n\u6e1b\u70b9 : 0\n\u89e3\u7b54\u8a18\u9332 : prt1-2-T\n</code></pre> <p>\u3064\u307e\u308a,\u5b66\u751f\u304c\u6b63\u3057\u3044\u89e3\u7b54\u3092\u5165\u308c\u305f\u5834\u5408,\u6700\u521d\u306e\u30ce\u30fc\u30c9 (\u6b63\u3057\u304f\u7a4d\u5206\u3055\u308c\u305f\u304b\u30c1\u30a7\u30c3\u30af) \u3092\u901a\u904e\u3057,2\u756a\u76ee\u306e\u30ce\u30fc\u30c9 (\u7b54\u3048\u304c\u56e0\u6570\u5206\u89e3\u3055\u308c\u305f\u304b\u30c6\u30b9\u30c8) \u3092\u901a\u904e\u3057,\u70b9\u6570 1,\u6e1b\u70b9\u306a\u3057\u3067\u7d42\u308f\u308b\u306f\u305a\u3067\u3059\u3002</p> <p>\u300c\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3092\u4f5c\u6210\u3059\u308b\u300d\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066\u554f\u984c\u306e\u30c6\u30b9\u30c8\u304c\u5b9f\u65bd\u3055\u308c\u307e\u3059\u3002</p> <p>\u30c6\u30b9\u30c8\u304c\u5b9f\u65bd\u3055\u308c\u308b\u524d\u306b\u5165\u529b\u304c\u8a55\u4fa1\u3055\u308c\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u5909\u6570 <code>ta</code> \u306f\u6559\u5e2b\u304c\u5b9a\u7fa9\u3057\u305f\u5909\u6570\u3067\u3042\u308b\u305f\u3081\uff0c\u5b66\u751f\u306f\u5165\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002\u3057\u304b\u3057\uff0c<code>1*(x-1)^(-3)+c</code> \u306f\u5165\u529b\u53ef\u80fd\u3067\u3059\u3002\u5404\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u306b\u3064\u3044\u3066,\u8a55\u4fa1\u3055\u308c\u3066\u3044\u306a\u3044\u5165\u529b\u306f <code>\u5165\u529b\u30c6\u30b9\u30c8</code> \u306e\u4e0b\u306b,\u5b9f\u969b\u306b\u8a55\u4fa1\u306e\u305f\u3081\u306b\u30b7\u30b9\u30c6\u30e0\u306b\u6e21\u3055\u308c\u305f\u5024\u306f <code>\u5165\u529b\u5024</code> \u306e\u4e0b\u306b\u8868\u793a\u3055\u308c\u307e\u3059\u3002</p> <p>\u5fc5\u8981\u3060\u3068\u601d\u3046\u6570\u3060\u3051\u30c6\u30b9\u30c8\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u901a\u5e38\u306f\u4e88\u60f3\u3055\u308c\u308b\u30b1\u30fc\u30b9\u3054\u3068\u306b\u4e00\u3064\u305a\u3064\u8ffd\u52a0\u3059\u308b\u306e\u304c\u8ce2\u660e\u3067\u3059\u3002</p> <p>\u5225\u306e\u3001\u7a4d\u5206\u5b9a\u6570\u306e\u306a\u3044\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3092\u8ffd\u52a0\u3057\u307e\u3057\u3087\u3046\u3002</p> <pre><code>\u8aac\u660e : \u7a4d\u5206\u5b9a\u6570\u306e\u306a\u3044\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\nans1 : int(exp,x)\n\u70b9\u6570 : 0\n\u6e1b\u70b9 : 0.1\n\u89e3\u7b54\u8a18\u9332 : prt1-1-F\n</code></pre> <p>\u3053\u306e\u5834\u5408,STACK\u306f\u5b66\u751f\u306b\u70b9\u6570\u3092\u4e0e\u3048\u305a,\u30c6\u30b9\u30c8\u304c\u901a\u904e\u3057\u305f\u3053\u3068\u3092\u793a\u3057\u307e\u3059\uff01</p> <p>\u307e\u305f,\u5b66\u751f\u304c\u6559\u5e2b\u306e\u671b\u3080\u80fd\u529b\u3092\u8eab\u306b\u3064\u3051\u3066\u3044\u308b\u304b\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306b,\u554f\u984c\u30c6\u30b9\u30c8\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u4f8b\u3048\u3070\uff0c\u3053\u306e\u7a4d\u5206\u306e\u554f\u984c\u3067\u306f\uff0c(1) \u3079\u304d\u6307\u6570\u30921\u5897\u52a0\u3055\u305b\uff0c(2) \u65b0\u3057\u3044\u3079\u304d\u4e57\u3067\u5272\u308b\u3053\u3068\u3092\u5b66\u751f\u306b\u7406\u89e3\u3057\u3066\u307b\u3057\u3044\u3068\u8003\u3048\u307e\u3059\u3002\u4f8b\u3048\u3070,\u3079\u304d\u4e57\u3092\u5897\u52a0\u3055\u305b,\u65b0\u3057\u3044\u3079\u304d\u4e57\u3067\u4e57\u7b97\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u306f\u305a\u3067\u3059\u3002\u3053\u308c\u3092\u78ba\u8a8d\u3059\u308b\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3092\u8ffd\u52a0\u3057\u307e\u3057\u3087\u3046\u3002</p> <pre><code>\u8aac\u660e : \u3079\u304d\u4e57\u3092\u639b\u3051\u3066\u3057\u307e\u3046\nans1 : (a1*(-nn+1))*(x-a2)^(-nn+1)+c\n\u70b9\u6570 : 0\n\u6e1b\u70b9 : 0.1\n\u89e3\u7b54\u8a18\u9332 = prt1-1-F\n</code></pre> <p>\u5272\u308a\u7b97\u3067\u306f\u306a\u304f, \u3092\u304b\u3051\u308b\u30680\u70b9\u306b\u306a\u308b\u3053\u3068\u3092\u30c6\u30b9\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\u5b66\u751f\u306b\u3053\u306e\u77e5\u8b58\u3092\u3059\u3079\u3066\u306e\u4e71\u6570\u306e\u5834\u5408\u3067\u4f7f\u7528\u3057\u3066\u6b32\u3057\u3044\u306e\u306a\u3089\u3070,\u3059\u3079\u3066\u306e\u4e71\u6570\u306e\u5834\u5408\uff08\u554f\u984c\u306e\u30b1\u30fc\u30b9\uff09\u3067\u3053\u306e\u30c6\u30b9\u30c8\u306b\u5408\u683c\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\u3053\u308c\u3092\u78ba\u8a8d\u3059\u308b\u306b\u306f,<code>\u30c7\u30d7\u30ed\u30a4\u3055\u308c\u305f\u5168\u3066\u306e\u554f\u984c\u30b1\u30fc\u30b9\u306b\u5bfe\u3057\u3066\uff0c\u5168\u3066\u306e\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3092\u5b9f\u884c\u3057\u307e\u3059</code> \u3092\u30af\u30ea\u30c3\u30af\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p>\u3059\u3079\u3066\u306e\u554f\u984c\u306e\u30b1\u30fc\u30b9\u304c\u554f\u984c\u30c6\u30b9\u30c8\u306b\u5408\u683c\u3059\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u30c6\u30b9\u30c8\u306b\u5931\u6557\u3057\u305f\u554f\u984c\u30b1\u30fc\u30b9\u3092\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068,\u305d\u306e\u7406\u7531\u304c\u308f\u304b\u308a\u307e\u3059\uff01nn=2\u306e\u6642\uff0c -nn+1=-1\u4e57\u306e\u639b\u3051\u7b97\u306f\u5272\u308a\u7b97\u3068\u7b49\u4fa1\u3067\u3059\u3002\u3053\u306e\u554f\u984c\u30b1\u30fc\u30b9\u306f\u4ed6\u306e\u3082\u306e\u3088\u308a\u300c\u7c21\u5358\u300d\u3067\u3059\u3002\u3053\u308c\u306f,\u554f\u984c\u30c6\u30b9\u30c8\u306e\u3082\u30461\u3064\u306e\u91cd\u8981\u306a\u4f7f\u3044\u65b9,\u3064\u307e\u308a,\u60f3\u5b9a\u3055\u308c\u308b\u77e5\u8b58\u306b\u5bfe\u3057\u3066\u3059\u3079\u3066\u306e\u554f\u984c\u30b1\u30fc\u30b9\u304c\u540c\u3058\u96e3\u6613\u5ea6\u3067\u3042\u308a\u308b\u3053\u3068\u3092\u4fdd\u8a3c\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u3053\u3068\u3067\u3059\u3002\u3053\u308c\u3092\u8e0f\u307e\u3048\u3066,<code>nn</code>\u3092 <code>3+rand(4)</code> \u306b\u5909\u66f4\u3057\u305f\u304f\u306a\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u3053\u308c\u3067\u3059\u3079\u3066\u306e\u554f\u984c\u30b1\u30fc\u30b9\u3067\u3059\u3079\u3066\u306e\u554f\u984c\u30c6\u30b9\u30c8\u306b\u5408\u683c\u3059\u308b\u306f\u305a\u3067\u3059\u3002</p> <p>\u54c1\u8cea\u7ba1\u7406\u306f\u4e0d\u53ef\u6b20\u3067\u3042\u308a,\u3088\u308a\u8a73\u3057\u3044\u60c5\u5831\u306f \u554f\u984c\u306e\u30c6\u30b9\u30c8\u30fb\u30c7\u30d0\u30c3\u30b0\u30fb\u54c1\u8cea\u7ba1\u7406 \u306e\u30da\u30fc\u30b8\u306b\u3042\u308a\u307e\u3059\u3002</p>"},{"location":"ja/AbInitio/Authoring_quick_start_5/#_3","title":"\u4f59\u8ac7\uff1a\u7981\u6b62\u30ef\u30fc\u30c9","text":"<p>STACK\u3067\u306f,<code>sin</code>,<code>cos</code>\u306a\u3069\u306e\u6a19\u6e96\u7684\u306a\u6570\u5b66\u95a2\u6570\u3092\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3055\u3089\u306b\u9a5a\u304f\u3079\u304d\u3053\u3068\u306b,STACK\u306f<code>int</code>\u3082\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u305d\u306e\u305f\u3081,\u7406\u8ad6\u7684\u306b\u306f\u751f\u5f92\u304c<code>int(...)+c</code>\u3068\u5165\u529b\u3059\u308b\u3068,\u30b7\u30b9\u30c6\u30e0\u306f\u6b63\u3057\u3044\u3068\u5224\u65ad\u3057\u307e\u3059\uff01</p> <p>\u3053\u308c\u3092\u6b62\u3081\u308b\u5834\u5408\u306b\u306f,<code>input:ans1</code>\u306b\u884c\u304d,\u7981\u6b62\u30ef\u30fc\u30c9\u306b<code>int</code>\u3068\u5165\u529b\u3057\u307e\u3059\u3002\u7981\u6b62\u30ef\u30fc\u30c9\u306f\u901a\u5e38\u8a31\u53ef\u3055\u308c\u3066\u3044\u308b\u5358\u8a9e\u3092\u7981\u6b62\u3057\u307e\u3059\u3002</p> <p>\u3053\u306e\u4f8b\u306f\u751f\u5f92\u3092\u52a9\u3051\u308b\u305f\u3081\u306b\u6709\u52b9\u6027\u304c\u3069\u306e\u3088\u3046\u306b\u4f7f\u308f\u308c\u308b\u304b\u3092\u3046\u307e\u304f\u793a\u3057\u3066\u3044\u307e\u3059\u3002<code>int(p,x)+c</code>\u306f\u554f\u984c\u306b\u5bfe\u3059\u308b\u6b63\u3057\u3044\u7b54\u3048\u3067\u3059\u304c,\u7121\u52b9\u3067\u3059\u3002\u3053\u306e\u4f8b\u3067\u306f\uff0cCAS\u306b\u7a4d\u5206\u3092\u3055\u305b\u308b\u306e\u3067\u306f\u306a\u304f\uff0c\u751f\u5f92\u306b\u7a4d\u5206\u3092\u3055\u305b\u305f\u3044\u306e\u3067\u3059\uff01</p>"},{"location":"ja/AbInitio/Authoring_quick_start_5/#_4","title":"\u6b21\u306e\u30b9\u30c6\u30c3\u30d7","text":"<p>\u3053\u308c\u3067STACK\u3067\u8cea\u554f\u30c6\u30b9\u30c8\u3092\u4f7f\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002</p>"},{"location":"ja/AbInitio/Authoring_quick_start_5/#_5","title":"\u554f\u984c\u4f5c\u6210\u30af\u30a4\u30c3\u30af\u30fb\u30b9\u30bf\u30fc\u30c8\u30fb\u30ac\u30a4\u30c9\u306e\u6b21\u306e\u30d1\u30fc\u30c8\u3067\u306f,\u8907\u6570\u89e3\u7b54\u554f\u984c\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002","text":""},{"location":"ja/AbInitio/Authoring_quick_start_6/","title":"\u554f\u984c\u4f5c\u6210\u30af\u30a4\u30c3\u30af\u30fb\u30b9\u30bf\u30fc\u30c8\u30fb\u30ac\u30a4\u30c9 6: \u8907\u6570\u89e3\u7b54\u6b04\u554f\u984c","text":"<p>1 - \u57fa\u672c\u7684\u306a\u554f\u984c | 2 - \u554f\u984c\u5909\u6570 | 3 - \u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u3092\u6539\u5584\u3059\u308b | 4 - \u30e9\u30f3\u30c0\u30e0\u5316 | 5 - \u554f\u984c\u306e\u30c6\u30b9\u30c8 | 6 - \u8907\u6570\u89e3\u7b54\u6b04\u554f\u984c | 7 - \u6570\u5f0f\u7c21\u7565\u306e\u7121\u52b9\u5316 | 8 - \u554f\u984c\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\u3068\u5c0f\u30c6\u30b9\u30c8</p> <p>\u554f\u984c\u4f5c\u6210\u30af\u30a4\u30c3\u30af\u30fb\u30b9\u30bf\u30fc\u30c8\u30fb\u30ac\u30a4\u30c9\u306e\u3053\u306e\u30d1\u30fc\u30c8\u3067\u306f\uff0c\u8907\u6570\u89e3\u7b54\u6b04\u554f\u984c\u306b\u3064\u3044\u3066\u6271\u3044\u307e\u3059\u3002\u6b21\u306e\u30d3\u30c7\u30aa\u3067\u305d\u306e\u3084\u308a\u65b9\u3092\u8aac\u660e\u3057\u307e\u3059\uff1a</p> <p>\u6b21\u306e\u4f8b\u3092\u8003\u3048\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p>"},{"location":"ja/AbInitio/Authoring_quick_start_6/#1","title":"\u4f8b1","text":"<p>\u70b9\u3067x^3-2x^2+x\u306b\u63a5\u3059\u308b\u76f4\u7dda\u306e\u65b9\u7a0b\u5f0f\u3092\u6c42\u3081\u3088\u3002</p> <ol> <li> x^3-2x^2+x\u3092x\u3067\u5fae\u5206\u305b\u3088\u3002</li> <li> x=2\u3067\u306e\u5fae\u5206\u4fc2\u6570\u3092\u8a08\u7b97\u305b\u3088\u3002</li> <li>\u63a5\u7dda\u306e\u65b9\u7a0b\u5f0f\u3092\u6c42\u3081\u3088\u3002y=... </li> </ol> <p>\u4e0a\u306e3\u3064\u306e\u5c0f\u554f\u306f\u3059\u3079\u30661\u3064\u306e\u591a\u9805\u5f0fx^3-2x^2+x\u3092\u53c2\u7167\u3059\u308b\u306e\u3067,\u30e9\u30f3\u30c0\u30e0\u306b\u751f\u6210\u3055\u308c\u305f\u554f\u984c\u304c\u4f7f\u7528\u3055\u308c\u308b\u5834\u5408,\u305d\u308c\u3089\u306e\u5c0f\u554f\u306f\u305d\u308c\u305e\u308c1\u3064\u306e\u30e9\u30f3\u30c0\u30e0\u306b\u751f\u6210\u3055\u308c\u305f\u6570\u5f0f\u3092\u53c2\u7167\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3057\u305f\u304c\u3063\u3066,\u5c0f\u554f1-3\u306e\u89e3\u7b54\u306f\u5b9f\u969b\u306b\u306f1\u3064\u306e\u6570\u5f0f\u306b\u4f9d\u5b58\u3057\u307e\u3059\u3002\u3053\u3053\u3067,\u5c0f\u554f1\u306f\u4ed6\u304b\u3089\u72ec\u7acb\u3057\u3066\u3044\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u5c0f\u554f2\u306e\u89e3\u7b54\u306b\u306f\u5c0f\u554f1\u306e\u89e3\u7b54\u306bx=2\u3092\u4ee3\u5165\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u5c0f\u554f3\u306f\u72ec\u7acb\u3057\u3066\u63a1\u70b9\u3059\u308b\u3053\u3068\u3082\uff0c\u5c0f\u554f1\u30682\u3092\u8003\u616e\u3059\u308b\u3053\u3068\u3082\u7c21\u5358\u306b\u3067\u304d\u307e\u3059\u3002\u6559\u5e2b\u306f\u300c\u4f9d\u5b58\u300d\u63a1\u70b9\u3092\u9078\u629e\u3067\u304d\u308b\u3053\u3068\u306b\u3082\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"ja/AbInitio/Authoring_quick_start_6/#2","title":"\u4f8b2","text":"<p>\u6bd4\u8f03\u7684\u82e5\u3044\u5b66\u751f\u3092\u5bfe\u8c61\u306b\u3057\u305f\u6b21\u306e\u554f\u984c\u3092\u8003\u3048\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p> <p> (x+1)(x+2)\u3092\u5c55\u958b\u305b\u3088\u3002</p> <p>\u89e3\u7b54\u65b9\u6cd5\u3068\u3057\u3066,\u6b21\u306e\u65b9\u7a0b\u5f0f\u306e\u300c\u7a7a\u6b04\u3092\u57cb\u3081\u308b\u300d\u65b9\u6cd5\u304c\u8003\u3048\u3089\u308c\u307e\u3059\uff1a</p> <pre><code>(x+1)(x+2) = [?] x2 + [?] x + [?].\n</code></pre> <p>\u79c1\u305f\u3061\u306f,\u3053\u306e\u554f\u984c\u3092\u300c3\u3064\u306e\u5165\u529b\u300d\u3092\u6301\u3064\u300c1\u3064\u306e\u8cea\u554f\u300d\u3067\u3042\u308b\u3068\u89e3\u91c8\u3057\u307e\u3059\u3002\u3055\u3089\u306b, \u305d\u308c\u305e\u308c\u306e\u5165\u529b (\u4fc2\u6570) \u306b\u5bfe\u3057\u3066\u5225\u3005\u306e\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u304c\u751f\u6210\u3055\u308c\u305f\u3068\u3057\u3066\u3082,\u6559\u5e2b\u306f\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u304c\u5272\u308a\u5f53\u3066\u3089\u308c\u308b\u524d\u306b,\u5b66\u751f\u306b\u3059\u3079\u3066\u7a74\u57cb\u3081\u3057\u3066\u307b\u3057\u3044\u3067\u3057\u3087\u3046\u3002\u307e\u305f, \u3053\u306e\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u306f\u3059\u3079\u3066\u753b\u9762\u4e0a\u306e1\u3064\u306e\u5834\u6240\u306b\u30b0\u30eb\u30fc\u30d7\u5316\u3055\u308c\u308b\u3079\u304d\u3067\u3059\u3002\u305d\u3057\u3066,\u4ee3\u6570\u7684\u30df\u30b9\u306e\u53ef\u80fd\u6027\u306e\u3042\u308b\u539f\u56e0\u3092\u7279\u5b9a\u3059\u308b\u305f\u3081\u306b, \u81ea\u52d5\u63a1\u70b9\u306e\u305f\u3081\u306b\u3059\u3079\u3066\u306e\u4fc2\u6570\u304c\u5165\u529b\u3055\u308c\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u30023\u3064\u306e\u89e3\u7b54\u6b04\u3092\u72ec\u7acb\u306b\u63a1\u70b9\u3059\u308b\u3053\u3068\u306f\u3042\u307e\u308a\u610f\u5473\u304c\u306a\u3044\u3067\u3057\u3087\u3046\u3002</p> <p>\u3053\u306e2\u3064\u306e\u4f8b\u306f,2\u3064\u306e\u5bfe\u7acb\u7684\u306a\u8a55\u4fa1\u65b9\u6cd5\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002</p> <ol> <li>\u8907\u6570\u89e3\u7b54\u6b04\u5185\u306e\u3059\u3079\u3066\u306e\u5165\u529b\u306f\u72ec\u7acb\u3057\u3066\u8a55\u4fa1\u3067\u304d\u308b\u3002</li> <li>\u8907\u6570\u89e3\u7b54\u6b04\u5185\u306e\u3059\u3079\u3066\u306e\u5165\u529b\u306f, \u305d\u306e\u554f\u984c\u304c\u63a1\u70b9\u3055\u308c\u308b\u524d\u306b\u5b8c\u4e86\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002</li> </ol> <p>\u3053\u306e2\u3064\u306e\u8a55\u4fa1\u65b9\u6cd5\u3092\u6e80\u305f\u3059\u8907\u6570\u89e3\u7b54\u6b04\u554f\u984c\u3092\u8003\u6848\u3059\u308b\u3053\u3068\u306f\u6bd4\u8f03\u7684\u7c21\u5358\u3067\u3059\u3057, \u3053\u308c\u3089\u306e\u306e\u8907\u6570\u89e3\u7b54\u6b04\u554f\u984c\u306f\u3088\u308a\u4e00\u822c\u7684\u3067\u3042\u308b\u3068\u3082\u8003\u3048\u3089\u308c\u307e\u3059\u3002</p>"},{"location":"ja/AbInitio/Authoring_quick_start_6/#_1","title":"\u8907\u6570\u89e3\u7b54\u6b04\u554f\u984c\u306e\u8cea\u554f\u3092\u4f5c\u6210\u3059\u308b","text":"<p>\u65b0\u3057\u3044STACK\u306e\u554f\u984c\u4f5c\u6210\u3092\u958b\u59cb\u3057\uff0c\u300c\u63a5\u7dda\u300d\u306a\u3069\u306e\u540d\u524d\u3092\u3064\u3051\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u306e\u554f\u984c\u306b\u306f3\u3064\u306e\u5c0f\u554f\u304c\u3042\u308a\u307e\u3059\u3002\u6b21\u306e\u3088\u3046\u306b\uff0c\u554f\u984c\u5909\u6570\u3068\u554f\u984c\u30c6\u30ad\u30b9\u30c8\u3092\u30b3\u30d4\u30fc\u3059\u308b\u3053\u3068\u304b\u3089\u59cb\u3081\u307e\u3059\u3002\u3053\u306e\u554f\u984c\u306f\u30e9\u30f3\u30c0\u30e0\u5316\u3092\u542b\u3093\u3067\u3044\u307e\u305b\u3093\u304c\uff0c\u5f8c\u306e\u6bb5\u968e\u306e\u7c21\u5358\u5316\u306e\u305f\u3081\u306b\uff0c\u6700\u521d\u306b\u5909\u6570\u540d\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p>\u554f\u984c\u5909\u6570:</p> <pre><code>exp:x^3-2*x^2+x;\npt:2;\nta1:diff(exp,x);\nta2:subst(x=pt,ta1);\nta3:remainder(exp,(x-pt)^2);\n</code></pre> <p>\u554f\u984c\u30c6\u30ad\u30b9\u30c8</p> <p>\u4ee5\u4e0b\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u30a8\u30c7\u30a3\u30bf\u30fc\u306b\u30b3\u30d4\u30fc\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <pre><code>\u70b9\\(x={@pt@}\\)\u3067{@exp@}\u306b\u63a5\u3059\u308b\u76f4\u7dda\u306e\u65b9\u7a0b\u5f0f\u3092\u6c42\u3081\u3088\u3002\n1. {@exp@}\u3092\\(x\\)\u3067\u5fae\u5206\u305b\u3088\u3002[[input:ans1]] [[validation:ans1]] [[feedback:prt1]]\n2. 1\u306e\u7d50\u679c\u3092\u7528\u3044\u3066\u3001\\(x={@pt@}\\)\u3067\u306e\u5fae\u5206\u4fc2\u6570\u3092\u8a08\u7b97\u305b\u3088\u3002[[input:ans2]] [[validation:ans2]] [[feedback:prt2]]\n3. \u63a5\u7dda\u306e\u65b9\u7a0b\u5f0f\u3092\u6c42\u3081\u3088\u3002\\(y=\\)[[input:ans3]] [[validation:ans3]] [[feedback:prt3]]\n</code></pre> <p>\u300c\u500b\u5225\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u300d\u30bb\u30af\u30b7\u30e7\u30f3\u304b\u3089\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u30bf\u30b0\u3092\u524a\u9664\u3057\u3001\u300c\u554f\u984c\u30c6\u30ad\u30b9\u30c8\u306e\u30c1\u30a7\u30c3\u30af\u3068\u5165\u529b\u30d5\u30a9\u30fc\u30e0\u306e\u66f4\u65b0\u300d\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066\u304f\u3060\u3055\u3044\u3002STACK\u306f\uff0c\u89e3\u7b54\u6b04\uff0c\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u30bf\u30b0\u3092\u81ea\u52d5\u7684\u306b\u691c\u51fa\u3057\u3066\uff0c3\u3064\u306e\u89e3\u7b54\u6b04\u3068\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u30fb\u30ec\u30b9\u30dd\u30f3\u30b9\u30fb\u30c4\u30ea\u30fc\u304c\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002\u554f\u984c\u30c6\u30ad\u30b9\u30c8\u3067\u306f\u3001\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u304c\u95a2\u9023\u3059\u308b\u90e8\u5206\u306e\u4e0b\u306b\u76f4\u63a5\u8868\u793a\u3055\u308c\u308b\u3088\u3046\u306b\uff0c\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u30bf\u30b0\u3092\u57cb\u3081\u8fbc\u3093\u3067\u3044\u307e\u3059\u3002\u305d\u308c\u305e\u308c\u306e\u5c0f\u554f\u306b\u5bfe\u3057\u3066\uff0c1\u3064\u306e\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u30fb\u30ec\u30b9\u30dd\u30f3\u30b9\u30fb\u30c4\u30ea\u30fc\u304c\u3042\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p>\u89e3\u7b54\u6b04\uff1a<code>ans1</code>\u304b\u3089\u89e3\u7b54\u6b04\uff1a<code>ans3</code>\u306e\u300c\u6b63\u89e3\u300d\u306b\uff0c\u305d\u308c\u305e\u308c<code>ta1</code>\u304b\u3089<code>ta3</code>\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p>\u6b21\u306b\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u30fb\u30ec\u30b9\u30dd\u30f3\u30b9\u30fb\u30c4\u30ea\u30fc\u3092\u7de8\u96c6\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u3089\u306f\u5b66\u751f\u306e\u89e3\u7b54\u306e\u8a55\u4fa1\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002</p>"},{"location":"ja/AbInitio/Authoring_quick_start_6/#1_1","title":"\u30b9\u30c6\u30fc\u30b81: \u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u30fb\u30ec\u30b9\u30dd\u30f3\u30b9\u30fb\u30c4\u30ea\u30fc","text":"<p>\u6700\u521d\u306e\u6bb5\u968e\u306f\uff0c\u6700\u3082\u5358\u7d14\u306a\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u30fb\u30ec\u30b9\u30dd\u30f3\u30b9\u30fb\u30c4\u30ea\u30fc\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3067\u3059\u3002\u3053\u308c\u3089\u306f\u5358\u7d14\u306b\u7b54\u3048\u304c\u300c\u6b63\u3057\u3044\u300d\u304b\u3069\u3046\u304b\u3092\u8a55\u4fa1\u3057\u307e\u3059\u3002\u5404\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u30fb\u30ec\u30b9\u30dd\u30f3\u30b9\u30fb\u30c4\u30ea\u30fc\uff1a<code>prti</code>\u306e\u305d\u308c\u305e\u308c\u3067\uff0c<code>ansi</code>\u304c<code>tai</code>\u3068\u4ee3\u6570\u7684\u306b\u7b49\u4fa1\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u8a55\u4fa1\u3057\u307e\u3059\uff08\u305f\u3060\u3057\u3001<code>i</code>\u306f<code>1</code>\u304b\u3089<code>3</code>\u3068\u3057\u3066\u304f\u3060\u3055\u3044\uff09\u3002\u3053\u306e\u6bb5\u968e\u3067\uff0c\u5b9f\u7528\u7684\u306a\u554f\u984c\u304c\u3067\u304d\u305f\u3067\u3057\u3087\u3046\u3002\u300c\u5909\u66f4\u3092\u4fdd\u5b58\u3057\u3066\u7de8\u96c6\u3092\u7d9a\u3051\u308b\u300d\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066\u3001\u554f\u984c\u3092\u30d7\u30ec\u30d3\u30e5\u30fc\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u53c2\u8003\u307e\u3067\u306b\uff0c\u6b63\u89e3\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002</p> <pre><code> ta1 = 3*x^2-4*x+1\n ta2 = 5\n ta3 = 5*x-8\n</code></pre>"},{"location":"ja/AbInitio/Authoring_quick_start_6/#2_1","title":"\u30b9\u30c6\u30fc\u30b82: \u4f9d\u5b58\u63a1\u70b9","text":"<p>\u6b21\u306b\uff0c\u30b7\u30f3\u30d7\u30eb\u306a\u4f9d\u5b58\u63a1\u70b9\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002</p> <p>\u5c0f\u554f2\u3092\u6ce8\u610f\u6df1\u304f\u898b\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u308c\u306f\u300c\u6b63\u89e3\u300d\u3092\u6c42\u3081\u3066\u3044\u308b\u3068\u540c\u6642\u306b\uff0c\u5b66\u751f\u304c\u5c0f\u554f1\u306e\u7d50\u679c\u3092\u7528\u3044\u3066\uff0c\u4e0e\u3048\u3089\u308c\u305f\u70b9\u3067\u6b63\u3057\u304f\u5fae\u5206\u4fc2\u6570\u3092\u8a08\u7b97\u3067\u304d\u305f\u304b\u3069\u3046\u304b\u3082\u8a55\u4fa1\u3057\u3066\u3044\u307e\u3059\u3002\u3057\u305f\u304c\u3063\u3066\u6700\u521d\u306e\u8ab2\u984c\u306f\uff0c\u5c0f\u554f1\u3067\u4e0e\u3048\u3089\u308c\u305f\u6570\u5f0f\u3092\u4e0e\u3048\u3089\u308c\u305f\u70b9\u3067\u8a55\u4fa1\u3057\uff0c<code>ans2</code>\u3068\u6bd4\u8f03\u3059\u308b\u3053\u3068\u3067\u3059\u3002<code>prt2</code>\u306e\u30ce\u30fc\u30c91\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f4\u65b0\u3057\u307e\u3059\uff1a</p> <pre><code>\u8a55\u4fa1\u95a2\u6570: \u4ee3\u6570\u7b49\u4fa1\n\u8a55\u4fa1\u5bfe\u8c61: ans2\n\u8a55\u4fa1\u57fa\u6e96: subst(x=pt,ans1)\n</code></pre> <p>\u6b21\u306b\uff0c<code>prt2</code>\u3067\uff0c\u300c\u65b0\u3057\u3044\u30ce\u30fc\u30c9\u3092\u8ffd\u52a0\u3059\u308b\u300d\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066\uff0c\u306b\u4ee5\u4e0b\u306e\u30ce\u30fc\u30c9\uff08\u30ce\u30fc\u30c92\uff09\u30921\u3064\u8ffd\u52a0\u3057\u307e\u3059\uff1a</p> <pre><code>\u8a55\u4fa1\u95a2\u6570: \u4ee3\u6570\u7b49\u4fa1\n\u8a55\u4fa1\u5bfe\u8c61: ans1\n\u8a55\u4fa1\u57fa\u6e96: ta1\n</code></pre> <p>\u305d\u3057\u3066\uff0c\u30ce\u30fc\u30c91\u306e\u771f\u306e\u5206\u5c90\u3092\uff08<code>prt2</code>\u306e\uff09\u30ce\u30fc\u30c92\u306b\u3064\u306a\u304e\u307e\u3059\u3002\u3053\u308c\u30673\u3064\u306e\u7d50\u679c\u304c\u5f97\u3089\u308c\u307e\u3059\u3002</p> <p>\u30ce\u30fc\u30c91\uff1a\u5c0f\u554f1\u306e\u7d50\u679c\u3092\uff0c\u4e0e\u3048\u3089\u308c\u305f\u70b9\u3067\u6b63\u3057\u304f\u8a55\u4fa1\u3057\u305f\u304b\uff1f\u3082\u3057 \"\u771f\"\u306a\u3089\u30ce\u30fc\u30c92\u306b\u9032\u307f\uff0c\"\u507d\"\u306a\u30890\u70b9\u3067\u7d42\u4e86\u3059\u308b\u3002</p> <p>\u30ce\u30fc\u30c92\uff1a\u5c0f\u554f1\u306e\u7d50\u679c\u306f\u6b63\u89e3\u304b\uff1f\u3082\u3057\"\u771f\"\u306a\u3089\uff0c\u3053\u308c\u304c\u7406\u60f3\u7684\u306a\u72b6\u6cc1\u3067\u3042\u308a\uff0c\u6e80\u70b9\u3067\u3042\u308b\u3002\u3082\u3057\"\u507d\"\u306a\u3089\uff0c\u597d\u307f\u306b\u5fdc\u3058\u3066\u70b9\u6570\u3092\u9078\u3073\uff0c\u4f8b\u3048\u3070\u3001\u6b21\u306e\u3088\u3046\u306a\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u3092\u52a0\u3048\u308b\uff1a</p> <pre><code>\u5c0f\u554f1\u306e\u7d50\u679c\u306b\u57fa\u3065\u304d\uff0c\u4e0e\u3048\u3089\u308c\u305f\u70b9\u3067\u306e\u5fae\u5206\u4fc2\u6570\u306f\u6b63\u3057\u304f\u8a08\u7b97\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3057\u304b\u3057\uff0c\u5c0f\u554f1\u306f\u4e0d\u6b63\u89e3\u3067\u3059\u3002\u5c0f\u554f1\uff0c2\u3092\u3084\u308a\u76f4\u3057\u307e\u3057\u3087\u3046\u3002\n</code></pre>"},{"location":"ja/AbInitio/Authoring_quick_start_6/#_2","title":"\u6b21\u306e\u30b9\u30c6\u30c3\u30d7","text":"<p>\u3053\u308c\u3067STACK\u3067\u8907\u6570\u89e3\u7b54\u6b04\u554f\u984c\u3092\u4f5c\u6210\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u3053\u308c\u307e\u3067\uff0c\u3053\u306e\u30af\u30a4\u30c3\u30af\u30b9\u30bf\u30fc\u30c8\u30ac\u30a4\u30c9\u306b\u5f93\u3063\u3066\u304d\u3066\u3044\u308c\u3070\uff0c\u3059\u3067\u306b\u3053\u306e\u554f\u984c\u3092\u6539\u5584\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3067\u3057\u3087\u3046\u3002\u4f8b\u3048\u3070, \u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u3092\u6539\u5584\u3059\u308b, \u30e9\u30f3\u30c0\u30e0\u5316, \u554f\u984c\u306e\u30c6\u30b9\u30c8\u3002</p>"},{"location":"ja/AbInitio/Authoring_quick_start_6/#_3","title":"\u554f\u984c\u4f5c\u6210\u30af\u30a4\u30c3\u30af\u30fb\u30b9\u30bf\u30fc\u30c8\u30fb\u30ac\u30a4\u30c9\u306e\u6b21\u306e\u30d1\u30fc\u30c8\u306f\u6570\u5f0f\u7c21\u7565\u306e\u7121\u52b9\u5316\u306b\u3064\u3044\u3066\u3067\u3059\u3002","text":""},{"location":"ja/AbInitio/Authoring_quick_start_7/","title":"\u554f\u984c\u4f5c\u6210\u30af\u30a4\u30c3\u30af\u30fb\u30b9\u30bf\u30fc\u30c8 7: \u6570\u5f0f\u7c21\u7565\u3092\u7121\u52b9\u5316\u3059\u308b","text":"<p>1 - \u57fa\u672c\u7684\u306a\u554f\u984c | 2 - \u554f\u984c\u5909\u6570 | 3 - \u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u3092\u6539\u5584\u3059\u308b | 4 - \u30e9\u30f3\u30c0\u30e0\u5316 | 5 - \u554f\u984c\u306e\u30c6\u30b9\u30c8 | 6 - \u8907\u6570\u89e3\u7b54\u6b04\u554f\u984c | 7 - \u6570\u5f0f\u7c21\u7565\u306e\u7121\u52b9\u5316 | 8 - \u554f\u984c\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\u3068\u5c0f\u30c6\u30b9\u30c8</p> <p>\u554f\u984c\u4f5c\u6210\u30af\u30a4\u30c3\u30af\u30fb\u30b9\u30bf\u30fc\u30c8\u30fb\u30ac\u30a4\u30c9\u306e\u3053\u306e\u30d1\u30fc\u30c8\u3067\u306f\uff0c\u6570\u5f0f\u7c21\u7565\u3092\u7121\u52b9\u5316\u3059\u308b\u65b9\u6cd5\u3092\u8aac\u660e\u3057\u307e\u3059\u3002\u6b21\u306e\u30d3\u30c7\u30aa\u3067\u305d\u306e\u624b\u9806\u3092\u8aac\u660e\u3057\u307e\u3059\uff1a</p>"},{"location":"ja/AbInitio/Authoring_quick_start_7/#_1","title":"\u4f8b\u984c","text":"<p>\u8907\u7d20\u6570\u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\uff0cz^{n}\u3092\u6c42\u3081\u306a\u3055\u3044\u3002</p> <p>\u3053\u3053\u3067\uff0ca,b,n\u306f\u30e9\u30f3\u30c0\u30e0\u306b\u751f\u6210\u3055\u308c\u305f\u6570\u3068\u3057\u307e\u3059\u3002</p>"},{"location":"ja/AbInitio/Authoring_quick_start_7/#_2","title":"\u6570\u5f0f\u7c21\u7565\u306e\u7121\u52b9\u5316","text":"<p>\u3053\u306e\u3088\u3046\u306a\u554f\u984c\u3092\u4f5c\u308b\u3068\u304d\uff0c\u8868\u793a\u306e\u6bb5\u968e\u3067 \u5236\u5fa1\u3057\u305f\u304f\u306a\u308a\u307e\u3059\u3002\u79c1\u305f\u3061\u306f\u3059\u3067\u306b\u30e9\u30f3\u30c0\u30e0\u5316\u306e\u65b9\u6cd5\u3092\u77e5\u3063\u3066\u3044\u308b\u306e\u3067\uff0ca\uff0cb\uff0cn\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u751f\u6210\u3057\uff0c\u554f\u984c\u6587\u306b\u57cb\u3081\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u4f8b\u3048\u3070\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059:</p> <pre><code> \\(({@aa@}e^{{@bb@} i})^{@nn@}\\)\n</code></pre> <p>\u3053\u3053\u3067\u306f\uff0c\u8907\u7d20\u6570\u306e\u305f\u3081\u306bCAS\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30921\u3064\u4f5c\u308b\u306e\u3067\u306f\u306a\u304f\uff0c\u5404\u5909\u6570\u3092\u5225\u3005\u306b\u6271\u3063\u3066\u3044\u307e\u3059\u3002 \u3053\u308c\u306f\u554f\u984c\u306a\u3044\u306e\u3067\u3059\u304c\uff0cCAS\u3068LaTeX\u306e\u8a18\u6cd5\u304c\u6df7\u5728\u3057\u3066\u3044\u308b\u305f\u3081\u8aad\u307f\u306b\u304f\u304f\u306a\u3063\u3066\u3044\u307e\u3059\u3002</p> <p>\u3057\u305f\u304c\u3063\u3066\uff0c\u6570\u5f0f\u7c21\u7565\u3055\u308c\u306a\u30441\u3064\u306eCAS\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u3059\u3079\u3066\u3092\u6301\u305f\u305b\u308b\u65b9\u304c\u306f\u308b\u304b\u306b\u671b\u307e\u3057\u3044\u3067\u3059\u3002\u4ee5\u4e0b\u306f\u5358\u4e00\u306eMaxima\u306e\u5f0f\u3067\u3059\uff1a</p> <pre><code> {@(aa*%e^(bb*%i))^nn@}\n</code></pre> <p>(2\u6587\u5b57\u4ee5\u4e0a\u306e\u5909\u6570\u540d\u3092\u4f7f\u3063\u3066\u3044\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u308c\u306f\u826f\u3044\u7fd2\u6163\u3067\u3059\u30021\u6587\u5b57\u306e\u5909\u6570\u306f\u5b66\u751f\u306e\u5165\u529b\u306e\u305f\u3081\u306e\u3082\u306e\u3060\u304b\u3089\u3067\u3059\u3002\u307e\u305f\uff0cMaxima \u3067\u8a18\u8ff0\u3059\u308b\u3068\u304d\uff0c\u6a19\u6e96\u7684\u306a\u6570\u5b66\u8a18\u53f7\u306e\u524d\u306b <code>%</code> \u3092\u3064\u3051\u3066\u3044\u308b\u3053\u3068\u306b\u3082\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u308c\u306f\u5fc5\u9808\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u304c\uff0c\u826f\u3044\u7fd2\u6163\u3067\u3042\u308b\u3068\u8003\u3048\u3089\u308c\u3066\u3044\u307e\u3059\u3002)</p> <p>\u3082\u3061\u308d\u3093\uff0cMaxima\u306b\u3079\u304d\u4e57\u3092\u8a08\u7b97\u3057\u3066\u6b32\u3057\u3044\u308f\u3051\u3067\u306f\u306a\u304f\uff0c\u305d\u306e\u307e\u307e \u8868\u793a\u3057\u3066\u307b\u3057\u3044\u3068\u601d\u3063\u3066\u3044\u307e\u3059\uff01\u9055\u3044\u3092\u898b\u308b\u305f\u3081\u306b\uff0c\u4ee5\u4e0b\u306eSTACK\u554f\u984c\u306e\u554f\u984c\u5909\u6570\u306b\u30b3\u30d4\u30fc\u3057\u3066\u304f\u3060\u3055\u3044\uff1a</p> <pre><code>simp:true;\na1: (3*%e^(%i*%pi/2))^4;\nsimp:false;\na2: (3*%e^(%i*%pi/2))^4;\n</code></pre> <p>\u6b21\u306b\u554f\u984c\u30c6\u30ad\u30b9\u30c8\u306e\u3069\u3053\u304b\u306b<code>\u7c21\u7565\u5316\u3059\u308b: {@a1@} \u7c21\u7565\u5316\u3057\u306a\u3044: {@a2@}</code>\u3068\u5165\u529b\u3057\u307e\u3059\u3002<code>simp:true;</code>\u3068<code>simp:false;</code>\u306b\u3088\u308b\u9055\u3044\u3092\u30d7\u30ec\u30d3\u30e5\u30fc\u3067\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p>\u8868\u793a\u306e\u30ec\u30d9\u30eb\u3067\u306f\u306a\u304f\uff0cCAS\u306e\u30ec\u30d9\u30eb\u3067\u554f\u984c\u3092\u89e3\u6c7a\u3059\u308b\u65b9\u304c\u3088\u3044\u3053\u3068\u304c\u3088\u304f\u3042\u308a\u307e\u3059\u3002\u554f\u984c\u5168\u4f53\u3067<code>simp:false</code>\u3092\u8a2d\u5b9a\u3059\u308b\u3088\u3046\u306bSTACK\u306b\u6307\u793a\u3059\u308b\u306b\u306f\uff0c\u30d5\u30a9\u30fc\u30e0\u306e\u4e00\u756a\u4e0b\u307e\u3067\u30b9\u30af\u30ed\u30fc\u30eb\u3057\uff0c<code>\u30aa\u30d7\u30b7\u30e7\u30f3</code>\u306e\u4e0b\u3067<code>\u81ea\u52d5\u7c21\u7565\u5316\uff08\u5168\u822c\uff09</code>\u3092<code>No</code>\u306b\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u3053\u308c\u3067Maxima\u306f\u8868\u793a\u3059\u308b\u524d\u306b\u5f0f\u3092\u7c21\u7565\u5316\u3057\u306a\u3044\u306e\u3067\uff0c<code>{@2+5@}</code>\u306f <code>7</code> \u3067\u306f\u306a\u304f <code>2+5</code> \u3068\u3057\u3066\u8868\u793a\u3055\u308c\u307e\u3059\u3002</p> <p>\u3053\u308c\u306b\u306f\u6b20\u70b9\u3082\u3042\u308a\u307e\u3059\u3002\u554f\u984c\u5168\u4f53\u3067\u6570\u5f0f\u7c21\u7565\u3092\u7121\u52b9\u5316\u3057\u305f\u5834\u5408\uff0c\u4eca\u5ea6\u306f\u660e\u793a\u7684\u306b\u7c21\u7565\u5316\u3055\u305b\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff01\u3053\u308c\u3092\u3059\u308b\u306b\u306f2\u3064\u306e\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\u30021\u3064\u76ee\u306f\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u3046\u3053\u3068\u3067\u3059\uff1a</p> <pre><code>aa : ev(2+rand(10),simp);\n</code></pre> <p>\u5177\u4f53\u7684\u306b\u306f\uff0c\u554f\u984c\u5909\u6570\u306f\u6b21\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u3002</p> <pre><code>aa : ev(2+rand(10),simp);\nbb : ev(2+rand(10),simp);\nnn : ev(2+rand(5),simp);\nqq : (aa*%e^(bb*%i))^nn;\n</code></pre> <p>\u591a\u304f\u306e\u9023\u7d9a\u3057\u305f\u5f0f\u3092\u7c21\u7565\u5316\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u5834\u5408\uff0c2\u3064\u76ee\u306e\u65b9\u6cd5\u304c\u4f7f\u3048\u307e\u3059\uff1a</p> <pre><code>simp : true;\naa : 2+rand(10);\nbb : 2+rand(10);\nnn : 2+rand(5);\nsimp : false;\nqq : (aa*%e^(bb*%i))^nn;\n</code></pre>"},{"location":"ja/AbInitio/Authoring_quick_start_7/#_3","title":"\u5358\u9805\u6f14\u7b97\u5b50\u306e\u30de\u30a4\u30ca\u30b9","text":"<p>\u305f\u304f\u3055\u3093\u306e\u5909\u6570\u3092\u4f7f\u3063\u3066\u8868\u793a\u3059\u308b\u306e\u304b\uff0c\u305d\u308c\u3068\u3082<code>simp:false</code>\u3092\u6307\u5b9a\u3057\u305f\u307b\u3046\u304c\u3044\u3044\u306e\u304b\u306f\uff0c\u72b6\u6cc1\u306b\u3088\u3063\u3066\u6c7a\u307e\u308a\u307e\u3059\u3002\u3088\u304f\u3042\u308b\u554f\u984c\u306f\u5358\u9805\u6f14\u7b97\u5b50\u306e\u30de\u30a4\u30ca\u30b9\u3067\u8d77\u3053\u308a\u307e\u3059\u3002<code>{@aa@}+{@bb@}\u3092\u6c42\u3081\u3088</code>\u306e\u3088\u3046\u306a\u554f\u984c\u30c6\u30ad\u30b9\u30c8\u3092\u8003\u3048\u3066\u307f\u307e\u3057\u3087\u3046\u3002<code>bb</code>&lt;0\u306e\u5834\u5408\uff0c\u5f0f\u306f\u4f8b\u3048\u30703+-5\u306e\u3088\u3046\u306b\u8868\u793a\u3055\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002 \u7c21\u7565\u5316\u3092\u7121\u52b9\u5316\u3057\u305f\u5834\u5408\u3067\u3082\uff0cMaxima\u306e\u8868\u793a\u30eb\u30fc\u30c1\u30f3\u306f(\u591a\u304f\u306e\u5834\u5408)\u8ce2\u660e\u306a\u65b9\u6cd5\u3067\u5358\u9805\u6f14\u7b97\u5b50\u306e\u30de\u30a4\u30ca\u30b9\u306b\u5bfe\u51e6\u3057\u307e\u3059\u3002</p>"},{"location":"ja/AbInitio/Authoring_quick_start_7/#_4","title":"\u6b21\u306e\u30b9\u30c6\u30c3\u30d7","text":"<p>\u3053\u308c\u3067\uff0c\u3044\u3064\u6570\u5f0f\u7c21\u7565\u3092\u7121\u52b9\u5316\u3059\u308b\u3079\u304d\u304b\u3092\u5224\u65ad\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u306f\u305a\u3067\u3059\u3002\u3042\u306a\u305f\u304c\u3053\u306e\u30af\u30a4\u30c3\u30af\u30fb\u30b9\u30bf\u30fc\u30c8\u30fb\u30ac\u30a4\u30c9\u306b\u5f93\u3063\u3066\u3044\u308b\u306e\u3067\u3042\u308c\u3070\uff0c\u3053\u306e\u554f\u984c\u3092\u6539\u5584\u3059\u308b\u305f\u3081\u306b\u5b9f\u884c\u3067\u304d\u308b\u3044\u304f\u3064\u304b\u306e\u65b9\u6cd5\u3092\u3059\u3067\u306b\u77e5\u3063\u3066\u3044\u308b\u306f\u305a\u3067\u3059\u3002 \u4f8b\u3048\u3070\uff0c\u3088\u308a\u5177\u4f53\u7684\u306a\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u3092\u8ffd\u52a0\u3057\u305f\u308a\uff0c\u554f\u984c\u3092\u30e9\u30f3\u30c0\u30e0\u5316\u3057\u305f\u308a\uff0c\u554f\u984c\u306e\u30c6\u30b9\u30c8\u3092\u8ffd\u52a0\u3057\u305f\u308a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"ja/AbInitio/Authoring_quick_start_7/#_5","title":"\u554f\u984c\u4f5c\u6210\u30af\u30a4\u30c3\u30af\u30fb\u30b9\u30bf\u30fc\u30c8\u30fb\u30ac\u30a4\u30c9\u306e\u6b21\u306e\u30d1\u30fc\u30c8\u3067\u306f\u5c0f\u30c6\u30b9\u30c8\u306e\u4f5c\u6210\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002","text":""},{"location":"ja/AbInitio/Authoring_quick_start_8/","title":"\u554f\u984c\u4f5c\u6210\u30af\u30a4\u30c3\u30af\u30fb\u30b9\u30bf\u30fc\u30c8\u30fb\u30ac\u30a4\u30c9 8: \u554f\u984c\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\u3068\u5c0f\u30c6\u30b9\u30c8","text":"<p>1 - \u57fa\u672c\u7684\u306a\u554f\u984c | 2 - \u554f\u984c\u5909\u6570 | 3 - \u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u3092\u6539\u5584\u3059\u308b | 4 - \u30e9\u30f3\u30c0\u30e0\u5316 | 5 - \u554f\u984c\u306e\u30c6\u30b9\u30c8 | 6 - \u8907\u6570\u89e3\u7b54\u6b04\u554f\u984c | 7 - \u6570\u5f0f\u7c21\u7565\u306e\u7121\u52b9\u5316 | 8 - \u554f\u984c\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\u3068\u5c0f\u30c6\u30b9\u30c8</p> <p>\u554f\u984c\u4f5c\u6210\u30af\u30a4\u30c3\u30af\u30fb\u30b9\u30bf\u30fc\u30c8\u30fb\u30ac\u30a4\u30c9\u306e\u3053\u306e\u30d1\u30fc\u30c8\u3067\u306f,\u554f\u984c\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\u3068\u5c0f\u30c6\u30b9\u30c8\u306b\u3064\u3044\u3066\u6271\u3044\u307e\u3059\u3002\u6b21\u306e\u30d3\u30c7\u30aa\u3067\u305d\u306e\u3084\u308a\u65b9\u3092\u8aac\u660e\u3057\u307e\u3059\uff1a</p>"},{"location":"ja/AbInitio/Authoring_quick_start_8/#_1","title":"\u306f\u3058\u3081\u306b","text":"<p>\u554f\u984c\u3092\u4f5c\u6210\u3057\u305f\u3089,\u5c0f\u30c6\u30b9\u30c8\u306b\u7d44\u307f\u8fbc\u307f\u305f\u304f\u306a\u308b\u3067\u3057\u3087\u3046\u3002\u30b5\u30f3\u30d7\u30eb\u554f\u984c\u3092\u4f7f\u7528\u3057\u3066\u5c0f\u30c6\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002</p> <p>\u3053\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f,\u521d\u5fc3\u8005\u304cSTACK\u3092\u4f7f\u7528\u3057\u3066,Moodle\u306e\u5c0f\u30c6\u30b9\u30c8\u3067\u6570\u5b66\u306e\u554f\u984c\u306e\u4f5c\u6210\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\u3053\u306e\u30ac\u30a4\u30c9\u306fMoodle\u5c0f\u30c6\u30b9\u30c8\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3068\u4e00\u90e8\u91cd\u8907\u3057\u307e\u3059\u3002</p> <p>\u3053\u308c\u3089\u306fDr Maureen McIver, Department of Mathematical Sciences, Loughborough University, UK, July 2016\u304c\u4f5c\u6210\u3057\u305f\u30e1\u30e2\u3092\u7de8\u96c6\u3057\u305f\u3082\u306e\u3067\u3059\u3002</p>"},{"location":"ja/AbInitio/Authoring_quick_start_8/#_2","title":"\u554f\u984c\u306e\u9078\u629e","text":"<p>\u5c0f\u30c6\u30b9\u30c8\u306b\u4f7f\u3046\u554f\u984c\u3092\u9078\u3076\u3053\u3068\u304b\u3089\u59cb\u3081\u307e\u3057\u3087\u3046\u3002\u3059\u3067\u306b\u4f5c\u3089\u308c\u3066\u3044\u308b\u554f\u984c\u3092\u7de8\u96c6\u3057\u3066,\u76ee\u7684\u306b\u5408\u3046\u3088\u3046\u306b\u4fee\u6b63\u3059\u308b\u3053\u3068\u304c\u4e00\u756a\u7c21\u5358\u306a\u65b9\u6cd5\u3067\u3059\u3002</p> <p>\u3053\u308c\u307e\u3067\u306e\u554f\u984c\u4f5c\u6210\u30af\u30a4\u30c3\u30af\u30b9\u30bf\u30fc\u30c8\u30ac\u30a4\u30c9\u306b\u5f93\u3063\u3066,\u30bc\u30ed\u304b\u3089\u72ec\u81ea\u306e\u554f\u984c\u3092\u4f5c\u3063\u3066\u3082\u826f\u3044\u3067\u3057\u3087\u3046\u3002</p>"},{"location":"ja/AbInitio/Authoring_quick_start_8/#_3","title":"\u65e2\u5b58\u306e\u30b5\u30fc\u30d0\u304b\u3089\u554f\u984c\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3059\u308b","text":"<p>\u65e2\u5b58\u306e\u30b5\u30fc\u30d0\u304b\u3089\u554f\u984c\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3059\u308b\u65b9\u6cd5\u3092\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\u3002</p> <p>\u307e\u305a,\u65e2\u5b58\u306e\u554f\u984c\u3092\u30a8\u30af\u30b9\u30dd\u30fc\u30c8\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff1a</p> <ol> <li>\u30a8\u30af\u30b9\u30dd\u30fc\u30c8\u3057\u305f\u3044\u554f\u984c\u304c\u3042\u308bMoodl\u306b\u30ed\u30b0\u30a4\u30f3\u3057,\u7ba1\u7406\u30d6\u30ed\u30c3\u30af\u306e<code>\u554f\u984c\u30d0\u30f3\u30af</code>\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u6b21\u306b<code>\u30a8\u30af\u30b9\u30dd\u30fc\u30c8</code>\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066\u304f\u3060\u3055\u3044\u3002</li> <li><code>Moodle XML\u30d5\u30a9\u30fc\u30de\u30c3\u30c8</code>\u3092\u30af\u30ea\u30c3\u30af\u3057,\u30a8\u30af\u30b9\u30dd\u30fc\u30c8\u3057\u305f\u3044\u30ab\u30c6\u30b4\u30ea\u3092\u9078\u629e\u3057\u307e\u3059\u3002Moodle\u3067\u306f\u500b\u3005\u306e\u30ab\u30c6\u30b4\u30ea\u306e\u307f\u30a8\u30af\u30b9\u30dd\u30fc\u30c8\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</li> <li><code>\u554f\u984c\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u30a8\u30af\u30b9\u30dd\u30fc\u30c8\u3059\u308b</code>\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u308c\u306b\u3088\u308a,\u305d\u306e\u30ab\u30c6\u30b4\u30ea\u306e\u3059\u3079\u3066\u306e\u554f\u984c\u3092\u542b\u3080\u30d5\u30a1\u30a4\u30eb\u304c\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3055\u308c\u307e\u3059\u3002</li> </ol> <p>\u3053\u308c\u3089\u306e\u554f\u984c\u3092\u3042\u306a\u305f\u306e\u30b5\u30fc\u30d0\u306b\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u307e\u3059\uff1a</p> <ol> <li>Moodle\u30b5\u30fc\u30d0\u3067\u3042\u306a\u305f\u306e\u30b3\u30fc\u30b9\u306b\u30ed\u30b0\u30a4\u30f3\u3057,\u7ba1\u7406\u30d6\u30ed\u30c3\u30af\u306e\u554f\u984c\u30d0\u30f3\u30af\u3092\u30af\u30ea\u30c3\u30af\u3057\u307e\u3059\u3002</li> <li><code>\u30a4\u30f3\u30dd\u30fc\u30c8</code>\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066\u304f\u3060\u3055\u3044\u3002</li> <li><code>Moodle XML\u30d5\u30a9\u30fc\u30de\u30c3\u30c8</code>\u3092\u30af\u30ea\u30c3\u30af\u3057,\u3042\u306a\u305f\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u305f\u3044?.xml\u30d5\u30a1\u30a4\u30eb\u3092\u30c9\u30e9\u30c3\u30b0\uff06\u30c9\u30ed\u30c3\u30d7\u3057,<code>\u30a4\u30f3\u30dd\u30fc\u30c8</code>\u304a\u3088\u3073<code>\u7d9a\u884c</code>\u3092\u30af\u30ea\u30c3\u30af\u3057\u307e\u3059\u3002\u554f\u984c\u306e\u30b3\u30d4\u30fc\u304c\u3042\u306a\u305f\u306e\u30b3\u30fc\u30b9\u306e\u554f\u984c\u30d0\u30f3\u30af\u306b\u8868\u793a\u3055\u308c,\u81ea\u7531\u306b\u554f\u984c\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</li> </ol>"},{"location":"ja/AbInitio/Authoring_quick_start_8/#moodle","title":"Moodle\u5c0f\u30c6\u30b9\u30c8\u3092\u4f5c\u6210\u3059\u308b","text":"<p>\u554f\u984c\u30d0\u30f3\u30af\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u305f\u308a\uff0c\u81ea\u5206\u3067\u554f\u984c\u30d0\u30f3\u30af\u3092\u4f5c\u6210\u3057\u305f\u3089,\u305d\u3053\u304b\u3089\u554f\u984c\u3092Moodle\u30af\u30a4\u30ba\u306b\u8ffd\u52a0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p> <p>\u3053\u308c\u306b\u3088\u308a,\u5b66\u751f\u304cSTACK\u306e\u554f\u984c\u306b\u89e3\u7b54\u3092\u5165\u529b\u3059\u308b\u69cb\u6587\u3092\u7df4\u7fd2\u3059\u308b\u305f\u3081\u306e\u30af\u30a4\u30ba\u3092\u542b\u3081\u308b\u3068\u826f\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002</p>"},{"location":"ja/AbInitio/Authoring_quick_start_8/#_4","title":"\u554f\u984c\u306e\u52d5\u4f5c","text":"<p>\u300c\u554f\u984c\u306e\u52d5\u4f5c\u300d\u306f\u5b66\u751f\u306b\u4e0e\u3048\u308b\u53d7\u9a13\u56de\u6570\u304a\u3088\u3073\u6e1b\u70b9\u306e\u5206\u914d\u65b9\u6cd5\u3092\u6c7a\u5b9a\u3057\u307e\u3059\u3002Moodle\u5c0f\u30c6\u30b9\u30c8\u3067\u306f\u591a\u304f\u306e\u300c\u554f\u984c\u306e\u52d5\u4f5c\u300d\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u6700\u3082\u91cd\u8981\u306a\u3082\u306e\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\u3002</p> <p>\u5373\u6642\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af \u5b66\u751f\u306b\u5404\u554f\u984c\u30921\u56de\u3060\u3051\u53d7\u9a13\u3055\u305b\u307e\u3059\u304c,\u554f\u984c\u306b\u89e3\u7b54\u3057\u305f\u76f4\u5f8c,\u307e\u305f\u306f\u3059\u3079\u3066\u306e\u554f\u984c\u304c\u89e3\u7b54\u3055\u308c,\u63d0\u51fa\u3055\u308c\u305f\u5834\u5408\u306e\u307f\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u3092\u4e0e\u3048\u307e\u3059\u3002\u3053\u308c\u306f\u6a19\u6e96\u7684\u306a\u5c0f\u30c6\u30b9\u30c8\u306b\u4fbf\u5229\u3067\u3059\u3002</p> <p>\u9045\u5ef6\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af \u5b66\u751f\u306b\u5404\u554f\u984c\u30921\u56de\u3060\u3051\u53d7\u9a13\u3055\u305b,\u4e0e\u3048\u3089\u308c\u305f\u65e5\u4ed8\u304c\u904e\u304e\u308b\u307e\u3067\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u3092\u4e0e\u3048\u307e\u305b\u3093\u3002\u3053\u308c\u306f\u5b66\u751f\u306b\u89e3\u7b54\u3092\u5171\u6709\u3055\u305b\u305f\u304f\u306a\u3044\u8a66\u9a13\u3084\u30b3\u30fc\u30b9\u30ef\u30fc\u30af\u306e\u5c0f\u30c6\u30b9\u30c8\u306b\u4fbf\u5229\u3067\u3059\u3002</p> <p>\u8907\u6570\u56de\u306e\u53d7\u9a13\u304c\u53ef\u80fd\u306a\u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6\u554f\u984c \u5b66\u751f\u306b\u6709\u9650\u56de\u306e\u53d7\u9a13\u3092\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d,\u305d\u308c\u305e\u308c\u306e\u53d7\u9a13\u306e\u5f8c\u306b\u30d2\u30f3\u30c8\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\u4e0d\u6b63\u89e3\u306e\u5834\u5408,\u30da\u30ca\u30eb\u30c6\u30a3\u3068\u3057\u3066\u304c\u6e1b\u70b9\u3055\u308c\u307e\u3059\u3002\u53d7\u9a13\u56de\u6570\u306f\u5404\u554f\u984c\u306b\u8868\u793a\u3055\u308c\u308b\u30d2\u30f3\u30c8\u56de\u6570\u3088\u308a1\u56de\u591a\u304f\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u30d2\u30f3\u30c8\u306f\u554f\u984c\u3092\u7de8\u96c6\u3059\u308b\u969b,\u30aa\u30d7\u30b7\u30e7\u30f3\u30bb\u30af\u30b7\u30e7\u30f3\u306b\u8868\u793a\u3055\u308c\u307e\u3059\u3002</p> <p>\u30a2\u30c0\u30d7\u30c6\u30a3\u30d6 \u5b66\u751f\u306b\u597d\u304d\u306a\u3060\u3051\u53d7\u9a13\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u304c,\u5b66\u751f\u304c\u7b54\u3048\u3092\u9593\u9055\u3048\u308b\u305f\u3073\u306b\u554f\u984c\u306e\u5408\u8a08\u5f97\u70b9\u304b\u3089\u6e1b\u70b9\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u554f\u984c\u3092\u78ba\u8a8d\u3057\u305f\u308a\u3001\u30c9\u30ea\u30eb\u306a\u3069\u7df4\u7fd2\u554f\u984c\u3068\u3057\u3066\u306e\u5b9f\u65bd\u306b\u4fbf\u5229\u3067\u3059\u3002</p>"},{"location":"ja/AbInitio/Authoring_quick_start_8/#_5","title":"\u5c0f\u30c6\u30b9\u30c8\u306e\u8a2d\u5b9a","text":"<ol> <li>Moodle\u30da\u30fc\u30b8\u306b\u79fb\u52d5\u3057,<code>\u7de8\u96c6\u3092\u6709\u52b9\u306b\u3059\u308b</code>\u3092\u30af\u30ea\u30c3\u30af\u3057\u307e\u3059\u3002</li> <li>\u5c0f\u30c6\u30b9\u30c8\u3092\u8a2d\u7f6e\u307e\u305f\u306f\u8ffd\u52a0\u3057\u305f\u3044\u30d6\u30ed\u30c3\u30af\u306b\u79fb\u52d5\u3057,<code>\u6d3b\u52d5\u307e\u305f\u306f\u30ea\u30bd\u30fc\u30b9\u3092\u8ffd\u52a0\u3059\u308b</code>\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066,<code>\u5c0f\u30c6\u30b9\u30c8</code>,<code>\u8ffd\u52a0</code>\u306e\u9806\u306b\u30af\u30ea\u30c3\u30af\u3057\u307e\u3059\u3002</li> <li>\u30af\u30a4\u30ba\u306b\u540d\u524d\u3092\u4ed8\u3051,\u8aac\u660e\u30dc\u30c3\u30af\u30b9\u306b\u597d\u304d\u306a\u8aac\u660e\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u5fc5\u8981\u3067\u3042\u308c\u3070,\u3053\u3053\u3067LaTeX\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 </li> <li><code>\u30bf\u30a4\u30df\u30f3\u30b0</code>\u3092\u30af\u30ea\u30c3\u30af\u3057,\u5c0f\u30c6\u30b9\u30c8\u306e\u958b\u59cb\uff0c\u7d42\u4e86\u6642\u523b\u3092\u8a2d\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002  </li> <li><code>\u8a55\u70b9</code>\u3092\u30af\u30ea\u30c3\u30af\u3057,\u53d7\u9a13\u53ef\u80fd\u56de\u6570\u3092\u8a2d\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u4f8b\u3048\u3070,\u7df4\u7fd2\u554f\u984c\u306b\u306f\u7121\u5236\u9650,\u30b3\u30fc\u30b9\u30ef\u30fc\u30af\u306e\u5c0f\u30c6\u30b9\u30c8\u306b\u306f1\u56de\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</li> <li><code>\u554f\u984c\u306e\u52d5\u4f5c</code>\u3092\u30af\u30ea\u30c3\u30af\u3057,\u4e0a\u8ff0\u3057\u305f\u3088\u3046\u306b\u5e0c\u671b\u3059\u308b\u554f\u984c\u306e\u52d5\u4f5c\u3092\u9078\u629e\u3057\u3066\u304f\u3060\u3055\u3044\u3002</li> <li>\u30ec\u30d3\u30e5\u30fc\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u306f\u5c0f\u30c6\u30b9\u30c8\u4e2d\u307e\u305f\u306f\u7d42\u4e86\u5f8c\u306b\u5b66\u751f\u306b\u95b2\u89a7\u3092\u8a31\u53ef\u3059\u308b\u9805\u76ee\u3092\u9078\u629e\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u306b\u306f\u5f7c\u3089\u306e\u7b54\u3048\u304c\u6b63\u3057\u3044\u304b\u3069\u3046\u304b,\u8a55\u70b9\u304a\u3088\u3073\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u306a\u3069\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u542b\u307f\u307e\u3059\u3002\u7df4\u7fd2\u554f\u984c\u3068\u30b3\u30fc\u30b9\u30ef\u30fc\u30af\u5c0f\u30c6\u30b9\u30c8\u306e\u4e21\u65b9\u3067<code>\u6b63\u89e3</code>\u3092\u30aa\u30d5\u306b\u3057,\u7df4\u7fd2\u554f\u984c\u3067\u306f<code>\u4e00\u822c\u7684\u306a\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af</code>\u3092\u30aa\u30f3\u306b\u3057,\u30b3\u30fc\u30b9\u30ef\u30fc\u30af\u5c0f\u30c6\u30b9\u30c8\u3067\u306f\u30aa\u30d5\u306b\u3059\u308b\u3053\u3068\u3092\u304a\u52e7\u3081\u3057\u307e\u3059\u3002</li> <li><code>\u4fdd\u5b58</code>\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066\u7d42\u4e86\u3057,\u30b3\u30fc\u30b9\u306b\u623b\u308a\u307e\u3059\u3002 </li> </ol> <p><code>\u7de8\u96c6</code>\u304a\u3088\u3073<code>\u8868\u793a\u3059\u308b</code>\u3092\u30af\u30ea\u30c3\u30af\u3059\u308b\u3053\u3068\u3067,\u5b66\u751f\u306b\u5c0f\u30c6\u30b9\u30c8/\u30c8\u30d4\u30c3\u30af\u3092\u8868\u793a\u3059\u308b\u304b\u3069\u3046\u304b\u5207\u308a\u66ff\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p> <p>\u6ce8\u610f: Moodle\u306e\u554f\u984c\u96c6\u3067\u306f\u81ea\u52d5\u7684\u306b\u5c0f\u30c6\u30b9\u30c8\u306e\u30ab\u30c6\u30b4\u30ea\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u5c0f\u30c6\u30b9\u30c8\u3067\u4f7f\u7528\u3055\u308c\u308b\u3059\u3079\u3066\u306e\u554f\u984c\u3092\u3053\u306e\u30ab\u30c6\u30b4\u30ea\u306b\u5206\u985e\u3059\u308b\u3053\u3068\u304c\u826f\u3044\u5834\u5408\u3082\u3042\u308a\u307e\u3059\u304c,\u3042\u306a\u305f\u304c\u4ee5\u524d\u306b\u5c0f\u30c6\u30b9\u30c8\u306b\u79fb\u52d5\u3057\u305f\u5834\u5408\u306e\u307f,\u30ab\u30c6\u30b4\u30ea\u304c\u8868\u793a\u3055\u308c\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"ja/AbInitio/Authoring_quick_start_8/#_6","title":"\u554f\u984c\u3092\u8ffd\u52a0\u3059\u308b","text":"<ol> <li> <p>\u30af\u30a4\u30ba\u3092\u30af\u30ea\u30c3\u30af\u3057,\u30af\u30a4\u30ba\u3092\u7de8\u96c6\u3057\u307e\u3059\u3002</p> </li> <li> <p><code>\u8ffd\u52a0</code>\u3092\u30af\u30ea\u30c3\u30af\u3057,<code>\u554f\u984c\u30d0\u30f3\u30af\u304b\u3089</code>\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066,\u30ab\u30c6\u30b4\u30ea\u3092\u9078\u629e\u3057,\u4f5c\u6210\u3057\u305f\u30b9\u30bf\u30c3\u30af\u554f\u984c\u30921\u3064\u307e\u305f\u306f\u8907\u6570\u9078\u629e\u3057\u307e\u3059\u3002</p> </li> <li><code>\u9078\u629e\u3057\u305f\u554f\u984c\u3092\u5c0f\u30c6\u30b9\u30c8\u306b\u8ffd\u52a0\u3059\u308b</code>\u3092\u30af\u30ea\u30c3\u30af\u3057,<code>\u4fdd\u5b58</code>\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066\u30e1\u30a4\u30f3\u30e2\u30b8\u30e5\u30fc\u30eb\u30da\u30fc\u30b8\u306b\u623b\u308a\u307e\u3059\u3002</li> </ol> <p>\u5c0f\u30c6\u30b9\u30c8\u3092\u30d7\u30ec\u30d3\u30e5\u30fc\u3059\u308b\u306b\u306f,\u5c0f\u30c6\u30b9\u30c8\u3092\u30af\u30ea\u30c3\u30af\u3057,<code>\u4eca\u3059\u3050\u5c0f\u30c6\u30b9\u30c8\u3092\u30d7\u30ec\u30d3\u30e5\u30fc</code>\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"ja/AbInitio/Authoring_quick_start_8/#_7","title":"\u8ffd\u52a0\u6642\u9593","text":"<p>\u8ffd\u52a0\u6642\u9593\u304c\u5fc5\u8981\u306a\u5b66\u751f\u304c\u3044\u308b\u5834\u5408,\u305d\u306e\u5b66\u751f\u3092\u542b\u3080\u30b0\u30eb\u30fc\u30d7\u3092\u8a2d\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u4ee5\u4e0b\u306f25%\u306e\u8ffd\u52a0\u6642\u9593\u304c\u5fc5\u8981\u306a\u5b66\u751f\u306e\u30b0\u30eb\u30fc\u30d7\u306e\u4f8b\u3067\u3059\u3002</p> <ol> <li><code>\u30b3\u30fc\u30b9\u7ba1\u7406</code>\u3067<code>\u30e6\u30fc\u30b6</code>,<code>\u30b0\u30eb\u30fc\u30d7</code>,<code>\u30b0\u30eb\u30fc\u30d7\u306e\u4f5c\u6210</code>\u306e\u9806\u306b\u30af\u30ea\u30c3\u30af\u3057\u307e\u3059\u3002</li> <li>\u30b0\u30eb\u30fc\u30d7\u540d\u3092\u300c25%\u8ffd\u52a0\u30b0\u30eb\u30fc\u30d7\u300d\u306a\u3069\u3068\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u30b0\u30eb\u30fc\u30d7\u306e\u8aac\u660e\u6b04\u306b,\u8ab0\u306e\u305f\u3081\u306e\u30b0\u30eb\u30fc\u30d7\u306a\u306e\u304b\u8a73\u7d30\u3092\u8a18\u5165\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002<code>\u5909\u66f4\u3092\u4fdd\u5b58</code>\u3092\u30af\u30ea\u30c3\u30af\u3057\u307e\u3059\u3002</li> <li><code>\u30e6\u30fc\u30b6\u30fc\u3092\u8ffd\u52a0/\u524a\u9664</code>\u3057,\u3053\u306e\u30b0\u30eb\u30fc\u30d7\u306e\u7279\u5b9a\u306e\u751f\u5f92\u306eID\u3092\u30af\u30ea\u30c3\u30af\u3057,\u8ffd\u52a0\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066\u30b0\u30eb\u30fc\u30d7\u306b\u5165\u308c\u307e\u3059\u3002\u3053\u306e\u30b0\u30eb\u30fc\u30d7\u306b\u5165\u308c\u308b\u5fc5\u8981\u306e\u3042\u308b\u5b66\u751f\u5168\u54e1\u306b\u5bfe\u3057\u3066\u3053\u306e\u64cd\u4f5c\u7e70\u308a\u8fd4\u3057\u307e\u3059\u3002</li> <li>\u623b\u3063\u3066<code>Moodle\u5c0f\u30c6\u30b9\u30c8</code>\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u5c0f\u30c6\u30b9\u30c8\u7ba1\u7406\u3067<code>\u30b0\u30eb\u30fc\u30d7\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9</code>\u3092\u30af\u30ea\u30c3\u30af\u3057,<code>\u30b0\u30eb\u30fc\u30d7\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3092\u8ffd\u52a0\u3059\u308b</code>\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066,\u95a2\u9023\u3059\u308b\u30b0\u30eb\u30fc\u30d7\u3092\u9078\u629e\u3057,\u305d\u306e\u30b0\u30eb\u30fc\u30d7\u306e\u5c0f\u30c6\u30b9\u30c8\u306b\u9069\u5207\u306a\u5236\u9650\u6642\u9593\u3092\u8a2d\u5b9a\u3057,\u4fdd\u5b58\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066\u304f\u3060\u3055\u3044\u3002</li> </ol>"},{"location":"ja/AbInitio/Authoring_quick_start_8/#_8","title":"\u7d50\u679c\u3092\u898b\u308b","text":"<p>\u7279\u5b9a\u306e\u5c0f\u30c6\u30b9\u30c8\u306e\u7d50\u679c\u3092\u898b\u308b\u306b\u306f,\u5c0f\u30c6\u30b9\u30c8\u3092\u8868\u793a\u3057,<code>\u5c0f\u30c6\u30b9\u30c8\u7ba1\u7406</code>\u3067<code>\u7d50\u679c</code>,<code>\u8a55\u70b9</code>\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u308c\u3067\u3059\u3079\u3066\u306e\u53d7\u9a13,\u7dcf\u5408\u8a55\u70b9\u304a\u3088\u3073\u5404\u554f\u984c\u306e\u8a55\u70b9\u3092\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u7d50\u679c\u3092\u30a8\u30af\u30bb\u30eb\u3067\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"ja/AbInitio/Authoring_quick_start_8/#_9","title":"\u6b21\u306e\u30b9\u30c6\u30c3\u30d7","text":"<p>\u3053\u308c\u3067Moodle\u3067\u5c0f\u30c6\u30b9\u30c8\u3092\u64cd\u4f5c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002</p> <p>\u4ee5\u4e0a\u3067\u554f\u984c\u4f5c\u6210\u30af\u30a4\u30c3\u30af\u30fb\u30b9\u30bf\u30fc\u30c8\u30fb\u30ac\u30a4\u30c9\u3092\u7d42\u4e86\u3057\u307e\u3059\u3002STACK\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f\u5305\u62ec\u7684\u3067,\u53c2\u7167\u3067\u304d\u308b\u3053\u3068\u304c\u305f\u304f\u3055\u3093\u3042\u308a\u307e\u3059\u3002\u4f8b\u3048\u3070,\u4ee5\u4e0b\u306e\u4f8b\u304c\u6319\u3052\u3089\u308c\u307e\u3059\u3002</p> <ul> <li>\u3088\u308a\u591a\u304f\u306e\u5165\u529b\u30bf\u30a4\u30d7\u306b\u3064\u3044\u3066\u5b66\u3076,</li> <li>\u3088\u308a\u591a\u304f\u306e\u89e3\u7b54\u30c6\u30b9\u30c8\u306b\u3064\u3044\u3066\u5b66\u3076,</li> <li>CASText\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u30d7\u30ed\u30c3\u30c8  \u3092\u8ffd\u52a0\u3059\u308b</li> <li>\u8907\u6570\u8a00\u8a9e\u306e\u30b5\u30dd\u30fc\u30c8\u3092\u8ffd\u52a0\u3059\u308b,</li> <li>\u7b49\u4fa1\u63a8\u8ad6\u306e\u4f7f\u7528\u306b\u3064\u3044\u3066\u5b66\u3076,</li> <li>\u66f2\u7dda\u30b9\u30b1\u30c3\u30c1\u306b\u3064\u3044\u3066\u8aad\u3080.</li> <li>Maxima \u306e\u69cb\u6587\u3084\u95a2\u6570\u540d\u306b\u3042\u307e\u308a\u8a73\u3057\u304f\u306a\u3044\u5834\u5408\u306f,Maxima \u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002wxMaxima \u306e\u3088\u3046\u306a\u30b0\u30e9\u30d5\u30a3\u30ab\u30eb\u306a Maxima \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3082,\u9069\u5207\u306a Maxima \u30b3\u30de\u30f3\u30c9\u3092\u7c21\u5358\u306b\u898b\u3064\u3051\u308b\u306e\u306b\u975e\u5e38\u306b\u5f79\u7acb\u3061\u307e\u3059\u3002</li> </ul>"}]}