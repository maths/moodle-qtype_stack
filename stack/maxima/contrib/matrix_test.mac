/* This may not work without 
   stack_include_contrib("linearalgebra_core.mac") */

/*  Author Luke Longworth
    University of Canterbury
    Copyright (C) 2025 Luke Longworth

    This program is free software: you can redistribute it or modify
    it under the terms of the GNU General Public License version two.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for details.

    You should have received a copy of the GNU General Public License
    along with this program. If not, see <http://www.gnu.org/licenses/>. */

/****************************************************************/
/*  Matrix manipulation and predicate functions for STACK       */
/*                                                              */
/*  Test cases.                                                 */
/*                                                              */
/*  V1.0 February 2025                                          */
/*                                                              */
/****************************************************************/

/* Thank you to Georg Osang of IDEMS International    */
/* for significant contributions to this work in 2024 */

s_test_case(aug(matrix([1,2,3,1],[4,5,6,1],[7,8,9,1])),aug_matrix([1,2,3,1],[4,5,6,1],[7,8,9,1]));
s_test_case(de_aug(aug_matrix([1,2,3,1],[4,5,6,1],[7,8,9,1])),matrix([1,2,3,1],[4,5,6,1],[7,8,9,1]));

s_test_case(triu(matrix([1,2,3],[4,5,6],[7,8,9])),matrix([1,2,3],[0,5,6],[0,0,9]));
s_test_case(triu(matrix([1,2,3],[4,5,6],[7,8,9],[10,11,12])),matrix([1,2,3],[0,5,6],[0,0,9],[0,0,0]));
s_test_case(triu(matrix([1,2,3,4],[4,5,6,7],[7,8,9,10])),matrix([1,2,3,4],[0,5,6,7],[0,0,9,10]));
s_test_case(triu(matrix([1,2],[3,2+2])),matrix([1,2],[0,2+2]));
s_test_case(triu(1),1);

s_test_case(tril(matrix([1,2,3],[4,5,6],[7,8,9])),matrix([1,0,0],[4,5,0],[7,8,9]));
s_test_case(tril(matrix([1,2,3],[4,5,6],[7,8,9],[10,11,12])),matrix([1,0,0],[4,5,0],[7,8,9],[10,11,12]));
s_test_case(tril(matrix([1,2,3,4],[4,5,6,7],[7,8,9,10])),matrix([1,0,0,0],[4,5,0,0],[7,8,9,0]));
s_test_case(tril(matrix([1,2],[3,2+2])),matrix([1,0],[3,2+2]));
s_test_case(tril(1),1);

s_test_case(diagonal(matrix([1,2,3],[4,5,6],[7,8,9])),matrix([1,0,0],[0,5,0],[0,0,9]));
s_test_case(diagonal(matrix([1,2,3],[4,5,6],[7,8,9],[10,11,12])),matrix([1,0,0],[0,5,0],[0,0,9],[0,0,0]));
s_test_case(diagonal(matrix([1,2,3,4],[4,5,6,7],[7,8,9,10])),matrix([1,0,0,0],[0,5,0,0],[0,0,9,0]));
s_test_case(diagonal(matrix([1,2],[3,2+2])),matrix([1,0],[0,2+2]));
s_test_case(diagonal(1),1);

s_test_case(diag_entries(ident(3)),[1,1,1]);
s_test_case(diag_entries(matrix([1,0,0],[0,2,0],[0,0,3],[0,0,0])),[1,2,3]);
s_test_case(diag_entries(matrix([3,0,0,0],[0,2,0,0],[0,0,1,0])),[3,2,1]);
s_test_case(diag_entries(matrix([1+2,0,0,0],[0,2,0,0],[0,0,1,0])),[1+2,2,1]);
s_test_case(diag_entries(1),[1]);

s_test_case(rowscale(matrix([1,2,3],[4,5,6],[7,8,9]),2,100),matrix([1,2,3],[100*4,100*5,100*6],[7,8,9]));
s_test_case(columnscale(matrix([1,2,3],[4,5,6],[7,8,9]),2,100),matrix([1,100*2,3],[4,100*5,6],[7,100*8,9]));

s_test_case(triup(ident(5)),true);
s_test_case(trilp(ident(5)),true);
s_test_case(triup(zeromatrix(5,4)),true);
s_test_case(trilp(zeromatrix(5,4)),true);

s_test_case(triup(matrix([1,2,3],[4,5,6],[7,8,9])),false);
s_test_case(triup(matrix([1,2,3],[0,5,6],[0,0,9])),true);
s_test_case(triup(matrix([1,2,3],[4,5,6],[7,8,9],[10,11,12])),false);
s_test_case(triup(matrix([1,2,3],[0,5,6],[0,0,9],[0,0,0])),true);
s_test_case(triup(matrix([1,2,3,4],[4,5,6,7],[7,8,9,10])),false);
s_test_case(triup(matrix([1,2,3,4],[0,5,6,7],[0,0,9,10])),true);
s_test_case(triup(matrix([1,2,3,4,5,6,7,8,9])),true);

s_test_case(trilp(matrix([1,2,3],[4,5,6],[7,8,9])),false);
s_test_case(trilp(matrix([1,0,0],[4,5,0],[7,8,9])),true);
s_test_case(trilp(matrix([1,2,3],[4,5,6],[7,8,9],[10,11,12])),false);
s_test_case(trilp(matrix([1,0,0],[4,5,0],[7,8,9],[10,11,12])),true);
s_test_case(trilp(matrix([1,2,3,4],[4,5,6,7],[7,8,9,10])),false);
s_test_case(trilp(matrix([1,0,0,0],[4,5,0,0],[7,8,9,0])),true);
s_test_case(trilp(transpose([1,2,3,4,5,6,7,8,9])),true);

s_test_case(REFp(ident(4)),true);
s_test_case(REFp(ev(2*ident(4),simp)),true);
s_test_case(REFp(ev(2*ident(4),simp),true),false);
s_test_case(REFp(matrix([2,1,1],[0,0,3],[0,0,0],[0,0,0])),true);
s_test_case(REFp(matrix([2,1,1],[0,0,3],[0,0,0],[0,0,0]),true),false);
s_test_case(REFp(matrix([2,1,1],[0,0,3],[0,0,0],[0,0,0]),false),true);
s_test_case(REFp(matrix([2,1,1],[0,0,0],[0,0,3],[0,0,0])),false);
s_test_case(REFp(matrix([1,1,1,1,1,1],[0,1,1,1,1,1],[0,0,0,1,1,1],[0,0,0,0,0,1])),true);
s_test_case(REFp(matrix([1,1,1,1,1,1],[0,1,1,1,1,1],[0,0,0,1,1,1],[0,0,0,0,0,1]),true),true);
s_test_case(REFp(matrix([1,1,1,1,1,1],[0,1,1,1,1,1],[0,0,1,0,1,1],[0,0,0,0,0,1])),true);
s_test_case(REFp(matrix([1,2,3],[0,5,6])),true);
s_test_case(REFp(matrix([1,2,3],[4,5,6])),false);
s_test_case(REFp(matrix([1,2,3],[0,5,6],[0,8,9])),false);

s_test_case(diagonalizablep(ident(2)),true);
s_test_case(diagonalizablep(matrix([1,1],[0,1])),false);
s_test_case(diagonalizablep(1),false);
s_test_case(diagonalizablep(matrix([1,1],[1,1])),true);

s_test_case(symp(ident(3)),true);
s_test_case(symp(matrix([1,1],[0,1])),false);
s_test_case(symp(1),false);

s_test_case(invertiblep(ident(2)),true);
s_test_case(invertiblep(matrix([1,1],[0,1])),true);
s_test_case(invertiblep(1),false);
s_test_case(invertiblep(matrix([1,1],[1,1])),false);

_test_eMat: matrix([2, 1], [2, -1]);
_test_spMat: matrix([2, -1], [-1, 2]);
_test_bform(w, v) := transpose(w)._test_spMat.v;
_test_Qmat: matrix([1,1/2],[0,1]);
_test_Qmat_n: matrix([1/sqrt(2),1/(sqrt(2)*sqrt(3))],[0,sqrt(2)/sqrt(3)]);

s_test_case(orthogonal_columnsp(matrix([1,1],[1,-1],[1,0])),true);
s_test_case(orthogonal_columnsp(matrix([1/sqrt(3),1/sqrt(2)],[1/sqrt(3),-1/sqrt(2)],[1/sqrt(3),0])),true);
s_test_case(orthogonal_columnsp(matrix([1,1],[1,2],[1,0])),false);
s_test_case(orthogonal_columnsp(matrix([1,1],[1,-1])),true);
s_test_case(orthogonal_columnsp(matrix([1,1],[1,-1])/sqrt(2)),true);
s_test_case(orthogonal_columnsp(1),false);
s_test_case(orthogonal_columnsp([c(1, 0), c(0, 1)]), true);
s_test_case(orthogonal_columnsp([c(1, 0), c(0, 1, 0)]), false);
s_test_case(orthogonal_columnsp(ident(2)), true);
s_test_case(orthogonal_columnsp(_test_eMat), true);
s_test_case(orthogonal_columnsp(_test_eMat, ident(2)), true);
s_test_case(orthogonal_columnsp(_test_Qmat), false);
s_test_case(orthogonal_columnsp(_test_Qmat, _test_spMat), true);
s_test_case(orthogonal_columnsp(_test_Qmat, _test_bform), true);
s_test_case(orthogonal_columnsp(_test_Qmat_n, _test_spMat), true);
s_test_case(orthogonal_columnsp(ident(2), _test_spMat), false);

s_test_case(orthonormal_columnsp(matrix([1,1],[1,-1],[1,0])),false);
s_test_case(orthonormal_columnsp(matrix([1/sqrt(3),1/sqrt(2)],[1/sqrt(3),-1/sqrt(2)],[1/sqrt(3),0])),true);
s_test_case(orthonormal_columnsp(matrix([1,1],[1,-1])),false);
s_test_case(orthonormal_columnsp(ev(matrix([1,1],[1,-1])/sqrt(2),simp)),true);
s_test_case(orthonormal_columnsp(1),false);
s_test_case(orthonormal_columnsp([c(1, 0), c(0, 1)]), true);
s_test_case(orthonormal_columnsp([c(1, 0), c(0, 1, 0)]), false);
s_test_case(orthonormal_columnsp(ident(2)), true);
s_test_case(orthonormal_columnsp(_test_eMat), false);
s_test_case(orthonormal_columnsp(_test_Qmat, _test_spMat), false);
s_test_case(orthonormal_columnsp(_test_Qmat_n, _test_spMat), true);
s_test_case(orthonormal_columnsp(_test_Qmat_n, _test_bform), true);

s_test_case(orth_matrixp(matrix([1,1],[1,-1],[1,0])),false);
s_test_case(orth_matrixp(matrix([1/sqrt(3),1/sqrt(2)],[1/sqrt(3),-1/sqrt(2)],[1/sqrt(3),0])),false);
s_test_case(orth_matrixp(matrix([1,1],[1,-1])),false);
s_test_case(orth_matrixp(ev(matrix([1,1],[1,-1])/sqrt(2),simp)),true);
s_test_case(orth_matrixp(1),false);

s_test_case(diagmatrix_like([1,1,1],3,3),ident(3));
s_test_case(diagmatrix_like([1,2,3],3,4),matrix([1,0,0,0],[0,2,0,0],[0,0,3,0]));
s_test_case(diagmatrix_like([1,2,3],4,3),matrix([1,0,0],[0,2,0],[0,0,3],[0,0,0]));
s_test_case(diagmatrix_like([1,2,3],4,4),matrix([1,0,0,0],[0,2,0,0],[0,0,3,0],[0,0,0,0]));
s_test_case(diagmatrix_like([1,2,3],2,3),matrix([1,0,0],[0,2,0]));
s_test_case(diagmatrix_like([1,2,3],3,2),matrix([1,0],[0,2],[0,0]));

s_test_case(setrowmx(1,2,matrix([1,2,3],[4,5,6],[7,8,9])),matrix([1,2,3],[1,1,1],[7,8,9]));
s_test_case(setrowmx([%e,%pi,%i],2,matrix([1,2,3],[4,5,6],[7,8,9])),matrix([1,2,3],[%e,%pi,%i],[7,8,9]));
s_test_case(setrowmx(transpose([%e,%pi,%i]),2,matrix([1,2,3],[4,5,6],[7,8,9])),matrix([1,2,3],[%e,%pi,%i],[7,8,9]));

s_test_case(setcolmx(1,2,matrix([1,2,3],[4,5,6],[7,8,9])),matrix([1,1,3],[4,1,6],[7,1,9]));
s_test_case(setcolmx([%e,%pi,%i],2,matrix([1,2,3],[4,5,6],[7,8,9])),matrix([1,%e,3],[4,%pi,6],[7,%i,9]));
s_test_case(setcolmx(transpose([%e,%pi,%i]),2,matrix([1,2,3],[4,5,6],[7,8,9])),matrix([1,%e,3],[4,%pi,6],[7,%i,9]));

s_test_case(setdiagmx(1,matrix([1,2,3],[4,5,6],[7,8,9])),matrix([1,2,3],[4,1,6],[7,8,1]));
s_test_case(setdiagmx(1,matrix([1,2,3],[4,5,6],[7,8,9]),1),matrix([1,1,3],[4,5,1],[7,8,9]));
s_test_case(setdiagmx(1,matrix([1,2,3],[4,5,6],[7,8,9]),-2),matrix([1,2,3],[4,5,6],[1,8,9]));
s_test_case(setdiagmx([10,20,30,40,50],matrix([1,2,3,4],[4,5,6,7],[7,8,9,10]),2),matrix([1,2,10,4],[4,5,6,20],[7,8,9,10]));

s_test_case(format_as_coeff(2), tex1(2));
s_test_case(format_as_coeff(-2), "\\left(-2\\right)");
s_test_case(format_as_coeff(3/4), "\\frac{3}{4}");
s_test_case(format_as_coeff(-(3/4)), "\\left(-\\left(\\frac{3}{4}\\right)\\right)");
s_test_case(format_as_coeff(-3/4), "\\frac{-3}{4}");
s_test_case(format_as_coeff(q-3/4), "\\left(q-\\frac{3}{4}\\right)");
s_test_case(format_as_coeff(g-h), "\\left(g-h\\right)");
s_test_case(format_as_coeff(g(x)), tex1(g(x)));
s_test_case(format_as_coeff(-g(x)), sconcat("\\left(", tex1(-g(x)), "\\right)"));
s_test_case(format_as_coeff(2*h), tex1(2*h));
s_test_case(format_as_coeff(-(2*h)), sconcat("\\left(", tex1(-(2*h)), "\\right)"));
s_test_case(format_as_coeff(-2*h), tex1(-2*h));
s_test_case(format_as_coeff(""), "");
s_test_case(format_as_coeff("2"), "2");
s_test_case(format_as_coeff(ev(2*k-2,simp)), sconcat("\\left(", tex1(2*k-2), "\\right)"));

s_test_case(disp_eqns([2*x+y-z+(-3)*w = 7,-x-2*y+(-7)*w = -1,3*z = 0,x+w = 0,0 = 0],[x,y,z,w]),"\\begin{array} {rcrcrcrcr}2x& + & y& - & z& - & 3w& = &7\\\\-x& - & 2y& & & - & 7w& = &-1\\\\& & &  & 3z& & & = &0\\\\x& & & & & + & w& = &0\\\\& & & & & & 0& = &0\\end{array}");

s_test_case(mat_disp_eqns(matrix([2,1,-1,-3],[-1,-2,0,-7],[0,0,3,0],[1,0,0,1],[0,0,0,0]),matrix([7],[-1],[0],[0],[0]),[x,y,z,w]),"\\begin{array} {rcrcrcrcr}2x& + & y& - & z& - & 3w& = &7\\\\-x& - & 2y& & & - & 7w& = &-1\\\\& & &  & 3z& & & = &0\\\\x& & & & & + & w& = &0\\\\& & & & & & 0& = &0\\end{array}");
/* BENIGN ERROR */ s_test_case_simp(mat_disp_eqns(matrix([-2, k-1, -1],[0, 2*k+2, 0], [-1, k, -2]),matrix([k-1],[1],[-1]),[x,y,z]), "\\begin{array} {rcrcrcr}-2x& + & \\left(k-1\\right)y& - & z& = &k-1\\\\& & \\left(2\\cdot k+2\\right)y& & & = &1\\\\-x& + & ky& - & 2z& = &-1\\end{array}");
s_test_case(mat_disp_eqns(matrix([-1/2, -k/2, -1/2],[1/2, (k+1)/3, 1/2]),matrix([k/2],[-1/2]),[x,y,z]), "\\begin{array} {rcrcrcr}-\\frac{1}{2}x& + & \\left(-\\left(\\frac{k}{2}\\right)\\right)y& - & \\frac{1}{2}z& = &\\frac{k}{2}\\\\\\frac{1}{2}x& + & \\frac{k+1}{3}y& + & \\frac{1}{2}z& = &-\\left(\\frac{1}{2}\\right)\\end{array}");
