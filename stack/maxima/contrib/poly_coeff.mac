/*  Author Chris Sangwin
    University of Edinburgh
    Copyright (C) 2025 Chris Sangwin

    This program is free software: you can redistribute it or modify
    it under the terms of the GNU General Public License version two.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for details.

    You should have received a copy of the GNU General Public License
    along with this program. If not, see <http://www.gnu.org/licenses/>. */

/******************************************************************/
/*  Functions for testing individual coefficients of polynomials. */
/*                                                                */
/*  Chris Sangwin, <C.J.Sangwin@ed.ac.uk>                         */
/*  V1.0 Sept 2025                                                */
/*                                                                */
/******************************************************************/

/* This function checks if a rational number has an exact decimal */
/* We need to check if the denominator of the teacher's answer    */
/* has only powers of 2 and 5 in the prime factorisation.  If so, */
/* the fraction can terminate in base 10.                         */
rational_num_exactp(ex) := block([tadnom],
  if not(rational_numberp(ex)) then return(false),
  tadnom:denom(ex),
  ev(while (is(mod(tadnom, 2)=0)) do tadnom:tadnom/2, simp),
  ev(while (is(mod(tadnom, 5)=0)) do tadnom:tadnom/5, simp),
  /* If we have other prime factors in the demoninator it's not   */
  /* possible to accept a float here.                             */
  if is(tadnom=1) then return(true),
  false
)$

/* This function checks if one number equals another, but only    */
/* when the floating point number is _exact_.                     */
/* E.g. 0.5=1/2, but 0.333 <> 1/3.                                */
/*                                                                */
/* sa is the "student's answer" could be a fraction or a float.   */
/* ta is the "teacher's answer", if it's a float we rationalisze  */
numexactp(sa, ta) := block(
  /* Guard clase for things like sqrt(2), %pi and other numbers which are not floats. */  
  if ev(is(sa-ta=0), simp) then return(true),
  /* Really ta should not be a float!   */
  if floatnump(ta) then ta:ev(rat(ta),simp),
  /* since ta<>sa ) from above, we don't check further and return false.                         */
  if not(rational_num_exactp(ta)) then return(false),
  if ev(is(rat(sa-ta)=0), simp) then return(true),
  return(false)
)$

/* This function converts all floats within an expression without */
/* changing the basic structure (as does rat(ex)).                */
num_ensure_rational(ex) := block(
  if simp_floatnump(ex) then return(rat(ex)),
  if atom(ex) then return(ex),
  apply(op(ex), map(num_ensure_rational, args(ex)))
)$

