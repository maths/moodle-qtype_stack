/*  Author Chris Sangwin
    University of Edinburgh
    Copyright (C) 2023 Chris Sangwin

    This program is free software: you can redistribute it or modify
    it under the terms of the GNU General Public License version two.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for details.

    You should have received a copy of the GNU General Public License
    along with this program. If not, see <http://www.gnu.org/licenses/>. */

/******************************************************************/
/*  Functions for representing, typesetting and assessing proof.  */
/*  Mostly for use with Parsons problems.                         */
/*                                                                */
/*  Chris Sangwin, <C.J.Sangwin@ed.ac.uk>                         */
/*  V1.0 Sept 2023                                                */
/*                                                                */
/******************************************************************/

/* An example of how to use these functions.

stack_include("https://raw.githubusercontent.com/maths/moodle-qtype_stack/proof-builder/stack/maxima/contrib/prooflib.mac");
stack_include("https://raw.githubusercontent.com/maths/moodle-qtype_stack/proof-builder/stack/maxima/contrib/proofsamples/odd-squaredodd.mac");

stack_include("contribl://prooflib.mac");
stack_include("contribl://proofsamples/odd-squaredodd.mac");

tap:proof_display(proof_ans, proof_steps);

{@thm@}
{@tap@}
*/

/******************************************************************/
/* Types of proof.                                                */
/*                                                                */
/* proof()       - general, unspecified proof                     */
/* proof_c()     - general proof, with commutative arguments      */
/* proof_opt()   - proof_opt()                                    */
/*                                                                */
/* proof_iff()   - if any only if                                 */
/* proof_cases() - proof by exhaustive cases, the first element   */
/*                 is assumed to justify the cases.               */
/* proof_goal()  - proof by establishing a goal, the last element */
/*                 is assumed to justify by the previous cases.   */
/* proof_ind()   - proof by induction                             */
/*                                                                */
/******************************************************************/

/* General proof functions                                        */
/* Please update Proof/Proof_CAS_library.md and                   */
/* stack/maxima/proof.mac with new types.                         */


/******************************************************************/
/*                                                                */
/*  Assessment functions                                          */
/*                                                                */
/******************************************************************/

/* Create a list of all proof trees which are alternatives to this.
   Clearly this is a potentially exponential algorithm, so use with care!
*/
proof_alternatives(ex):=block([p1,p2],
    p2:proof_one_alternatives(ex),
    do (p1:p2, p2:proof_one_distrib(p1), if is(p1=p2) then return(map(proof_remove_nullproof, proof_ensure_list(p2))))
);

proof_one_alternatives(pr) := block(
  if atom(pr) then return(pr),
  if proof_commutep(pr) then return(apply(pf_one, map(lambda([ex], apply(op(pr), map(proof_one_alternatives, ex))), listify(permutations(args(pr)))))),
  /* In a proof by exhaustive cases the first element is fixed. */
  if op(pr)=proof_opt then return(pf_one(first(pr), nullproof)),
  /* In a proof by exhaustive cases the first element is fixed. */
  if op(pr)=proof_cases then return(apply(pf_one, map(lambda([ex], apply(op(pr), append([first(args(pr))], map(proof_one_alternatives, ex)))), listify(permutations(rest(args(pr))))))),
  /* In a proof establishing a goal the last element is fixed. */
  if op(pr)=proof_goal then return(apply(pf_one, map(lambda([ex], apply(op(pr), append(map(proof_one_alternatives, ex), [first(reverse(args(pr)))]))), 
                        listify(permutations(rest(reverse(args(pr)))))))),
  /* In a proof by induction cases the first element and last elents are fixed. */
  if op(pr) = proof_ind then return(apply(pf_one, map(lambda([ex], apply(op(pr), append([first(args(pr))],
      map(proof_one_alternatives, ex), [fourth(args(pr))]))), listify(permutations([second(args(pr)), third(args(pr))]))))),
  apply(op(pr), map(proof_one_alternatives, args(pr)))
);

proof_one_distribp(ex):= not(atom(ex)) and is(op(ex)=pf_one);

proof_one_distrib(ex):= block([_a,_i,_l],
   if atom(ex) then return(ex),
   if freeof(pf_one, ex) then return(ex),
   /* If pf_one has worked its way to the top we return the list of options. */ 
   if is(op(ex)=pf_one) then return(args(ex)),
   if (listp(ex)) then return(flatten(map(proof_one_distrib, ex))),
   /* Pull out first argument to have pf_one */
   _i:sublist_indices(args(ex), proof_one_distribp),
   /* If none of the arguments need distribution, then go one level down. */
   if emptyp(_i) then return(apply(op(ex), map(proof_one_distrib, args(ex)))),
   _i:first(_i),
   _a:args(part(args(ex),_i)),
   _l:ev(makelist(k,k,1,length(_a)),simp),
    /* This list is not free of pf_one, so we take the first. */
   apply(pf_one, map(lambda([ex2], block([_aa], _aa:copy(args(ex)), _aa[_i]:_a[ex2], return(apply(op(ex),_aa)))), _l))
);

proof_ensure_list(ex):= if listp(ex) then ex else [ex];

proof_remove_nullproof(ex):= block(
   if atom(ex) then return(ex),
   if freeof(nullproof, ex) then return(ex),
   apply(op(ex), map(proof_remove_nullproof, sublist(args(ex), lambda([ex2], not(is(ex2=nullproof)))))) 
);

/******************************************************************/
/*                                                                */
/*  STACK Parson's block functions (legacy)                       */
/*                                                                */
/******************************************************************/

/*
 * Take the JSON from STACK Parson's block and return a proof function.
 */
proof_parsons_interpret(st) := block([pf],
  pf:first(first(stackjson_parse(st))),
  pf:apply(proof, first(first(stackmap_get(pf, "used"))))
);

/* Construct the "used" and "available" keys when the teacher's answer is used. */
proof_parsons_key_json(proof_ans, proof_steps) := block([pkeys],
  /* Ensure all keys are string keys. */
  if not(emptyp(proof_steps)) then proof_ans:proof_keys_sub(proof_ans, proof_steps),
  pkeys:proof_parsons_keys_used_unused(proof_ans, proof_steps),
  sconcat("[[{\"used\":", stackjson_stringify([[first(pkeys)]]), ", \"available\":", stackjson_stringify(second(pkeys)), "}, 0]]")
);

/*
 * Takes a proof, and proof steps list and returns the keys not used in the proof_steps.
 * Needed to create a "teacher's answer" in JSON block, including unused text.
*/
proof_parsons_keys_used_unused(proof_ans, proof_steps) := block([tkeys, skeys],
  tkeys:map(first, proof_steps),
  skeys:ev(proof_ans, map(lambda([ex], ex="["), proof_types), simp),
  /* TO-DO: update this when we deal with trees (and have examples) */
  skeys:map(lambda([skey], skey), flatten(skeys)),
  return([skeys, listdifference(tkeys, ev(unique(skeys), simp))])
);

/******************************************************************/
/*                                                                */
/*  Display functions                                             */
/*                                                                */
/******************************************************************/

/*
 *  Return the step "k" from the proof "pf".
 */
proof_getstep(k, pf) := block([keylist],
    if integerp(k) then return(second(pf[k])),
    keylist:sublist(pf, lambda([ex], is(first(ex)=k))),
    if not(emptyp(keylist)) then return(second(first(keylist))),
    /* If the string is not in the pf list, then just return it unchanged.
       Teachers can use this to adapt proofs which use some of the steps.
    */
    k
);

/*
 * This function replaces integers and keys with the literal strings from the proof.
 */
proof_disp_replacesteps(ex, proof_steps) := block(
   if integerp(ex) or stringp(ex) then return(proof_getstep(ex, proof_steps)),
   if atom(ex) then return(sconcat("Error: the following atom does not index a step: ", string(ex))),
   /* Flatten any optional steps now. */
   if is(op(ex)=proof_opt) then return(proof_disp_replacesteps(first(args(ex)), proof_steps)),
   apply(op(ex), map(lambda([ex2], proof_disp_replacesteps(ex2, proof_steps)), args(ex)))
);

/**
 * Take a proof "ex" and a list "pf" of [key, step] pairs and translate this into a proof tree with
 * the keys replaced by corresponding strings.
 */
proof_keys_sub(ex, proof_steps):= block(
   if integerp(ex) then return(first(proof_steps[ex])),
   if stringp(ex) then return(ex),
   apply(op(ex), map(lambda([ex2], proof_keys_sub(ex2, proof_steps)), args(ex)))
);

/**
 * Take a proof "ex" and a list "pf" of [key, step] pairs and translate this into a proof tree with
 * the keys replaced by corresponding integers.
 */
proof_keys_int(ex, proof_steps):= block(
   if integerp(ex) then return(ex),
   if stringp(ex) then return(first(sublist_indices(proof_steps, lambda([ex2], is(ex=first(ex2)))))),
   apply(op(ex), map(lambda([ex2], proof_keys_int(ex2, proof_steps)), args(ex)))
);

/**
 * Replace displayed LaTeX mathematics delimiters with inline.
 */
proof_inline_maths(st) := ssubst("\\)", "\\]", ssubst("\\(", "\\[", st));

/*
 * Prune out any narrative from the proof steps: used to display a proof without narrative.
*/
proof_line_prune(pfs) := [first(pfs), second(pfs)];
proof_steps_prune(proof_steps) := map(proof_line_prune, proof_steps);

/*
 *  Return the step "k" from the proof "pf" wrapped in html divs, and with any narrative.
 */
proof_getstep_html(k, pf) := block([keylist],
    if integerp(k) then return(proof_line_html(pf[k])),
    keylist:sublist(pf, lambda([ex], is(first(ex)=k))),
    if not(emptyp(keylist)) then return(proof_line_html(first(keylist))),
    /* If the string is not in the pf list, then just return it unchanged.
       Teachers can use this to adapt proofs which use some of the steps.
    */
    k
);

/*
  Wrap lines in html <div> tags, and add narrative if it exists. 
  pfs is a line from the proof_steps array.
*/
proof_line_html(pfs) := block([st],
  st:"",
  if is(length(pfs)>2) then
      st:proof_comment_disp(third(pfs)),
  proof_line_disp(second(pfs), st)
);

/*
 * This function replaces integers and keys with the html-wrapped strings from the proof.
 */
proof_disp_replacesteps_html(ex, proof_steps) := block(
   if integerp(ex) or stringp(ex) then return(proof_getstep_html(ex, proof_steps)),
   if atom(ex) then return(sconcat("Error: the following atom does not index a step: ", string(ex))),
   /* Flatten any optional steps now. */
   if is(op(ex)=proof_opt) then return(proof_disp_replacesteps(first(args(ex)), proof_steps)),
   apply(op(ex), map(lambda([ex2], proof_disp_replacesteps_html(ex2, proof_steps)), args(ex)))
);

/**
 * Take a proof, and any proof steps and display them using proof CSS.
 */
proof_display(p_ans, p_steps) := block([p1],
    p1:proof_disp_replacesteps_html(p_ans, p_steps), 
    ev(p1,map(lambda([ex], ex=dispproof), proof_types))
);

/* Make use of the existing styles.  See https://docs.stack-assessment.org/en/Topics/Proof/ */
dispproof([ex]) := block([ex1],
    apply(sconcat, flatten(append(["<div class=\"proof-block\">"], [simplode(ex)], ["</div>"])))
);

/**
 * Take a proof, and any proof steps and display them using paragraphs.
 */
proof_display_para(proof_ans, proof_steps) := ev(proof_disp_replacesteps(proof_ans, proof_steps), map(lambda([ex], ex=dispproof_para), proof_types));

/* Flatten to a paragraph. */
dispproof_para([ex]) := block([ex1],
    apply(sconcat, flatten(append(["<p>"], [simplode(ex, " ")], ["</p>"])))
);

/* Use the summary/details HTML tag.
dispproof([ex]) := block([ex1],
    apply(sconcat, flatten(append(["<summary><details><div class=\"proof-block\">"], [simplode(ex, "<br/>")], ["</div></details></summary>"])))
);
*/

/******************************************************************/
/*                                                                */
/*  Assessment and feedback functions                             */
/*                                                                */
/******************************************************************/

/* ********************************** */
/* Levenshtein distance               */
/* ********************************** */

/*
  Levenshtein distance with swap tracking
  s,t: lists to compare
  Returns integer d, the Levensthein distance between s and t.
  Returns the process of getting from s to t.
  Original author Achim Eichhorn Achim.Eichhorn(at)hs-esslingen.de modified by Chris Sangwin to track process.
*/
proof_damerau_levenstein(s, t) := block([c, m, n, XY, XYaction, i, j, d, temp, L, lm, li, dl_tags, simp],
    simp:true,
    if(s=t) then return([0,[]]), /* Equal strings result in 0, nothing to do. */
    m:length(s),
    n:length(t),
    XY: matrix(makelist(i,i,0,n), makelist(0,i,1,n+1)),
    XYaction: matrix(makelist(makelist(dl_add(t[k]),k,1,i),i,0,n), makelist([],i,1,n+1)),
    for i:1 thru m do (
        XY[2][1]:i,
        XYaction[2][1]:makelist(dl_delete(s[k]),k,1,i),
        for j:1 thru n do(
            c:if is(s[i]=t[j]) then 0 else 1,
            L:[XY[2][j]+1,     /* Insertion    */
                XY[1][j+1]+1,  /* Deletion     */
                XY[1][j]+c],   /* Substitution */
            /* Add in the swap rule. */
            /* The swapping costs nothing, but the cost comes from the subsequent dl_subs, which we filter out. */
            if is(i<m and j<n) and not(is(s[i]=s[i+1]))
                               and is(s[i]=t[j+1])
                               and is(s[i+1]=t[j]) then L:append(L,[XY[1][j]]),
            lm:apply(min,L),
            li:last(sublist_indices(L, lambda([ex], is(ex=lm)))),
            dl_tags:[append(XYaction[2][j],[dl_add(t[j])]),
                          append(XYaction[1][j+1],[dl_delete(s[i])]),
                          append(XYaction[1][j],[if is(c=0) then dl_ok(s[i]) else dl_subs(s[i],t[j])])],
            if is(i<m and j<n) then dl_tags:append(dl_tags,  [append(XYaction[1][j],[dl_swap(s[i],s[i+1])])]),
            XY[2][j+1]:L[li],
            XYaction[2][j+1]:dl_tags[li]
        ),
        XY:rowswap(XY, 1, 2),
        XYaction:rowswap(XYaction, 1, 2)
      ),
      return([XY[1][n+1],proof_damerau_levenstein_tidy(XYaction[1][n+1])])
);

/* dl_swap is always followed by a dl_subs, which we change. */
proof_damerau_levenstein_tidy(L) := block(
  if emptyp(L) then return(L),
  if op(first(L))=dl_swap then return(append([first(L),dl_swap_follow(second(first(L)))], proof_damerau_levenstein_tidy(rest(rest(L))))),
  return(append([first(L)], proof_damerau_levenstein_tidy(rest(L))))
);

/*
  This function performs assessment of the student's proof.
  sa is the student's proof
  ta is a list of possible proofs, typically tal:proof_alternatives(ta), but this is not enforced for flexibility.
     We assume the same keys are used in both.
  It returns a list.
  The fist item in the list is the "distance" from the student's proof in number of edits, using 
*/
proof_assessment(sa, tal) := block([sal, L, m, l],
  sal:args(proof_flatten(sa)),
  /* Lists are passed by reference, so let's copy for good measure since we flatten. */
  L:map(lambda([ex], args(proof_flatten(ex))), copy(tal)),
  /* Find distance from each proof, and the narrative */
  L:map(lambda([ex], proof_damerau_levenstein(sal, ex)), L),
  m:apply(min, map(first, L)),
  l:first(sublist_indices(L, lambda([ex], is(first(ex)=m)))),
  return(L[l]) 
 );

/* String values of the dl_functions used above. */
dl_empty_disp(ex) := "";
dl_add_disp(ex) := sconcat("<span style='font-size: 1.1em; color:red;'><i class='fa fa-arrow-left'></i></span> ", ex);
dl_ok_disp(ex) := "<span style='font-size: 1.1em; color:green;'><i class='fa fa-check'></i></span>";
dl_delete_disp(ex) := "<span style='font-size: 1.1em; color:red;'><i class='fa fa-arrow-right'></i></span>";
dl_swap_disp([ex]) := "<span style='font-size: 1.1em; color:red;'><i class='fa fa-arrow-down'></i></span>";
dl_swap_follow_disp(ex) := "<span style='font-size: 1.1em; color:red;'><i class='fa fa-arrow-up'></i></span>";
dl_subs_disp([ex]) := sconcat("<span style='font-size: 1.1em; color:red;'><i class='fa fa-arrow-right'></i></span> ",
                            "<span style='font-size: 1.1em; color:red;'><i class='fa fa-arrow-left'></i></span> ", second(ex));

proof_line_disp(ex1, ex2):= sconcat("<div class='proof-line'>",    ex1, ex2, "</div>");
proof_comment_disp(ex):=    sconcat("<div class='proof-comment'>", ex,       "</div>");
proof_column_disp(ex):=     sconcat("<div class='proof-column'>",  ex,       "</div>");
proof_column_disp2(ex):=    sconcat("<div class='proof-column2'>", ex,       "</div>");

dl_disp(ex):=ev(ex, dl_empty=dl_empty_disp, dl_ok=dl_ok_disp, dl_delete=dl_delete_disp, dl_add=dl_add_disp,
                    dl_swap=dl_swap_disp, dl_swap_follow=dl_swap_follow_disp, dl_subs=dl_subs_disp);

proof_assessment_display(saa, pf) := block([st, k],
  /* An empty list is returned when we have a correct proof. */
  if emptyp(saa) then return(""),
  saa:proof_disp_replacesteps(saa, pf),
  /* sal is now a list of strings from the proof. */
  st:[],
  for k:1 thru length(saa) do block([s0,s1],
    s0:saa[k],
    s1:first(s0),
    if is(op(s0)=dl_add) then
        st:append(st, [[dl_empty(null), s0]])
    else
        st:append(st, [[s1, s0]])
  ),
  /* Turn the st list of lists into a string to display. */
    st:dl_disp(st),
  for k:1 thru length(saa) do block(
     st[k]:proof_line_disp(proof_column_disp(first(st[k])), proof_column_disp(second(st[k])))
  ),
  st:apply(sconcat, st),  
  sconcat("<div class='proof'>", st, "</div>")
);

/* ********************************** */
/* Bespoke graph                      */
/* ********************************** */

/*
For example, in this proof

proof_steps: [
    ["H1",     "This step is not needed in the proof."],
    ["S1",     "Assume that \\(3 \\cdot 2^{172} + 1\\) is a perfect square."],
    ["S2", "There is a positive integer \\(k\\) such that \\(3 \\cdot 2^{172} + 1 = k^2\\)."],
    ["S3",   "Since \\(3 \\cdot 2^{172} + 1 > 2^{172} = (2^{86})^2 > 172^2\\), we have \\(k > 172\\)."],
    ["S4",   "We have \\(k^2 = 3 \\cdot 2^{172} + 1 < 3 \\cdot 2^{172} + 173\\)."],
    ["S5",   "Also, \\(3 \\cdot 2^{172} + 173 = (3 \\cdot 2^{172} + 1) + 172 < k^2 + k\\). Further, \\(k^2 + k < (k + 1)^2\\)."],
    ["C6",    "Since \\(k^2 < 3 \\cdot 2^{172} + 173 < (k + 1)^2\\) it is strictly between two successive squares \\(k^2\\) and \\((k + 1)^2\\), it cannot be a perfect square."]
];

we have two possible "interleaved" answers.

sa1:["S1", "S2", "S3", "S4", "S5", "C6"];
sa2:["S1", "S2", "S3", "S5", "S4", "C6"];

These can be defined as a directed acyclic graph.

tdag: [
      ["S1", "S2", "S3", "S5", "C6"],
      ["S1", "S2", "S4", "C6"]
     ];
*/

/*
This function checks if the student's answer (sa, a list)
has the dependencies specified in the teachers graph (tdag).

It returns a list of "problems" in the form of 
 1. Missing steps.
 2. Unnecessary steps.
 3. Order problems.
*/
proof_assessment_dag(sa, tdag) := block([ttags,stags,proof_problems],
    ttags:setify(flatten(tdag)),
    if safe_op(sa)="proof" then sa:args(sa),
    stags:setify(flatten(sa)),
    proof_problems:[],
    /* Each key used in the teacher's proof must occur in the student's list. */
    if not(subsetp(stags, ttags)) then proof_problems:[proof_step_extra(setdifference(stags, ttags))],
    /* Only keys used in the teacher's proof should occur in the student's list. */
    if not(subsetp(ttags, stags)) then proof_problems:append(proof_problems,[proof_step_missing(setdifference(ttags, stags))]),
    /* For each list, we check that the keys occur in the specified order in the student's proof. */
    proof_problems:flatten(append(proof_problems, map(lambda([ex], proof_dag_check_list(sa, ex)), tdag))),
    /* Remove any duplicate problems. */
    listify(setify(proof_problems))
)$

/*
  Takes a list "l1", and makes sure sa respects the order of things in l1.
*/
proof_dag_check_list(sa, l1) := block([li1,li2,m1],
  if is(length(l1) < 2) then return([]),
  m1:[],
  /* By design we only check adjacent elements in the list. */
  li1:sublist_indices(sa, lambda([ex], ex=first(l1))),
  li2:sublist_indices(sa, lambda([ex], ex=second(l1))),
  /* Check if both steps appear. */
  if not(emptyp(li1) or emptyp(li2)) and apply(max, li1) > apply(min,li2) then m1:[proof_step_must(first(l1), second(l1))],
  append(m1, proof_dag_check_list(sa, rest(l1)))
)$