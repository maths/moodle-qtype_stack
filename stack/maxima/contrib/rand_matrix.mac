/*  Author Luke Longworth
    University of Canterbury
    Copyright (C) 2025 Luke Longworth

    This program is free software: you can redistribute it or modify
    it under the terms of the GNU General Public License version two.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for details.

    You should have received a copy of the GNU General Public License
    along with this program. If not, see <http://www.gnu.org/licenses/>. */

/****************************************************************/
/*  Matrix Randomization functions for STACK                    */
/*                                                              */
/*  V1.0 February 2025                                          */
/*                                                              */
/****************************************************************/

/**
 * Generates a random m×n matrix with integer entries on the interval [-k, k].
 * If no third argument is given, k is set to 1.
 * 
 * @param[positive integer] m the number of rows of the matrix.
 * @param[positive integer] n the number of columns of the matrix.
 * @param[positive integer] Optional: k the maximum possible value of any entry. Defaults to 1 if excluded.
 * @return[matrix] The m×n matrix.
 */
rand_matrix(m,n,[k]):= block([],
  if emptyp(k) then k: 1 else k: first(k),
  return(genmatrix(lambda([i, j], rand_with_step(-k,k,1)),m,n))
);

/**
 * Generates a random n×n invertible matrix with integer entries.
 * Achieved by generating two triangular matrices with non-zero diagonals and multiplying them together. 
 * 
 * @param[positive integer] n the number of rows and columns of the matrix.
 * @param[positive integer] Optional: k a sort of scaling factor. Defaults to 1 if excluded. Technically, this is the maximum possible value for an entry in the constituent triangular matrices. 
 * @return[matrix] The invertible matrix
 */
rand_invertible(n,[k]):= block([P1, P2, simp:true],
  if emptyp(k) then k: 1 else k: first(k),
  P1: genmatrix(lambda([i,j],if is(i<j) then 0 else if is(i=j) then rand_with_prohib(-k,k,[0]) else rand_with_step(-k,k,1)),n,n),
  P2: genmatrix(lambda([i,j],if is(i>j) then 0 else if is(i=j) then rand_with_prohib(-k,k,[0]) else rand_with_step(-k,k,1)),n,n),
  return(P1 . P2)
);

/**
 * Generates a random n×n orthogonal matrix.
 * Uses Gram-Schmidt on an invertible matrix.  
 * 
 * @param[positive integer] n the number of rows and columns of the matrix.
 * @param[positive integer] Optional: k a sort of scaling factor that is fed into rand_invertible. Defaults to 1. Values larger than 2 are not recommended. 
 * @return[matrix] The orthogonal matrix
 */
rand_orth(n,[k]):= block([rows, simp:true],
  if emptyp(k) then k: 1 else k: first(k),
  rows: args(rand_invertible(n,k)),
  rows: gramschmidt(rows),
  rows: map(lambda([ex],ex/sqrt(ex.ex)),rows),
  return(transpose(apply(matrix,rows)))
);

/**
 * Generates a random m×n matrix with orthonormal columns.
 * Uses Gram-Schmidt on an invertible m×m matrix and then trims m-n columns
 * 
 * @param[positive integer] m the number of rows of the matrix.
 * @param[positive integer] n the number of columns of the matrix. Must be less than or equal to m. 
 * @param[positive integer] Optional: k a sort of scaling factor that is fed into rand_invertible. Defaults to 1. Values larger than 2 are not recommended. 
 * @return[matrix] The m×n matrix.
 */
rand_orthcols(m,n,[k]):= block([cols, simp:true],
  if is(n>m) then return(matrix([null])),
  if emptyp(k) then k: 1 else k: first(k),
  cols: args(transpose(rand_orth(m,k))),
  cols: firstn(cols,n),
  return(transpose(apply(matrix,cols)))
);

/**
 * Generates a random n×n invertible matrix with integer entries whose inverse also has integer entries.
 * Determinant is ±1.
 * Achieved by generating two triangular matrices with unitary diagonals and multiplying them together.
 * 
 * @param[positive integer] n the number of rows and columns of the matrix.
 * @param[positive integer] Optional: k a sort of scaling factor. Defaults to 1 if excluded. Technically, this is the maximum possible value for an entry in the constituent triangular matrices. 
 * @return[matrix] The invertible matrix
 */
rand_integer_invertible(n,[k]):= block([P1, P2, simp:true],
  if emptyp(k) then k: 1 else k: first(k),
  P1: genmatrix(lambda([i,j],if is(i=j) then rand([-1,1]) else if i<j then 0 else rand_with_step(-k,k,1)),n,n),
  P2: genmatrix(lambda([i,j],if is(i=j) then rand([-1,1]) else if i>j then 0 else rand_with_step(-k,k,1)),n,n),
  return(P1 . P2)
);

/**
 * Generates a random n×n diagonalizable matrix with integer entries.
 * This function is inflexible, as the modal matrix and diagonal matrix use the same optional scaling factor.
 * 
 * @param[positive integer] n the number of rows and columns of the matrix.
 * @param[positive integer] Optional: k a sort of scaling factor. Defaults to 1 if excluded. Technically, this is the maximum possible value for an entry in the constituent triangular matrices. 
 * @return[matrix] The invertible matrix
 */
rand_diagonalizable(n,[k]):= block([P, D, simp:true],
  if emptyp(k) then k: 1 else k: first(k),
  P: rand_integer_invertible(n,1),
  D: genmatrix(lambda([i, j], if is(i=j) then rand_with_step(-k,k,1) else 0),n,n),
  return(P . D . P^^-1)
);

/**
 * Generates a random n×n defective matrix with integer entries.
 * This function is inflexible, as the modal matrix and Jordan canonical matrix use the same optional scaling factor.
 * 
 * @param[positive integer] n the number of rows and columns of the matrix.
 * @param[positive integer] Optional: k a sort of scaling factor. Defaults to 1 if excluded. Technically, this is the maximum possible value for an entry in the constituent triangular matrices. 
 * @return[matrix] The invertible matrix
 */
rand_defective(n,[k]):= block([P, first_bit, main_diag, rest_diag, off_diag, rest_offdiag, J,simp: true],
  if emptyp(k) then k: 1 else k: first(k),
  P: rand_integer_invertible(n,1),
  first_bit: rand_with_step(-k,k,1),
  main_diag: [first_bit,first_bit],
  rest_diag: sort(makelist(rand_with_step(-k,k,1),ii,1,n-2)),
  main_diag: append(main_diag,rest_diag),
  off_diag: [1],
  rest_offdiag: makelist(if is(main_diag[ii]=main_diag[ii+1]) then rand([0,1,1]) else 0,ii,2,n-1),
  off_diag: append(off_diag,rest_offdiag),
  J: genmatrix(lambda([i, j], if is(i=j) then main_diag[i] else if is(j=i+1) then off_diag[i] else 0),n,n),
  return(P . J . P^^-1)
);

/**
 * Generates a random m×n matrix with integer entries on the interval [-k, k] and all off-diagonal entries set to 0.
 * If no third argument is given, k is set to 1.
 * 
 * @param[positive integer] m the number of rows of the matrix.
 * @param[positive integer] n the number of columns of the matrix.
 * @param[positive integer] Optional: k the maximum possible value of any entry. Defaults to 1 if excluded.
 * @return[matrix] The m×n diagonal matrix.
 */
rand_diag(m,n,[k]):= block([],
  if emptyp(k) then k: 1 else k: first(k),
  return(genmatrix(lambda([i, j], if is(i=j) then rand_with_step(-k,k,1) else 0),m,n))
);

/**
 * Generates a random m×n matrix with integer entries on the interval [-k, k] and all below-diagonal entries set to 0.
 * If no third argument is given, k is set to 1.
 * 
 * @param[positive integer] m the number of rows of the matrix.
 * @param[positive integer] n the number of columns of the matrix.
 * @param[positive integer] Optional: k the maximum possible value of any entry. Defaults to 1 if excluded.
 * @return[matrix] The m×n upper triangular matrix.
 */
rand_triu(m,n,[k]):= block([],
  if emptyp(k) then k: 1 else k: first(k),
  return(genmatrix(lambda([i, j], if is(i<=j) then rand_with_step(-k,k,1) else 0),m,n))
);

/**
 * Generates a random m×n matrix with integer entries on the interval [-k, k] and all above-diagonal entries set to 0.
 * If no third argument is given, k is set to 1.
 * 
 * @param[positive integer] m the number of rows of the matrix.
 * @param[positive integer] n the number of columns of the matrix.
 * @param[positive integer] Optional: k the maximum possible value of any entry. Defaults to 1 if excluded.
 * @return[matrix] The m×n lower triangular matrix.
 */
rand_tril(m,n,[k]):= block([],
  if emptyp(k) then k: 1 else k: first(k),
  return(genmatrix(lambda([i, j], if is(i>=j) then rand_with_step(-k,k,1) else 0),m,n))
);

/**
 * Generates a random n×n permutation matrix.
 * 
 * @param[positive integer] n the number of rows and columns of the matrix.
 * @return[matrix] The n×n permutation matrix.
 */
rand_perm_matrix(n):= block([order,simp:true],
  order: random_permutation(makelist(ii,ii,1,n)),
  return(genmatrix(lambda([i, j], if j=order[i] then 1 else 0),n,n))
);

/**
 * Generates a random m×n matrix with entries selected from list L.
 * 
 * @param[positive integer] m the number of rows of the matrix.
 * @param[positive integer] n the number of columns of the matrix.
 * @param[list] L the list of allowed entries in the matrix.
 * @return[matrix] The m×n matrix.
 */
rand_matrix_list(m,n,L):= block([],
  return(genmatrix(lambda([i, j], rand(L)),m,n))
);

/**
 * Generates a random m×n diagonal matrix with diagonal entries selected from list L and all off-diagonal entries set to 0.
 * 
 * @param[positive integer] m the number of rows of the matrix.
 * @param[positive integer] n the number of columns of the matrix.
 * @param[list] L the list of allowed entries in the matrix.
 * @return[matrix] The m×n diagonal matrix.
 */
rand_diag_list(m,n,L):= block([],
  return(genmatrix(lambda([i, j], if is(i=j) then rand(L) else 0),m,n))
);

/**
 * Generates a random m×n upper triangular matrix with entries selected from list L and all below-diagonal entries set to 0.
 * 
 * @param[positive integer] m the number of rows of the matrix.
 * @param[positive integer] n the number of columns of the matrix.
 * @param[list] L the list of allowed entries in the matrix.
 * @return[matrix] The m×n upper triangular matrix.
 */
rand_triu_list(m,n,L):= block([],
  return(genmatrix(lambda([i, j], if is(i<=j) then rand(L) else 0),m,n))
);

/**
 * Generates a random m×n lower triangular matrix with entries selected from list L and all above-diagonal entries set to 0.
 * 
 * @param[positive integer] m the number of rows of the matrix.
 * @param[positive integer] n the number of columns of the matrix.
 * @param[list] L the list of allowed entries in the matrix.
 * @return[matrix] The m×n lower triangular matrix.
 */
rand_tril_list(m,n,L):= block([],
  return(genmatrix(lambda([i, j], if is(i>=j) then rand(L) else 0),m,n))
);

/**
 * Generates a random m×n matrix with entries selected from list L without replacement.
 * If L does not have enough entries, an empty matrix is returned.
 * 
 * @param[positive integer] m the number of rows of the matrix.
 * @param[positive integer] n the number of columns of the matrix.
 * @param[list] L the list of allowed entries in the matrix.
 * @return[matrix] The m×n matrix.
 */
rand_matrix_list_no_replacement(m,n,L):= block([],
  if is(length(L)<m*n) then return(matrix([null])),
  L: random_permutation(L),
  return(genmatrix(lambda([i, j], L[ev(j + (i-1)*n,simp)]),m,n))
);

/**
 * Generates a random m×n diagonal matrix with entries selected from list L without replacement.
 * If L does not have enough entries, an empty matrix is returned.
 * 
 * @param[positive integer] m the number of rows of the matrix.
 * @param[positive integer] n the number of columns of the matrix.
 * @param[list] L the list of allowed entries in the matrix.
 * @return[matrix] The m×n diagonal matrix.
 */
rand_diag_list_no_replacement(m,n,L):= block([],
  if ev(is(length(L)<min(m,n)),simp) then return(matrix([null])),
  L: random_permutation(L),
  return(genmatrix(lambda([i, j], if is(i=j) then L[i] else 0),m,n))
);

/**
 * Generates a random m×n upper triangular matrix with entries selected from list L without replacement.
 * If L does not have enough entries, an empty matrix is returned.
 * 
 * @param[positive integer] m the number of rows of the matrix.
 * @param[positive integer] n the number of columns of the matrix.
 * @param[list] L the list of allowed entries in the matrix.
 * @return[matrix] The m×n upper triangular matrix.
 */
rand_triu_list_no_replacement(m,n,L):= block([k,M],
  L: random_permutation(L),
  k: 0,
  M: errcatch(genmatrix(lambda([i, j], if is(i<=j) then (k: ev(k+1,simp), L[k]) else 0),m,n)),
  if emptyp(M) then return(matrix([null])) else return(first(M))
);

/**
 * Generates a random m×n lower triangular matrix with entries selected from list L without replacement.
 * If L does not have enough entries, an empty matrix is returned.
 * 
 * @param[positive integer] m the number of rows of the matrix.
 * @param[positive integer] n the number of columns of the matrix.
 * @param[list] L the list of allowed entries in the matrix.
 * @return[matrix] The m×n lower triangular matrix.
 */
rand_tril_list_no_replacement(m,n,L):= block([k,M],
  L: random_permutation(L),
  k: 0,
  M: errcatch(genmatrix(lambda([i, j], if is(i>=j) then (k: ev(k+1,simp), L[k]) else 0),m,n)),
  if emptyp(M) then return(matrix([null])) else return(first(M))
);
