/*  Author Chris Sangwin
    University of Birmingham
    Copyright (C) 2013 Chris Sangwin

    This program is free software: you can redistribute it or modify
    it under the terms of the GNU General Public License version two.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for details.

    You should have received a copy of the GNU General Public License
    along with this program. If not, see <http://www.gnu.org/licenses/>. */


/* THIS IS EXPERIMENTAL CODE */
/* Most of the code is now in noun_simp.mac.  This is the remainder. */

/*******************************************/
/* Control functions                       */
/*******************************************/

DIS_TRANS:["disAddMul"]$
POW_TRANS:["powLaw"]$
BUG_RULES:["buggyPow","buggyNegDistAdd"]$

/* Is the rule applicable at the top level? */
trans_topp(ex, rl) := block(
    %_C(sconcat(rl, "p")),
    apply(parse_string(sconcat(rl, "p")), [ex])
)$

/* Is the rule applicable anywhere in the expression? */
trans_anyp(ex, rl) := block(
  if atom(ex) then return(trans_topp(ex, rl)),
  if trans_topp(ex, rl) then return(true),
  apply("or", maplist(lambda([ex2], trans_anyp(ex2, rl)), args(ex)))
)$

/* Identify applicable rules at the top level. */
trans_top(ex) := sublist(ALL_TRANS, lambda([ex2],trans_topp(ex, ex2)))$

/* Identify applicable rules. */
trans_any(ex):=sublist(ALL_TRANS, lambda([ex2],trans_anyp(ex,ex2)))$

/*******************************************/
/* Higher level control functions          */
/*******************************************/
 
/* Very inefficient! */
/* Has the advantage that the whole expression is always visible at the top level */
step_through(ex):=block([_rls],
 _rls:trans_any(ex),
 if emptyp(_rls) then return(ex),
 print(string(ex)),
 print(_rls),
 step_through(transr(ex, first(rls)))
)$

/* This only looks at the top level for rules which apply.  If none, we look deeper. */
/* This is much more efficient */
step_through2(ex):=block([rls, rl, ex2],
 if atom(ex) then return(ex),
 rls:trans_top(ex),
 if emptyp(rls) then return(block([ex2],  ex2:map('step_through2, ex), if ex=ex2 then ex else step_through2(ex2))),
 rl:first(rls),
 %_C(rl),
 ex2:apply(parse_string(rl), [ex]), 
 print([ex,rl,ex2]),
 if ex=ex2 then ex else step_through2(ex2)  
)$

/* Assume some rules are just applied in the background. */
step_through3(ex):=block([rls],
 rls:sublist(ALG_TRANS, lambda([ex2], trans_anyp(ex,ex2))),
 if not(emptyp(rls)) then return(step_through3(transr(ex, first(rls)))),
 rls:trans_any(ex),
 if emptyp(rls) then return(ex),
 print(string(ex)),
 print(rls),
 step_through3(transr(ex, first(rls)))
)$

/* removes elements of l1 from l2. */
removeoncelist(l1,l2):=block(
 if listp(l2)#true or emptyp(l2) then return([]),
 if listp(l1)#true or emptyp(l1) then return(l2),
 if element_listp(first(l1),l2) then return(removeoncelist(rest(l1), removeonce(first(l1), l2))),
 removeoncelist(rest(l1),l2)
)$

/* A special function.
   If a\in l1 is also in l2 then remove a and -a from l2.  
   Used on negDef  */
removeoncelist_negDef(l1,l2):=block(
 if listp(l2)#true or emptyp(l2) then return([]),
 if listp(l1)#true or emptyp(l1) then return(l2),
 if element_listp(first(l1),l2) then return(removeoncelist_negDef(rest(l1),removeonce("-"(first(l1)),removeonce(first(l1),l2)))),
 removeoncelist_negDef(rest(l1),l2)
)$

/*******************************************/
/* Transformation rules  (not used)        */
/*******************************************/

/* -1*x -> -x */
negMinusOnep(ex):=block(
  if safe_op(ex)#"*" then return(false),
  if is(first(args(ex))=negInt(-1)) then return(true) else return(false)
)$

negMinusOne(ex):=block(
  if negMinusOnep(ex)#true then return(ex),
  if length(args(ex))>2 then "-"(apply("*", rest(args(ex)))) else -second(args(ex))
)$

/* a-a -> 0 */
/* This is a complex function.  If "a" and "-a" occur as arguments in the sum
   then we remove the first occurance of each.  Then we add the remaining arguments.
   Hence, this does not flatten arguments or re-order them, but does cope with nary-addition 
*/
negDefp(ex):=block([a0,a1,a2,a3],
  if safe_op(ex)#"+" then return(false),
  a1:maplist('first, sublist(args(ex), lambda([ex2], safe_op(ex2)="-"))),
  a2:sublist(args(ex), lambda([ex2],safe_op(ex2)#"-")),
  any_listp(lambda([ex2], element_listp(ex2,a2)),a1)
)$

negDef(ex):=block([a0,a1,a2,a3],
  if negDefp(ex)#true then return(ex),
  a0:args(ex),
  a1:maplist(first, sublist(args(ex), lambda([ex2],safe_op(ex2)="-"))),
  a2:sublist(args(ex), lambda([ex2], safe_op(ex2)#"-")),
  a3:removeoncelist_negDef(a1, a0),  
  if emptyp(a3) then 0 else apply("+", a3)
)$

/* Distributes "-" over addition */
negDistAddp(ex):=block(
  if safe_op(ex)#"-" then return(false),
  if safe_op(part((ex),1))="+" then true else false 
)$

negDistAdd(ex):=block(
  if negDistAddp(ex) then map("-",part((ex),1)) else ex
)$



/*******************************************/
/* Division rules */

/* a/a -> 1 */
idDivp(ex):= if safe_op(ex)="/" and part(ex,1)=part(ex,2) and part(ex,2)#0 then true else false$
idDiv(ex) := if idDivp(ex) then 1 else ex$

/*******************************************/
/* Distribution  rules                     */

/* Write (a+b)*c as a*c+b*c */
disAddMulp(ex):= if safe_op(ex)="*" then 
   if safe_op(last(ex))="+" then true else false$

disAddMul(ex):= block([S,P],
  S:last(ex),
  P:reverse(rest(reverse(args(ex)))),
  P:if length(P)=1 then first(P) else apply("*", P),
  S:map(lambda([ex], P*ex), S)
)$

/*******************************************/
/* Power rules                             */

/* Write a*a^n as a^(n+m) */
powLawp(ex):= block([B],
   if not(safe_op(ex)="*") then return(false),
   B:sort(maplist(lambda([ex], if safe_op(ex)="^" then first(args(ex)) else ex), args(ex))),
   if emptyp(powLawpduplicates(B)) then return(false) else return(true)
)$

powLawpduplicates(l):=block(
    if length(l)<2 then return([]),
    if first(l)=second(l) then return([first(l)]),
    return(powLawpduplicates(rest(l)))
)$

powLaw(ex):= block([B,l1,l2],
   B:sort(maplist(lambda([ex], if safe_op(ex)="^" then first(args(ex)) else ex), args(ex))),
   B:first(powLawpduplicates(B)),
   l1:sublist(args(ex), lambda([ex], is(ex=B) or (is(safe_op(ex)="^") and is(first(args(ex))=B)))),
   l1:maplist(lambda([ex], if is(ex=B) then 1 else second(args(ex))), l1),
   l2:sublist(args(ex), lambda([ex], not(is(ex=B) or (is(safe_op(ex)="^") and is(first(args(ex))=B))))),
   if l2=[] then return(B^apply("+", l1)),
   if length(l2)=1 then l2:first(l2) else l2:apply("*", l2),
   return(B^apply("+", l1)*l2)
);

