/*  Author Chris Sangwin
    University of Birmingham
    Copyright (C) 2006 Chris Sangwin

    This program is free software: you can redistribute it or modify
    it under the terms of the GNU General Public License version two.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for details.

    You should have received a copy of the GNU General Public License
    along with this program. If not, see <http://www.gnu.org/licenses/>. */


/* Expand tutorial.                                                  */
/* This file should take a product and expand out one level in steps */
/* Chris Sangwin, 6/11/2006                                          */
/* This is experimental code, but may be useful.                     */

COLOR_LIST:["red", "Blue"  , "YellowOrange", "Bittersweet"  , "BlueViolet" , "Aquamarine", "BrickRed" , "Apricot" , "Brown" , "BurntOrange", "CadetBlue" , "CarnationPink" , "Cerulean" , "CornflowerBlue" , "CyanDandelion" , "DarkOrchid" , "Emerald" , "ForestGreen" , "Fuchsia", "Goldenrod" , "Gray" , "Green" , "JungleGreen", "Lavender" , "LimeGreen" , "Magenta" , "Mahogany" , "Maroon" , "Melon", "MidnightBlue" , "Mulberry" , "NavyBlue" , "OliveGreen" , "Orange", "OrangeRed" , "Orchid" , "Peach" , "Periwinkle" , "PineGreen" , "Plum", "ProcessBlue" , "Purple" , "RawSienna" , "Red" , "RedOrange" , "RedViolet" , "Rhodamine" , "RoyalBlue" , "RoyalPurple" , "RubineRed", "Salmon" , "SeaGreen" , "Sepia" , "SkyBlue" , "SpringGreen" , "Tan", "TealBlue" , "Thistle" , "Turquoise" , "Violet" , "VioletRed" ,"WildStrawberry" , "Yellow" , "YellowGreen" , "BlueGreen" ]$
COLOR_LIST_LENGTH:length(COLOR_LIST)$


/* We want a list of the summands, but you cannot apply args to an atom */
make_args_sum(ex) := if atom(ex) then [ex] else 
                         if op(ex)#"+" then [ex] else args(ex)$

/* Adds up the elements of a list */
sum_list(ex) :=     if listp(ex) then 
                        if length(ex)=1 then ex[1] else apply("+", ex)
                    else ex$
/* Multiplies together the elements of a list */
product_list(ex) := if listp(ex) then
                        if length(ex)=1 then ex[1] else apply("*", ex)
                    else ex$

make_product(ex) := product_list(maplist('sum_list, ex))$

/******************************************************************/
/* A "step" is a list representing a row in a three column matrix */
/* eg  [ [], [], [] ]                                             */

/* display a single step, returning a string */
display_step(ex) := block([ret,ex1,ex2,ex3],
 ex1:" ", ex2:" = ", ex3:" ",
 if []#ex[1] then ex1:StackDISP(ex[1][1],""),
 if []=ex[2] then ex2:" " else 
     if ex[2][1]#"=" then ex2:StackDISP(ex[2][1],""),
 if []#ex[3] then ex3:StackDISP(ex[3][1],""),
 apply('concat, [ex1," & ",ex2," & ",ex3," \\\\ "])
)$

/* Takes a list of steps in a problem, and returns a single LaTeX string */
display_steps(ex) := block([ret],
  if atom(ex) then return(StackDISP(ex,"")),
  if listp(ex)#true then return(StackDISP(ex,"")),
  /*  */
  steps:map('display_step, ex),
  ret:append(["\\begin{array}{rcl}"],flatten(steps),[" \\end{array}   "]),
  ret:apply('concat, ret)
 )$


/******************************************************************/

/* Tutorial expand.  This function expands out the expression ex */
/* It returns a list of steps                                    */
tut_expand_one_level(ex) := block([args_ex,args_ex1,cur_step,ret],
  /* Make sure we apply this function to a product */
  if atom(ex) then return([ [[ex],[],[]] ]),
  if op(ex)#"*" then return([ [[ex],[],[]] ]),
  /* Get a list of lists with the arguments of ex */
  args_ex:args(ex),
  args_ex:maplist('make_args_sum, args_ex),
  /* colour the first summands */
  cur_step:cons(zip_with(texcolor,COLOR_LIST,first(args_ex)),rest(args_ex)),
  ret:[ [[ex],["="],[make_product(cur_step)]] ],
  /*  */
  ex1:args_ex[1],
  ex2:args_ex[2],
  ex3:rest(args_ex,2),
  cur_step:maplist(lambda([x],x*sum_list(ex2)),ex1),
  cur_step:cons(zip_with(texcolor,COLOR_LIST,cur_step),ex3),
  ret:cons([[],["="],[make_product(cur_step)]],ret),
  /*  */
  cur_step:maplist(lambda([x],maplist(lambda([y],x*y),ex2)),ex1),
  cur_step:maplist('sum_list, cur_step),
  cur_step:zip_with(texcolor,COLOR_LIST,cur_step),
  cur_step:make_product(cons(cur_step,ex3)),
  ret:cons([[],["="],[cur_step]],ret),
  /* */
  cur_step:maplist(lambda([x],maplist(lambda([y],x*y),ex2)),ex1),
  cur_step:maplist('sum_list, cur_step),
  /* BUG: this should only be "one step" of simplification.  Currently it does everthing */
  cur_step:ev(sum_list(cur_step),simp),
  cur_step:if ex3=[] then cur_step else make_product(cons(cur_step,ex3)),
  ret:cons([[],["="],[cur_step]],ret),
  /* */
  reverse(ret)
)$

/* Tutorial expand.  This function expands out the expression ex */
tut_expand_all_levels(ex) := block([args_ex,first_ex],
  if atom(ex) then return([ [[ex],[],[]] ]),
  if op(ex)#"*" then return([ [[ex],[],[]] ]),
  /* first step */
  args_ex:args(ex),
  first_ex:ev(expand(args_ex[1]*args_ex[2]),simp),
  if length(args_ex)>2 then
   append(tut_expand_one_level(ex), [ [["and"],[],[]] ], tut_expand_all_levels(product_list(cons(first_ex,rest(args_ex,2)))))
  else
   tut_expand_one_level(ex)
)$

tut_expand_full(ex) := block([ret,seps],
  ret:tut_expand_all_levels(ex),
  ret:append(ret,[ [["Hence"],[],[]], [[ex],["="],[ev(expand(ex),simp)]] ]),
  display_steps(ret)
)$

