/*  Author Chris Sangwin
    University of Edinburgh
    Copyright (C) 2021 Chris Sangwin

    This program is free software: you can redistribute it or modify
    it under the terms of the GNU General Public License version two.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for details.

    You should have received a copy of the GNU General Public License
    along with this program. If not, see <http://www.gnu.org/licenses/>. */

/* ********************************** */
/* Noun arithmetic                    */
/* ********************************** */

/*
    These function define arithmetic functions which do
    not perform their actual mathematical functions. That is to say
    noun forms of the standard arithmetic functions. This is to
    give much finer control over the simplification of very elementary
    expressions.

    Chris Sangwin 21 Oct 2005.
    Chris Sangwin 7 Nov 2009, with help from JHD.
    Chris Sangwin April 2021, add finer control.
*/

/*  Create noun forms of the functions of +, -, *, / and ^
    as follows.
    + nounadd
    - nounsub
    * nounmul
    / noundiv
    ^ nounpow
    = nouneq
*/

/*  For each of these we do the following.
    (1) They are defined as infix and nary operators in Maxima
        with the binding precedences of their namesakes.
    (2) The tex() function is modified to display them exactly as
        their namesakes.  This should work with a *mix* of noun and
        active operators.
    (3) verb_arith(expr) which will replace noun versions with their
        active counterparts.
    (4) noun_arith(expr) which will replace arithmetic operators with their
        noun counterparts.
*/

/* (1) */
nary("nouneq", 150);
nary("nounadd", 100);
prefix("nounsub", 100);
nary("nounmul", 120);
infix("noundiv", 122, 123);
infix("nounpow", 140, 139);
prefix("UNARY_RECIP", 100);

/* These are no longer needed.
declare("nounmul", commutative);
declare("nounadd", commutative);
*/

/* (2) */
load("noun_arith.lisp");

/* (3) */
declare("nouneq", commutative);
declare("nouneq", lassociative);
declare("nouneq", rassociative);

verb_arith(ex) := block([a],
    ex:subst("=", "nouneq", ex),
    ex:subst("+", "nounadd", ex),
    ex:subst("*", "nounmul", ex),
    ex:subst("-", "nounsub", ex),
    ex:subst("/", "noundiv", ex),
    ex:subst("^", "nounpow", ex),
    define(UNARY_RECIP a, a^(-1)),
    ex:ev(ex, UNARY_MINUS=-1),
    remfunction("nounadd", "nounmul", "noundiv", "nounpow", "nounsub", "nouneq", "UNARY_RECIP"),
    ex
)$

/* (4) */
noun_arith(ex) := block([a],
    ex:subst("nouneq", "=", ex),
    ex:subst("nounadd", "+", ex),
    ex:subst("nounmul", "*", ex),
    /* Unary minus really communtes with multiplication. */
    ex:subst(lambda([ex], UNARY_MINUS nounmul ex), "-", ex),
    /* Turn 1/x into x^(-1), in a special form */
    ex:subst(lambda([ex1, ex2], ex1 nounmul (UNARY_RECIP ex2)), "/", ex),
    define(UNARY_RECIP a, a nounpow (-1)),
    ex:ev(subst("nounpow", "^", ex)),
    remfunction("UNARY_RECIP"),
    ev(ex)
)$

noun_arith_full(ex) := block([a],
    ex:subst("nouneq", "=", ex),
    ex:subst("nounadd", "+", ex),
    ex:subst("nounmul", "*", ex),
    /* Turn -(7) into integer -7. */
    ex:transr(ex, mminusInt),
    /* Unary minus really communtes with multiplication. */
    ex:subst(lambda([ex], UNARY_MINUS nounmul ex), "-", ex),
    /* Turn 1/x into x^(-1), in a special form */
    ex:subst(lambda([ex1, ex2], ex1 nounmul (UNARY_RECIP ex2)), "/", ex),
    /* Now we have the rules based tests we don't replace UNARY_RECIP. */
    ex:ev(subst("nounpow", "^", ex)),
    /* See docs on exp: Instances of 'exp (<x>)' in input are simplified to '%e^<x>'; 'exp' does not appear in simplified expressions. */
    ex:ev(subst(lambda([ex2],%e nounpow ex2), exp, ex)),
    ev(ex)
)$

/*  Assumes we are working in the context of noun operators. */
gather_reduce(ex) := block(
    ex:subst("=", "nouneq", ex),
    ex:subst("+", "nounadd", ex),
    ex:subst("*", "nounmul", ex),
    ex:subst("-", "nounsub", ex),
    ex:ev(flatten(ex), simp),
    ex:subst("nouneq", "=", ex),
    ex:subst("nounadd", "+", ex),
    ex:subst("nounmul", "*", ex), --
    ex:subst("nounsub", "-", ex),
    ex
)$

/* This function recursively applies flatten, i.e. this implements nary simplification. */
flatten_recurse_nouns(ex) := block(
    if atom(ex) then return(ex),
    if op(ex)="nounadd" or op(ex)="nounmul" then
        return(flatten(apply(op(ex), maplist(flatten_recurse_nouns, args(ex))))),
    if safe_op(ex)="nounset" then
        return((apply(op(ex), maplist(flatten_recurse_nouns, sort(args(ex)))))),
    apply(op(ex), maplist(flatten_recurse_nouns, args(ex)))
)$

/* Rule which takes (a^n)^-1 when n is an integer to a^-n */
flatten_pow_minus_one(ex):= block(
    if not(safe_op(ex)="nounpow") then return(ex),
    if not(second(args(ex))=-1) then return(ex),
    if safe_op(first(args(ex)))="nounpow" and integerp(second(args(first(args(ex))))) then return("nounpow"(first(args(first(args(ex)))),-second(args(first(args(ex)))))),
    ex
)$

/* Recursive rule which takes UNARY_MINUS nounmul n, where n is an integer/float to -n */
unary_minus_remove(ex):= block([exl],
    if atom(ex) then return(ex),
    if not(safe_op(ex)="nounmul") or not(is(first(args(ex))=UNARY_MINUS)) then return(apply(op(ex), maplist(unary_minus_remove, args(ex)))),
    /* The sort moves any numbers to the front of the list of arguments for *. */
    exl:sort(rest(args(ex))),
    if is(length(exl)=1) then return(-first(exl)),
    exl[1]:-first(exl),
    apply("nounmul", exl)
)$

/*
  Prepare an expression for rules based simplifier.
  ex: expression to be prepared.
  opcomset: list of operators (as strings) to be considered commutative.
            e.g. {"nouneq", "nounand", "nounor", "nounset", "nounadd", "nounmul"}
*/
equals_commute_prepare([ex]):=block([ex1n, opcomset],

    /* We need to strip out any internal simplification. */
    ex1n:parse_string(string(first(ex))),

    opcomset:{"nouneq", "nounand", "nounor", "nounset", "nounadd", "nounmul"},
    if length(ex)>1 then opcomset:second(ex),

    ex1n:subst(nounset, set, ex1n),
    ex1n:noun_arith_full(ex1n),
    ex1n:flatten_recurse_nouns(ex1n),
    ex1n:sort_nouns(ex1n, opcomset),
    return(ex1n)
)$

sort_nouns(ex, opcomset) := block([exl],
    if atom(ex) then return(ex),
    exl:maplist(lambda([ex2], sort_nouns(ex2, opcomset)), args(ex)),
    if ev(elementp(safe_op(ex), opcomset),simp) then exl:sort(exl),
    apply(op(ex), exl)
)$

/* Returns true iff ex1 and ex2 are equal up to commutativity and associativity. */
equals_commute_associate(ex1, ex2) := block([oldsimp, ret, ex1n, ex2n],
    oldsimp:simp,
    simp:false,
    ret:false,
    ex1n:equals_commute_prepare(ex1),
    ex2n:equals_commute_prepare(ex2),

    if debug then print([ex1n, ex2n]),

    if is(ex1n=ex2n) then ret:true,
    simp:oldsimp,
    return(ret)
)$

/* An answer test in the context of commutative+associative addition and multiplication. */
ATEqualComAss(sa, sb) :=
    block([Validity, RawMark, FeedBack, AnswerNote, ret, SAA, SBB],
    Validity:true, RawMark:true, FeedBack:"", AnswerNote:"",

    SAA:errcatch(ev(sa, simp, nouns)),
    if (is(SAA=[STACKERROR]) or is(SAA=[])) then
        return([false, false, StackAddNote("", "ATEqualComAss_STACKERROR_SAns"), ""]),
    SBB:errcatch(ev(sb, simp, nouns)),
    if (is(SBB=[STACKERROR]) or is(SBB=[])) then
        return([false,false,StackAddNote("", "ATEqualComAss_STACKERROR_TAns"), ""]),

    /* We need a copy here because lists are passed by reference and the coloring of incorrect entries
       causes problems when the values are used later in a PRT.  This problem did not occur with single call answer tests. */
    SAA:remove_stackeq(copy(sa)),
    SBB:remove_stackeq(copy(sb)),
    /* We need to check things are of the same type */
    ret:ATSameTypefun(SAA, SBB),
    if ret[2]=false then
        (ret[3]:StackAddNote("ATEqualComAss ", StackTrimNote(ret[3])), return([false, ret[2], ret[3], ret[4]]) ),
    ret:block([simp:true, ret], ATAlgEquiv(SAA, SBB)),
    if ret[2]=false then
        (ret[3]:StackAddNote("ATEqualComAss (AlgEquiv-false)", StackTrimNote(ret[3])), return([false, ret[2], ret[3], ""])),
    /* Now actually apply this test */
    if equals_commute_associate(SAA, SBB) then
        (RawMark:true, AnswerNote:"")
    else
        (RawMark:false, AnswerNote:StackAddNote("","ATEqualComAss (AlgEquiv-true)")),
    return([Validity, RawMark, AnswerNote, FeedBack])
)$

/* Legacy support for direct access to this function.  */
alias(ATEqual_com_ass, ATEqualComAss)$

/* An answer test in the context of commutative+associative addition and multiplication, with identities. */
ATEqualComAssRules(sa, sb, so) :=
    block([Validity, RawMark, FeedBack, AnswerNote, ret, SAA, SBB, SOO, debugtest],
    oldsimp:simp,
    simp:false,
    Validity:true, RawMark:true, FeedBack:"", AnswerNote:"",

    SAA:errcatch(ev(sa, simp, nouns)),
    if (is(SAA=[STACKERROR]) or is(SAA=[])) then
        return([false, false, StackAddNote("", "ATEqualComAssRules_STACKERROR_SAns"), ""]),
    SBB:errcatch(ev(sb, simp, nouns)),
    if (is(SBB=[STACKERROR]) or is(SBB=[])) then
        return([false,false,StackAddNote("", "ATEqualComAssRules_STACKERROR_TAns"), ""]),
    SOO:errcatch(ev(so, simp, nouns)),
    if (is(SOO=[STACKERROR]) or is(SOO=[])) then
        return([false,false,StackAddNote("", "ATEqualComAssRules_STACKERROR_Opt"), ""]),
    so:first(SOO),
    if (not(listp(so)) or emptyp(so)) then
        return([false,false,StackAddNote("", "ATEqualComAssRules_Opt_List"), StackAddFeedback("", "ATEqualComAssRules_Opt_List")]),

    /* Make sure commutativity and associativity are always in, and tidy up the options. */
    so:ev(unique(flatten(append(so, ALG_TRANS))), simp),
    if ev(elementp(testdebug, setify(so)), simp) then block(
        debugtest:true,
        so:delete(testdebug, so)
    ) else debugtest:false,
    /* Support non-commutative * and +. */
    if ev(elementp(noncomAdd, setify(so)), simp) then block(
        so:delete(comAdd, so),
        so:delete(noncomAdd, so)
    ),
    if ev(elementp(noncomMul, setify(so)), simp) then block(
        so:delete(comMul, so),
        so:delete(noncomMul, so)
    ),

    if not(all_listp(lambda([ex], ev(elementp(ex, setify(ALL_TRANS)), simp) ), so)) then
        return([false,false,StackAddNote("", "ATEqualComAssRules_Opt_Wrong"), StackAddFeedback("", "ATEqualComAssRules_Opt_List")]),

    if any_listp(lambda([ex], ev(subsetp(ex, setify(so)), simp) ), INCOMPATIBLE_TRANS) then
        return([false,false,StackAddNote("", "ATEqualComAssRules_Opt_Incompatible"), StackAddFeedback("", "ATEqualComAssRules_Opt_Incompatible")]),

    SAA:remove_stackeq(copy(sa)),
    SBB:remove_stackeq(copy(sb)),

    /* We need to check things are of the same type */
    ret:ATSameTypefun(SAA, SBB),
    if ret[2]=false then
        (ret[3]:StackAddNote("ATEqualComAssRules ", StackTrimNote(ret[3])), return([false, ret[2], ret[3], ret[4]]) ),
    ret:block([simp:true, ret], ATAlgEquiv(SAA, SBB)),
    /* If they are not algebraically equivalent then we bail. */
    if ret[2]=false then
        (ret[3]:StackAddNote("ATEqualComAssRules (AlgEquiv-false)", StackTrimNote(ret[3])), return([false, ret[2], ret[3], ""])),

    /* Put the expressions in basic form (non-com version). */
    SAA:equals_commute_prepare(SAA, {"nouneq", "nounand", "nounor", "nounset"}),
    SBB:equals_commute_prepare(SBB, {"nouneq", "nounand", "nounor", "nounset"}),

    if debug then print(["Transforming", SAA]),
    SAA:transl(SAA, so),
    if debug then print(["Transforming", SBB]),
    SBB:transl(SBB, so),

    AnswerNote:"",
    if debugtest then AnswerNote:StackAddNote("ATEqualComAssRules: ", string([SAA, SBB])),
    /* Now actually apply this test */
    if is(SAA = SBB) then
        RawMark:true
    else
        RawMark:false,
    return([Validity, RawMark, AnswerNote, FeedBack])
)$

/* List of all available rules. */
ALG_TRANS:[assAdd, assMul, comAdd, comMul]$
ID_TRANS:[zeroAdd, zeroMul, oneMul, onePow, idPow, zeroPow, zPow, oneDiv]$
NEG_TRANS:[negNeg, negDiv, negOrd]$
INT_ARITH:[intAdd, intMul, intPow]$
DIV_TRANS:[recipMul, divDiv, divCancel]$

ALL_TRANS:append(ALG_TRANS, ID_TRANS, NEG_TRANS, DIV_TRANS, INT_ARITH, [intFac, negDist, sqrtRem, noncomAdd, noncomMul])$

/* Set up a hash table of functions and their corresponding predicate. */
ALL_TRANSP[assAdd] : assAddp$
ALL_TRANSP[assMul] : assMulp$
ALL_TRANSP[comAdd] : comAddp$
ALL_TRANSP[comMul] : comMulp$

ALL_TRANSP[zeroAdd] : zeroAddp$
ALL_TRANSP[zeroMul] : zeroMulp$
ALL_TRANSP[oneMul] : oneMulp$
ALL_TRANSP[onePow] : onePowp$
ALL_TRANSP[idPow] : idPowp$
ALL_TRANSP[zeroPow] : zeroPowp$
ALL_TRANSP[zPow] : zPowp$
ALL_TRANSP[oneDiv] : oneDivp$

ALL_TRANSP[recipMul] : recipMulp$
ALL_TRANSP[divDiv] : divDivp$
ALL_TRANSP[divCancel] : divCancelp$
ALL_TRANSP[negDist] : negDistp$

ALL_TRANSP[negNeg] : negNegp$
ALL_TRANSP[negDiv] : negDivp$
ALL_TRANSP[negOrd] : negOrdp$

ALL_TRANSP[intAdd] : intAddp$
ALL_TRANSP[intMul] : intMulp$
ALL_TRANSP[intPow] : intPowp$
ALL_TRANSP[intFac] : intFacp$

ALL_TRANSP[sqrtRem] : sqrtRemp$

/* These rules are not included in ALL_TRANS. */
ALL_TRANSP[mminusInt] : mminusIntp$

/* Sets of incompatible rules. */
INCOMPATIBLE_TRANS : [{intFac, intMul}, {negOrd, negDist}]$

/*******************************************/
/* Top level transformations using rules   */
/*******************************************/

/* Is the rule applicable at the top level? */
trans_topp(ex, rl) := ALL_TRANSP[rl](ex)$

/* Transform recursively across an expression. */
transr(ex, rl) := block(
    if listp(rl) then error("transr: only apply one rule using transr."),
    if trans_topp(ex, rl) then block([ex2], 
        ex2:apply(rl, [ex]),
        if debug then print(["transr: ", rl, ex, ex2]),
        /* If applying the rule changes the expression then do so. */
        if ex=ex2 then return(ex) else return(transr(ex2, rl)))
    else return(if mapatom(ex) then ex else map(lambda([ex2], transr(ex2, rl)), ex))
)$

/* Apply a list of rules recursively, in order, until the expression stops changing. */
transl(ex,rll) := block([ex2],
    if not(listp(rll)) or emptyp(rll) then return(ex),
    ex2:transl(transr(ex, first(rll)), rest(rll)),
    if ex=ex2 then return(ex),
    return(transl(ex2,rll))
)$

/* This is a special rule used to make sure the single integer (-7) becomes UNARY_MINUS*7.
   The parser takes -7 as ((MMINUS) 7), but when simplified this becomes the integer -7.
   We essentially "unsimplify" here to disambiguate.
   This rule is not included in the main transformation rule base.        */
mminusIntp(ex):= if integerp(ex) and ex<0 then true else false$
mminusInt(ex) := if mminusIntp(ex) then (UNARY_MINUS nounmul ev(-1*ex, simp)) else ex$

/*******************************************/
/* Transformation rules.                   */
/*******************************************/

/* 0+x -> x.  Assumes commutativity. */
zeroAddp(ex):= if (safe_op(ex)="+" or safe_op(ex)="nounadd") and length(sublist(args(ex), lambda([ex2], ex2=0)))>0 then true else false$
zeroAdd(ex) := block([ex2],
    if not(zeroAddp(ex)) then return(ex),
    ex2:sublist(args(ex), lambda([ex2], not(is(ex2=0)))),
    if equal(length(ex2),1) then return(first(ex2)),
    return(apply(op(ex), ex2))
)$

/* zeroMul transform 0*x to 0. Assumes commutativity. */ 
zeroMulp(ex):= if (safe_op(ex)="*" or safe_op(ex)="nounmul") and length(sublist(args(ex), lambda([ex2], ex2=0)))>0 then true else false$
zeroMul(ex) := block(
    if zeroMulp(ex) then return(0) else return (ex)
)$

/* oneMul transform 1*x to x. Assumes commutaivity. */ 
oneMulp(ex):= if (safe_op(ex)="*" or safe_op(ex)="nounmul") and length(sublist(args(ex), lambda([ex2], ex2=1)))>0 then true else false$
oneMul(ex) := block([ex2],
    if not(oneMulp(ex)) then return(ex),
    ex2:sublist(args(ex), lambda([ex2], not(is(ex2=1)))),
    if equal(length(ex2),1) then return(first(ex2)),
    return(apply(op(ex), ex2))
)$

/* 1^x -> 1 */
onePowp(ex):= if (safe_op(ex)="^" or safe_op(ex)="nounpow") and is(part(ex, 1)=1) then true else false$
onePow(ex) := if onePowp(ex) then 1 else ex$

/* x^1 -> x */
idPowp(ex):= if (safe_op(ex)="^" or safe_op(ex)="nounpow") and is(part(ex, 2)=1) then true else false$
idPow(ex) := if idPowp(ex) then part(ex,1) else ex$

/* 0^x -> 0*/
zeroPowp(ex):= block(
    if not(safe_op(ex)="^" or safe_op(ex)="nounpow") or is(part(ex, 2)=0) then return(false),
    if is(part(ex,1)=0) then true else false
)$
zeroPow(ex) := if zeroPowp(ex) then 0 else ex$

/* x^0 -> 1*/
zPowp(ex):= block(
    if not(safe_op(ex)="^" or safe_op(ex)="nounpow") or is(part(ex, 1)=0) then return(false),
    if is(part(ex, 2)=0) then true else false
)$
zPow(ex) := if zPowp(ex) then 1 else ex$

/* UNARY_RECIP(1) -> 1 (intended to be used with other rules). */
oneDivp(ex):= if safe_op(ex)="UNARY_RECIP" and part(ex, 1)=1 then true else false$
oneDiv(ex) := if oneDivp(ex) then 1 else ex$

/*****************************************/

/* These functions "flatten" sums or products by removing uncessary parentheses
   i.e. it enforces associativity. */
/* Note that the predicates only return true if the rule changes the expression */
assAddp(ex):= if (safe_op(ex)="+" or safe_op(ex)="nounadd") and flatten(ex)#ex then true else false$
assAdd(ex) := if assAddp(ex) then flatten(ex) else ex$

assMulp(ex):= if (safe_op(ex)="*" or safe_op(ex)="nounmul") and flatten(ex)#ex then true else false$
assMul(ex) := if assMulp(ex) then flatten(ex) else ex$

/* Define a predicate to sort elements, UNARY_MINUS at the front, UNARY_RECIP at the end. */
orderelementaryp(exa,exb) := block(
    if exa=UNARY_MINUS then return(true),
    if exb=UNARY_MINUS then return(false),
    if safe_op(exa)="UNARY_RECIP" and safe_op(exb)="UNARY_RECIP" then return(orderlessp(part(exa, 1), part(exb, 1))),
    if safe_op(exa)="UNARY_RECIP" then return(false),
    return(orderlessp(exa,exb))
)$

/* sort(args(ex), orderelementaryp) does not work :-(  */
elsort(l) := block([l1, l2, la],
    la:sublist(l, lambda([ex], atom(ex))),
    l1:sublist(l, lambda([ex], not(atom(ex)) and safe_op(ex)#"UNARY_RECIP")),
    l2:sublist(l, lambda([ex], not(atom(ex)) and safe_op(ex)="UNARY_RECIP")),
    append(sort(la, orderelementaryp), sort(l1, orderelementaryp), sort(l2, orderelementaryp))  
)$

/* Sort out the order of elements, i.e. commutativity. */
/* NOTE: sort(args(ex), orderelementaryp)) should work but does not... */
comAddp(ex):= if (safe_op(ex)="+" or safe_op(ex)="nounadd") and apply(op(ex), elsort(args(ex)))#ex then true else false$
comAdd(ex) := if comAddp(ex) then apply(op(ex),elsort(args(ex))) else ex$

comMulp(ex):= if (safe_op(ex)="*" or safe_op(ex)="nounmul") and apply(op(ex), elsort(args(ex)))#ex then true else false$
comMul(ex) := if comMulp(ex) then apply(op(ex),elsort(args(ex))) else ex$


/* Consolidate products of division: a*UNARY_RECIP(b)*UNARY_RECIP(c) -> a*UNARY_RECIP(b*c) */
recipMulp(ex) := block([ex2],
    if not(safe_op(ex)="*" or safe_op(ex)="nounmul") then return(false),
    if length(args(ex))=1 then return(false),
    ex2:reverse(args(ex)),
    if safe_op(first(ex2))="UNARY_RECIP" and safe_op(second(ex2))="UNARY_RECIP" then true else false
)$
recipMul(ex) := block([ex2],
    if not(recipMulp(ex)) then return(ex),
    ex2:reverse(args(ex)),
    apply(op(ex),append(reverse(rest(rest(ex2))),[UNARY_RECIP(apply(op(ex),[part(second(ex2),1),part(first(ex2),1)]))]))
)$

/*******************************************/
/* Double negation -(-(a)). (Assumes unary minus has been replaced by products of UNARY_MINUS */ 
negNegp(ex):= block(
    if not(safe_op(ex)="*" or safe_op(ex)="nounmul") then return(false),
    if length(sublist(args(ex), lambda([ex2], is(ex2=UNARY_MINUS))))>1 then return(true) else return(false)
)$
negNeg(ex) := block([ex0,ex1,ex2],
    if not(negNegp(ex)) then return(ex),
    ex1:sublist(args(ex), lambda([ex0], is(ex0=UNARY_MINUS))),
    ex2:sublist(args(ex), lambda([ex0], not(is(ex0=UNARY_MINUS)))),
    if is(oddp(length(ex1))) then ex2:append([UNARY_MINUS], ex2),
    if length(ex2)>1 then apply(op(ex), ex2) else first(ex2) 
)$

/* Double negation UNARY_RECIP(UNARY_MINUS*x)->UNARY_MINUS*UNARY_RECIP(x).
   (Assumes unary minus has been replaced by products of UNARY_MINUS etc.)  */ 
negDivp(ex):= block(
    if not(safe_op(ex)="UNARY_RECIP") then return(false),
    /* Edge case we have only 1/- left. */
    if part(ex, 1)=UNARY_MINUS then return(true),
    if not(safe_op(part(ex, 1))="*" or safe_op(part(ex, 1))="nounmul") then return(false),
    if is(length(sublist(args(part(ex, 1)), lambda([ex2], is(ex2=UNARY_MINUS))))>0) then return(true) else return(false)
)$
negDiv(ex) := block([ex0, ex1, ex2],
    if not(negDivp(ex)) then return(ex),
    if part(ex, 1)=UNARY_MINUS then return(UNARY_MINUS),
    ex1:sublist(args(part(ex, 1)), lambda([ex0], is(ex0=UNARY_MINUS))),
    /* This should not happen, but! */
    if emptyp(ex1) then return(ex),
    ex2:sublist(args(part(ex, 1)), lambda([ex0], not(is(ex0=UNARY_MINUS)))),
    if length(ex1)>1 then ex1:apply(op(part(ex, 1)), ex1) else ex1:UNARY_MINUS,
    if length(ex2)>1 then ex2:apply(op(part(ex, 1)), ex2) else ex2:first(ex2),
    return (ex1 nounmul UNARY_RECIP(ex2))
)$

negOrdp(ex) := block([ex2,ex3],
    if not(safe_op(ex)="+" or safe_op(ex)="nounadd") then return(false),
    /* Order the terms in the sum, strip off any UNARY_MINUS, and compare the leading term. */
    ex2:elsort(args(ex)),
    ex3:map(lambda([ex0], if not(safe_op(ex0)="*" or safe_op(ex0)="nounmul") then ex0 
            else block([a1], a1:sublist(args(ex0), lambda([ex1], not(ex1=UNARY_MINUS))), if length(a1)=1 then first(a1) else apply(op(ex0), a1) )), ex2),
    ex3:elsort(ex3),
    not(is(first(ex2)=first(ex3)))
)$
negOrd(ex) := block([ex0],
    if not(negOrdp(ex)) then return(ex),
    /* We use commutativity of multiplication to pull UNARY_MINUS to the front. */
    ex0:map(comMul, args(ex)),
    ex0:map(lambda([ex1], if (atom(ex1) or not(safe_op(ex1)="*" or safe_op(ex1)="nounmul")) then (UNARY_MINUS nounmul ex1) 
            else if not(first(args(ex1))=UNARY_MINUS) then (UNARY_MINUS nounmul ex1) 
            else if length(rest(args(ex1)))=1 then first(rest(args(ex1))) else apply(op(ex1), rest(args(ex1)))), ex0),
    return(UNARY_MINUS nounmul (apply(op(ex), ex0)))
)$

/* Distribute negation over addition. (Assumes unary minus has been replaced by products of UNARY_MINUS */ 
negDistp(ex):= block(
    if not(safe_op(ex)="*" or safe_op(ex)="nounmul") then return(false),
    if length(sublist(args(ex), lambda([ex2], is(ex2=UNARY_MINUS))))=0 then return(false),
    if length(sublist(args(ex), lambda([ex2], is(safe_op(ex2)="+" or safe_op(ex2)="nounadd"))))=0 then return(false),
    return(true)
)$
negDist(ex) := block([ex0,ex1,ex2,ex3],
    if not(negDistp(ex)) then return(ex),
    ex1:sublist(args(ex), lambda([ex0], is(ex0=UNARY_MINUS))),
    ex2:sublist(args(ex), lambda([ex0], is(safe_op(ex0)="+" or safe_op(ex0)="nounadd"))),
    ex3:sublist(args(ex), lambda([ex0], not(is(ex0=UNARY_MINUS)) and not(is(safe_op(ex0)="+" or safe_op(ex0)="nounadd")))),
    ex0:apply(op(first(ex2)),map(lambda([ex4],apply(op(ex),[UNARY_MINUS,ex4])),args(first(ex2)))),
    apply(op(ex),append(rest(ex1),rest(ex2),[ex0],ex3))
)$

/* a/(b/c)-> a*(c/b) */
/* Helper which establishes an expression is "UNARY_RECIP" or a product which contains at least one "UNARY_RECIP" */
divDivProdp(ex):= block(
    if safe_op(ex)="UNARY_RECIP" then return(true),
    if not(safe_op(ex)="*" or safe_op(ex)="nounmul") then return(false),
    return(any_listp(lambda([ex2], is(safe_op(ex2)="UNARY_RECIP")), args(ex)))
)$
divDivp(ex):= block([ex2],
    if safe_op(ex)="UNARY_RECIP" then return(divDivProdp(part(ex,1))),
    if not(safe_op(ex)="*" or safe_op(ex)="nunmul") then return(false),
    ex2:sublist(args(ex),lambda([ex3], safe_op(ex3)="UNARY_RECIP")),
    if emptyp(ex2) then return(false),
    ex2:map(first,ex2),
    return(any_listp(divDivProdp, ex2))
)$

/* Helper function. 
  TP is the top product: things which don't get changed (retain original operator).
  TR is the argument of the first occurance of UNARY_RECIP.
  Returns [TP,TR]: things which don't change and thing which do.
  This is complex because we have uncertain numbersof arguments in an nary nounmul, and might be left with none!
*/
divDivProd(ex):= block([TP,TR],
    TP:[],
    if safe_op(ex)="UNARY_RECIP" then return([TP,part(ex,1)]),
    if not(safe_op(ex)="*" or safe_op(ex)="nounmul") then return([ex],[]),
    TR:first(sublist(args(ex),lambda([ex3], safe_op(ex3)="UNARY_RECIP"))),
    if emptyp(TR) then return(ex,[]),
    TP:removeonce(TR, args(ex)),
    if length(TP)=1 then TP:first(TP)  else TP:apply(op(ex), TP) ,
    return([TP,part(TR,1)])  
)$
divDiv(ex) := block([ex2,ex3,exo,exl],
     if not(divDivp(ex)) then return(ex),
     /* Store the operator for later. */
     exo:"nounmul",
     if safe_op(ex)="*" then exo:"*",
     /* Split expression into bits. */
     ex2:divDivProd(ex),
     /* This should not really occur because of the predicate divDivP.... */
     if emptyp(second(ex2)) then return(ex),
     ex3:divDivProd(second(ex2)),
     /* Reassemble, emoving any empty lists (which are nulls here). */
     exl:sublist([first(ex2),second(ex3),if not(emptyp(first(ex3))) then UNARY_RECIP(first(ex3)) else []], lambda([ex4], not(emptyp(ex4)))),
     if length(exl)=1 then first(exl) else flatten(apply(exo,exl))
)$

/* We have a product containing a division. */
/* This rule implicitly assumes recipMul, i.e. it takes everything in the product. */
/* This rule will also cancel NEG tokens as needed.                                */
divCancelp(ex) := if (safe_op(ex)="*" or safe_op(ex)="nounmul") and length(sublist(args(ex), lambda([ex2], safe_op(ex2)="UNARY_RECIP")))>0 then true else false$

divCancel(ex) := block([ex1, ex2, ex3],
  if not(divCancelp(ex)) then return(ex),
  ex1:sublist(args(ex), lambda([l1], not(safe_op(l1)="UNARY_RECIP"))),
  ex2:flatten(map(args, sublist(args(ex), lambda([l1], safe_op(l1)="UNARY_RECIP")))),
  ex2:flatten(map(lambda([ex3],  if (safe_op(ex3)="*" or safe_op(ex3)="nounmul") then args(ex3) else ex3), ex2)),
  /* At this point ex1 is a list of factors in the numerator, and ex2 is a list of factors in the denominator. */
  ex3:list_cancel([ex1,ex2]),
  ex1:first(ex3),
  ex2:second(ex3),
  if emptyp(ex1) and emptyp(ex2) then return(1),
  if length(ex2)=1 then ex1:append(ex1,[UNARY_RECIP(first(ex2))]),
  if length(ex2)>1 then ex1:append(ex1,[UNARY_RECIP(apply("nounmul", ex2))]),
  if length(ex1)=1 then return(first(ex1)),
  return(apply("nounmul", ex1))
)$ 

/**********************************************************/
/* Dealing with powers.                                   */

/* Remove the square root function. */
sqrtRemp(ex):= is(safe_op(ex)="sqrt")$
sqrtRem(ex):=first(ex) nounpow (1 nounmul UNARY_RECIP(2))$


/**********************************************************/
/* We either have an integer, UNARY_MINUS 
                     or "UNARY_MINUS * integer".          */
noun_simp_integerp(ex) := if atom(ex) then (is(ex=UNARY_MINUS) or integerp(ex)) else
                      if (safe_op(ex)="*" or safe_op(ex)="nounmul") and length(args(ex))=2 and part(ex, 1)=UNARY_MINUS and atom(part(ex, 2)) and integerp(part(ex, 2)) then true else false$
notnoun_simp_integerp(ex):=not(noun_simp_integerp(ex))$

/* Evaluate integer arithmetic. */
intAddp(ex):= block(
    if not(safe_op(ex)="+" or safe_op(ex)="nounadd") then return(false),
    if length(sublist(args(ex), noun_simp_integerp))>1 then return(true) else return(false)
)$
intAdd(ex) := block([a1, a2], 
    if intAddp(ex)=false then return(ex),
    a1:sublist(args(ex), noun_simp_integerp),
    a1:map(verb_arith, a1),
    a1:mminusInt(ev(apply("+", a1), simp)),
    a2:sublist(args(ex), notnoun_simp_integerp),
    if length(a2)=0 then a1
    else apply(op(ex),append([a1], a2))
)$

intMulp(ex):= block([sl],
    if not(safe_op(ex)="*" or safe_op(ex)="nounmul") then return(false),
    sl:sublist(args(ex), noun_simp_integerp),
    if emptyp(sl) then return(false),
    if length(sl)=1 then return(not(is(first(args(ex))=first(sl)))),
    if length(sl)=2 then return(not((is(first(sl)=UNARY_MINUS) and integerp(second(sl))))),
    return(true)
)$
intMul(ex) := block([a1, a2], 
    if intMulp(ex)=false then return(ex),
    a1:sublist(args(ex), noun_simp_integerp),
    a1:map(verb_arith, a1),
    a1:mminusInt(ev(apply("*", a1), simp)),
    a2:sublist(args(ex), notnoun_simp_integerp),
    if length(a2)=0 then a1 
    else apply(op(ex), append([a1], a2))
)$

intPowp(ex):= block(
    if not(safe_op(ex)="^" or safe_op(ex)="nounpow") then return(false),
    if integerp(part((ex),1)) and part((ex),1)#0 and integerp(part((ex),2)) and part((ex),2)#0 then return(true) else return(false)
)$
intPow(ex) := block([a1, a2], 
    if intPowp(ex)=false then return(ex),
    ev(ex, simp)
)$

intFacp(ex):= integerp(ex)$
intFac(ex) := block([a1], 
    if intFacp(ex)=false then return(ex),
    noun_arith(factor(ex))
)$
