/*  Author Chris Sangwin
    University of Edinburgh
    Copyright (C) 2025 Chris Sangwin

    This program is free software: you can redistribute it or modify
    it under the terms of the GNU General Public License version two.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for details.

    You should have received a copy of the GNU General Public License
    along with this program. If not, see <http://www.gnu.org/licenses/>. */

/* *************************************************************** */
/* Function associate with repeat blocks                           */
/* These need to be in the STACK core, e.g. error trapping etc     */
/* *************************************************************** */

/* 
  This function encodes data needed for constructing the teacher's answer in the repeat input type.
*/
repeat_encode_helper(sm, sl) := block([ex],
        if emptyp(sl) then return(sm),
        ex:first(sl),
        if not(stringp(first(ex))) then error("repeat_encode:  the first element of your input list must be a string, giving the name of one input."),
        if not(listp(second(ex))) then error("repeat_encode:  the second element of your linput list must be a list of expressions, giving the values of the repeated inputs."),
        repeat_encode_helper(stackmap_set(sm, first(ex), second(ex)), rest(sl))
)$
repeat_encode(ex) := block([sm],
        sm:repeat_encode_helper(null, ex),
        sm:stackmap_set(null, "data", sm),
        stackjson_stringify(sm)
)$