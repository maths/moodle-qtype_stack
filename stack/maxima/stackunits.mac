/*  Author Matti Harjula
    Aalto University
    Copyright (C) 2015 Matti Harjula

    This program is free software: you can redistribute it or modify
    it under the terms of the GNU General Public License version two.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for details.

    You should have received a copy of the GNU General Public License
    along with this program. If not, see <http://www.gnu.org/licenses/>. */


/****************************************************************/
/*  Simplified tools for handling SI-units (+liters)            */
/*                                                              */
/*  Matti Harjula <matti.harjula@aalto.fi>                      */
/*                                                              */
/*  Answer test added by                                        */
/*  Chris Sangwin <C.J.Sangwin@ed.ac.uk>                        */
/*                                                              */
/*  V0.4 December 2015                                          */
/****************************************************************/

/* This code is commented out as these lists are now defined in the main code and
   copied over to maximalocal.mac by the install scripts.  This ensures exactly the
   same collections of units are available in PHP and this Maxima code.
   
   stack_unit_si_prefix_code:[y,z,a,f,p,n,u,m,c,d,da,h,k,M,G,T,P,E,Z,Y]$
   stack_unit_si_prefix_multiplier:[10^-24,10^-21,10^-18,10^-15,10^-12,10^-9,10^-6,10^-3,10^-2,10^-1,10,10^2,10^3,10^6,10^9,10^12,10^15,10^18,10^21,10^24]$
   stack_unit_si_prefix_tex:["y","z","a","f","p","n","\\mu ","m","c","d","da","h","k","M","G","T","P","E","Z","Y"]$
   stack_unit_si_unit_code:[m,g,s,A,ohm,K,mol,cd,Hz,N,Pa,J,W,C,V,F,S,Wb,T,H,l,Bq,Gy,Sv,lm,lx]$
   stack_unit_si_unit_conversions:[m,kg/1000,s,A,kg*m^2/(s^3*A^2),K,mol,cd,1/s,kg*m/(s^2),kg/(m*s^2),kg*m^2/(s^2),kg*m^2/(s^3),s*A,kg*m^2/(s^3*A),A^2*s^4/(kg*m^2),s^3*A^2/(kg*m^2),kg*m^2/(s^2*A),kg/(s^2*A),kg*m^2/(s^2*A^2),m^3/1000,1/s,m^2/s^2,m^2/s^2,cd,cd/m^2]$
   stack_unit_si_unit_tex:["m","g","s","A","\Omega","K","mol","cd","Hz","N","Pa","J","W","C","V","F","S","Wb","T","H","l","Bq","Gy","Sv","lm","lx"]$
*/

unitsp(ex) := featurep(ex, units)$

/* List all variables *not* considered to be not units.  */
listofnonunits(ex) := block(
    if not(member(units, features)) then
        stack_unit_si_declare(true),
    sublist(listofvars(ex), lambda([ex2], not(unitsp(ex2))))
)$

/* List all variables considered to be units.  */
listofunits(ex) := block(
    if not(member(units, features)) then
        stack_unit_si_declare(true),
    sublist(listofvars(ex), unitsp)
)$

/* Set \texput rules for SI units. The mode parameter does nothing, */
/* except skips the syntax validation error... */
/* We don't apply('declare, [stack_unit_si_unit_code[ui], constant]) as this breaks stack_units_split(ex). */
stack_unit_si_declare(mode) := block([pfi, ui, simp],
    /* Use Maxima's feature system to declare a range of units.  */
    /* Whether units is a feature can be used to check if this function has been called. */
    /* Check with member(units, features); */
    declare(units, feature),
    simp:true,
    for ui:1 thru length(stack_unit_si_unit_code) do (
        for pfi:1 thru length(stack_unit_si_prefix_code) do (
            apply('texput, [concat(stack_unit_si_prefix_code[pfi],stack_unit_si_unit_code[ui]), sconcat(stack_unit_si_prefix_tex[pfi], stack_unit_si_unit_tex[ui])]),
            apply('declare, [concat(stack_unit_si_prefix_code[pfi],stack_unit_si_unit_code[ui]), units])
        ),
        apply('texput, [stack_unit_si_unit_code[ui], stack_unit_si_unit_tex[ui]]),
        apply('declare, [stack_unit_si_unit_code[ui], units])
    ),
    for ui:1 thru length(stack_unit_other_unit_code) do (
        apply('texput, [stack_unit_other_unit_code[ui], stack_unit_other_unit_tex[ui]]),
        apply('declare, [stack_unit_other_unit_code[ui], units])
    )
)$

/* Converts the whole expression to SI-base units. */
stack_unit_si_to_si_base(expression) := block([ui, pfi, work, simp],
    simp:true, 
    work:expression,
    for ui:1 thru length(stack_unit_other_unit_code) do (
        work:subst(stack_unit_other_unit_conversions[ui], stack_unit_other_unit_code[ui], work)
    ),
    for ui:1 thru length(stack_unit_si_unit_code) do (
        for pfi:1 thru length(stack_unit_si_prefix_code) do (
            work:subst(stack_unit_si_prefix_multiplier[pfi]*stack_unit_si_unit_code[ui], concat(stack_unit_si_prefix_code[pfi], stack_unit_si_unit_code[ui]), work)
        ),
        work:subst(stack_unit_si_unit_conversions[ui], stack_unit_si_unit_code[ui], work)
    ),
    return(work)
)$

/* Splits off the units from the end of a product. */
stack_units_split(ex) := block([oldsimp, exn, exu],
    if not(member(units, features)) then
        stack_unit_si_declare(true),
    /* If we have only a number then return it, with a placeholder for units. */
    if simp_numberp(ev(float(ex), simp)) then return([ex, NULLUNITS]),
    /* Atoms should be returned as just units. */
    if atom(ex) then
        return([NULLNUM, ex]),
    oldsimp:simp,
    simp:false,
    exn:flatten_recurse_nouns(noun_arith(ex)),
    if (debug) then (print("stack_units_split: nounarith expression is"), print(exn)),
    /* If we don't have a product we are return what we are given. */
    if not(is_simp(op(exn)="noun*")) then 
        return([ex, NULLUNITS]),
    exu:sublist(args(exn), lambda([ex2], not(stack_units_split_p(ex2)))),
    exn:sublist(args(exn), lambda([ex2], stack_units_split_p(ex2))),
    simp:oldsimp,
    if (debug) then (print("stack_units_split:"), print(exn), print(exu)),
    /* Flag up if we genuinely have no numbers. */
    if is_simp(emptyp(exn)) then 
        exn:[NULLNUM],
    verb_arith([apply("noun*", exn), apply("noun*", exu)])
)$

/* Predicate function used as a filter in stack_units_split. */
stack_units_split_p(ex) := block(
    if simp_numberp(ex) or is_simp(ex=UNARY_MINUS) or is_simp(ex=QMCHAR) then
        return(true),
    if emptyp(listofvars(ex)) then
        return(true),
    if simp_numberp(ev(float(verb_arith(ex)), simp)) then
        return(true),
    return(false)
)$

/* Validate an expression which is expected to have units.*/
stack_validate_units(expr, LowestTerms, TAns) := block( [simp:false, exs, SAU, SBU],
    /* Try to simply the expression to catch CAS errors. */
    exs:errcatch(ev(expr, simp)),
    if is_simp(exs = []) then return(false),
    if length(expr)#1 then 
        print(StackAddFeedback("", "CommaError", string(expr), string(setify(expr)))),
    expr:first(expr),
    /* Declare all symobols as "units", and change their TeX display. */
    stack_unit_si_declare(false),

    /* Do not check for floats.  They are always ok here. */
    /* Checks fractions are in lowest terms */
    if LowestTerms and not(all_lowest_termsex(expr)) then
        print(StackAddFeedback("", "Lowest_Terms")),
    /* SA should be only an expression. */
    if not(expressionp(expr)) then
        (print(StackAddFeedback("", "ATUnits_SA_not_expression")), return(expr)),

    /* Check if the student has correctly used units.*/
    SAU:stack_units_split(expr),
    SBU:stack_units_split(TAns),
    if (debug) then (print("stack_validate_units working with: "), print(SAU), print(SBU)),

    /* Check if stack_units_split appears to have done something sensible. */ 
    /* Student types only units.  This should always be invalid. */ 
    if is_simp(first(SAU) = NULLNUM) then 
        print(StackAddFeedback("", "ATUnits_SA_only_units"))
    else if not(emptyp(listofvars(first(SAU)))) then
        print(StackAddFeedback("", "ATUnits_SA_bad_units"))
    else block(
        /* Student should use units if and only if the teacher uses units. */
        if is_simp(second(SAU) = NULLUNITS) and not(is_simp(second(SBU) = NULLUNITS)) then
            print(StackAddFeedback("", "ATUnits_SA_no_units")),
        if not(is_simp(second(SAU) = NULLUNITS)) and is_simp(second(SBU) = NULLUNITS) then
            print(StackAddFeedback("", "ATUnits_SA_excess_units"))
    ),

    /* Now display the result and subtly change the display. */
    if not(is_simp(first(SAU) = NULLNUM) or is_simp(first(SAU) = 1) or is_simp(second(SAU) = NULLUNITS)) then
        expr:stack_validate_units_display(SAU),
    expr:detexcolor(expr),
    expr:detexdecorate(expr),
    return(expr)
)$

/* This function sorts out the display of the final expression.
   Units should be a product of powers (possibly negative).
   Numbers should have the division operator used.              */
stack_validate_units_display(ex) := block([expr],
  apply("*", maplist(stack_combine_exponents, expr:flatten((first(ex))*(second(ex)))))
)$

/* This function is used to make the transformation (x^a)^b -> x^(a*b).
   This is really needed for negative exponents.                         */
stack_combine_exponents(ex) := block([n,m,ex1],
    if not(is_simp(safe_op(ex)="^")) then 
        return(ex),
    ex1:first(args(ex)),
    n:second(args(ex)),
    if not(integerp(ev(n, simp))) then 
        return(ex),
    if not(is_simp(safe_op(ex1)="^")) then 
        return(ex), 
    m:second(args(ex1)),
    return(first(args(ex1))^(ev(m*n, simp)))
)$

/* Units answer tests. */
ATUnits(SA, SBL) := ATUnitsFun(SA, SBL, false)$
ATUnitsStrict(SA, SBL) := ATUnitsFun(SA, SBL, true)$

ATUnitsFun(SA, SBL, strictp) := block([validity, rawmk, sb, ansnote, SB, SAU, SBU, SAU1, SBU1, ol, ret, ret1, ret2],
    validity:true, rawmk:true, fb:"", ansnote:"",

    SAA:errcatch(ev(SA, simp, nouns)),
    if (is_simp(SAA = [STACKERROR]) or is_simp(SAA = [])) then 
        return([false, false, StackAddNote("", "ATUnits_STACKERROR_SAns"), ""]),
    SBB:errcatch(ev(SBL, simp, nouns)),
    if (is_simp(SBB = [STACKERROR]) or is_simp(SBB = [])) then 
        return([false, false, StackAddNote("", "ATUnits_STACKERROR_TAns"), ""]),

    /* SBL is a list: the teacher's answer, the variable, and whether formative feedback is to be provided. */
    /* Sort out options */
    if listp(SBL) then (SB:SBL[1], ol:SBL[2]) else 
        (print("TEST_FAILED"), return([false, false, StackAddNote("", "ATUnits_STACKERROR_no_option"), StackAddFeedback("", "TEST_FAILED_Q")])),

    /* SA should be only an expression. */
    if not(expressionp(SA)) then
        return([false, false, StackAddNote("", "ATUnits_SA_not_expression"), StackAddFeedback("", "ATUnits_SA_not_expression")]),

    /* SB should be only an expression. */
    if not(expressionp(SB)) then
        (print("TEST_FAILED"), return([false, false, StackAddNote("", "ATUnits_TA_not_expression"), StackAddFeedback("", "TEST_FAILED_Q")])),
        
    /* SA must have some units. */
    if simp_numberp(SA) then
        return([false, false, StackAddNote("", "ATUnits_SA_no_units"), StackAddFeedback("", "ATUnits_SA_no_units")]),

    /* Load and setup units. */
    if not(member(units, features)) then
        stack_unit_si_declare(true),

    if (debug) then (print(SA), print(SB)),
    SAU:stack_units_split(SA),
    SBU:stack_units_split(SB),
    if (debug) then (print(SAU), print(SBU)),

    /* The teacher must supply some units, otherwise the test will fail. */
    if is_simp(second(SBU) = NULLUNITS) then
        (print("TEST_FAILED"), return([false, false, StackAddNote("", "ATUnits_SB_no_units"), StackAddFeedback("", "TEST_FAILED_Q")])),

    /* SA must not be only units. */
    if is_simp(first(SAU) = NULLNUM) then
        return([false, false, StackAddNote("", "ATUnits_SA_only_units"), StackAddFeedback("", "ATUnits_SA_only_units")]),

    /* Check if stack_units_split appears to have done something sensible. */ 
    if not(emptyp(listofvars(first(SAU)))) then
        return([false, false, StackAddNote("", "ATUnits_SA_bad_units"), StackAddFeedback("", "ATUnits_SA_bad_units")]),
    if is_simp(second(SAU) = NULLUNITS) then
        return([false, false, StackAddNote("", "ATUnits_SA_no_units"), StackAddFeedback("", "ATUnits_SA_no_units")]),

    /* Strip off units and check the numerical part with ATNumSigFigs. */
    SAU1:ev(float(first(SAU)), simp),
    SBU1:ev(float(first(SBU)), simp),
    ret1: ATNumSigFigs(SAU1, [SBU1, ol]),
    if (debug) then print(ret1),

    /* Did we get an error?  If so, then go no further. */
    if not(ret1[1]) then return(ret1),
    
    /* Check units.  If the units match exactly then go no further. 
       The correctness or otherwise is entirely determined by ATNumSigFigs.  */
    if algebraic_equivalence(second(SAU), second(SBU)) then
        return([ret1[1], ret1[2], StackAddNote(ret1[3], "ATUnits_units_match"), ret1[4]]),

    /* Now convert to base units and compare again.  This is for feedback purposes. */
    if (debug) then print("ATUnits: converting to base units."),
    SA:stack_unit_si_to_si_base(SA),
    SB:stack_unit_si_to_si_base(SB),
    SAU:stack_units_split(SA),
    SBU:stack_units_split(SB),
    if (debug) then (print(SAU), print(SBU)),

    /* Check the accuracy again, now we have converted. */
    SAU1:ev(float(first(SAU)), simp),
    SBU1:ev(float(first(SBU)), simp),
    ret2: ATNumSigFigs(SAU1, [SBU1, ol]),
    if (debug) then print(ret2),

    /* Did we get an error?  If so, then go no further. */
    if not(ret2[1]) then 
        return([ret2[1], ret2[2], StackAddNote(ret2[3], "ATUnits_second_numerial_test_failed"), ret2[4]]),

    /* Check for incompatible units. */
    if not(algebraic_equivalence(second(SAU), second(SBU))) then block(
        if (debug) then print("ATUnits_incompatible_units"),
        rawmk:false,
        /* What about accuracy?  Only look at their actual answer. There is no point    
           converting the numerical part to base units here as they don't match the teacher's. */
        ansnote:StackAddNote(ret1[3], "ATUnits_incompatible_units"),
        if not(strictp) then
            fb:StackAddFeedback(ret1[4], "ATUnits_incompatible_units"),
        if (ret1[2]) then block(
            ansnote:StackAddNote(ansnote, "ATUnits_correct_numerical"),    
            if not(strictp) then
                fb:StackAddFeedback(fb, "ATUnits_correct_numerical")
        ) 
    ),
    if not(algebraic_equivalence(second(SAU), second(SBU))) then 
        return([true, false, ansnote, fb]),

    /* We do have compatible units.  */
    ansnote:StackAddNote(ret2[3], "ATUnits_compatible_units"),

    /* Is the numerical answer correct? */
    if ret2[2] then
        if not(strictp) then
            return([true, true, ansnote, fb])
        else             
            return([true, false, ansnote, fb]),

    rawmk:false,

    /* Despite getting the wrong units, was the original numerical value correct? */
    if ret1[2] then block(
        ansnote:StackAddNote("", "ATUnits_compatible_units"),
        ansnote:StackAddNote(ansnote, "ATUnits_correct_numerical"),
        fb:StackAddFeedback("", "ATUnits_correct_numerical")
    ),

    
    /* Send back the result. */
    ret:[validity, rawmk, ansnote, fb],
    return(ret)
    )$
