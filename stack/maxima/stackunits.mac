/*  Author Matti Harjula
    Aalto University
    Copyright (C) 2015 Matti Harjula

    This program is free software: you can redistribute it or modify
    it under the terms of the GNU General Public License version two.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for details.

    You should have received a copy of the GNU General Public License
    along with this program. If not, see <http://www.gnu.org/licenses/>.
*/


/****************************************************************/
/*  Simplified tools for handling SI-units (+liters)            */
/*                                                              */
/*  Matti Harjula <matti.harjula@aalto.fi>                      */
/*                                                              */
/*  Answer test added by                                        */
/*  Chris Sangwin <C.J.Sangwin@ed.ac.uk>                        */
/*                                                              */
/*  V0.5 August 2016                                            */
/****************************************************************/

/* This code is commented out as these lists are now defined in the main code in stack/cas/casstring.units.php
  which are copied over to maximalocal.mac by the install scripts.  This ensures exactly the
  same collections of units are available in PHP and this Maxima code.

  stack_unit_si_prefix_code:[y, z, a, f, p, n, u, m, c, d, da, h, k, M, G, T, P, E, Z, Y],
  stack_unit_si_prefix_multiplier:[10^-24, 10^-21, 10^-18, 10^-15, 10^-12, 10^-9, 10^-6, 10^-3, 10^-2, 10^-1, 10, 10^2, 10^3, 10^6, 10^9, 10^12, 10^15, 10^18, 10^21, 10^24],
  stack_unit_si_prefix_tex:["\\mathrm{y}", "\\mathrm{z}", "\\mathrm{a}", "\\mathrm{f}", "\\mathrm{p}", "\\mathrm{n}", "\\mu ", "\\mathrm{m}", "\\mathrm{c}", "\\mathrm{d}", "\\mathrm{da}", "\\mathrm{h}", "\\mathrm{k}", "\\mathrm{M}", "\\mathrm{G}", "\\mathrm{T}", "\\mathrm{P}", "\\mathrm{E}", "\\mathrm{Z}", "\\mathrm{Y}"],
  stack_unit_si_unit_code:[m, l, L, g, s, h, Hz, Bq, cd, N, Pa, cal, Cal, Btu, eV, J, W, A, ohm, C, V, F, S, Wb, T, H, Gy, Sv, lm, lx, mol, M, kat, rad],
  stack_unit_si_unit_conversions:[m, m^3/1000, m^3/1000, kg/1000, s, s*3600, 1/s, 1/s, cd, (kg*m)/s^2, kg/(m*s^2), 4.2*J, 4200*J, 1055*J, 1.602177e-19*J, (kg*m^2)/s^2, (kg*m^2)/s^3, A, (kg*m^2)/(s^3*A^2), s*A, (kg*m^2)/(s^3*A), (s^4*A^2)/(kg*m^2), (s^3*A^2)/(kg*m^2), (kg*m^2)/(s^2*A), kg/(s^2*A), (kg*m^2)/(s^2*A^2), m^2/s^2, m^2/s^2, cd, cd/m^2, mol, mol/(m^3/1000), mol/s, rad],
  stack_unit_si_unit_tex:["\\mathrm{m}", "\\mathrm{l}", "\\mathrm{L}", "\\mathrm{g}", "\\mathrm{s}", "\\mathrm{h}", "\\mathrm{Hz}", "\\mathrm{Bq}", "\\mathrm{cd}", "\\mathrm{N}", "\\mathrm{Pa}", "\\mathrm{cal}", "\\mathrm{cal}", "\\mathrm{Btu}", "\\mathrm{eV}", "\\mathrm{J}", "\\mathrm{W}", "\\mathrm{A}", "\\Omega", "\\mathrm{C}", "\\mathrm{V}", "\\mathrm{F}", "\\mathrm{S}", "\\mathrm{Wb}", "\\mathrm{T}", "\\mathrm{H}", "\\mathrm{Gy}", "\\mathrm{Sv}", "\\mathrm{lm}", "\\mathrm{lx}", "\\mathrm{mol}", "\\mathrm{M}", "\\mathrm{kat}", "\\mathrm{rad}"],
  stack_unit_other_unit_code:[min, day, amu, u, mmHg, bar, cc, mbar, atm, Torr, rev, deg, rpm, K],
  stack_unit_other_unit_conversions:[s*60, 24*60*60*s, amu, amu, 133.322387415*Pa, 10^5*Pa, m^3*10^(-6), 10^2*Pa, 101325*Pa, 101325/760*Pa, 2*pi*rad, pi*rad/180, pi*rad/(30*s), K],
  stack_unit_other_unit_tex:["\\mathrm{min}", "\\mathrm{day}", "\\mathrm{amu}", "\\mathrm{u}", "\\mathrm{mmHg}", "\\mathrm{bar}", "\\mathrm{cc}", "\\mathrm{mbar}", "\\mathrm{atm}", "\\mathrm{Torr}", "\\mathrm{rev}", "\\mathrm{{}^{o}}", "\\mathrm{rpm}", "\\mathrm{K}"],
*/

/* In Maxima 5.42.2 there are changes to the default simplifier.  We can no longer use the default, but need 
   to add rules and explicitly simplify to deal with stackunits.  */
matchdeclare(STACKNUM1, all, STACKNUM2, all, STACKUNITS1, all, STACKUNITS2, all, STACKANY, all)$
matchdeclare(STACKNUM, lambda([ex], numberp(ex) and is(ex>0)))$
tellsimpafter(STACKNUM*stackunits(STACKNUM1,STACKUNITS1), stackunits(STACKNUM*STACKNUM1, STACKUNITS1));
tellsimpafter(stackunits(STACKNUM1, STACKUNITS1)*stackunits(STACKNUM2, STACKUNITS2), stackunits(STACKNUM1*STACKNUM2, STACKUNITS1*STACKUNITS2));
tellsimpafter(stackunits(STACKNUM1, STACKUNITS1)*stackunits(STACKNUM2, STACKUNITS2)*STACKANY, stackunits(STACKNUM1*STACKNUM2, STACKUNITS1*STACKUNITS2)*STACKANY);
tellsimpafter(stackunits(STACKNUM1, STACKUNITS1)^STACKNUM, stackunits(STACKNUM1^STACKNUM, STACKUNITS1^STACKNUM));
tellsimpafter(stackunits(STACKNUM1, STACKUNITS1)+stackunits(STACKNUM2, STACKUNITS1), stackunits(STACKNUM1+STACKNUM2, STACKUNITS1));
tellsimpafter(stackunits(STACKNUM1, STACKUNITS1)+stackunits(STACKNUM2, STACKUNITS1)+STACKANY, stackunits(STACKNUM1+STACKNUM2, STACKUNITS1)+STACKANY);


unitsp(ex) := featurep(ex, 'units)$

/* List all variables *not* considered to be not units. */
listofnonunits(ex) := block(
  if not(member('units, features)) then
      stack_unit_si_declare(true),
  sublist(listofvars(ex), lambda([ex2], not(unitsp(ex2))))
)$

/* List all variables considered to be units.  */
listofunits(ex) := block(
  if not(member('units, features)) then
    stack_unit_si_declare(true),
  sublist(listofvars(ex), unitsp)
)$

/* Set \texput rules for SI units. The mode parameter does nothing, */
/* except skips the syntax validation error... */
/* We don't apply('declare, [stack_unit_si_unit_code[ui], constant]) as this breaks stackunits_make(ex). */
stack_unit_si_declare(mode) := block([pfi, ui, simp],
  /* Use Maxima's feature system to declare a range of units.  */
  /* Whether units is a feature can be used to check if this function has been called. */
  /* Check with member('units, features); */
  declare(units, feature),
  simp:true,
  for ui:1 thru length(stack_unit_si_unit_code) do
    (
    for pfi:1 thru length(stack_unit_si_prefix_code) do
      (
        apply('texput, [vconcat(stack_unit_si_prefix_code[pfi],stack_unit_si_unit_code[ui]), sconcat(stack_unit_si_prefix_tex[pfi], stack_unit_si_unit_tex[ui])]),
        apply('declare, [vconcat(stack_unit_si_prefix_code[pfi],stack_unit_si_unit_code[ui]), 'units])
      ),
        apply('texput, [stack_unit_si_unit_code[ui], stack_unit_si_unit_tex[ui]]),
        apply('declare, [stack_unit_si_unit_code[ui], 'units])
    ),
    for ui:1 thru length(stack_unit_other_unit_code) do (
        apply('texput, [stack_unit_other_unit_code[ui], stack_unit_other_unit_tex[ui]]),
        apply('declare, [stack_unit_other_unit_code[ui], 'units])
    )
)$

/* Converts the whole expression to SI-base units. */
stack_unit_si_to_si_base(expression) := block([ui, pfi, ex, workex, oldsimp],
  oldsimp:simp,
  simp:false,
  ex:stackunits_make(expression),
  /* Remove intert dp/df display functions at this point. */
  ex:ev(ex, displaydp=lambda([a,b],a),  displaysf=lambda([a,b],a)),  
  workex:stack_units_units(ex),
  if debug then (print("stack_unit_si_to_si_base: working with the following."), print(ex), print(workex)),
  /* If we don't have units there is nothing to do. */
  if is(workex=NULLUNITS) then return(expression),
  exop:safe_op(expression),
  simp:true,
  for ui:1 thru length(stack_unit_other_unit_code) do
    (
    workex:subst(stack_unit_other_unit_conversions[ui], stack_unit_other_unit_code[ui], workex)
    ),
    for ui:1 thru length(stack_unit_si_unit_code) do (
      for pfi:1 thru length(stack_unit_si_prefix_code) do
      (
        workex:subst(stack_unit_si_prefix_multiplier[pfi]*stack_unit_si_unit_code[ui], vconcat(stack_unit_si_prefix_code[pfi], stack_unit_si_unit_code[ui]), workex)
      ),
      workex:subst(stack_unit_si_unit_conversions[ui], stack_unit_si_unit_code[ui], workex)
    ),
    if debug then (print("stack_unit_si_to_si_base: after base conversion"), print(workex)),
    workex:stackunits_make(workex),
    if not(stack_units_nums(ex)=NULLNUMS and stack_units_nums(workex)=NULLNUM) then
        workex:stackunits(ev(stack_units_nums(ex)*stack_units_nums(workex), NULLNUM=1), stack_units_units(workex)),
    /* Return the expression with the operator it started with. */
    simp:oldsimp,
    if not(safe_op(expression) = "stackunits") then
      workex:stackunits_to_product(workex),
    return(workex)
)$

stack_unit_si_present(value,target) := block([conversionfactor, va, vb, simp, best, bestc, ii],
  simp:true,
  bestc:9000000,
  if listp(target) then (
    for ii:1 thru length(target) do
      (
      va:stack_unit_si_present(value,target[ii]),
      if (is(stack_units_nums(va)=0) or is(stack_units_nums(va)=0.0))
        then (best:va,return(best))
      else
      (
        vb:abs(log(if is(stack_units_nums(va)=NULLNUM) then 1 else stack_units_nums(va))-sqrt(2)),
        if is(vb<bestc) then (best:va,bestc:vb)
      )
    ),
    return(best)
  ) else (
  va:stack_unit_si_to_si_base(stack_units_units(stackunits_make(10*value))),
  vb:stack_unit_si_to_si_base(stack_units_units(stackunits_make(10*target))),
  ii:is(stack_units_units(va)!=stack_units_units(vb)),
  va:stack_units_nums(va),
  if is(va = NULLNUM) then
    va:1,
  vb:stack_units_nums(vb),
  if is(vb = NULLNUM) then
    vb:1,
  conversionfactor:va/vb,
  va:stack_units_nums(stackunits_make(value)),
  if is(va = NULLNUM) then
    va:1,
  va:va*conversionfactor,
  vb:stack_units_units(stackunits_make(target)),
  if ii
    then error("Units presentation requires compatible units.")
  else return(stackunits(va,vb))
  )
)$

/* Splits off the units from the end of a product. */
stackunits_make(ex) := block([oldsimp, exn, exu, exl],
  if (debug) then (print("stackunits_make: "), print(ex)),
  if not(member('units, features)) then
    stack_unit_si_declare(true),
  oldsimp:simp,
  simp:false,
  /* If we have only a number then return it, with a placeholder for units. */
  if simp_numberp(float(ex)) then return(stackunits(ex, NULLUNITS)),
  /* Atoms should be returned as just units. */
  if atom(ex) then
    return(stackunits(NULLNUM, ex)),
  if safe_op(ex)="stackunits" then
      return(ex),
  if is_simp(op(ex)=STACKpmOPT) then return(block([numa,numb],
      if length(args(ex))=1 then
        (
          numa:NULLNUM,
          numb:first(args(ex))
        )
      else
        (
          numa:first(args(ex)),
          numb:second(args(ex))
        ),
        if (debug) then print("stackunits_make: found +-.  Preliminary split as ", print(numa), print(numb)),
        numb:stackunits_make(numb),
        if (debug) then print("stackunits_make: +- results give ", print(numa), print(numb)),
        verb_arith(stackunits(numa, second(args(numb)),first(args(numb))))
    )
  ),
  /* We have a special case  x*1/s which we need to filter out at this stage. */
  if safe_op(ex)="/" then
    ex:stackunits_make_recip(ex),
  exn:flatten_recurse_nouns(noun_arith(ex)),
  if (debug) then (print("stackunits_make: nounarith expression is"), print(exn)),
  /* If the student has indicated +- we deal with this. */
  /* If we don't have units we are return what we are given. */
  if is_simp(listofunits(ex)=[]) then
    return(stackunits(ex, NULLUNITS)),
  /* Edge case like s^(-1). */
  if is_simp(op(exn)="nounpow") then
    exn:[exn] elseif not(is_simp(op(exn)="nounmul")) then
    return(stackunits(ex, NULLUNITS)),
  exu:sublist(args(exn), lambda([ex2], not(stackunits_make_p(ex2)))),
  exn:sublist(args(exn), lambda([ex2], stackunits_make_p(ex2))),
  simp:oldsimp,
  if (debug) then (print("stackunits_make: expressions split as"), print(exn), print(exu)),
  /* Flag up if we genuinely have no numbers. */
  if is_simp(emptyp(exn)) then
    exn:[NULLNUM],
  /* Flag up if we genuinely have no units. */
  if is_simp(emptyp(exu)) then
    exu:[NULLUNITS],
  /* Transform (a^2)^-1 to a^(-2), for the units. */
  exu:maplist(unary_minus_remove, exu),
  exu:maplist(flatten_pow_minus_one, exu),
  if (debug) then (print("stackunits_make: (1) reformulated units as "), print(exu)),
  if (debug) then (print("stackunits_make: (2) reformulated numbers as "), print(exn)),
  exn:maplist(unary_minus_remove, exn),
  exn:stack_units_rational_number(exn),
  if (debug) then (print("stackunits_make: (2) reformulated numbers as "), print(exn)),
  if is(first(exn) = UNARY_MINUS) then block(
      exn:rest(exn),
      if is(safe_op(exn[1])="displaydp") then exn[1]:displaydp(ev(-1*part(exn,1,1), simp), part(exn,1,2))
        else exn[1]:ev(-1*exn[1],simp)
  ),
  if length(exn)=1 then exn:first(exn) else exn:apply("nounmul", exn),
  if length(exu)=1 then exu:first(exu) else exu:apply("nounmul", exu),
  if (debug) then (print("stackunits_make: (3) reformulated numbers as "), print(exn)),
  if (debug) then (print("stackunits_make: (3) reformulated units as "), print(exu)),
  verb_arith(stackunits(exn, exu))
)$

/* This function is deprecated.  NO NOT USE. */
stack_units_split(ex) := args(stackunits_make(ex))$

/* Turn stackunits into a product in a safe way.  */
stackunits_to_product(ex) := block(
  if not(safe_op(ex) = "stackunits") then
    return(ex),
  if stack_units_units(ex) = NULLUNITS then
    return(stack_units_nums(ex)),
  if stack_units_nums(ex) = NULLNUM then
    return(stack_units_units(ex)),
  apply("*", args(ex))
)$

stackunits_make_p(ex) := block(
  if simp_numberp(ex) or is_simp(ex=UNARY_MINUS) or is_simp(ex=QMCHAR) or is(safe_op(ex)="displaydp" or is(safe_op(ex)="displaysci")) then
    return(true),
  if emptyp(listofvars(ex)) then
    return(true),
  if simp_complex_number_p(ev(float(verb_arith(ex)), simp)) then
     return(true),
  return(false)
)$

/* Does something look like a rational number? */
stack_units_rational_number(ex) := block(
  if length(ex)=1 and safe_op(first(ex))="nounpow" and is(second(args(first(ex)))=-1) then return([1/first(args(first(ex)))]),
  if not(length(ex)=2) then
    return(ex),
  if not(integerp(first(ex))) or atom(second(ex)) then return(ex),
  if safe_op(second(ex))="nounpow" and is(second(args(second(ex)))=-1) then return([first(ex)/first(args(second(ex)))]),
  ex
)$

/* We have a special case  x*1/s which we need to filter out at this stage. */
stackunits_make_recip(ex) := block([ex1,ex2],
  if not(safe_op(ex)="/") then
    return(ex),
  ex1:first(args(ex)),
  ex2:second(args(ex)),
  if not(safe_op(ex1)="*") then
    return(ex),
  ex1:reverse(args(ex1)),
  if not(is_simp((first(ex1)=1)))
    then return(ex),
  if is(length(ex1)=2) then
    return(second(ex1)/ex2),
  reverse(rest(ex1))/ex2
)$

/* Add utility functions to get units and numerical parts.  */
stack_units_units(ex) := block([su],
  if safe_op(ex) = "stackunits" then
    return(second(args(ex))),
  su:stackunits_make(ex),
  if safe_op(su) = "stackunits" then
    return(second(args(su))),
  return(ex)
)$

stack_units_nums(ex) := block([su],
  if safe_op(ex) = "stackunits" then
    return(first(args(ex))),
  su:stackunits_make(ex),
  if safe_op(su) = "stackunits" then
    return(first(args(su))),
  return(ex)
)$

stack_units_err(ex) := block(
  if not(safe_op(ex) = "stackunits") then
    ex:stackunits_make(ex),
  if not(is(safe_op(ex) = "stackunits")) then
    return(0),
  if is_simp(length(args(ex))=3) then
    return(third(args(ex))),
  return(0)
)$

stack_units_errp(ex) := block(
  if not(safe_op(ex) = "stackunits") then
    ex:stackunits_make(ex),
  if length(args(ex))=3 then
    return(true),
  return(false)
)$

/* Validate an expression which is expected to have units. */
stack_validate_units(expr, LowestTerms, TAns, fracdisp) := block( [simp:false, exs, SAU, SBU],
  /* Check the display option. */
  if not(fracdisp = "inline" or fracdisp = "negpow") then block(
    error("stack_validate_units: fracdisp argument must be either inline or negpow only.")
  ),
  /* Try to simply the expression to catch CAS errors. */
  exs:errcatch(ev(expr, simp)),
  if is_simp(exs = []) then return(false),
  if length(expr)#1 then
    print(StackAddFeedback("", "CommaError", string(expr), string(setify(expr)))),
  expr:first(expr),
  /* Declare all symobols as "units", and change their TeX display. */
  stack_unit_si_declare(false),

  /* An empty answer is validated as valid! */
  if (expr = EMPTYANSWER) then return(expr),

  /* Do not check for floats.  They are always ok here. */
  /* Checks fractions are in lowest terms */
  if LowestTerms and not(all_lowest_termsex(expr)) then
    print(StackAddFeedback("", "Lowest_Terms")),
  /* SA should be only an expression. */
  if not(expressionp(expr) or is(safe_op(expr)=STACKpmOPT)) then
    (print(StackAddFeedback("", "ATUnits_SA_not_expression")), return(expr)),

  /* Check if the student has correctly used units.*/
  SAU:stackunits_make(expr),
  SBU:stackunits_make(TAns),
  if (debug) then (print("stack_validate_units working with: "), print(SAU), print(SBU)),

  /* Check if stackunits_make appears to have done something sensible. */
  /* Student types only units.  This should always be invalid. */
  if is_simp(stack_units_nums(SAU) = NULLNUM) then
    print(StackAddFeedback("", "ATUnits_SA_only_units"))
  else if not(emptyp(listofvars(stack_units_nums((SAU))))) then
      print(StackAddFeedback("", "ATUnits_SA_bad_units"))
  else block(
  /* Student should use units if and only if the teacher uses units. */
  if is_simp(stack_units_units(SAU) = NULLUNITS) and not(is_simp(stack_units_units(SBU) = NULLUNITS)) then
    print(StackAddFeedback("", "ATUnits_SA_no_units")),
    if not(is_simp(stack_units_units(SAU) = NULLUNITS)) and is_simp(stack_units_units(SBU) = NULLUNITS) then
      print(StackAddFeedback("", "ATUnits_SA_excess_units"))
  ),

  /* Check if the student has added in error bounds. */
  if stack_units_errp(SAU) then
    print(StackAddFeedback("", "ATUnits_SA_errorbounds_invalid")),

  /* Add in an option to control the display of the units. */
  expr:SAU,
  if (debug) then (print("stack_validate_units has: "), print(expr)),
  if fracdisp = "inline" then block(
    stack_disp_fractions("i"),
    if stack_units_errp(SAU) then
      expr:stackunits(stack_units_nums(SAU), ev(stack_units_units(SAU), simp), ev(stack_units_err(SAU),simp))
    else
      expr:stackunits(stack_units_nums(SAU), ev(stack_units_units(SAU), simp))
    ),
  if (debug) then (print(expr)),
  expr:detexcolor(expr),
  return(expr)
)$

texput(multsgnstackunits, "\\, ");

/* Finer control over display of units, separating out the number from the units. */
stackunitstex(ex) := block([a, b, c, astr, bstr],
  a:first(args(ex)),
  b:second(args(ex)),
  if scientific_notationp(a) then make_multsgn("cross"),
  astr:tex1(a),
  if scientific_notationp(a) then make_multsgn("blank"),
  if not(atom(a)) and safe_op(a)="+" and not(is(b=NULLUNITS)) then 
    astr:sconcat("\\left( ", astr, "\\right)"),
  if length(args(ex))=3 then
    astr:sconcat(astr, "\\pm ", tex1(third(args(ex)))),
  /* Fine tune the edge cases. */
  if is(safe_op(b)="/") then
    if (is(first(args(b))=1)) then return(sconcat(astr,"\\times ",tex1(b))),
  /* Otherwise....             */
  bstr:tex1(b),
  if is(strim(" ", astr)="") then return(bstr),
  if is(strim(" ", bstr)="") then return(astr),
  sconcat(astr, tex1(multsgnstackunits), bstr)
)$

texput(stackunits, stackunitstex);
texput(NULLUNITS, "");
texput(NULLNUM, "");

/* Units answer tests. */
ATUnits(SA, SB, SO, SR) := ATUnitsFun(SA, SB, SO, SR, false, "SigFigs")$
ATUnitsSigFigs(SA, SB, SO, SR) := ATUnitsFun(SA, SB, SO, SR, false, "SigFigs")$
ATUnitsStrict(SA, SB, SO, SR) := ATUnitsFun(SA, SB, SO, SR, true, "SigFigs")$
ATUnitsStrictSigFigs(SA, SB, SO, SR) := ATUnitsFun(SA, SB, SO, SR, true, "SigFigs")$
ATUnitsSigFigs_CASSigFigsWrapper(SA, SB, SO, SR, strict) := ATUnitsFun(SA, SB, SO, SR, strict, "SigFigs")$
ATUnitsRelative(SA, SB, SO) := ATUnitsFun(SA, SB, SO, "", false, "Relative")$
ATUnitsStrictRelative(SA, SB, SO) := ATUnitsFun(SA, SB, SO, "", true, "Relative")$
ATUnitsAbsolute(SA, SB, SO) := ATUnitsFun(SA, SB, SO, "", false, "Absolute")$
ATUnitsStrictAbsolute(SA, SB, SO) := ATUnitsFun(SA, SB, SO, "", true, "Absolute")$


/* This function has two options:
   boolean: strictp determines if the test should be "strict" in requiging exactly the correct units.
   numtest: string Chooses the numerical test applied to the numerical part.
*/
ATUnitsFun(SA, SB, SO, SR, strictp, numtest) := block([validity, rawmk, sb, ansnote, 
        SAU, SBU, SOU, SAU1, SBU1, SOU1, ol, ret, ret1, ret2],
  validity:true, rawmk:true, fb:"", ansnote:"",
  if (is(_EC(errcatch(SAA:ev(SA, simp, nouns)), "") = false)) then
    return([false, false, StackAddNote("", "ATUnits_STACKERROR_SAns"), ""]),
  if (is(_EC(errcatch(SBB:ev(SB, simp, nouns)), "") = false)) then
    return([false, false, StackAddNote("", "ATUnits_STACKERROR_TAns"), ""]),
  if (is(_EC(errcatch(SOO:ev(SO, simp, nouns)), "") = false)) then
    return([false, false, StackAddNote("", "ATUnits_STACKERROR_Opt"), ""]),
  if (is(_EC(errcatch(SRR:ev(SR, simp, nouns)), "") = false)) then
    return([false, false, StackAddNote("", "ATUnits_STACKERROR_Raw"), ""]),

  ol:SO,

  /* SA should be only an expression. */
  if not(expressionp(SA)) then
    return([false, false, StackAddNote("", "ATUnits_SA_not_expression"), StackAddFeedback("", "ATUnits_SA_not_expression")]),

  /* SB should be only an expression. */
  if not(expressionp(SB)) then
    (print("TEST_FAILED"), return([false, false, StackAddNote("", "ATUnits_TA_not_expression"), StackAddFeedback("", "TEST_FAILED_Q")])),

  /* SA must have some units. */
  if simp_numberp(SA) then
    return([false, false, StackAddNote("", "ATUnits_SA_no_units"), StackAddFeedback("", "ATUnits_SA_no_units")]),

  /* Load and setup units. */
  if not(member('units, features)) then
    stack_unit_si_declare(true),

  if (debug) then (print("ATUnitsFun: raw input: "), print(SA), print(SB)),
  SAU:stackunits_make(SA),
  SBU:stackunits_make(SB),
  /* If the teacher has not supplied numerical information then it is assumed to be 1.0.
     The teacher's answer could well be the result of a calculation in which 1.0*units -> units. */
  if stack_units_nums(SBU) = NULLNUM then
    SBU:stackunits_make(1.0*SB),
  SOU:stackunits_make(SO),

  /* If the teacher uses units in the option then they must be identical to the units in the teacher's answer. */
  if (numtest = "Absolute") and not(is_simp(stack_units_units(SOU) = NULLUNITS)) and not(stack_units_units(SBU) = stack_units_units(SOU)) then
    (print("TEST_FAILED"), return(StackBasicReturn(false, false, "ATUnits_SO_wrong_units"))),

  if (debug) then (print("ATUnitsFun: Initial stackunits_make gives: "), print(SAU), print(SBU), print(SOU)),

  /* The teacher must supply some units, otherwise the test will fail. */
  if is_simp(stack_units_units(SBU) = NULLUNITS) then
    (print("TEST_FAILED"), return([false, false, StackAddNote("", "ATUnits_SB_no_units"), StackAddFeedback("", "TEST_FAILED_Q")])),

  /* SA must not be only units. */
  if is_simp(stack_units_nums(SAU) = NULLNUM) then
   return([false, false, StackAddNote("", "ATUnits_SA_only_units"), StackAddFeedback("", "ATUnits_SA_only_units")]),

  /* Check if stackunits_make appears to have done something sensible. */
  if not(emptyp(listofvars(stack_units_nums(SAU)))) then
    return([false, false, StackAddNote("", "ATUnits_SA_bad_units"), StackAddFeedback("", "ATUnits_SA_bad_units")]),
  if is_simp(stack_units_units(SAU) = NULLUNITS) then
    return([false, false, StackAddNote("", "ATUnits_SA_no_units"), StackAddFeedback("", "ATUnits_SA_no_units")]),

  /* Strip off units and check the numerical part with ATNumSigFigs. */
  SAU1:ev(float(stack_units_nums(SAU)), simp),
  SBU1:ev(float(stack_units_nums(SBU)), simp),

  if (debug) then (print("ATUnitsFun: call to 1st numerical test with data: "), print(SAU1), print(SBU1), print([ol, SOU])),

  if (numtest = "SigFigs") then
    /* Sigfigs test should not use units in the option. */
    ret1: ATNumSigFigs(SAU1, SBU1, SO, SR)
  else if (numtest = "Relative") then
    ret1: ATNumRelative(SAU1, SBU1, SO)
  else if (numtest = "Absolute") then
    /* Only the absolute test should use units in the option. */
    ret1: ATNumAbsolute(SAU1, SBU1, stack_units_nums(SOU))
  else
    (
      print(sconcat("Error: ATUnitsFun received the following numtest option which is unknown: ", numtest)),
      ret1:[false]
    ),
  if (debug) then (print("Result of numerical test: "), print(ret1)),

  /* Did we get an error?  If so, then go no further. */
  if not(ret1[1]) then return(ret1),

  /* Check units.  If the units match exactly then go no further.
     The correctness or otherwise is entirely determined by ATNumSigFigs.  */
  if algebraic_equivalence(second(SAU), second(SBU)) then
    return([ret1[1], ret1[2], StackAddNote(ret1[3], "ATUnits_units_match"), ret1[4]]),

  /* If the teacher has not used units, then take the teacher's units. */
  if is_simp(stack_units_units(SOU) = NULLUNITS) then (
    SO:stackunits(SO, stack_units_units(SB)),
    if (debug) then (print("ATUnits: No units supplied, using the teacher's")) 
    ),
  /* Now convert to base units and compare again.  This is for feedback purposes. */
  if (debug) then (print("ATUnits: about to convert the following to base units."), print(SA), print(SB)),
  SA:stack_unit_si_to_si_base(SA),
  SB:stack_unit_si_to_si_base(SB),
  SO:stack_unit_si_to_si_base(SO),
  SAU:stackunits_make(SA),
  SBU:stackunits_make(SB),
  SOU:stackunits_make(SO),
  if (debug) then (print("ATUnits: results of convertion to base units."), print(SAU), print(SBU), print(SOU)),
  /* Check the accuracy again, now we have converted. */
  SAU1:ev(float(stack_units_nums(SAU)), simp),
  SBU1:ev(float(stack_units_nums(SBU)), simp),
  SOU1:ev(float(stack_units_nums(SOU)), simp),
  if (numtest = "SigFigs") then
    ret2: ATNumSigFigs(SAU1, SBU1, ol, SR)
  else if (numtest = "Relative") then
    ret2: ATNumRelative(SAU1, SBU1, ol)
  else if (numtest = "Absolute") then
    /* Only the absolute test should use units in the option. */
    ret2: ATNumAbsolute(SAU1, SBU1, SOU1)
  else
    print(sconcat("Error: ATUnitsFun received the following numtest option which is unknown: ", numtest)),
  if (debug) then print(ret2),

  /* Did we get an error?  If so, then go no further. */
  if not(ret2[1]) then
    return([ret2[1], ret2[2], StackAddNote(ret2[3], "ATUnits_second_numerial_test_failed"), ret2[4]]),

  /* Check for incompatible units. */
  if not(algebraic_equivalence(stack_units_units(SAU), stack_units_units(SBU))) then
    (
    if (debug) then print("ATUnits_incompatible_units"),
      rawmk:false,
    /* What about accuracy?  Only look at their actual answer. There is no point
       converting the numerical part to base units here as they don't match the teacher's. */
    ansnote:StackAddNote(ret1[3], "ATUnits_incompatible_units"),
    if not(strictp) then
      fb:StackAddFeedback(ret1[4], "ATUnits_incompatible_units"),
    if (ret1[2]) then
      (
      ansnote:StackAddNote(ansnote, "ATUnits_correct_numerical"),
      if not(strictp) then
        fb:StackAddFeedback(fb, "ATUnits_correct_numerical")
      )
    ),
  if not(algebraic_equivalence(stack_units_units(SAU), stack_units_units(SBU))) then
    return([true, false, ansnote, fb]),

  /* We do have compatible units. */
  ansnote:StackAddNote(ret2[3], sconcat("ATUnits_compatible_units ", string(ev(stack_units_units(SBU), simp)))),
  fb:ret2[4],

  /* Is the numerical answer correct? */
  if ret2[2] then
    if not(strictp) then
      return([true, true, ansnote, fb])
    else
      return([true, false, ansnote, fb]),

  rawmk:false,

  /* Despite getting the wrong units, was the original numerical value correct? */
  if ret1[2] then
    (
    ansnote:StackAddNote("", sconcat("ATUnits_compatible_units ", string(ev(stack_units_units(SBU), simp)))),
    ansnote:StackAddNote(ansnote, "ATUnits_correct_numerical"),
    fb:StackAddFeedback("", "ATUnits_correct_numerical")
    ),

  /* Send back the result. */
  ret:[validity, rawmk, ansnote, fb],
  return(ret)
  )$

/* Legacy function alias for old unit users. */
backtosibase(expression) := block([simp],return(stack_unit_si_to_si_base(expression)))$
