/* Misc functions for dealing with Maxima and the other tools. */


/* Defintion of characters to escape in Markdown. */
md_escapes(c) := if c = "\\" then "\\\\" 
            else if c = "*" then "\\*"
            else if c = "|" then "&#124;" /* The pipe neds to be converted in case one injects into a table. Mere escaping may not be enough there. */
            else if c = "`" then "&#96;" /* The logic of backtick escaping is not local so we do an entity conversion just in case. */
            else if c = "_" then "\\_"
            else if c = "{" then "\\{"
            else if c = "}" then "\\}"
            else if c = "[" then "\\["
            else if c = "]" then "\\]"
            else if c = "(" then "\\("
            else if c = ")" then "\\)"
            else if c = "<" then "\\<"
            else if c = ">" then "\\>"
            else if c = "#" then "\\#"
            else if c = "+" then "\\+"
            else if c = "-" then "\\-"
            else if c = "." then "\\."
            else if c = "!" then "\\!"
            else c$

str_to_md(string_to_escape) := simplode(map(md_escapes,charlist(string_to_escape)))$

/* Split a Maxima timestamp (seconds from Jan 1 1900) to numbers representing a date.
   The returned list consists of integers [year, month, day, weekday] where Sunday is 7 (ISO 8601). */
time_to_date(seconds) := block([y,m,d,S],
    S: split(first(split(timedate(seconds), " ")), "-"),
    y: parse_string(S[1]),
    m: parse_string(S[2]),
    d: parse_string(S[3]),
    return([y, m, d, day_for_date(y, m, d)])
)$

day_for_date(year, month, day) := block([reference, tmp, d],
    reference: parse_timedate("1900-01-08 12:00:00"), /* That is a Monday, the 1st was also but time-zones can cause trouble here and we need some space for them. */
    tmp: parse_timedate(sconcat(year, "-", if month < 10 then sconcat("0", month) else month, "-", if day < 10 then sconcat("0", day) else day, " 12:00:00")),
    d: floor((tmp - reference)/(24*60*60) + 1/2), /* There are these things called leap seconds let's hope they do not add up to 10 hours to one direction at any point during our lifetimes. */
    while d < 0 do d: d + 7000, /* Considering that Maximas timedate system breaks if given dates from the 19th century this is good enough. */
    d: 1 + mod(d,7),
    return(d)
)$

/* Generates a continuous list of dates between two dates, the second date is not included in the list but the first is. */
date_list(yearA, monthA, dayA, yearB, monthB, dayB) := block([y, m, d, wd, S, R, c, et, rev],
    rev: false,
    if yearA+(monthA/12)+(dayA/366) > yearB+(monthB/12)+(dayB/366) then
        rev: true,
    if yearA = yearB and monthA = monthB and dayA = dayB then
        return([]),
    c: parse_timedate(sconcat(yearA, "-", if monthA < 10 then sconcat("0", monthA) else monthA, "-", if dayA < 10 then sconcat("0", dayA) else dayA, " 12:00:00")),
    et: parse_timedate(sconcat(yearB, "-", if monthB < 10 then sconcat("0", monthB) else monthB, "-", if dayB < 10 then sconcat("0", dayB) else dayB, " 12:00:00")),
    R: [time_to_date(c)],
    c: if rev then c - 24*60*60 else c + 24*60*60,
    while (c < et and not rev) or (rev and c > et) do (
        S: split(first(split(timedate(c), " ")), "-"),
        y: parse_string(S[1]),
        m: parse_string(S[2]),
        d: parse_string(S[3]),
        wd: if not rev then last(last(R)) + 1 else last(last(R)) - 1,
        if wd > 7 then wd: 1,
        if wd = 0 then wd: 7,
        R: append(R, [[y, m, d, wd]]),
        c: if rev then c - 24*60*60 else c + 24*60*60
    ),
    /* Due to DST and other such fun things that iteration can go over. */
    S: last(R),
    if first(S) = yearB and second(S) = monthB and third(S) = dayB then
        R: rest(R, -1),
    return(R)
)$

/* Finds the number of significant digits in the first numeric part of a given string representation of an expression. Pretty much the same logic as the original PHP version stack_utils::decimal_digits. */
sig_figs_from_str(strexp) := block([leadingzeros,indefinitezeros,trailingzeros,meaningfulldigits,decimalplaces,infrontofdecimaldeparator,scientificnotation,seennumbers,c,i,r,simp],
    /* Plenty of countters so needs simp */
    simp: true,
    leadingzeros: 0,
    indefinitezeros: 0,
    trailingzeros: 0,
    meaningfulldigits: 0,
    decimalplaces: 0,
    infrontofdecimaldeparator: true,
    scientificnotation: false,
    seennumbers: false,

    /* If this is an empty string one probably has trouble. */
    if (slength(strim(" ",strexp)) = 0) then
        return(["stack_map",
                ["lowerbound", 0],
                ["upperbound", 0],
                ["decimalplaces", 0],
                ["fltfmt", "~a"]]),


    i: 1,
    /* First eat the stuff in front of of the number if it exists */
    while i <= slength(strexp) do (
        c: charat(strexp, i),

        if c = "." then (
            infrontofdecimaldeparator: false,
            meaningfulldigits: meaningfulldigits + indefinitezeros,
            indefinitezeros: 0,
            leadingzeros: 0,
            seennumbers: true
        ) else if c = "0" then (
            leadingzeros: 1,
            seennumbers: true
        ) else if member(c,["1","2","3","4","5","6","7","8","9"]) then (
            meaningfulldigits: meaningfulldigits + indefinitezeros + 1,
            indefinitezeros: 0,
            seennumbers: true
        ),
        i: i + 1,

        if seennumbers then return(0)
    ),

    /* Now we are safely in the number hopefully there is a number... */
    while i <= slength(strexp) do (
        c: charat(strexp, i),

        if infrontofdecimaldeparator = false and member(c,["0","1","2","3","4","5","6","7","8","9"]) then (
            decimalplaces: decimalplaces + 1
        ),
        if c = "e" or c = "E" then (
            if (meaningfulldigits + leadingzeros + indefinitezeros) > 0 then (
                scientificnotation: true
            )
        ),

        if c = "0" then (
            if meaningfulldigits = 0 then (
                leadingzeros: leadingzeros + 1
            ) else if infrontofdecimaldeparator then (
                indefinitezeros: indefinitezeros + 1
            ) else if meaningfulldigits > 0 then (
                meaningfulldigits: meaningfulldigits + 1 + indefinitezeros + trailingzeros,
                trailingzeros: 0,
                indefinitezeros: 0
            ) else (
                trailingzeros: trailingzeros + 1
            )
        ) else if c = "." and infrontofdecimaldeparator then (
            infrontofdecimaldeparator: false,
            meaningfulldigits: meaningfulldigits + indefinitezeros,
            indefinitezeros: 0,
            leadingzeros: 0
        ) else if member(c,["1","2","3","4","5","6","7","8","9"]) then (
            meaningfulldigits: meaningfulldigits + indefinitezeros + 1,
            indefinitezeros: 0
        ) else (
            if (meaningfulldigits + leadingzeros + indefinitezeros) > 0 then (
                /* Stop only if we have seens something like a number. */
                return(0)
            )
        ),
        i: i + 1
    ),

    r: ["stack_map",
        ["lowerbound", 0],
        ["upperbound", 0],
        ["decimalplaces", decimalplaces],
        ["fltfmt", "~a"]],

    if is(meaningfulldigits = 0) then (
        r: stackmap_set(r, "lowerbound", max(1, leadingzeros)),
        r: stackmap_set(r, "upperbound", max(1, leadingzeros))
    ) else if is(infrontofdecimaldeparator=false) then (
        r: stackmap_set(r, "lowerbound", meaningfulldigits),
        r: stackmap_set(r, "upperbound", meaningfulldigits)
    ) else (
        r: stackmap_set(r, "lowerbound", meaningfulldigits),
        r: stackmap_set(r, "upperbound", meaningfulldigits + indefinitezeros)
    ),

    if is(decimalplaces > 0) then (
        r: stackmap_set(r, "fltfmt", sconcat("~,", decimalplaces, "f"))
    ),
    if is(scientificnotation = true) then (
        if is(stackmap_get(r, "lowerbound") > 1) then (
            r: stackmap_set(r, "fltfmt", sconcat("~.", stackmap_get(r, "upperbound"), "e"))
        ) else (
            r: stackmap_set(r, "fltfmt", "~e")
        )
    ),
    return(r)
)$



FORBIDDEN_SYMBOLS_SET: {"%th", "adapth_depth", "alias", "aliases", "alphabetic", "appendfile",
  "apropos", "assume_external_byte_order", "backtrace", "batch", "barsplot", "batchload",
  "boxchar", "boxplot", "bug_report", "build_info", "catch", "chdir", "close", "closefile",
  "compfile", "compile", "compile_file", "concat", "current_let_rule_package",
  "data_file_name", "deactivate", "debugmode", "define", "define_variable", "del_cmd", "demo",
  "dependencies", "describe", "dimacs_export", "dimacs_import", "entermatrix",
  "error", "error_size", "error_syms", "errormsg", "eval_string", "example",
  "feature", "featurep", "features", "file_name", "file_output_append", "file_search",
  "file_search_demo", "file_search_lisp", "file_search_maxima", "file_search_tests",
  "file_search_usage", "file_type", "filename_merge", "flength", "FORBIDDEN_SYMBOLS_SET",
  "fortindent", "fortran", "fortspaces", "fposition", "freshline", "functions",
  "fundef", "funmake", "grind", "gnuplot_cmd", "gnuplot_file_name", "gnuplot_out_file",
  "gnuplot_preamble", "gnuplot_ps_term_command", "gnuplot_term", "inchar", "infeval",
  "infolists", "kill", "killcontext", "labels", "leftjust", "ldisp", "ldisplay",
  "lisp", "linechar", "linel", "linenum", "linsolvewarn", "load", "load_pathname",
  "loadfile", "loadprint", "macroexpand", "macroexpand1", "macroexpansion", "macros",
  "manual_demo", "maxima_tempdir", "maxima_userdir", "mkdir", "multiplot_mode", "myoptions",
  "newline", "nolabels", "opena", "opena_binary", "openr", "openr_binary", "openw",
  "openw_binary", "outchar", "packagefile", "parse_string", "pathname_directory",
  "pathname_name", "pathname_type", "pickapart", "piece", "playback", "plotdf", "print",
  "print_graph", "printf", "printfile", "prompt", "psfile", "quit", "read", "read_array",
  "read_binary_array", "read_binary_list", "read_binary_matrix", "read_hashed_array",
  "read_list", "read_matrix", "read_nested_list", "read_xpm", "readline", "readonly",
  "refcheck", "rembox", "remvalue", "remfunction", "reset", "rmxchar", "room",
  "run_testsuite", "run_viewer", "save", "savedef", "scatterplot", "starplot",
  "stemplot", "set_plot_option", "setup_autoload", "setcheck", "setcheckbreak",
  "setval", "showtime", "sparse6_export", "sparse6_import", "splice", "sprint", "status",
  "stringout", "supcontext", "system", "tcl_output", "terminal", "tex", "testsuite_files",
  "throw", "time", "timer", "timer_devalue", "timer_info", "to_lisp", "trace", "trace_options",
  "transcompile", "translate", "translate_file", "transrun", "ttyoff", "untimer",
  "untrace", "user_preamble", "values", "with_stdout", "write_binary_data", "write_data", "writefile",
  "%_ce_rem"
}$

/* This is the allowed version of concat that blocks the possibility to construct certain dangerous things. */
vconcat([ex]) := block([tmp],
 tmp: apply(concat, ex),
 if symbolp(tmp) and elementp(sconcat(tmp), FORBIDDEN_SYMBOLS_SET) then
   error(sconcat("concat: '", tmp, "' is a forbidden symbol and cannot be constructed.")),
 return(tmp)
)$

all_ops(%_expr) := block([%_edge, %_next_edge, %_tmp, %_op, %_result],
 /* Returns a list of all the operators and functions
    in use in the expression. Turn it to a bag if you need
    the counts or a set if only the existence matters. */
 %_next_edge : [%_expr],
 %_result : [],
 while length(%_next_edge) > 0 do (
  %_edge : %_next_edge,
  %_next_edge : [],
  for %_tmp in %_edge do (
   %_op : safe_op(%_tmp),
   if not (%_op = "") then (
    %_result : append(%_result, [%_op]),
    %_next_edge : append(%_next_edge, args(%_tmp))
   )
  )
 ),
 %_result
)$

%_C(%_id) := block([simp], simp:true,
 if elementp(sconcat(%_id), FORBIDDEN_SYMBOLS_SET) then (
  error(sconcat("Attempt to call forbidden function detected: ", %_id))
 )
)$

%_E(%_expr) := block([simp,%_tmp],
 simp: false,
 /* Also forbid these inside this context. */
 %_tmp: intersection(union(FORBIDDEN_SYMBOLS_SET,{"map", "subst", "at", "apply", "fullmap", "fullmapl", "funmake", "maplist", "matrixmap", "outermap", "scanmap", ":", ":="}), setify(all_ops(%_expr))),
 if cardinality(%_tmp) > 0 then (
  error(sconcat("Attempt to evaluate a constructed: ", simplode(listify(%_tmp), ", ")))
 ),
 %_expr
)$

/* Remove blocks starting with %_C and %_E from the expression.  Only permitted for display functions, e.g. tex1.*/
%_ce_rem(ex) := block([ex2,simp],
  /* We need to assume simp:false, so unevaluated/simplified expressions don't potentially throw errors here. */
  simp:false,
  /* The case below is atoms and things like m[k], which should not be processed further. */
  if safe_op(ex) = "" then return(ex),
  if safe_op(ex) = "(" and safe_op(first(args(ex))) = "%_C" then return(%_ce_rem(second(args(ex)))),
  if safe_op(ex) = "(" and safe_op(first(args(ex))) = "%_E" then return(%_ce_rem(second(args(ex)))),
  /* Rather subtle order of evaluation issue. */
  ex2:args(ex),
  ex2:map(%_ce_rem, ex2),
  substpart(op(ex), ex2, 0)
)$
/* We need to compile %_CE_rem so that it is available to lisp as a lisp function. */
compile(%_ce_rem)$

/* Remove %C_ and %E from expessions, but evaluate them now. I.e. expedite the checks. */
%_ce_expedite(ex) := block([ex2,simp],
  /* We need to assume simp:false, so unevaluated/simplified expressions don't potentially throw errors here. */
  simp:false,
  /* The case below is atoms and things like m[k], which should not be processed further. */
  if safe_op(ex) = "" then return(ex),
  if safe_op(ex) = "(" and safe_op(first(args(ex))) = "%_C" then (ev(first(args(ex))), return(%_ce_rem(second(args(ex))))),
  if safe_op(ex) = "(" and safe_op(first(args(ex))) = "%_E" then (ev(first(args(ex))), return(%_ce_rem(second(args(ex))))),
  /* Rather subtle order of evaluation issue. */
  ex2:args(ex),
  ex2:map(%_ce_expedite, ex2),
  substpart(op(ex), ex2, 0)
)$
